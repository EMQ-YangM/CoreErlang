module 'calendar' ['date_to_gregorian_days'/1,'date_to_gregorian_days'/3,'datetime_to_gregorian_seconds'/1,'day_of_the_week'/1,'day_of_the_week'/3,'gregorian_days_to_date'/1,'gregorian_seconds_to_datetime'/1,'is_leap_year'/1,'iso_week_number'/0,'iso_week_number'/1,'last_day_of_the_month'/2,'local_time'/0,'local_time_to_universal_time'/1,'local_time_to_universal_time'/2,'local_time_to_universal_time_dst'/1,'module_info'/0,'module_info'/1,'now_to_datetime'/1,'now_to_local_time'/1,'now_to_universal_time'/1,'rfc3339_to_system_time'/1,'rfc3339_to_system_time'/2,'seconds_to_daystime'/1,'seconds_to_time'/1,'system_time_to_local_time'/2,'system_time_to_rfc3339'/1,'system_time_to_rfc3339'/2,'system_time_to_universal_time'/2,'time_difference'/2,'time_to_seconds'/1,'universal_time'/0,'universal_time_to_local_time'/1,'valid_date'/1,'valid_date'/3] attributes [ 'file' = [{[115|[114|[99|[47|[99|[97|[108|[101|[110|[100|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}]
, 'deprecated' = [{'local_time_to_universal_time',1,[117|[115|[101|[32|[99|[97|[108|[101|[110|[100|[97|[114|[58|[108|[111|[99|[97|[108|[95|[116|[105|[109|[101|[95|[116|[111|[95|[117|[110|[105|[118|[101|[114|[115|[97|[108|[95|[116|[105|[109|[101|[95|[100|[115|[116|[47|[49|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'export_type' = [{'date',0}|[{'time',0}|[{'datetime',0}|[{'datetime1970',0}]]]]
, 'type' = [{'year',{'type',79,'non_neg_integer',[]},[]}]
, 'type' = [{'year1970',{'type',80,'range',[{'integer',80,1970}|[{'integer',80,10000}]]},[]}]
, 'type' = [{'month',{'type',81,'range',[{'integer',81,1}|[{'integer',81,12}]]},[]}]
, 'type' = [{'day',{'type',82,'range',[{'integer',82,1}|[{'integer',82,31}]]},[]}]
, 'type' = [{'hour',{'type',83,'range',[{'integer',83,0}|[{'integer',83,23}]]},[]}]
, 'type' = [{'minute',{'type',84,'range',[{'integer',84,0}|[{'integer',84,59}]]},[]}]
, 'type' = [{'second',{'type',85,'range',[{'integer',85,0}|[{'integer',85,59}]]},[]}]
, 'type' = [{'daynum',{'type',86,'range',[{'integer',86,1}|[{'integer',86,7}]]},[]}]
, 'type' = [{'ldom',{'type',87,'union',[{'integer',87,28}|[{'integer',87,29}|[{'integer',87,30}|[{'integer',87,31}]]]]},[]}]
, 'type' = [{'weeknum',{'type',88,'range',[{'integer',88,1}|[{'integer',88,53}]]},[]}]
, 'type' = [{'date',{'type',90,'tuple',[{'user_type',90,'year',[]}|[{'user_type',90,'month',[]}|[{'user_type',90,'day',[]}]]]},[]}]
, 'type' = [{'time',{'type',91,'tuple',[{'user_type',91,'hour',[]}|[{'user_type',91,'minute',[]}|[{'user_type',91,'second',[]}]]]},[]}]
, 'type' = [{'datetime',{'type',92,'tuple',[{'user_type',92,'date',[]}|[{'user_type',92,'time',[]}]]},[]}]
, 'type' = [{'datetime1970',{'type',93,'tuple',[{'type',93,'tuple',[{'user_type',93,'year1970',[]}|[{'user_type',93,'month',[]}|[{'user_type',93,'day',[]}]]]}|[{'user_type',93,'time',[]}]]},[]}]
, 'type' = [{'yearweeknum',{'type',94,'tuple',[{'user_type',94,'year',[]}|[{'user_type',94,'weeknum',[]}]]},[]}]
, 'type' = [{'rfc3339_string',{'type',96,'nonempty_list',[{'type',96,'byte',[]}]},[]}]
, 'type' = [{'rfc3339_time_unit',{'type',98,'union',[{'atom',98,'microsecond'}|[{'atom',99,'millisecond'}|[{'atom',100,'nanosecond'}|[{'atom',101,'second'}]]]]},[]}]
, 'spec' = [{{'date_to_gregorian_days',3},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'Year'}|[{'var',127,'Month'}|[{'var',127,'Day'}]]]}|[{'var',127,'Days'}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Year'}|[{'user_type',128,'year',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Month'}|[{'user_type',129,'month',[]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Day'}|[{'user_type',130,'day',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Days'}|[{'type',131,'non_neg_integer',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'date_to_gregorian_days',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'Date'}]}|[{'var',139,'Days'}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Date'}|[{'user_type',140,'date',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Days'}|[{'type',141,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'datetime_to_gregorian_seconds',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'DateTime'}]}|[{'var',151,'Seconds'}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'DateTime'}|[{'user_type',152,'datetime',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Seconds'}|[{'type',153,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'day_of_the_week',3},[{'type',164,'bounded_fun',[{'type',164,'fun',[{'type',164,'product',[{'var',164,'Year'}|[{'var',164,'Month'}|[{'var',164,'Day'}]]]}|[{'user_type',164,'daynum',[]}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Year'}|[{'user_type',165,'year',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Month'}|[{'user_type',166,'month',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'Day'}|[{'user_type',167,'day',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'day_of_the_week',1},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Date'}]}|[{'user_type',171,'daynum',[]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Date'}|[{'user_type',172,'date',[]}]]]]}]]]}]}]
, 'spec' = [{{'gregorian_days_to_date',1},[{'type',179,'bounded_fun',[{'type',179,'fun',[{'type',179,'product',[{'var',179,'Days'}]}|[{'user_type',179,'date',[]}]]}|[[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Days'}|[{'type',180,'non_neg_integer',[]}]]]]}]]]}]}]
, 'spec' = [{{'gregorian_seconds_to_datetime',1},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Seconds'}]}|[{'user_type',189,'datetime',[]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Seconds'}|[{'type',190,'non_neg_integer',[]}]]]]}]]]}]}]
, 'spec' = [{{'is_leap_year',1},[{'type',199,'bounded_fun',[{'type',199,'fun',[{'type',199,'product',[{'var',199,'Year'}]}|[{'type',199,'boolean',[]}]]}|[[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Year'}|[{'user_type',200,'year',[]}]]]]}]]]}]}]
, 'spec' = [{{'is_leap_year1',1},[{'type',204,'fun',[{'type',204,'product',[{'user_type',204,'year',[]}]}|[{'type',204,'boolean',[]}]]}]}]
, 'spec' = [{{'iso_week_number',0},[{'type',215,'fun',[{'type',215,'product',[]}|[{'user_type',215,'yearweeknum',[]}]]}]}]
, 'spec' = [{{'iso_week_number',1},[{'type',224,'bounded_fun',[{'type',224,'fun',[{'type',224,'product',[{'var',224,'Date'}]}|[{'user_type',224,'yearweeknum',[]}]]}|[[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Date'}|[{'user_type',225,'date',[]}]]]]}]]]}]}]
, 'spec' = [{{'last_day_of_the_month',2},[{'type',253,'bounded_fun',[{'type',253,'fun',[{'type',253,'product',[{'var',253,'Year'}|[{'var',253,'Month'}]]}|[{'var',253,'LastDay'}]]}|[[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Year'}|[{'user_type',254,'year',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Month'}|[{'user_type',255,'month',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'LastDay'}|[{'user_type',256,'ldom',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'last_day_of_the_month1',2},[{'type',260,'fun',[{'type',260,'product',[{'user_type',260,'year',[]}|[{'user_type',260,'month',[]}]]}|[{'user_type',260,'ldom',[]}]]}]}]
, 'spec' = [{{'local_time',0},[{'type',277,'fun',[{'type',277,'product',[]}|[{'user_type',277,'datetime',[]}]]}]}]
, 'spec' = [{{'local_time_to_universal_time',1},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'DateTime1'}]}|[{'var',284,'DateTime2'}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'DateTime1'}|[{'user_type',285,'datetime1970',[]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'DateTime2'}|[{'user_type',286,'datetime1970',[]}]]]]}]]]]}]}]
, 'spec' = [{{'local_time_to_universal_time',2},[{'type',290,'fun',[{'type',290,'product',[{'user_type',290,'datetime1970',[]}|[{'type',291,'union',[{'atom',291,'true'}|[{'atom',291,'false'}|[{'atom',291,'undefined'}]]]}]]}|[{'user_type',292,'datetime1970',[]}]]}]}]
, 'spec' = [{{'local_time_to_universal_time_dst',1},[{'type',296,'bounded_fun',[{'type',296,'fun',[{'type',296,'product',[{'var',296,'DateTime1'}]}|[{'type',296,'list',[{'var',296,'DateTime'}]}]]}|[[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'DateTime1'}|[{'user_type',297,'datetime1970',[]}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'DateTime'}|[{'user_type',298,'datetime1970',[]}]]]]}]]]]}]}]
, 'spec' = [{{'now_to_datetime',1},[{'type',326,'bounded_fun',[{'type',326,'fun',[{'type',326,'product',[{'var',326,'Now'}]}|[{'user_type',326,'datetime1970',[]}]]}|[[{'type',327,'constraint',[{'atom',327,'is_subtype'}|[[{'var',327,'Now'}|[{'remote_type',327,[{'atom',327,'erlang'}|[{'atom',327,'timestamp'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'now_to_universal_time',1},[{'type',331,'bounded_fun',[{'type',331,'fun',[{'type',331,'product',[{'var',331,'Now'}]}|[{'user_type',331,'datetime1970',[]}]]}|[[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Now'}|[{'remote_type',332,[{'atom',332,'erlang'}|[{'atom',332,'timestamp'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'now_to_local_time',1},[{'type',341,'bounded_fun',[{'type',341,'fun',[{'type',341,'product',[{'var',341,'Now'}]}|[{'user_type',341,'datetime1970',[]}]]}|[[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'Now'}|[{'remote_type',342,[{'atom',342,'erlang'}|[{'atom',342,'timestamp'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'rfc3339_to_system_time',1},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'DateTimeString'}]}|[{'type',347,'integer',[]}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'DateTimeString'}|[{'user_type',348,'rfc3339_string',[]}]]]]}]]]}]}]
, 'spec' = [{{'rfc3339_to_system_time',2},[{'type',353,'bounded_fun',[{'type',353,'fun',[{'type',353,'product',[{'var',353,'DateTimeString'}|[{'var',353,'Options'}]]}|[{'type',353,'integer',[]}]]}|[[{'type',354,'constraint',[{'atom',354,'is_subtype'}|[[{'var',354,'DateTimeString'}|[{'user_type',354,'rfc3339_string',[]}]]]]}|[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Options'}|[{'type',355,'list',[{'var',355,'Option'}]}]]]]}|[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Option'}|[{'type',356,'tuple',[{'atom',356,'unit'}|[{'user_type',356,'rfc3339_time_unit',[]}]]}]]]]}]]]]]}]}]
, 'spec' = [{{'seconds_to_daystime',1},[{'type',382,'bounded_fun',[{'type',382,'fun',[{'type',382,'product',[{'var',382,'Seconds'}]}|[{'type',382,'tuple',[{'var',382,'Days'}|[{'var',382,'Time'}]]}]]}|[[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'Seconds'}|[{'type',383,'integer',[]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'Days'}|[{'type',384,'integer',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'Time'}|[{'user_type',385,'time',[]}]]]]}]]]]]}]}]
, 'type' = [{'secs_per_day',{'type',402,'range',[{'integer',402,0}|[{'integer',402,86400}]]},[]}]
, 'spec' = [{{'seconds_to_time',1},[{'type',403,'bounded_fun',[{'type',403,'fun',[{'type',403,'product',[{'var',403,'Seconds'}]}|[{'user_type',403,'time',[]}]]}|[[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'Seconds'}|[{'user_type',404,'secs_per_day',[]}]]]]}]]]}]}]
, 'spec' = [{{'system_time_to_local_time',2},[{'type',413,'bounded_fun',[{'type',413,'fun',[{'type',413,'product',[{'var',413,'Time'}|[{'var',413,'TimeUnit'}]]}|[{'user_type',413,'datetime',[]}]]}|[[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Time'}|[{'type',414,'integer',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'TimeUnit'}|[{'remote_type',415,[{'atom',415,'erlang'}|[{'atom',415,'time_unit'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'system_time_to_universal_time',2},[{'type',421,'bounded_fun',[{'type',421,'fun',[{'type',421,'product',[{'var',421,'Time'}|[{'var',421,'TimeUnit'}]]}|[{'user_type',421,'datetime',[]}]]}|[[{'type',422,'constraint',[{'atom',422,'is_subtype'}|[[{'var',422,'Time'}|[{'type',422,'integer',[]}]]]]}|[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'TimeUnit'}|[{'remote_type',423,[{'atom',423,'erlang'}|[{'atom',423,'time_unit'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'system_time_to_rfc3339',1},[{'type',429,'bounded_fun',[{'type',429,'fun',[{'type',429,'product',[{'var',429,'Time'}]}|[{'var',429,'DateTimeString'}]]}|[[{'type',430,'constraint',[{'atom',430,'is_subtype'}|[[{'var',430,'Time'}|[{'type',430,'integer',[]}]]]]}|[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'DateTimeString'}|[{'user_type',431,'rfc3339_string',[]}]]]]}]]]]}]}]
, 'type' = [{'offset',{'type',436,'union',[{'type',436,'list',[{'type',436,'byte',[]}]}|[{'ann_type',436,[{'var',436,'Time'}|[{'type',436,'integer',[]}]]}]]},[]}]
, 'spec' = [{{'system_time_to_rfc3339',2},[{'type',437,'bounded_fun',[{'type',437,'fun',[{'type',437,'product',[{'var',437,'Time'}|[{'var',437,'Options'}]]}|[{'var',437,'DateTimeString'}]]}|[[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Time'}|[{'type',438,'integer',[]}]]]]}|[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Options'}|[{'type',439,'list',[{'var',439,'Option'}]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Option'}|[{'type',440,'union',[{'type',440,'tuple',[{'atom',440,'offset'}|[{'user_type',440,'offset',[]}]]}|[{'type',441,'tuple',[{'atom',441,'time_designator'}|[{'type',441,'byte',[]}]]}|[{'type',442,'tuple',[{'atom',442,'unit'}|[{'user_type',442,'rfc3339_time_unit',[]}]]}]]]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'DateTimeString'}|[{'user_type',443,'rfc3339_string',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'time_difference',2},[{'type',471,'bounded_fun',[{'type',471,'fun',[{'type',471,'product',[{'var',471,'T1'}|[{'var',471,'T2'}]]}|[{'type',471,'tuple',[{'var',471,'Days'}|[{'var',471,'Time'}]]}]]}|[[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'T1'}|[{'user_type',472,'datetime',[]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'T2'}|[{'user_type',473,'datetime',[]}]]]]}|[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'Days'}|[{'type',474,'integer',[]}]]]]}|[{'type',475,'constraint',[{'atom',475,'is_subtype'}|[[{'var',475,'Time'}|[{'user_type',475,'time',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'time_to_seconds',1},[{'type',486,'bounded_fun',[{'type',486,'fun',[{'type',486,'product',[{'var',486,'Time'}]}|[{'user_type',486,'secs_per_day',[]}]]}|[[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'Time'}|[{'user_type',487,'time',[]}]]]]}]]]}]}]
, 'spec' = [{{'universal_time',0},[{'type',496,'fun',[{'type',496,'product',[]}|[{'user_type',496,'datetime',[]}]]}]}]
, 'spec' = [{{'universal_time_to_local_time',1},[{'type',503,'bounded_fun',[{'type',503,'fun',[{'type',503,'product',[{'var',503,'DateTime'}]}|[{'user_type',503,'datetime',[]}]]}|[[{'type',504,'constraint',[{'atom',504,'is_subtype'}|[[{'var',504,'DateTime'}|[{'user_type',504,'datetime1970',[]}]]]]}]]]}]}]
, 'spec' = [{{'valid_date',3},[{'type',512,'bounded_fun',[{'type',512,'fun',[{'type',512,'product',[{'var',512,'Year'}|[{'var',512,'Month'}|[{'var',512,'Day'}]]]}|[{'type',512,'boolean',[]}]]}|[[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Year'}|[{'type',513,'integer',[]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Month'}|[{'type',514,'integer',[]}]]]]}|[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Day'}|[{'type',515,'integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'valid_date1',3},[{'type',519,'fun',[{'type',519,'product',[{'type',519,'integer',[]}|[{'type',519,'integer',[]}|[{'type',519,'integer',[]}]]]}|[{'type',519,'boolean',[]}]]}]}]
, 'spec' = [{{'valid_date',1},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'Date'}]}|[{'type',525,'boolean',[]}]]}|[[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Date'}|[{'user_type',526,'date',[]}]]]]}]]]}]}]
, 'type' = [{'day_of_year',{'type',534,'range',[{'integer',534,0}|[{'integer',534,365}]]},[]}]
, 'spec' = [{{'day_to_year',1},[{'type',543,'fun',[{'type',543,'product',[{'type',543,'non_neg_integer',[]}]}|[{'type',543,'tuple',[{'user_type',543,'year',[]}|[{'user_type',543,'day_of_year',[]}]]}]]}]}]
, 'spec' = [{{'dty',5},[{'type',550,'fun',[{'type',550,'product',[{'user_type',550,'year',[]}|[{'user_type',550,'year',[]}|[{'type',550,'non_neg_integer',[]}|[{'type',550,'non_neg_integer',[]}|[{'type',551,'non_neg_integer',[]}]]]]]}|[{'type',552,'tuple',[{'user_type',552,'year',[]}|[{'type',552,'non_neg_integer',[]}]]}]]}]}]
, 'spec' = [{{'gregorian_days_of_iso_w01_1',1},[{'type',577,'fun',[{'type',577,'product',[{'user_type',577,'year',[]}]}|[{'type',577,'non_neg_integer',[]}]]}]}]
, 'spec' = [{{'year_day_to_date',2},[{'type',591,'fun',[{'type',591,'product',[{'user_type',591,'year',[]}|[{'user_type',591,'day_of_year',[]}]]}|[{'type',591,'tuple',[{'user_type',591,'month',[]}|[{'user_type',591,'day',[]}]]}]]}]}]
, 'spec' = [{{'year_day_to_date2',2},[{'type',605,'fun',[{'type',605,'product',[{'type',605,'union',[{'integer',605,0}|[{'integer',605,1}]]}|[{'user_type',605,'day_of_year',[]}]]}|[{'type',605,'tuple',[{'user_type',605,'month',[]}|[{'type',605,'range',[{'integer',605,0}|[{'integer',605,30}]]}]]}]]}]}]
, 'spec' = [{{'dy',1},[{'type',635,'fun',[{'type',635,'product',[{'type',635,'integer',[]}]}|[{'type',635,'non_neg_integer',[]}]]}]}]
, 'spec' = [{{'dm',1},[{'type',648,'fun',[{'type',648,'product',[{'user_type',648,'month',[]}]}|[{'type',649,'union',[{'integer',649,0}|[{'integer',649,31}|[{'integer',649,59}|[{'integer',649,90}|[{'integer',649,120}|[{'integer',649,151}|[{'integer',649,181}|[{'integer',649,212}|[{'integer',649,243}|[{'integer',649,273}|[{'integer',649,304}|[{'integer',649,334}]]]]]]]]]]]]}]]}]}]
, 'spec' = [{{'df',2},[{'type',659,'fun',[{'type',659,'product',[{'user_type',659,'year',[]}|[{'user_type',659,'month',[]}]]}|[{'type',659,'union',[{'integer',659,0}|[{'integer',659,1}]]}]]}]}] ] 'date_to_gregorian_days'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Year,Month,Day> when let <_3> = call 'erlang':'is_integer' (Day) in let <_4> = call 'erlang':'>' (Day,0) in call 'erlang':'and' (_3,_4) -> let <Last> = apply 'last_day_of_the_month'/2 (Year,Month) in case <> of <> when call 'erlang':'=<' (Day,Last) -> let <_8> = apply 'dy'/1 (Year) in let <_7> = apply 'dm'/1 (Month) in let <_9> = call 'erlang':'+' (_8,_7) in let <_6> = apply 'df'/2 (Year,Month) in let <_10> = call 'erlang':'+' (_9,_6) in let <_11> = call 'erlang':'+' (_10,Day) in call 'erlang':'-' (_11,1)
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
(<_14,_13,_12> when 'true' -> primop 'match_fail' ({'function_clause',_14,_13,_12})-|['compiler_generated'] ) end-|[{'function',{'date_to_gregorian_days',3}}] )-|[{'function',{'date_to_gregorian_days',3}}] )
'date_to_gregorian_days'/1 = (fun (_0) -> (case (_0-|[{'function',{'date_to_gregorian_days',1}}] ) of <{Year,Month,Day}> when 'true' -> apply 'date_to_gregorian_days'/3 (Year,Month,Day)
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'date_to_gregorian_days',1}}] )-|[{'function',{'date_to_gregorian_days',1}}] )
'datetime_to_gregorian_seconds'/1 = (fun (_0) -> (case (_0-|[{'function',{'datetime_to_gregorian_seconds',1}}] ) of <{Date,Time}> when 'true' -> let <_2> = apply 'date_to_gregorian_days'/1 (Date) in let <_3> = call 'erlang':'*' (86400,_2) in let <_1> = apply 'time_to_seconds'/1 (Time) in call 'erlang':'+' (_3,_1)
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'datetime_to_gregorian_seconds',1}}] )-|[{'function',{'datetime_to_gregorian_seconds',1}}] )
'day_of_the_week'/3 = (fun (_0,_1,_2) -> let <_3> = apply 'date_to_gregorian_days'/3 (_0,_1,_2) in let <_4> = call 'erlang':'+' (_3,5) in let <_5> = call 'erlang':'rem' (_4,7) in call 'erlang':'+' (_5,1)-|[{'function',{'day_of_the_week',3}}] )
'day_of_the_week'/1 = (fun (_0) -> (case (_0-|[{'function',{'day_of_the_week',1}}] ) of <{Year,Month,Day}> when 'true' -> apply 'day_of_the_week'/3 (Year,Month,Day)
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'day_of_the_week',1}}] )-|[{'function',{'day_of_the_week',1}}] )
'gregorian_days_to_date'/1 = (fun (_0) -> case apply 'day_to_year'/1 ((_0-|[{'function',{'gregorian_days_to_date',1}}] )) of <{Year,DayOfYear}> when 'true' -> case apply 'year_day_to_date'/2 (Year,DayOfYear) of <{Month,DayOfMonth}> when 'true' -> {Year,Month,DayOfMonth}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end-|[{'function',{'gregorian_days_to_date',1}}] )
'gregorian_seconds_to_datetime'/1 = (fun (_0) -> (case (_0-|[{'function',{'gregorian_seconds_to_datetime',1}}] ) of <Secs> when call 'erlang':'>=' ((_0-|[{'function',{'gregorian_seconds_to_datetime',1}}] ),0) -> let <Days> = call 'erlang':'div' (Secs,86400) in let <Rest> = call 'erlang':'rem' (Secs,86400) in let <_4> = apply 'gregorian_days_to_date'/1 (Days) in let <_3> = apply 'seconds_to_time'/1 (Rest) in {_4,_3}
(<_5> when 'true' -> primop 'match_fail' ({'function_clause',_5})-|['compiler_generated'] ) end-|[{'function',{'gregorian_seconds_to_datetime',1}}] )-|[{'function',{'gregorian_seconds_to_datetime',1}}] )
'is_leap_year'/1 = (fun (_0) -> (case (_0-|[{'function',{'is_leap_year',1}}] ) of <Y> when let <_1> = call 'erlang':'is_integer' ((_0-|[{'function',{'is_leap_year',1}}] )) in let <_2> = call 'erlang':'>=' ((_0-|[{'function',{'is_leap_year',1}}] ),0) in call 'erlang':'and' (_1,_2) -> apply 'is_leap_year1'/1 (Y)
(<_3> when 'true' -> primop 'match_fail' ({'function_clause',_3})-|['compiler_generated'] ) end-|[{'function',{'is_leap_year',1}}] )-|[{'function',{'is_leap_year',1}}] )
'is_leap_year1'/1 = (fun (_0) -> (case (_0-|[{'function',{'is_leap_year1',1}}] ) of <Year> when try let <_1> = call 'erlang':'rem' ((_0-|[{'function',{'is_leap_year1',1}}] ),4) in let <_2> = call 'erlang':'=:=' (_1,0) in let <_3> = call 'erlang':'rem' ((_0-|[{'function',{'is_leap_year1',1}}] ),100) in let <_4> = call 'erlang':'>' (_3,0) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<Year> when try let <_5> = call 'erlang':'rem' ((_0-|[{'function',{'is_leap_year1',1}}] ),400) in call 'erlang':'=:=' (_5,0) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<_7> when 'true' -> 'false' end-|[{'function',{'is_leap_year1',1}}] )-|[{'function',{'is_leap_year1',1}}] )
'iso_week_number'/0 = (fun () -> case apply 'local_time'/0 () of <{Date,_1}> when 'true' -> apply 'iso_week_number'/1 (Date)
(<_0> when 'true' -> primop 'match_fail' ({'badmatch',_0})-|['compiler_generated'] ) end-|[{'function',{'iso_week_number',0}}] )
'iso_week_number'/1 = (fun (_0) -> (case (_0-|[{'function',{'iso_week_number',1}}] ) of <_@r0 = {Year,Month,Day}> when 'true' -> let <D> = apply 'date_to_gregorian_days'/1 (_@r0) in let <W01_1_Year> = apply 'gregorian_days_of_iso_w01_1'/1 (Year) in let <_3> = call 'erlang':'+' (Year,1) in let <W01_1_NextYear> = apply 'gregorian_days_of_iso_w01_1'/1 (_3) in case <> of <> when try (let <_7> = case call 'erlang':'=<' (W01_1_Year,D) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (D,W01_1_NextYear)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_5> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_5}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_7-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_8> = call 'erlang':'-' (D,W01_1_Year) in let <_9> = call 'erlang':'div' (_8,7) in let <_10> = call 'erlang':'+' (_9,1) in {Year,_10}
<> when call 'erlang':'<' (D,W01_1_Year) -> let <_11> = call 'erlang':'-' (Year,1) in let <_15> = case apply 'day_of_the_week'/3 (_11,1,1) of <4> when 'true' -> 53
<_20> when 'true' -> let <_12> = call 'erlang':'-' (Year,1) in case apply 'day_of_the_week'/3 (_12,12,31) of <4> when 'true' -> 53
<_21> when 'true' -> 52 end end in let <_17> = call 'erlang':'-' (Year,1) in {_17,_15}
<> when call 'erlang':'=<' (W01_1_NextYear,D) -> let <_18> = call 'erlang':'+' (Year,1) in {_18,1}
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'function_clause',_19})-|['compiler_generated'] ) end-|[{'function',{'iso_week_number',1}}] )-|[{'function',{'iso_week_number',1}}] )
'last_day_of_the_month'/2 = (fun (_0,_1) -> (case <_0,_1> of <Y,M> when let <_2> = call 'erlang':'is_integer' (Y) in let <_3> = call 'erlang':'>=' (Y,0) in call 'erlang':'and' (_2,_3) -> apply 'last_day_of_the_month1'/2 (Y,M)
(<_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4})-|['compiler_generated'] ) end-|[{'function',{'last_day_of_the_month',2}}] )-|[{'function',{'last_day_of_the_month',2}}] )
'last_day_of_the_month1'/2 = (fun (_0,_1) -> (case <_0,_1> of <_9,4> when 'true' -> 30
<_10,6> when 'true' -> 30
<_11,9> when 'true' -> 30
<_12,11> when 'true' -> 30
<Y,2> when 'true' -> case apply 'is_leap_year'/1 (Y) of <'true'> when 'true' -> 29
<_13> when 'true' -> 28 end
<_14,M> when try let <_3> = call 'erlang':'is_integer' (M) in let <_4> = call 'erlang':'>' (M,0) in let <_5> = call 'erlang':'<' (M,13) in let <_6> = call 'erlang':'and' (_4,_5) in call 'erlang':'and' (_3,_6) of <Try> -> Try catch <T,R> -> 'false' -> 31
(<_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_8,_7})-|['compiler_generated'] ) end-|[{'function',{'last_day_of_the_month1',2}}] )-|[{'function',{'last_day_of_the_month1',2}}] )
'local_time'/0 = (fun () -> call 'erlang':'localtime' ()-|[{'function',{'local_time',0}}] )
'local_time_to_universal_time'/1 = (fun (_0) -> call 'erlang':'localtime_to_universaltime' ((_0-|[{'function',{'local_time_to_universal_time',1}}] ))-|[{'function',{'local_time_to_universal_time',1}}] )
'local_time_to_universal_time'/2 = (fun (_0,_1) -> call 'erlang':'localtime_to_universaltime' (_0,_1)-|[{'function',{'local_time_to_universal_time',2}}] )
'local_time_to_universal_time_dst'/1 = (fun (_0) -> let <UtDst> = call 'erlang':'localtime_to_universaltime' ((_0-|[{'function',{'local_time_to_universal_time_dst',1}}] ),'true') in let <Ut> = call 'erlang':'localtime_to_universaltime' ((_0-|[{'function',{'local_time_to_universal_time_dst',1}}] ),'false') in let <LtDst> = call 'erlang':'universaltime_to_localtime' (UtDst) in let <Lt> = call 'erlang':'universaltime_to_localtime' (Ut) in case <LtDst,Lt> of <_7,_8> when let <_11> = call 'erlang':'=:=' (_7,(_0-|[{'function',{'local_time_to_universal_time_dst',1}}] )) in let <_9> = call 'erlang':'=:=' (_8,(_0-|[{'function',{'local_time_to_universal_time_dst',1}}] )) in let <_10> = call 'erlang':'=/=' (UtDst,Ut) in let <_12> = call 'erlang':'and' (_9,_10) in call 'erlang':'and' (_11,_12) -> [UtDst|[Ut|[]]]
<_13,_14> when call 'erlang':'=:=' (_13,(_0-|[{'function',{'local_time_to_universal_time_dst',1}}] )) -> [UtDst|[]]
<_15,_16> when call 'erlang':'=:=' (_16,(_0-|[{'function',{'local_time_to_universal_time_dst',1}}] )) -> [Ut|[]]
<_17,_18> when 'true' -> [] end-|[{'function',{'local_time_to_universal_time_dst',1}}] )
'now_to_datetime'/1 = (fun (_0) -> (case (_0-|[{'function',{'now_to_datetime',1}}] ) of <{MSec,Sec,_X_uSec}> when 'true' -> let <_1> = call 'erlang':'*' (MSec,1000000) in let <_2> = call 'erlang':'+' (_1,Sec) in apply 'system_time_to_datetime'/1 (_2)
(<_3> when 'true' -> primop 'match_fail' ({'function_clause',_3})-|['compiler_generated'] ) end-|[{'function',{'now_to_datetime',1}}] )-|[{'function',{'now_to_datetime',1}}] )
'now_to_universal_time'/1 = (fun (_0) -> apply 'now_to_datetime'/1 ((_0-|[{'function',{'now_to_universal_time',1}}] ))-|[{'function',{'now_to_universal_time',1}}] )
'now_to_local_time'/1 = (fun (_0) -> (case (_0-|[{'function',{'now_to_local_time',1}}] ) of <_@r0 = {MSec,Sec,_X_uSec}> when 'true' -> let <_1> = apply 'now_to_universal_time'/1 (_@r0) in call 'erlang':'universaltime_to_localtime' (_1)
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'now_to_local_time',1}}] )-|[{'function',{'now_to_local_time',1}}] )
'rfc3339_to_system_time'/1 = (fun (_0) -> apply 'rfc3339_to_system_time'/2 ((_0-|[{'function',{'rfc3339_to_system_time',1}}] ),[])-|[{'function',{'rfc3339_to_system_time',1}}] )
'rfc3339_to_system_time'/2 = (fun (_0,_1) -> let <Unit> = call 'proplists':'get_value' ('unit',_1,'second') in case _0 of <[Y1|[Y2|[Y3|[Y4|[45|[Mon1|[Mon2|[45|[D1|[D2|[_X_T|[H1|[H2|[58|[Min1|[Min2|[58|[S1|[S2|TimeStr]]]]]]]]]]]]]]]]]]]> when 'true' -> let <Hour> = call 'erlang':'list_to_integer' ([H1|[H2|[]]]) in let <Min> = call 'erlang':'list_to_integer' ([Min1|[Min2|[]]]) in let <Sec> = call 'erlang':'list_to_integer' ([S1|[S2|[]]]) in let <Year> = call 'erlang':'list_to_integer' ([Y1|[Y2|[Y3|[Y4|[]]]]]) in let <Month> = call 'erlang':'list_to_integer' ([Mon1|[Mon2|[]]]) in let <Day> = call 'erlang':'list_to_integer' ([D1|[D2|[]]]) in let <DateTime> = {{Year,Month,Day},{Hour,Min,Sec}} in let <IsFractionChar> = fun (_16) -> let <_14> = case call 'erlang':'>=' (_16,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (_16,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _14 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (_16,46)-|['compiler_generated'] )
(<_11> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_11}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case call 'lists':'splitwith' (IsFractionChar,TimeStr) of <{FractionStr,UtcOffset}> when 'true' -> let <Time> = apply 'datetime_to_system_time'/1 (DateTime) in let <_21> = apply 'offset_string_adjustment'/3 (Time,'second',UtcOffset) in let <Secs> = call 'erlang':'-' (Time,_21) in do apply 'check'/3 (_0,_1,Secs) let <ScaledEpoch> = call 'erlang':'convert_time_unit' (Secs,'second',Unit) in let <_24> = apply 'fraction'/2 (Unit,FractionStr) in let <_25> = apply 'copy_sign'/2 (_24,ScaledEpoch) in call 'erlang':'+' (ScaledEpoch,_25)
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end-|[{'function',{'rfc3339_to_system_time',2}}] )
'seconds_to_daystime'/1 = (fun (_0) -> let <Days0> = call 'erlang':'div' ((_0-|[{'function',{'seconds_to_daystime',1}}] ),86400) in let <Secs0> = call 'erlang':'rem' ((_0-|[{'function',{'seconds_to_daystime',1}}] ),86400) in case <> of <> when call 'erlang':'<' (Secs0,0) -> let <_5> = call 'erlang':'-' (Days0,1) in let <_3> = call 'erlang':'+' (Secs0,86400) in let <_4> = apply 'seconds_to_time'/1 (_3) in {_5,_4}
<> when 'true' -> let <_6> = apply 'seconds_to_time'/1 (Secs0) in {Days0,_6} end-|[{'function',{'seconds_to_daystime',1}}] )
'seconds_to_time'/1 = (fun (_0) -> (case (_0-|[{'function',{'seconds_to_time',1}}] ) of <Secs> when let <_1> = call 'erlang':'>=' ((_0-|[{'function',{'seconds_to_time',1}}] ),0) in let <_2> = call 'erlang':'<' ((_0-|[{'function',{'seconds_to_time',1}}] ),86400) in call 'erlang':'and' (_1,_2) -> let <Secs0> = call 'erlang':'rem' (Secs,86400) in let <Hour> = call 'erlang':'div' (Secs0,3600) in let <Secs1> = call 'erlang':'rem' (Secs0,3600) in let <Minute> = call 'erlang':'div' (Secs1,60) in let <Second> = call 'erlang':'rem' (Secs1,60) in {Hour,Minute,Second}
(<_8> when 'true' -> primop 'match_fail' ({'function_clause',_8})-|['compiler_generated'] ) end-|[{'function',{'seconds_to_time',1}}] )-|[{'function',{'seconds_to_time',1}}] )
'system_time_to_local_time'/2 = (fun (_0,_1) -> let <UniversalDate> = apply 'system_time_to_universal_time'/2 (_0,_1) in call 'erlang':'universaltime_to_localtime' (UniversalDate)-|[{'function',{'system_time_to_local_time',2}}] )
'system_time_to_universal_time'/2 = (fun (_0,_1) -> let <Secs> = call 'erlang':'convert_time_unit' (_0,_1,'second') in apply 'system_time_to_datetime'/1 (Secs)-|[{'function',{'system_time_to_universal_time',2}}] )
'system_time_to_rfc3339'/1 = (fun (_0) -> apply 'system_time_to_rfc3339'/2 ((_0-|[{'function',{'system_time_to_rfc3339',1}}] ),[])-|[{'function',{'system_time_to_rfc3339',1}}] )
'system_time_to_rfc3339'/2 = (fun (_0,_1) -> let <Unit> = call 'proplists':'get_value' ('unit',_1,'second') in let <OffsetOption> = call 'proplists':'get_value' ('offset',_1,[]) in let <T> = call 'proplists':'get_value' ('time_designator',_1,84) in let <AdjustmentSecs> = apply 'offset_adjustment'/3 (_0,Unit,OffsetOption) in let <Offset> = apply 'offset'/2 (OffsetOption,AdjustmentSecs) in let <Adjustment> = call 'erlang':'convert_time_unit' (AdjustmentSecs,'second',Unit) in let <AdjustedTime> = call 'erlang':'+' (_0,Adjustment) in let <Factor> = apply 'factor'/1 (Unit) in let <Secs> = call 'erlang':'div' (AdjustedTime,Factor) in do apply 'check'/3 (_0,_1,Secs) case apply 'system_time_to_datetime'/1 (Secs) of <{{Year,Month,Day},{Hour,Min,Sec}}> when 'true' -> let <FractionStr> = apply 'fraction_str'/2 (Factor,AdjustedTime) in let <_14> = apply 'pad4'/1 (Year) in let <_15> = apply 'pad2'/1 (Month) in let <_16> = apply 'pad2'/1 (Day) in let <_17> = apply 'pad2'/1 (Hour) in let <_18> = apply 'pad2'/1 (Min) in let <_19> = apply 'pad2'/1 (Sec) in let <L> = [_14|[[45]|[_15|[[45]|[_16|[[T|[]]|[_17|[[58]|[_18|[[58]|[_19|[FractionStr|[Offset|[]]]]]]]]]]]]]] in call 'lists':'append' (L)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end-|[{'function',{'system_time_to_rfc3339',2}}] )
'time_difference'/2 = (fun (_0,_1) -> (case <_0,_1> of <_@r1 = {{Y1,Mo1,D1},{H1,Mi1,S1}},_@r0 = {{Y2,Mo2,D2},{H2,Mi2,S2}}> when 'true' -> let <_3> = apply 'datetime_to_gregorian_seconds'/1 (_@r0) in let <_2> = apply 'datetime_to_gregorian_seconds'/1 (_@r1) in let <Secs> = call 'erlang':'-' (_3,_2) in apply 'seconds_to_daystime'/1 (Secs)
(<_6,_5> when 'true' -> primop 'match_fail' ({'function_clause',_6,_5})-|['compiler_generated'] ) end-|[{'function',{'time_difference',2}}] )-|[{'function',{'time_difference',2}}] )
'time_to_seconds'/1 = (fun (_0) -> (case (_0-|[{'function',{'time_to_seconds',1}}] ) of <{H,M,S}> when try let <_1> = call 'erlang':'is_integer' (H) in let <_2> = call 'erlang':'is_integer' (M) in let <_3> = call 'erlang':'is_integer' (S) in let <_4> = call 'erlang':'and' (_2,_3) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_6> = call 'erlang':'*' (H,3600) in let <_5> = call 'erlang':'*' (M,60) in let <_7> = call 'erlang':'+' (_6,_5) in call 'erlang':'+' (_7,S)
(<_8> when 'true' -> primop 'match_fail' ({'function_clause',_8})-|['compiler_generated'] ) end-|[{'function',{'time_to_seconds',1}}] )-|[{'function',{'time_to_seconds',1}}] )
'universal_time'/0 = (fun () -> call 'erlang':'universaltime' ()-|[{'function',{'universal_time',0}}] )
'universal_time_to_local_time'/1 = (fun (_0) -> call 'erlang':'universaltime_to_localtime' ((_0-|[{'function',{'universal_time_to_local_time',1}}] ))-|[{'function',{'universal_time_to_local_time',1}}] )
'valid_date'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Y,M,D> when try let <_3> = call 'erlang':'is_integer' (Y) in let <_4> = call 'erlang':'is_integer' (M) in let <_5> = call 'erlang':'is_integer' (D) in let <_6> = call 'erlang':'and' (_4,_5) in call 'erlang':'and' (_3,_6) of <Try> -> Try catch <T,R> -> 'false' -> apply 'valid_date1'/3 (Y,M,D)
(<_9,_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8,_7})-|['compiler_generated'] ) end-|[{'function',{'valid_date',3}}] )-|[{'function',{'valid_date',3}}] )
'valid_date1'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Y,M,D> when try let <_3> = call 'erlang':'>=' (Y,0) in let <_4> = call 'erlang':'>' (M,0) in let <_5> = call 'erlang':'<' (M,13) in let <_6> = call 'erlang':'>' (D,0) in let <_7> = call 'erlang':'and' (_5,_6) in let <_8> = call 'erlang':'and' (_4,_7) in call 'erlang':'and' (_3,_8) of <Try> -> Try catch <T,R> -> 'false' -> let <_9> = apply 'last_day_of_the_month'/2 (Y,M) in call 'erlang':'=<' (D,_9)
<_13,_14,_15> when 'true' -> 'false' end-|[{'function',{'valid_date1',3}}] )-|[{'function',{'valid_date1',3}}] )
'valid_date'/1 = (fun (_0) -> (case (_0-|[{'function',{'valid_date',1}}] ) of <{Y,M,D}> when 'true' -> apply 'valid_date'/3 (Y,M,D)
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'valid_date',1}}] )-|[{'function',{'valid_date',1}}] )
'day_to_year'/1 = (fun (_0) -> (case (_0-|[{'function',{'day_to_year',1}}] ) of <DayOfEpoch> when call 'erlang':'>=' ((_0-|[{'function',{'day_to_year',1}}] ),0) -> let <YMax> = call 'erlang':'div' (DayOfEpoch,365) in let <YMin> = call 'erlang':'div' (DayOfEpoch,366) in let <_4> = apply 'dy'/1 (YMin) in let <_3> = apply 'dy'/1 (YMax) in case apply 'dty'/5 (YMin,YMax,DayOfEpoch,_4,_3) of <{Y1,D1}> when 'true' -> let <_6> = call 'erlang':'-' (DayOfEpoch,D1) in {Y1,_6}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end-|[{'function',{'day_to_year',1}}] )-|[{'function',{'day_to_year',1}}] )
'dty'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <Min,Max,_X_D1,DMin,_X_DMax> when call 'erlang':'==' (Min,Max) -> {Min,DMin}
<Min,Max,D1,DMin,DMax> when 'true' -> let <Diff> = call 'erlang':'-' (Max,Min) in let <_7> = call 'erlang':'-' (D1,DMin) in let <_8> = call 'erlang':'*' (Diff,_7) in let <_6> = call 'erlang':'-' (DMax,DMin) in let <_9> = call 'erlang':'div' (_8,_6) in let <Mid> = call 'erlang':'+' (Min,_9) in let <_12> = case apply 'is_leap_year'/1 (Mid) of <'true'> when 'true' -> 366
<'false'> when 'true' -> 365
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end in case apply 'dy'/1 (Mid) of <D2> when call 'erlang':'<' (D1,D2) -> let <NewMax> = call 'erlang':'-' (Mid,1) in let <_15> = apply 'dy'/1 (NewMax) in apply 'dty'/5 (Min,NewMax,D1,DMin,_15)
<D2> when try let <_16> = call 'erlang':'-' (D1,D2) in call 'erlang':'>=' (_16,_12) of <Try> -> Try catch <T,R> -> 'false' -> let <NewMin> = call 'erlang':'+' (Mid,1) in let <_18> = apply 'dy'/1 (NewMin) in apply 'dty'/5 (NewMin,Max,D1,_18,DMax)
<D2> when 'true' -> {Mid,D2} end end-|[{'function',{'dty',5}}] )-|[{'function',{'dty',5}}] )
'gregorian_days_of_iso_w01_1'/1 = (fun (_0) -> let <D0101> = apply 'date_to_gregorian_days'/3 ((_0-|[{'function',{'gregorian_days_of_iso_w01_1',1}}] ),1,1) in let <DOW> = apply 'day_of_the_week'/3 ((_0-|[{'function',{'gregorian_days_of_iso_w01_1',1}}] ),1,1) in case <> of <> when call 'erlang':'=<' (DOW,4) -> let <_3> = call 'erlang':'-' (D0101,DOW) in call 'erlang':'+' (_3,1)
<> when 'true' -> let <_4> = call 'erlang':'+' (D0101,7) in let <_5> = call 'erlang':'-' (_4,DOW) in call 'erlang':'+' (_5,1) end-|[{'function',{'gregorian_days_of_iso_w01_1',1}}] )
'year_day_to_date'/2 = (fun (_0,_1) -> let <_3> = case apply 'is_leap_year'/1 (_0) of <'true'> when 'true' -> 1
<'false'> when 'true' -> 0
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end in case apply 'year_day_to_date2'/2 (_3,_1) of <{Month,Day}> when 'true' -> let <_6> = call 'erlang':'+' (Day,1) in {Month,_6}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end-|[{'function',{'year_day_to_date',2}}] )
'year_day_to_date2'/2 = (fun (_0,_1) -> (case <_0,_1> of <_65,Day> when call 'erlang':'<' (Day,31) -> {1,Day}
<E,Day> when try let <_2> = call 'erlang':'=<' (31,Day) in let <_3> = call 'erlang':'+' (59,E) in let <_4> = call 'erlang':'<' (Day,_3) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_5> = call 'erlang':'-' (Day,31) in {2,_5}
<E,Day> when try let <_6> = call 'erlang':'+' (59,E) in let <_7> = call 'erlang':'=<' (_6,Day) in let <_8> = call 'erlang':'+' (90,E) in let <_9> = call 'erlang':'<' (Day,_8) in call 'erlang':'and' (_7,_9) of <Try> -> Try catch <T,R> -> 'false' -> let <_10> = call 'erlang':'+' (59,E) in let <_11> = call 'erlang':'-' (Day,_10) in {3,_11}
<E,Day> when try let <_12> = call 'erlang':'+' (90,E) in let <_13> = call 'erlang':'=<' (_12,Day) in let <_14> = call 'erlang':'+' (120,E) in let <_15> = call 'erlang':'<' (Day,_14) in call 'erlang':'and' (_13,_15) of <Try> -> Try catch <T,R> -> 'false' -> let <_16> = call 'erlang':'+' (90,E) in let <_17> = call 'erlang':'-' (Day,_16) in {4,_17}
<E,Day> when try let <_18> = call 'erlang':'+' (120,E) in let <_19> = call 'erlang':'=<' (_18,Day) in let <_20> = call 'erlang':'+' (151,E) in let <_21> = call 'erlang':'<' (Day,_20) in call 'erlang':'and' (_19,_21) of <Try> -> Try catch <T,R> -> 'false' -> let <_22> = call 'erlang':'+' (120,E) in let <_23> = call 'erlang':'-' (Day,_22) in {5,_23}
<E,Day> when try let <_24> = call 'erlang':'+' (151,E) in let <_25> = call 'erlang':'=<' (_24,Day) in let <_26> = call 'erlang':'+' (181,E) in let <_27> = call 'erlang':'<' (Day,_26) in call 'erlang':'and' (_25,_27) of <Try> -> Try catch <T,R> -> 'false' -> let <_28> = call 'erlang':'+' (151,E) in let <_29> = call 'erlang':'-' (Day,_28) in {6,_29}
<E,Day> when try let <_30> = call 'erlang':'+' (181,E) in let <_31> = call 'erlang':'=<' (_30,Day) in let <_32> = call 'erlang':'+' (212,E) in let <_33> = call 'erlang':'<' (Day,_32) in call 'erlang':'and' (_31,_33) of <Try> -> Try catch <T,R> -> 'false' -> let <_34> = call 'erlang':'+' (181,E) in let <_35> = call 'erlang':'-' (Day,_34) in {7,_35}
<E,Day> when try let <_36> = call 'erlang':'+' (212,E) in let <_37> = call 'erlang':'=<' (_36,Day) in let <_38> = call 'erlang':'+' (243,E) in let <_39> = call 'erlang':'<' (Day,_38) in call 'erlang':'and' (_37,_39) of <Try> -> Try catch <T,R> -> 'false' -> let <_40> = call 'erlang':'+' (212,E) in let <_41> = call 'erlang':'-' (Day,_40) in {8,_41}
<E,Day> when try let <_42> = call 'erlang':'+' (243,E) in let <_43> = call 'erlang':'=<' (_42,Day) in let <_44> = call 'erlang':'+' (273,E) in let <_45> = call 'erlang':'<' (Day,_44) in call 'erlang':'and' (_43,_45) of <Try> -> Try catch <T,R> -> 'false' -> let <_46> = call 'erlang':'+' (243,E) in let <_47> = call 'erlang':'-' (Day,_46) in {9,_47}
<E,Day> when try let <_48> = call 'erlang':'+' (273,E) in let <_49> = call 'erlang':'=<' (_48,Day) in let <_50> = call 'erlang':'+' (304,E) in let <_51> = call 'erlang':'<' (Day,_50) in call 'erlang':'and' (_49,_51) of <Try> -> Try catch <T,R> -> 'false' -> let <_52> = call 'erlang':'+' (273,E) in let <_53> = call 'erlang':'-' (Day,_52) in {10,_53}
<E,Day> when try let <_54> = call 'erlang':'+' (304,E) in let <_55> = call 'erlang':'=<' (_54,Day) in let <_56> = call 'erlang':'+' (334,E) in let <_57> = call 'erlang':'<' (Day,_56) in call 'erlang':'and' (_55,_57) of <Try> -> Try catch <T,R> -> 'false' -> let <_58> = call 'erlang':'+' (304,E) in let <_59> = call 'erlang':'-' (Day,_58) in {11,_59}
<E,Day> when try let <_60> = call 'erlang':'+' (334,E) in call 'erlang':'=<' (_60,Day) of <Try> -> Try catch <T,R> -> 'false' -> let <_61> = call 'erlang':'+' (334,E) in let <_62> = call 'erlang':'-' (Day,_61) in {12,_62}
(<_64,_63> when 'true' -> primop 'match_fail' ({'function_clause',_64,_63})-|['compiler_generated'] ) end-|[{'function',{'year_day_to_date2',2}}] )-|[{'function',{'year_day_to_date2',2}}] )
'dy'/1 = (fun (_0) -> (case (_0-|[{'function',{'dy',1}}] ) of <Y> when call 'erlang':'=<' ((_0-|[{'function',{'dy',1}}] ),0) -> 0
<Y> when 'true' -> let <X> = call 'erlang':'-' (Y,1) in let <_5> = call 'erlang':'div' (X,4) in let <_4> = call 'erlang':'div' (X,100) in let <_6> = call 'erlang':'-' (_5,_4) in let <_3> = call 'erlang':'div' (X,400) in let <_7> = call 'erlang':'+' (_6,_3) in let <_2> = call 'erlang':'*' (X,365) in let <_8> = call 'erlang':'+' (_7,_2) in call 'erlang':'+' (_8,366) end-|[{'function',{'dy',1}}] )-|[{'function',{'dy',1}}] )
'dm'/1 = (fun (_0) -> (case (_0-|[{'function',{'dm',1}}] ) of <1> when 'true' -> 0
<2> when 'true' -> 31
<3> when 'true' -> 59
<4> when 'true' -> 90
<5> when 'true' -> 120
<6> when 'true' -> 151
<7> when 'true' -> 181
<8> when 'true' -> 212
<9> when 'true' -> 243
<10> when 'true' -> 273
<11> when 'true' -> 304
<12> when 'true' -> 334
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'dm',1}}] )-|[{'function',{'dm',1}}] )
'df'/2 = (fun (_0,_1) -> (case <_0,_1> of <_5,Month> when call 'erlang':'<' (Month,3) -> 0
<Year,_6> when 'true' -> case apply 'is_leap_year'/1 (Year) of <'true'> when 'true' -> 1
<'false'> when 'true' -> 0
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end end-|[{'function',{'df',2}}] )-|[{'function',{'df',2}}] )
'check'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <_X_Arg,_X_Options,Secs> when let <_5> = call 'erlang':'>=' (Secs,-62167219200) in let <_7> = call 'erlang':'<' (Secs,253402300800) in call 'erlang':'and' (_5,_7) -> 'ok'
<Arg,Options,_X_Secs> when 'true' -> call 'erlang':'error' ({'badarg',[Arg|[Options|[]]]}) end-|[{'function',{'check',3}}] )-|[{'function',{'check',3}}] )
'datetime_to_system_time'/1 = (fun (_0) -> let <_2> = apply 'datetime_to_gregorian_seconds'/1 ((_0-|[{'function',{'datetime_to_system_time',1}}] )) in call 'erlang':'-' (_2,62167219200)-|[{'function',{'datetime_to_system_time',1}}] )
'system_time_to_datetime'/1 = (fun (_0) -> let <_2> = call 'erlang':'+' ((_0-|[{'function',{'system_time_to_datetime',1}}] ),62167219200) in apply 'gregorian_seconds_to_datetime'/1 (_2)-|[{'function',{'system_time_to_datetime',1}}] )
'offset'/2 = (fun (_0,_1) -> (case <_0,_1> of <OffsetOption,Secs0> when let <_2> = call 'erlang':'=:=' (OffsetOption,[]) in let <_3> = call 'erlang':'is_integer' (OffsetOption) in call 'erlang':'or' (_2,_3) -> let <_5> = case call 'erlang':'<' (Secs0,0) of <'true'> when 'true' -> 45
<'false'> when 'true' -> 43 end in let <Secs> = call 'erlang':'abs' (Secs0) in let <Hour> = call 'erlang':'div' (Secs,3600) in let <_9> = call 'erlang':'rem' (Secs,3600) in let <Min> = call 'erlang':'div' (_9,60) in let <_11> = apply 'pad2'/1 (Hour) in let <_12> = apply 'pad2'/1 (Min) in let <_13> = call 'lists':'append' ([_11|[[58]|[_12|[]]]]) in [_5|_13]
<OffsetOption,_X_Secs> when 'true' -> OffsetOption end-|[{'function',{'offset',2}}] )-|[{'function',{'offset',2}}] )
'offset_adjustment'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Time,Unit,[]> when 'true' -> apply 'local_offset'/2 (Time,Unit)
<Time,Unit,OffsetString> when call 'erlang':'is_list' (OffsetString) -> apply 'offset_string_adjustment'/3 (Time,Unit,OffsetString)
<_X_Time,Unit,Offset> when call 'erlang':'is_integer' (Offset) -> call 'erlang':'convert_time_unit' (Offset,Unit,'second')
(<_5,_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4,_3})-|['compiler_generated'] ) end-|[{'function',{'offset_adjustment',3}}] )-|[{'function',{'offset_adjustment',3}}] )
'offset_string_adjustment'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <_X_Time,_X_Unit,[90]> when 'true' -> 0
<_X_Time,_X_Unit,[122]> when 'true' -> 0
<_X_Time,_X_Unit,Tz> when 'true' -> case Tz of <[Sign|[H1|[H2|[58|_@r0 = [M1|[M2|[]]]]]]]> when 'true' -> let <Hour> = call 'erlang':'list_to_integer' ([H1|[H2|[]]]) in let <Min> = call 'erlang':'list_to_integer' (_@r0) in let <_7> = call 'erlang':'*' (3600,Hour) in let <_6> = call 'erlang':'*' (60,Min) in let <Adjustment> = call 'erlang':'+' (_7,_6) in case Sign of <45> when 'true' -> call 'erlang':'-' (Adjustment)
<43> when 'true' -> Adjustment
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end end-|[{'function',{'offset_string_adjustment',3}}] )-|[{'function',{'offset_string_adjustment',3}}] )
'local_offset'/2 = (fun (_0,_1) -> let <UniversalTime> = apply 'system_time_to_universal_time'/2 (_0,_1) in let <LocalTime> = call 'erlang':'universaltime_to_localtime' (UniversalTime) in let <LocalSecs> = apply 'datetime_to_gregorian_seconds'/1 (LocalTime) in let <UniversalSecs> = apply 'datetime_to_gregorian_seconds'/1 (UniversalTime) in call 'erlang':'-' (LocalSecs,UniversalSecs)-|[{'function',{'local_offset',2}}] )
'fraction_str'/2 = (fun (_0,_1) -> (case <_0,_1> of <1,_X_Time> when 'true' -> []
<Factor,Time> when 'true' -> let <Fraction> = call 'erlang':'rem' (Time,Factor) in let <_3> = call 'erlang':'abs' (Fraction) in let <S> = call 'erlang':'integer_to_list' (_3) in let <_6> = apply 'log10'/1 (Factor) in let <_5> = call 'erlang':'length' (S) in let <_7> = call 'erlang':'-' (_6,_5) in let <_8> = apply 'pad'/2 (_7,S) in [46|_8] end-|[{'function',{'fraction_str',2}}] )-|[{'function',{'fraction_str',2}}] )
'fraction'/2 = (fun (_0,_1) -> (case <_0,_1> of <'second',_7> when 'true' -> 0
<_8,[]> when 'true' -> 0
<Unit,FractionStr> when 'true' -> let <_3> = apply 'factor'/1 (Unit) in let <_2> = call 'erlang':'list_to_float' ([48|FractionStr]) in let <_4> = call 'erlang':'*' (_3,_2) in call 'erlang':'round' (_4) end-|[{'function',{'fraction',2}}] )-|[{'function',{'fraction',2}}] )
'copy_sign'/2 = (fun (_0,_1) -> (case <_0,_1> of <N1,N2> when call 'erlang':'<' (N2,0) -> call 'erlang':'-' (N1)
<N1,_X_N2> when 'true' -> N1 end-|[{'function',{'copy_sign',2}}] )-|[{'function',{'copy_sign',2}}] )
'factor'/1 = (fun (_0) -> (case (_0-|[{'function',{'factor',1}}] ) of <'second'> when 'true' -> 1
<'millisecond'> when 'true' -> 1000
<'microsecond'> when 'true' -> 1000000
<'nanosecond'> when 'true' -> 1000000000
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'factor',1}}] )-|[{'function',{'factor',1}}] )
'log10'/1 = (fun (_0) -> (case (_0-|[{'function',{'log10',1}}] ) of <1000> when 'true' -> 3
<1000000> when 'true' -> 6
<1000000000> when 'true' -> 9
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'log10',1}}] )-|[{'function',{'log10',1}}] )
'pad'/2 = (fun (_0,_1) -> (case <_0,_1> of <0,S> when 'true' -> S
<I,S> when 'true' -> let <_2> = call 'erlang':'-' (I,1) in let <_3> = apply 'pad'/2 (_2,S) in [48|_3] end-|[{'function',{'pad',2}}] )-|[{'function',{'pad',2}}] )
'pad2'/1 = (fun (_0) -> (case (_0-|[{'function',{'pad2',1}}] ) of <N> when call 'erlang':'<' ((_0-|[{'function',{'pad2',1}}] ),10) -> let <_1> = call 'erlang':'integer_to_list' (N) in [48|_1]
<N> when 'true' -> call 'erlang':'integer_to_list' (N) end-|[{'function',{'pad2',1}}] )-|[{'function',{'pad2',1}}] )
'pad4'/1 = (fun (_0) -> (case (_0-|[{'function',{'pad4',1}}] ) of <N> when call 'erlang':'<' ((_0-|[{'function',{'pad4',1}}] ),10) -> let <_1> = call 'erlang':'integer_to_list' (N) in [48|[48|[48|_1]]]
<N> when call 'erlang':'<' ((_0-|[{'function',{'pad4',1}}] ),100) -> let <_2> = call 'erlang':'integer_to_list' (N) in [48|[48|_2]]
<N> when call 'erlang':'<' ((_0-|[{'function',{'pad4',1}}] ),1000) -> let <_3> = call 'erlang':'integer_to_list' (N) in [48|_3]
<N> when 'true' -> call 'erlang':'integer_to_list' (N) end-|[{'function',{'pad4',1}}] )-|[{'function',{'pad4',1}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('calendar')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('calendar',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end