module 'epp' ['close'/1,'default_encoding'/0,'encoding_to_string'/1,'format_error'/1,'interpret_file_attribute'/1,'macro_defs'/1,'module_info'/0,'module_info'/1,'normalize_typed_record_fields'/1,'open'/1,'open'/2,'open'/3,'open'/5,'parse_erl_form'/1,'parse_file'/1,'parse_file'/2,'parse_file'/3,'read_encoding'/1,'read_encoding'/2,'read_encoding_from_binary'/1,'read_encoding_from_binary'/2,'restore_typed_record_fields'/1,'scan_erl_form'/1,'set_encoding'/1,'set_encoding'/2] attributes [ 'file' = [{[115|[114|[99|[47|[101|[112|[112|[46|[101|[114|[108]]]]]]]]]]],1}]
, 'export_type' = [{'source_encoding',0}]
, 'type' = [{'macros',{'type',37,'list',[{'type',37,'union',[{'type',37,'atom',[]}|[{'type',37,'tuple',[{'type',37,'atom',[]}|[{'type',37,'term',[]}]]}]]}]},[]}]
, 'type' = [{'epp_handle',{'type',38,'pid',[]},[]}]
, 'type' = [{'source_encoding',{'type',39,'union',[{'atom',39,'latin1'}|[{'atom',39,'utf8'}]]},[]}]
, 'type' = [{'ifdef',{'type',41,'union',[{'atom',41,'ifdef'}|[{'atom',41,'ifndef'}|[{'atom',41,'if'}|[{'atom',41,'else'}]]]]},[]}]
, 'type' = [{'name',{'type',43,'atom',[]},[]}]
, 'type' = [{'argspec',{'type',44,'union',[{'atom',44,'none'}|[{'type',45,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'argnames',{'type',46,'list',[{'type',46,'atom',[]}]},[]}]
, 'type' = [{'tokens',{'type',47,'list',[{'remote_type',47,[{'atom',47,'erl_scan'}|[{'atom',47,'token'}|[[]]]]}]},[]}]
, 'type' = [{'predef',{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'tuple',[{'atom',48,'none'}|[{'user_type',48,'tokens',[]}]]}]]},[]}]
, 'type' = [{'userdef',{'type',49,'tuple',[{'user_type',49,'argspec',[]}|[{'type',49,'tuple',[{'user_type',49,'argnames',[]}|[{'user_type',49,'tokens',[]}]]}]]},[]}]
, 'type' = [{'used',{'type',50,'tuple',[{'user_type',50,'name',[]}|[{'user_type',50,'argspec',[]}]]},[]}]
, 'type' = [{'function_name_type',{'type',52,'union',[{'atom',52,'undefined'}|[{'type',53,'tuple',[{'type',53,'atom',[]}|[{'type',53,'non_neg_integer',[]}]]}|[{'user_type',54,'tokens',[]}]]]},[]}]
, 'type' = [{'warning_info',{'type',56,'tuple',[{'remote_type',56,[{'atom',56,'erl_anno'}|[{'atom',56,'location'}|[[]]]]}|[{'type',56,'module',[]}|[{'type',56,'term',[]}]]]},[]}]
, 'record' = [{'epp',[{'typed_record_field',{'record_field',61,{'atom',61,'file'}},{'type',61,'union',[{'remote_type',61,[{'atom',61,'file'}|[{'atom',61,'io_device'}|[[]]]]}|[{'atom',62,'undefined'}]]}}|[{'record_field',63,{'atom',63,'location'},{'integer',63,1}}|[{'typed_record_field',{'record_field',64,{'atom',64,'delta'},{'integer',64,0}},{'type',64,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'name'},{'string',65,[]}},{'remote_type',65,[{'atom',65,'file'}|[{'atom',65,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'name2'},{'string',66,[]}},{'remote_type',66,[{'atom',66,'file'}|[{'atom',66,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'istk'},{'nil',67}},{'type',67,'list',[{'user_type',67,'ifdef',[]}]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'sstk'},{'nil',68}},{'type',68,'list',[{'type',68,'record',[{'atom',68,'epp'}]}]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'path'},{'nil',69}},{'type',69,'list',[{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'name'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'macs'},{'map',70,[]}},{'type',71,'map',[{'type',71,'map_field_assoc',[{'user_type',71,'name',[]}|[{'type',71,'union',[{'user_type',71,'predef',[]}|[{'type',71,'list',[{'user_type',71,'userdef',[]}]}]]}]]}]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'uses'},{'map',72,[]}},{'type',73,'map',[{'type',73,'map_field_assoc',[{'user_type',73,'name',[]}|[{'type',73,'list',[{'type',73,'tuple',[{'user_type',73,'argspec',[]}|[{'type',73,'list',[{'user_type',73,'used',[]}]}]]}]}]]}]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'default_encoding'},{'atom',74,'utf8'}},{'user_type',74,'source_encoding',[]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'pre_opened'},{'atom',75,'false'}},{'type',75,'boolean',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'fname'},{'nil',76}},{'user_type',76,'function_name_type',[]}}]]]]]]]]]]]]]}]
, 'spec' = [{{'open',2},[{'type',91,'bounded_fun',[{'type',91,'fun',[{'type',91,'product',[{'var',91,'FileName'}|[{'var',91,'IncludePath'}]]}|[{'type',92,'union',[{'type',92,'tuple',[{'atom',92,'ok'}|[{'var',92,'Epp'}]]}|[{'type',92,'tuple',[{'atom',92,'error'}|[{'var',92,'ErrorDescriptor'}]]}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'FileName'}|[{'remote_type',93,[{'atom',93,'file'}|[{'atom',93,'name'}|[[]]]]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'IncludePath'}|[{'type',94,'list',[{'ann_type',94,[{'var',94,'DirectoryName'}|[{'remote_type',94,[{'atom',94,'file'}|[{'atom',94,'name'}|[[]]]]}]]}]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Epp'}|[{'user_type',95,'epp_handle',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'ErrorDescriptor'}|[{'type',96,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'open',3},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'FileName'}|[{'var',101,'IncludePath'}|[{'var',101,'PredefMacros'}]]]}|[{'type',102,'union',[{'type',102,'tuple',[{'atom',102,'ok'}|[{'var',102,'Epp'}]]}|[{'type',102,'tuple',[{'atom',102,'error'}|[{'var',102,'ErrorDescriptor'}]]}]]}]]}|[[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'FileName'}|[{'remote_type',103,[{'atom',103,'file'}|[{'atom',103,'name'}|[[]]]]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'IncludePath'}|[{'type',104,'list',[{'ann_type',104,[{'var',104,'DirectoryName'}|[{'remote_type',104,[{'atom',104,'file'}|[{'atom',104,'name'}|[[]]]]}]]}]}]]]]}|[{'type',105,'constraint',[{'atom',105,'is_subtype'}|[[{'var',105,'PredefMacros'}|[{'user_type',105,'macros',[]}]]]]}|[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Epp'}|[{'user_type',106,'epp_handle',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'ErrorDescriptor'}|[{'type',107,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'open',1},[{'type',116,'bounded_fun',[{'type',116,'fun',[{'type',116,'product',[{'var',116,'Options'}]}|[{'type',117,'union',[{'type',117,'tuple',[{'atom',117,'ok'}|[{'var',117,'Epp'}]]}|[{'type',117,'tuple',[{'atom',117,'ok'}|[{'var',117,'Epp'}|[{'var',117,'Extra'}]]]}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'var',117,'ErrorDescriptor'}]]}]]]}]]}|[[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Options'}|[{'type',118,'list',[{'type',118,'union',[{'type',118,'tuple',[{'atom',118,'default_encoding'}|[{'ann_type',118,[{'var',118,'DefEncoding'}|[{'user_type',118,'source_encoding',[]}]]}]]}|[{'type',119,'tuple',[{'atom',119,'includes'}|[{'ann_type',119,[{'var',119,'IncludePath'}|[{'type',119,'list',[{'ann_type',119,[{'var',119,'DirectoryName'}|[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',120,'tuple',[{'atom',120,'source_name'}|[{'ann_type',120,[{'var',120,'SourceName'}|[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'name'}|[[]]]]}]]}]]}|[{'type',121,'tuple',[{'atom',121,'macros'}|[{'ann_type',121,[{'var',121,'PredefMacros'}|[{'user_type',121,'macros',[]}]]}]]}|[{'type',122,'tuple',[{'atom',122,'name'}|[{'ann_type',122,[{'var',122,'FileName'}|[{'remote_type',122,[{'atom',122,'file'}|[{'atom',122,'name'}|[[]]]]}]]}]]}|[{'atom',123,'extra'}]]]]]]}]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'Epp'}|[{'user_type',124,'epp_handle',[]}]]]]}|[{'type',125,'constraint',[{'atom',125,'is_subtype'}|[[{'var',125,'Extra'}|[{'type',125,'list',[{'type',125,'tuple',[{'atom',125,'encoding'}|[{'type',125,'union',[{'user_type',125,'source_encoding',[]}|[{'atom',125,'none'}]]}]]}]}]]]]}|[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'ErrorDescriptor'}|[{'type',126,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'close',1},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Epp'}]}|[{'atom',149,'ok'}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Epp'}|[{'user_type',150,'epp_handle',[]}]]]]}]]]}]}]
, 'spec' = [{{'parse_erl_form',1},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Epp'}]}|[{'type',164,'union',[{'type',164,'tuple',[{'atom',164,'ok'}|[{'var',164,'AbsForm'}]]}|[{'type',164,'tuple',[{'atom',164,'error'}|[{'var',164,'ErrorInfo'}]]}|[{'type',165,'tuple',[{'atom',165,'warning'}|[{'var',165,'WarningInfo'}]]}|[{'type',165,'tuple',[{'atom',165,'eof'}|[{'var',165,'Line'}]]}]]]]}]]}|[[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Epp'}|[{'user_type',166,'epp_handle',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'AbsForm'}|[{'remote_type',167,[{'atom',167,'erl_parse'}|[{'atom',167,'abstract_form'}|[[]]]]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Line'}|[{'remote_type',168,[{'atom',168,'erl_anno'}|[{'atom',168,'line'}|[[]]]]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'ErrorInfo'}|[{'type',169,'union',[{'remote_type',169,[{'atom',169,'erl_scan'}|[{'atom',169,'error_info'}|[[]]]]}|[{'remote_type',169,[{'atom',169,'erl_parse'}|[{'atom',169,'error_info'}|[[]]]]}]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'WarningInfo'}|[{'user_type',170,'warning_info',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'format_error',1},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'ErrorDescriptor'}]}|[{'remote_type',186,[{'atom',186,'io_lib'}|[{'atom',186,'chars'}|[[]]]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'ErrorDescriptor'}|[{'type',187,'term',[]}]]]]}]]]}]}]
, 'spec' = [{{'parse_file',3},[{'type',235,'bounded_fun',[{'type',235,'fun',[{'type',235,'product',[{'var',235,'FileName'}|[{'var',235,'IncludePath'}|[{'var',235,'PredefMacros'}]]]}|[{'type',236,'union',[{'type',236,'tuple',[{'atom',236,'ok'}|[{'type',236,'list',[{'var',236,'Form'}]}]]}|[{'type',236,'tuple',[{'atom',236,'error'}|[{'var',236,'OpenError'}]]}]]}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'FileName'}|[{'remote_type',237,[{'atom',237,'file'}|[{'atom',237,'name'}|[[]]]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'IncludePath'}|[{'type',238,'list',[{'ann_type',238,[{'var',238,'DirectoryName'}|[{'remote_type',238,[{'atom',238,'file'}|[{'atom',238,'name'}|[[]]]]}]]}]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Form'}|[{'type',239,'union',[{'remote_type',239,[{'atom',239,'erl_parse'}|[{'atom',239,'abstract_form'}|[[]]]]}|[{'type',239,'tuple',[{'atom',239,'error'}|[{'var',239,'ErrorInfo'}]]}|[{'type',239,'tuple',[{'atom',239,'eof'}|[{'var',239,'Line'}]]}]]]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'PredefMacros'}|[{'user_type',240,'macros',[]}]]]]}|[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Line'}|[{'remote_type',241,[{'atom',241,'erl_anno'}|[{'atom',241,'line'}|[[]]]]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'ErrorInfo'}|[{'type',242,'union',[{'remote_type',242,[{'atom',242,'erl_scan'}|[{'atom',242,'error_info'}|[[]]]]}|[{'remote_type',242,[{'atom',242,'erl_parse'}|[{'atom',242,'error_info'}|[[]]]]}]]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'OpenError'}|[{'type',243,'union',[{'remote_type',243,[{'atom',243,'file'}|[{'atom',243,'posix'}|[[]]]]}|[{'atom',243,'badarg'}|[{'atom',243,'system_limit'}]]]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'parse_file',2},[{'type',248,'bounded_fun',[{'type',248,'fun',[{'type',248,'product',[{'var',248,'FileName'}|[{'var',248,'Options'}]]}|[{'type',249,'union',[{'type',249,'tuple',[{'atom',249,'ok'}|[{'type',249,'list',[{'var',249,'Form'}]}]]}|[{'type',249,'tuple',[{'atom',249,'ok'}|[{'type',249,'list',[{'var',249,'Form'}]}|[{'var',249,'Extra'}]]]}|[{'type',249,'tuple',[{'atom',249,'error'}|[{'var',249,'OpenError'}]]}]]]}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'FileName'}|[{'remote_type',250,[{'atom',250,'file'}|[{'atom',250,'name'}|[[]]]]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Options'}|[{'type',251,'list',[{'type',251,'union',[{'type',251,'tuple',[{'atom',251,'includes'}|[{'ann_type',251,[{'var',251,'IncludePath'}|[{'type',251,'list',[{'ann_type',251,[{'var',251,'DirectoryName'}|[{'remote_type',251,[{'atom',251,'file'}|[{'atom',251,'name'}|[[]]]]}]]}]}]]}]]}|[{'type',252,'tuple',[{'atom',252,'source_name'}|[{'ann_type',252,[{'var',252,'SourceName'}|[{'remote_type',252,[{'atom',252,'file'}|[{'atom',252,'name'}|[[]]]]}]]}]]}|[{'type',253,'tuple',[{'atom',253,'macros'}|[{'ann_type',253,[{'var',253,'PredefMacros'}|[{'user_type',253,'macros',[]}]]}]]}|[{'type',254,'tuple',[{'atom',254,'default_encoding'}|[{'ann_type',254,[{'var',254,'DefEncoding'}|[{'user_type',254,'source_encoding',[]}]]}]]}|[{'atom',255,'extra'}]]]]]}]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Form'}|[{'type',256,'union',[{'remote_type',256,[{'atom',256,'erl_parse'}|[{'atom',256,'abstract_form'}|[[]]]]}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'var',256,'ErrorInfo'}]]}|[{'type',256,'tuple',[{'atom',256,'eof'}|[{'var',256,'Line'}]]}]]]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Line'}|[{'remote_type',257,[{'atom',257,'erl_anno'}|[{'atom',257,'line'}|[[]]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'ErrorInfo'}|[{'type',258,'union',[{'remote_type',258,[{'atom',258,'erl_scan'}|[{'atom',258,'error_info'}|[[]]]]}|[{'remote_type',258,[{'atom',258,'erl_parse'}|[{'atom',258,'error_info'}|[[]]]]}]]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Extra'}|[{'type',259,'list',[{'type',259,'tuple',[{'atom',259,'encoding'}|[{'type',259,'union',[{'user_type',259,'source_encoding',[]}|[{'atom',259,'none'}]]}]]}]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'OpenError'}|[{'type',260,'union',[{'remote_type',260,[{'atom',260,'file'}|[{'atom',260,'posix'}|[[]]]]}|[{'atom',260,'badarg'}|[{'atom',260,'system_limit'}]]]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'parse_file',1},[{'type',276,'bounded_fun',[{'type',276,'fun',[{'type',276,'product',[{'var',276,'Epp'}]}|[{'type',276,'list',[{'var',276,'Form'}]}]]}|[[{'type',277,'constraint',[{'atom',277,'is_subtype'}|[[{'var',277,'Epp'}|[{'user_type',277,'epp_handle',[]}]]]]}|[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Form'}|[{'type',278,'union',[{'remote_type',278,[{'atom',278,'erl_parse'}|[{'atom',278,'abstract_form'}|[[]]]]}|[{'type',278,'tuple',[{'atom',278,'error'}|[{'var',278,'ErrorInfo'}]]}|[{'type',279,'tuple',[{'atom',279,'warning'}|[{'var',279,'WarningInfo'}]]}|[{'type',279,'tuple',[{'atom',279,'eof'}|[{'var',279,'Line'}]]}]]]]}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Line'}|[{'remote_type',280,[{'atom',280,'erl_anno'}|[{'atom',280,'line'}|[[]]]]}]]]]}|[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'ErrorInfo'}|[{'type',281,'union',[{'remote_type',281,[{'atom',281,'erl_scan'}|[{'atom',281,'error_info'}|[[]]]]}|[{'remote_type',281,[{'atom',281,'erl_parse'}|[{'atom',281,'error_info'}|[[]]]]}]]}]]]]}|[{'type',282,'constraint',[{'atom',282,'is_subtype'}|[[{'var',282,'WarningInfo'}|[{'user_type',282,'warning_info',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'default_encoding',0},[{'type',296,'fun',[{'type',296,'product',[]}|[{'user_type',296,'source_encoding',[]}]]}]}]
, 'spec' = [{{'encoding_to_string',1},[{'type',301,'bounded_fun',[{'type',301,'fun',[{'type',301,'product',[{'var',301,'Encoding'}]}|[{'type',301,'string',[]}]]}|[[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'Encoding'}|[{'user_type',302,'source_encoding',[]}]]]]}]]]}]}]
, 'spec' = [{{'read_encoding',1},[{'type',307,'bounded_fun',[{'type',307,'fun',[{'type',307,'product',[{'var',307,'FileName'}]}|[{'type',307,'union',[{'user_type',307,'source_encoding',[]}|[{'atom',307,'none'}]]}]]}|[[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'FileName'}|[{'remote_type',308,[{'atom',308,'file'}|[{'atom',308,'name'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'read_encoding',2},[{'type',313,'bounded_fun',[{'type',313,'fun',[{'type',313,'product',[{'var',313,'FileName'}|[{'var',313,'Options'}]]}|[{'type',313,'union',[{'user_type',313,'source_encoding',[]}|[{'atom',313,'none'}]]}]]}|[[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'FileName'}|[{'remote_type',314,[{'atom',314,'file'}|[{'atom',314,'name'}|[[]]]]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'Options'}|[{'type',315,'list',[{'var',315,'Option'}]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Option'}|[{'type',316,'tuple',[{'atom',316,'in_comment_only'}|[{'type',316,'boolean',[]}]]}]]]]}]]]]]}]}]
, 'spec' = [{{'set_encoding',1},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'File'}]}|[{'type',329,'union',[{'user_type',329,'source_encoding',[]}|[{'atom',329,'none'}]]}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'File'}|[{'remote_type',330,[{'atom',330,'io'}|[{'atom',330,'device'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'set_encoding',2},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'File'}|[{'var',335,'Default'}]]}|[{'type',335,'union',[{'user_type',335,'source_encoding',[]}|[{'atom',335,'none'}]]}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Default'}|[{'user_type',336,'source_encoding',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'File'}|[{'remote_type',337,[{'atom',337,'io'}|[{'atom',337,'device'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'read_encoding_from_binary',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Binary'}]}|[{'type',348,'union',[{'user_type',348,'source_encoding',[]}|[{'atom',348,'none'}]]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Binary'}|[{'type',349,'binary',[]}]]]]}]]]}]}]
, 'spec' = [{{'read_encoding_from_binary',2},[{'type',357,'bounded_fun',[{'type',357,'fun',[{'type',357,'product',[{'var',357,'Binary'}|[{'var',357,'Options'}]]}|[{'type',358,'union',[{'user_type',358,'source_encoding',[]}|[{'atom',358,'none'}]]}]]}|[[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'Binary'}|[{'type',359,'binary',[]}]]]]}|[{'type',360,'constraint',[{'atom',360,'is_subtype'}|[[{'var',360,'Options'}|[{'type',360,'list',[{'var',360,'Option'}]}]]]]}|[{'type',361,'constraint',[{'atom',361,'is_subtype'}|[[{'var',361,'Option'}|[{'type',361,'tuple',[{'atom',361,'in_comment_only'}|[{'type',361,'boolean',[]}]]}]]]]}]]]]]}]}]
, 'spec' = [{{'read_encoding_from_file',2},[{'type',379,'bounded_fun',[{'type',379,'fun',[{'type',379,'product',[{'var',379,'File'}|[{'var',379,'InComment'}]]}|[{'type',379,'union',[{'user_type',379,'source_encoding',[]}|[{'atom',379,'none'}]]}]]}|[[{'type',380,'constraint',[{'atom',380,'is_subtype'}|[[{'var',380,'File'}|[{'remote_type',380,[{'atom',380,'io'}|[{'atom',380,'device'}|[[]]]]}]]]]}|[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'InComment'}|[{'type',381,'boolean',[]}]]]]}]]]]}]}] ] 'open'/2 = (fun (_0,_1) -> apply 'open'/3 (_0,_1,[])-|[{'function',{'open',2}}] )
'open'/3 = (fun (_0,_1,_2) -> apply 'internal_open'/2 ([{'name',_0}|[{'includes',_1}|[{'macros',_2}|[]]]],{'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]})-|[{'function',{'open',3}}] )
'open'/5 = (fun (_0,_1,_2,_3,_4) -> apply 'internal_open'/2 ([{'name',_0}|[{'includes',_3}|[{'macros',_4}|[]]]],{'epp',_1,_2,0,[],[],[],[],[],~{}~,~{}~,'utf8','true',[]})-|[{'function',{'open',5}}] )
'open'/1 = (fun (_0) -> apply 'internal_open'/2 ((_0-|[{'function',{'open',1}}] ),{'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]})-|[{'function',{'open',1}}] )
'internal_open'/2 = (fun (_0,_1) -> case call 'proplists':'get_value' ('name',_0) of <'undefined'> when 'true' -> call 'erlang':'error' ('badarg')
<Name> when 'true' -> let <Self> = call 'erlang':'self' () in let <_3> = fun () -> apply 'server'/4 (Self,Name,_0,_1) in let <Epp> = call 'erlang':'spawn' (_3) in case apply 'epp_request'/1 (Epp) of <{'ok',Pid,Encoding}> when 'true' -> case call 'proplists':'get_bool' ('extra',_0) of <'true'> when 'true' -> {'ok',Pid,[{'encoding',Encoding}|[]]}
<'false'> when 'true' -> {'ok',Pid}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Other> when 'true' -> Other end end-|[{'function',{'internal_open',2}}] )
'close'/1 = (fun (_0) -> let <Ref> = call 'erlang':'monitor' ('process',(_0-|[{'function',{'close',1}}] )) in let <R> = apply 'epp_request'/2 ((_0-|[{'function',{'close',1}}] ),'close') in do (letrec 'recv$^0'/0 = fun () -> let <_10,_8> = primop 'recv_peek_message' () in case _10 of <'true'> when 'true' -> case _8 of <{'DOWN',_4,_5,_6,_7}> when call 'erlang':'=:=' (_4,Ref) -> primop 'remove_message' ()
(<Other> when 'true' -> do primop 'recv_next' () (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['compiler_generated','dialyzer_ignore'] ) end
(<'false'> when 'true' -> let <_9> = primop 'recv_wait_timeout' ('infinity') in case _9 of <'true'> when 'true' -> primop 'timeout' ()
(<'false'> when 'true' -> (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end-|['dialyzer_ignore'] ) end in (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] ) R-|[{'function',{'close',1}}] )
'scan_erl_form'/1 = (fun (_0) -> apply 'epp_request'/2 ((_0-|[{'function',{'scan_erl_form',1}}] ),'scan_erl_form')-|[{'function',{'scan_erl_form',1}}] )
'parse_erl_form'/1 = (fun (_0) -> case apply 'epp_request'/2 ((_0-|[{'function',{'parse_erl_form',1}}] ),'scan_erl_form') of <{'ok',Toks}> when 'true' -> call 'erl_parse':'parse_form' (Toks)
<Other> when 'true' -> Other end-|[{'function',{'parse_erl_form',1}}] )
'macro_defs'/1 = (fun (_0) -> apply 'epp_request'/2 ((_0-|[{'function',{'macro_defs',1}}] ),'macro_defs')-|[{'function',{'macro_defs',1}}] )
'format_error'/1 = (fun (_0) -> (case (_0-|[{'function',{'format_error',1}}] ) of <'cannot_parse'> when 'true' -> call 'io_lib':'format' ([99|[97|[110|[110|[111|[116|[32|[112|[97|[114|[115|[101|[32|[102|[105|[108|[101|[44|[32|[103|[105|[118|[105|[110|[103|[32|[117|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
<{'bad',W}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]],[W|[]])
<'missing_parenthesis'> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[102|[105|[110|[101|[58|[32|[109|[105|[115|[115|[105|[110|[103|[32|[99|[108|[111|[115|[105|[110|[103|[32|[114|[105|[103|[104|[116|[32|[112|[97|[114|[101|[110|[116|[104|[101|[115|[105|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
<'premature_end'> when 'true' -> [112|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100]]]]]]]]]]]]]
<{'call',What}> when 'true' -> call 'io_lib':'format' ([105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[99|[114|[111|[32|[99|[97|[108|[108|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]],[What|[]])
<{'undefined',M,'none'}> when 'true' -> call 'io_lib':'format' ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'undefined',M,A}> when 'true' -> call 'io_lib':'format' ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]]],[M|[A|[]]])
<{'depth',What}> when 'true' -> call 'io_lib':'format' ([126|[115|[32|[116|[111|[111|[32|[100|[101|[101|[112]]]]]]]]]]],[What|[]])
<{'mismatch',M}> when 'true' -> call 'io_lib':'format' ([97|[114|[103|[117|[109|[101|[110|[116|[32|[109|[105|[115|[109|[97|[116|[99|[104|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'arg_error',M}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'redefine',M}> when 'true' -> call 'io_lib':'format' ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'redefine_predef',M}> when 'true' -> call 'io_lib':'format' ([114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[112|[114|[101|[100|[101|[102|[105|[110|[101|[100|[32|[109|[97|[99|[114|[111|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'circular',M,'none'}> when 'true' -> call 'io_lib':'format' ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]],[M|[]])
<{'circular',M,A}> when 'true' -> call 'io_lib':'format' ([99|[105|[114|[99|[117|[108|[97|[114|[32|[109|[97|[99|[114|[111|[32|[39|[126|[116|[115|[47|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]],[M|[A|[]]])
<{'include',W,F}> when 'true' -> call 'io_lib':'format' ([99|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[105|[110|[99|[108|[117|[100|[101|[32|[126|[115|[32|[34|[126|[116|[115|[34]]]]]]]]]]]]]]]]]]]]]]]]]]],[W|[F|[]]])
<{'illegal',How,What}> when 'true' -> call 'io_lib':'format' ([126|[115|[32|[39|[45|[126|[115|[39]]]]]]]],[How|[What|[]]])
<{'illegal_function',Macro}> when 'true' -> call 'io_lib':'format' ([63|[126|[115|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[119|[105|[116|[104|[105|[110|[32|[97|[32|[102|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Macro|[]])
<{'illegal_function_usage',Macro}> when 'true' -> call 'io_lib':'format' ([63|[126|[115|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[103|[105|[110|[32|[97|[32|[102|[111|[114|[109]]]]]]]]]]]]]]]]]]]]]]]]],[Macro|[]])
<'elif_after_else'> when 'true' -> [39|[101|[108|[105|[102|[39|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[39|[101|[108|[115|[101|[39]]]]]]]]]]]]]]]]]]]]]]]
<{'NYI',What}> when 'true' -> call 'io_lib':'format' ([110|[111|[116|[32|[121|[101|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[39|[126|[115|[39]]]]]]]]]]]]]]]]]]]]]]]],[What|[]])
<{'error',Term}> when 'true' -> call 'io_lib':'format' ([45|[101|[114|[114|[111|[114|[40|[126|[116|[112|[41|[46]]]]]]]]]]]],[Term|[]])
<{'warning',Term}> when 'true' -> call 'io_lib':'format' ([45|[119|[97|[114|[110|[105|[110|[103|[40|[126|[116|[112|[41|[46]]]]]]]]]]]]]],[Term|[]])
<E> when 'true' -> call 'file':'format_error' (E) end-|[{'function',{'format_error',1}}] )-|[{'function',{'format_error',1}}] )
'parse_file'/3 = (fun (_0,_1,_2) -> apply 'parse_file'/2 (_0,[{'includes',_1}|[{'macros',_2}|[]]])-|[{'function',{'parse_file',3}}] )
'parse_file'/2 = (fun (_0,_1) -> case apply 'internal_open'/2 ([{'name',_0}|_1],{'epp','undefined',1,0,[],[],[],[],[],~{}~,~{}~,'utf8','false',[]}) of <{'ok',Epp}> when 'true' -> let <Forms> = apply 'parse_file'/1 (Epp) in do apply 'close'/1 (Epp) {'ok',Forms}
<{'ok',Epp,Extra}> when 'true' -> let <Forms> = apply 'parse_file'/1 (Epp) in do apply 'close'/1 (Epp) {'ok',Forms,Extra}
<_@r0 = {'error',E}> when 'true' -> _@r0
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'parse_file',2}}] )
'parse_file'/1 = (fun (_0) -> case apply 'parse_erl_form'/1 ((_0-|[{'function',{'parse_file',1}}] )) of <{'ok',Form}> when 'true' -> let <_1> = apply 'parse_file'/1 ((_0-|[{'function',{'parse_file',1}}] )) in [Form|_1]
<_@r0 = {'error',E}> when 'true' -> let <_2> = apply 'parse_file'/1 ((_0-|[{'function',{'parse_file',1}}] )) in [_@r0|_2]
<_@r1 = {'warning',W}> when 'true' -> let <_3> = apply 'parse_file'/1 ((_0-|[{'function',{'parse_file',1}}] )) in [_@r1|_3]
<_@r2 = {'eof',Location}> when 'true' -> [_@r2|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'parse_file',1}}] )
'default_encoding'/0 = (fun () -> 'utf8'-|[{'function',{'default_encoding',0}}] )
'encoding_to_string'/1 = (fun (_0) -> (case (_0-|[{'function',{'encoding_to_string',1}}] ) of <'latin1'> when 'true' -> [99|[111|[100|[105|[110|[103|[58|[32|[108|[97|[116|[105|[110|[45|[49]]]]]]]]]]]]]]]
<'utf8'> when 'true' -> [99|[111|[100|[105|[110|[103|[58|[32|[117|[116|[102|[45|[56]]]]]]]]]]]]]
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'encoding_to_string',1}}] )-|[{'function',{'encoding_to_string',1}}] )
'read_encoding'/1 = (fun (_0) -> apply 'read_encoding'/2 ((_0-|[{'function',{'read_encoding',1}}] ),[])-|[{'function',{'read_encoding',1}}] )
'read_encoding'/2 = (fun (_0,_1) -> let <InComment> = call 'proplists':'get_value' ('in_comment_only',_1,'true') in case call 'file':'open' (_0,['read']) of <{'ok',File}> when 'true' -> letrec 'after$^0'/0 = fun () -> let <_11> = call 'file':'close' (File) in case _11 of <'ok'> when 'true' -> (_11-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end in try apply 'read_encoding_from_file'/2 (File,InComment) of <_4> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _4 catch <_7,_6,_5> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_5,_6)
<_X_Error> when 'true' -> 'none' end-|[{'function',{'read_encoding',2}}] )
'set_encoding'/1 = (fun (_0) -> apply 'set_encoding'/2 ((_0-|[{'function',{'set_encoding',1}}] ),'utf8')-|[{'function',{'set_encoding',1}}] )
'set_encoding'/2 = (fun (_0,_1) -> let <Encoding> = apply 'read_encoding_from_file'/2 (_0,'true') in let <_4> = case Encoding of <'none'> when 'true' -> _1
<_9> when call 'erlang':'=:=' (Encoding,Encoding) -> Encoding
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end in case call 'io':'setopts' (_0,[{'encoding',_4}|[]]) of <'ok'> when 'true' -> Encoding
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|[{'function',{'set_encoding',2}}] )
'read_encoding_from_binary'/1 = (fun (_0) -> apply 'read_encoding_from_binary'/2 ((_0-|[{'function',{'read_encoding_from_binary',1}}] ),[])-|[{'function',{'read_encoding_from_binary',1}}] )
'read_encoding_from_binary'/2 = (fun (_0,_1) -> let <InComment> = call 'proplists':'get_value' ('in_comment_only',_1,'true') in try let <_3> = apply 'fake_reader'/1 (0) in apply 'com_nl'/4 (_0,_3,0,InComment) of <_4> -> _4 catch <_7,_6,_5> -> case <_7,_6,_5> of <('throw'-|['compiler_generated'] ),('no'-|['compiler_generated'] ),_10> when 'true' -> 'none'
(<_11,_12,_13> when 'true' -> primop 'raise' (_13,_12)-|['compiler_generated'] ) end-|[{'function',{'read_encoding_from_binary',2}}] )
'fake_reader'/1 = (fun (_0) -> (fun () -> case <> of <> when call 'erlang':'=:=' ((_0-|[{'function',{'fake_reader',1}}] ),16) -> call 'erlang':'throw' ('no')
<> when 'true' -> let <_1> = call 'erlang':'+' ((_0-|[{'function',{'fake_reader',1}}] ),1) in let <_2> = apply 'fake_reader'/1 (_1) in {#{}#,_2} end-|[{'id',{0,0,'-fake_reader/1-fun-0-'}}] )-|[{'function',{'fake_reader',1}}] )
'read_encoding_from_file'/2 = (fun (_0,_1) -> case call 'file':'position' (_0,'cur') of <{'ok',Pos0}> when 'true' -> let <Opts> = call 'io':'getopts' (_0) in let <Encoding0> = call 'lists':'keyfind' ('encoding',1,Opts) in let <Binary0> = call 'lists':'keyfind' ('binary',1,Opts) in case call 'io':'setopts' (_0,['binary'|[{'encoding','latin1'}]]) of <'ok'> when 'true' -> letrec 'after$^0'/0 = fun () -> case call 'file':'position' (_0,Pos0) of <{'ok',_21}> when call 'erlang':'=:=' (_21,Pos0) -> let <_22> = call 'io':'setopts' (_0,[Binary0|[Encoding0|[]]]) in case _22 of <'ok'> when 'true' -> (_22-|['compiler_generated'] )
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end in try try let <_7> = apply 'reader'/2 (_0,0) in case apply _7 () of <{B,Fun}> when 'true' -> apply 'com_nl'/4 (B,Fun,0,_1)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end of <_9> -> _9 catch <_12,_11,_10> -> case <_12,_11,_10> of <('throw'-|['compiler_generated'] ),('no'-|['compiler_generated'] ),_23> when 'true' -> 'none'
(<_24,_25,_26> when 'true' -> primop 'raise' (_26,_25)-|['compiler_generated'] ) end of <_15> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _15 catch <_18,_17,_16> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_16,_17)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end-|[{'function',{'read_encoding_from_file',2}}] )
'reader'/2 = (fun (_0,_1) -> (fun () -> case <> of <> when call 'erlang':'=:=' (_1,16) -> call 'erlang':'throw' ('no')
<> when 'true' -> case call 'file':'read' (_0,32) of <'eof'> when 'true' -> let <_2> = call 'erlang':'+' (_1,1) in let <_3> = apply 'reader'/2 (_0,_2) in {#{}#,_3}
<{'ok',Bin}> when 'true' -> let <_4> = call 'erlang':'+' (_1,1) in let <_5> = apply 'reader'/2 (_0,_4) in {Bin,_5}
<{'error',_9}> when 'true' -> call 'erlang':'throw' ('no')
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end end-|[{'id',{0,0,'-reader/2-fun-0-'}}] )-|[{'function',{'reader',2}}] )
'com_nl'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <_8,_9,2,_10> when 'true' -> call 'erlang':'throw' ('no')
<B,Fun,N,Com = 'false'> when 'true' -> apply 'com_c'/4 (B,Fun,N,Com)
<B,Fun,N,Com = 'true'> when 'true' -> apply 'com'/4 (B,Fun,N,Com)
(<_7,_6,_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_7,_6,_5,_4})-|['compiler_generated'] ) end-|[{'function',{'com_nl',4}}] )-|[{'function',{'com_nl',4}}] )
'com'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <#{#<10>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'com_nl'/4 (B,Fun,_4,Com)
<#{#<37>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_c'/4 (B,Fun,N,Com)
<#{#<_10>(1,8,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com'/4 (B,Fun,N,Com)
<#{}#,Fun,N,Com> when 'true' -> case apply Fun () of <{B,Fun1}> when 'true' -> apply 'com'/4 (B,Fun1,N,Com)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_9,_8,_7,_6> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|['compiler_generated'] ) end-|[{'function',{'com',4}}] )-|[{'function',{'com',4}}] )
'com_c'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <#{#<99>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_oding'/4 (B,Fun,N,Com)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'com_nl'/4 (B,Fun,_4,Com)
<#{#<_10>(1,8,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_c'/4 (B,Fun,N,Com)
<#{}#,Fun,N,Com> when 'true' -> case apply Fun () of <{B,Fun1}> when 'true' -> apply 'com_c'/4 (B,Fun1,N,Com)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_9,_8,_7,_6> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|['compiler_generated'] ) end-|[{'function',{'com_c',4}}] )-|[{'function',{'com_c',4}}] )
'com_oding'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <#{#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_sep'/4 (B,Fun,N,Com)
<B,Fun,N,Com> when try let <_5> = call 'erlang':'byte_size' (B) in call 'erlang':'>=' (_5,5) of <Try> -> Try catch <T,R> -> 'false' -> apply 'com_c'/4 (B,Fun,N,Com)
<B,Fun,N,Com> when 'true' -> case apply Fun () of <{B1,Fun1}> when 'true' -> let <_7> = call 'erlang':'list_to_binary' ([B|[B1|[]]]) in apply 'com_oding'/4 (_7,Fun1,N,Com)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end end-|[{'function',{'com_oding',4}}] )-|[{'function',{'com_oding',4}}] )
'com_sep'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <#{#<58>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_space'/4 (B,Fun,N,Com)
<#{#<61>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_space'/4 (B,Fun,N,Com)
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_sep'/4 (B,Fun,N,Com)
<#{}#,Fun,N,Com> when 'true' -> case apply Fun () of <{B,Fun1}> when 'true' -> apply 'com_sep'/4 (B,Fun1,N,Com)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<B,Fun,N,Com> when 'true' -> apply 'com_c'/4 (B,Fun,N,Com) end-|[{'function',{'com_sep',4}}] )-|[{'function',{'com_sep',4}}] )
'com_space'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <#{#<32>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,Com> when 'true' -> apply 'com_space'/4 (B,Fun,N,Com)
<#{}#,Fun,N,Com> when 'true' -> case apply Fun () of <{B,Fun1}> when 'true' -> apply 'com_space'/4 (B,Fun1,N,Com)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<B,Fun,N,_X_Com> when 'true' -> apply 'com_enc'/5 (B,Fun,N,[],[]) end-|[{'function',{'com_space',4}}] )-|[{'function',{'com_space',4}}] )
'com_enc'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <#{#<C>(1,8,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps> when let <_5> = call 'erlang':'>=' (C,97) in let <_6> = call 'erlang':'=<' (C,122) in let <_7> = call 'erlang':'and' (_5,_6) in let <_8> = call 'erlang':'>=' (C,65) in let <_9> = call 'erlang':'=<' (C,90) in let <_10> = call 'erlang':'and' (_8,_9) in let <_11> = call 'erlang':'>=' (C,48) in let <_12> = call 'erlang':'=<' (C,57) in let <_13> = call 'erlang':'and' (_11,_12) in let <_14> = call 'erlang':'or' (_10,_13) in call 'erlang':'or' (_7,_14) -> apply 'com_enc'/5 (B,Fun,N,[C|L],Ps)
<#{}#,Fun,N,L,Ps> when 'true' -> case apply Fun () of <{#{}#,_21}> when 'true' -> apply 'com_enc_end'/1 ([L|Ps])
<{B,Fun1}> when 'true' -> apply 'com_enc'/5 (B,Fun1,N,L,Ps)
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<#{#<45>(8,1,'integer',['unsigned'|['big']]),#<B>(('all'-|['compiler_generated'] ),8,'binary',['unsigned'|['big']])}#,Fun,N,L,Ps> when 'true' -> apply 'com_enc'/5 (B,Fun,N,[],[L|Ps])
<_X_B,_X_Fun,_X_N,L,Ps> when 'true' -> apply 'com_enc_end'/1 ([L|Ps]) end-|[{'function',{'com_enc',5}}] )-|[{'function',{'com_enc',5}}] )
'com_enc_end'/1 = (fun (_0) -> let <_8> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[P|_2]> when 'true' -> let <_5> = apply 'lowercase'/1 (P) in let <_6> = call 'lists':'reverse' (_5) in let <_7> = apply 'lc$^0'/1 (_2) in ([_6|_7]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end in apply 'lc$^0'/1 ((_0-|[{'function',{'com_enc_end',1}}] )) in let <Ps> = call 'lists':'reverse' (_8) in apply 'com_encoding'/1 (Ps)-|[{'function',{'com_enc_end',1}}] )
'com_encoding'/1 = (fun (_0) -> (case (_0-|[{'function',{'com_encoding',1}}] ) of <[[108|[97|[116|[105|[110]]]]]|[[49]|_2]]> when 'true' -> 'latin1'
<[[117|[116|[102]]]|[[56]|_3]]> when 'true' -> 'utf8'
<_4> when 'true' -> call 'erlang':'throw' ('no') end-|[{'function',{'com_encoding',1}}] )-|[{'function',{'com_encoding',1}}] )
'lowercase'/1 = (fun (_0) -> let <_1> = call 'string':'lowercase' ((_0-|[{'function',{'lowercase',1}}] )) in call 'unicode':'characters_to_list' (_1)-|[{'function',{'lowercase',1}}] )
'normalize_typed_record_fields'/1 = (fun (_0) -> (case (_0-|[{'function',{'normalize_typed_record_fields',1}}] ) of <[]> when 'true' -> {'typed',[]}
<Fields> when 'true' -> apply 'normalize_typed_record_fields'/3 (Fields,[],'false') end-|[{'function',{'normalize_typed_record_fields',1}}] )-|[{'function',{'normalize_typed_record_fields',1}}] )
'normalize_typed_record_fields'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <[],NewFields,Typed> when 'true' -> case Typed of <'true'> when 'true' -> let <_3> = call 'lists':'reverse' (NewFields) in {'typed',_3}
<'false'> when 'true' -> 'not_typed'
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<[{'typed_record_field',Field,_8}|Rest],NewFields,_X_Typed> when 'true' -> apply 'normalize_typed_record_fields'/3 (Rest,[Field|NewFields],'true')
<[Field|Rest],NewFields,Typed> when 'true' -> apply 'normalize_typed_record_fields'/3 (Rest,[Field|NewFields],Typed)
(<_7,_6,_5> when 'true' -> primop 'match_fail' ({'function_clause',_7,_6,_5})-|['compiler_generated'] ) end-|[{'function',{'normalize_typed_record_fields',3}}] )-|[{'function',{'normalize_typed_record_fields',3}}] )
'restore_typed_record_fields'/1 = (fun (_0) -> (case (_0-|[{'function',{'restore_typed_record_fields',1}}] ) of <[]> when 'true' -> []
<[{'attribute',La,'record',{Record,_X_NewFields}}|[{'attribute',_5,'type',{{'record',_6},Fields,[]}}|Forms]]> when let <_7> = call 'erlang':'=:=' (_5,La) in let <_8> = call 'erlang':'=:=' (_6,Record) in call 'erlang':'and' (_7,_8) -> let <_1> = apply 'restore_typed_record_fields'/1 (Forms) in [{'attribute',La,'record',{Record,Fields}}|_1]
<[{'attribute',La,'type',{{'record',Record},Fields,[]}}|Forms]> when 'true' -> let <_2> = apply 'restore_typed_record_fields'/1 (Forms) in [{'attribute',La,'record',{Record,Fields}}|_2]
<[Form|Forms]> when 'true' -> let <_3> = apply 'restore_typed_record_fields'/1 (Forms) in [Form|_3]
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'restore_typed_record_fields',1}}] )-|[{'function',{'restore_typed_record_fields',1}}] )
'server'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <Pid,Name,Options,St = {'epp',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,PreOpened,_24}> when 'true' -> do call 'erlang':'process_flag' ('trap_exit','true') case PreOpened of <'false'> when 'true' -> case call 'file':'open' (Name,['read']) of <{'ok',File}> when 'true' -> case St of <{'epp',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> let <_6> = call 'erlang':'setelement' (2,St,File) in apply 'init_server'/4 (Pid,Name,Options,_6)
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r0 = {'error',E}> when 'true' -> apply 'epp_reply'/2 (Pid,_@r0)
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<'true'> when 'true' -> apply 'init_server'/4 (Pid,Name,Options,St)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_12,_11,_10,_9> when 'true' -> primop 'match_fail' ({'function_clause',_12,_11,_10,_9})-|['compiler_generated'] ) end-|[{'function',{'server',4}}] )-|[{'function',{'server',4}}] )
'init_server'/4 = (fun (_0,_1,_2,_3) -> let <SourceName> = call 'proplists':'get_value' ('source_name',_2,_1) in let <Pdm> = call 'proplists':'get_value' ('macros',_2,[]) in let <Ms0> = apply 'predef_macros'/1 (_1) in case apply 'user_predef'/2 (Pdm,Ms0) of <{'ok',Ms1}> when 'true' -> case _3 of <{'epp',File,AtLocation,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> let <DefEncoding> = call 'proplists':'get_value' ('default_encoding',_2,'utf8') in let <Encoding> = apply 'set_encoding'/2 (File,DefEncoding) in let <_10> = call 'erlang':'self' () in do apply 'epp_reply'/2 (_0,{'ok',_10,Encoding}) let <_11> = call 'filename':'dirname' (_1) in let <_12> = call 'proplists':'get_value' ('includes',_2,[]) in let <Path> = [_11|_12] in case _3 of <{'epp',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}> when 'true' -> let <_15> = call 'erlang':'setelement' (12,_3,DefEncoding) in let <_16> = call 'erlang':'setelement' (10,_15,Ms1) in let <_17> = call 'erlang':'setelement' (9,_16,Path) in let <_18> = call 'erlang':'setelement' (6,_17,SourceName) in let <_19> = call 'erlang':'setelement' (5,_18,SourceName) in let <_21> = call 'erlang':'setelement' (4,_19,0) in let <From> = apply 'wait_request'/1 (_21) in let <Anno> = call 'erl_anno':'new' (AtLocation) in let <_25> = apply 'file_name'/1 (SourceName) in do apply 'enter_file_reply'/5 (From,_25,Anno,AtLocation,'code') apply 'wait_req_scan'/1 (_21)
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<_@r0 = {'error',E}> when 'true' -> apply 'epp_reply'/2 (_0,_@r0)
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end-|[{'function',{'init_server',4}}] )
'predef_macros'/1 = (fun (_0) -> let <_1> = call 'erlang':'system_info' ('machine') in let <Machine> = call 'erlang':'list_to_atom' (_1) in let <Anno> = apply 'line1'/0 () in let <_4> = call 'erlang':'system_info' ('otp_release') in let <OtpVersion> = call 'erlang':'list_to_integer' (_4) in let <Defs> = [{'FILE',{'none',[{'string',Anno,(_0-|[{'function',{'predef_macros',1}}] )}|[]]}}|[{'FUNCTION_NAME','undefined'}|[{'FUNCTION_ARITY','undefined'}|[{'LINE',{'none',[{'integer',Anno,1}|[]]}}|[{'MODULE','undefined'}|[{'MODULE_STRING','undefined'}|[{'BASE_MODULE','undefined'}|[{'BASE_MODULE_STRING','undefined'}|[{'MACHINE',{'none',[{'atom',Anno,Machine}|[]]}}|[{Machine,{'none',[{'atom',Anno,'true'}|[]]}}|[{'OTP_RELEASE',{'none',[{'integer',Anno,OtpVersion}|[]]}}|[]]]]]]]]]]]] in call 'maps':'from_list' (Defs)-|[{'function',{'predef_macros',1}}] )
'user_predef'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{M,Val,'redefine'}|Pdm],Ms> when call 'erlang':'is_atom' (M) -> let <_2> = call 'erl_parse':'abstract' (Val) in let <Exp> = call 'erl_parse':'tokens' (_2) in case <> of (<> when call 'erlang':'is_map' (Ms) -> let <_4> = ~{M=>{'none',Exp}|Ms}~ in apply 'user_predef'/2 (Pdm,_4)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Ms})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<[{M,Val}|Pdm],Ms> when call 'erlang':'is_atom' (M) -> case Ms of <~{M:=Defs}~> when call 'erlang':'is_list' (Defs) -> {'error',{'redefine',M}}
<~{M:=_X_Defs}~> when 'true' -> {'error',{'redefine_predef',M}}
<_11> when 'true' -> let <_5> = call 'erl_parse':'abstract' (Val) in let <Exp> = call 'erl_parse':'tokens' (_5) in case <> of (<> when call 'erlang':'is_map' (Ms) -> let <_7> = ~{M=>[{'none',{'none',Exp}}|[]]|Ms}~ in apply 'user_predef'/2 (Pdm,_7)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Ms})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end end
<[M|Pdm],Ms> when call 'erlang':'is_atom' (M) -> apply 'user_predef'/2 ([{M,'true'}|Pdm],Ms)
<[Md|_X_Pdm],_X_Ms> when 'true' -> {'error',{'bad',Md}}
<[],Ms> when 'true' -> {'ok',Ms}
(<_10,_9> when 'true' -> primop 'match_fail' ({'function_clause',_10,_9})-|['compiler_generated'] ) end-|[{'function',{'user_predef',2}}] )-|[{'function',{'user_predef',2}}] )
'wait_request'/1 = (fun (_0) -> (letrec 'recv$^1'/0 = fun () -> let <_28,_26> = primop 'recv_peek_message' () in case _28 of <'true'> when 'true' -> case _26 of <{'epp_request',From,'scan_erl_form'}> when 'true' -> do primop 'remove_message' () From
<{'epp_request',From,'macro_defs'}> when 'true' -> do primop 'remove_message' () let <_9> = letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[{K,V}|_2]> when 'true' -> let <_8> = apply 'lc$^0'/1 (_2) in ([{{'atom',K},V}|_8]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end in (case (_0-|[{'function',{'wait_request',1}}] ) of (<({'epp',_12,_13,_14,_15,_16,_17,_18,_19,_rec2,_20,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> let <_5> = call 'maps':'to_list' (_rec2) in apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in do apply 'epp_reply'/2 (From,_9) apply 'wait_request'/1 ((_0-|[{'function',{'wait_request',1}}] ))
<{'epp_request',From,'close'}> when 'true' -> do primop 'remove_message' () do apply 'close_file'/1 ((_0-|[{'function',{'wait_request',1}}] )) do apply 'epp_reply'/2 (From,'ok') call 'erlang':'exit' ('normal')
<{'EXIT',_25,R}> when 'true' -> do primop 'remove_message' () call 'erlang':'exit' (R)
<Other> when 'true' -> do primop 'remove_message' () do call 'io':'fwrite' ([69|[112|[112|[58|[32|[117|[110|[107|[110|[111|[119|[110|[32|[39|[126|[119|[39|[10]]]]]]]]]]]]]]]]]],[Other|[]]) apply 'wait_request'/1 ((_0-|[{'function',{'wait_request',1}}] )) end
(<'false'> when 'true' -> let <_27> = primop 'recv_wait_timeout' ('infinity') in case _27 of <'true'> when 'true' -> do primop 'timeout' () 'true'
(<'false'> when 'true' -> (apply 'recv$^1'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end-|['dialyzer_ignore'] ) end in (apply 'recv$^1'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] )-|[{'function',{'wait_request',1}}] )
'close_file'/1 = (fun (_0) -> (case (_0-|[{'function',{'close_file',1}}] ) of <{'epp',_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,'true',_14}> when 'true' -> 'ok'
<{'epp',File,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,'false',_25}> when 'true' -> let <_26> = call 'file':'close' (File) in case _26 of <'ok'> when 'true' -> (_26-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'close_file',1}}] )-|[{'function',{'close_file',1}}] )
'wait_req_scan'/1 = (fun (_0) -> let <From> = apply 'wait_request'/1 ((_0-|[{'function',{'wait_req_scan',1}}] )) in apply 'scan_toks'/2 (From,(_0-|[{'function',{'wait_req_scan',1}}] ))-|[{'function',{'wait_req_scan',1}}] )
'wait_req_skip'/2 = (fun (_0,_1) -> let <From> = apply 'wait_request'/1 (_0) in apply 'skip_toks'/3 (From,_0,_1)-|[{'function',{'wait_req_skip',2}}] )
'enter_file'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <_X_NewName,Inc,From,St = {'epp',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}> when (try let <_8> = call 'erlang':'element' (8,St) in let <_9> = call 'erlang':'length' (_8) in let <_10> = call 'erlang':'>=' (_9,8) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (('true'-|['compiler_generated'] ),_10)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_11> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101]]]]]]]}}}) apply 'wait_req_scan'/1 (St)
<NewName,Inc,From,St> when 'true' -> (case St of (<({'epp',_37,_38,_39,_40,_41,_42,_43,_rec3,_44,_45,_46,_47,_48}-|['compiler_generated'] )> when 'true' -> case call 'file':'path_open' (_rec3,NewName,['read']) of <{'ok',NewF,Pname}> when 'true' -> (case St of (<({'epp',_50,_rec4,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}-|['compiler_generated'] )> when 'true' -> let <Loc> = apply 'start_loc'/1 (_rec4) in let <_17> = apply 'enter_file2'/5 (NewF,Pname,From,St,Loc) in apply 'wait_req_scan'/1 (_17)-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'error',_X_E}> when 'true' -> let <_18> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_18,'epp',{'include','file',NewName}}}) apply 'wait_req_scan'/1 (St)
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|[{'function',{'enter_file',4}}] )-|[{'function',{'enter_file',4}}] )
'enter_file2'/5 = (fun (_0,_1,_2,_3,_4) -> let <Anno> = call 'erl_anno':'new' (_4) in do apply 'enter_file_reply'/5 (_2,_1,Anno,_4,'code') (case _3 of (<({'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec5,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> case <> of (<> when call 'erlang':'is_map' (_rec5) -> let <_9> = ~{'FILE':={'none',[{'string',Anno,_1}|[]]}|_rec5}~ in let <_11> = call 'filename':'dirname' (_1) in (case _3 of (<({'epp',_40,_41,_42,_43,_44,_45,_46,_rec6,_47,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> let <_14> = call 'erlang':'tl' (_rec6) in let <Path> = [_11|_14] in (case _3 of (<({'epp',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_rec7,_63,_64}-|['compiler_generated'] )> when 'true' -> do apply 'set_encoding'/2 (_0,_rec7) (case _3 of (<({'epp',_66,_67,_68,_69,_70,_71,_rec8,_72,_73,_74,_75,_76,_77}-|['compiler_generated'] )> when 'true' -> {'epp',_0,_4,0,_1,_1,[],[_3|_rec8],Path,_9,~{}~,_rec7,'false',[]}-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_rec5})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|[{'function',{'enter_file2',5}}] )
'enter_file_reply'/5 = (fun (_0,_1,_2,_3,_4) -> let <Anno0> = apply 'loc_anno'/1 (_3) in let <_7> = case _4 of <'code'> when 'true' -> Anno0
<'generated'> when 'true' -> call 'erl_anno':'set_generated' ('true',Anno0)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_9> = apply 'get_line'/1 (_2) in let <Rep> = {'ok',[{'-',_7}|[{'atom',_7,'file'}|[{'(',_7}|[{'string',_7,_1}|[{',',_7}|[{'integer',_7,_9}|[{')',_2}|[{'dot',_7}|[]]]]]]]]]} in apply 'epp_reply'/2 (_0,Rep)-|[{'function',{'enter_file_reply',5}}] )
'file_name'/1 = (fun (_0) -> (case (_0-|[{'function',{'file_name',1}}] ) of <[C|T]> when let <_1> = call 'erlang':'is_integer' (C) in let <_2> = call 'erlang':'>' (C,0) in call 'erlang':'and' (_1,_2) -> let <_3> = apply 'file_name'/1 (T) in [C|_3]
<[H|T]> when 'true' -> let <_5> = apply 'file_name'/1 (H) in let <_4> = apply 'file_name'/1 (T) in call 'erlang':'++' (_5,_4)
<[]> when 'true' -> []
<N> when call 'erlang':'is_atom' ((_0-|[{'function',{'file_name',1}}] )) -> call 'erlang':'atom_to_list' (N)
(<_6> when 'true' -> primop 'match_fail' ({'function_clause',_6})-|['compiler_generated'] ) end-|[{'function',{'file_name',1}}] )-|[{'function',{'file_name',1}}] )
'leave_file'/2 = (fun (_0,_1) -> (case _1 of (<({'epp',_38,_39,_40,_41,_42,_rec9,_43,_44,_45,_46,_47,_48,_49}-|['compiler_generated'] )> when 'true' -> case _rec9 of <[I|Cis]> when 'true' -> (case _1 of (<({'epp',_51,_rec10,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}-|['compiler_generated'] )> when 'true' -> do apply 'epp_reply'/2 (_0,{'error',{_rec10,'epp',{'illegal',[117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]],I}}}) let <_9> = apply 'wait_request'/1 (_1) in case _1 of <{'epp',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}> when 'true' -> let <_8> = call 'erlang':'setelement' (7,_1,Cis) in apply 'leave_file'/2 (_9,_8)
(<_77> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[]> when 'true' -> (case _1 of (<({'epp',_78,_79,_80,_81,_82,_83,_rec12,_84,_85,_86,_87,_88,_89}-|['compiler_generated'] )> when 'true' -> case _rec12 of <[OldSt|Sts]> when 'true' -> do apply 'close_file'/1 (_1) case OldSt of <{'epp',_91,OldLoc,Delta,OldName,OldName2,_92,_93,_94,_95,_96,_97,_98,_99}> when 'true' -> let <CurrLoc> = apply 'add_line'/2 (OldLoc,Delta) in let <Anno> = call 'erl_anno':'new' (CurrLoc) in (case _1 of (<({'epp',_100,_101,_102,_103,_104,_105,_106,_107,_rec13,_108,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> case <> of (<> when call 'erlang':'is_map' (_rec13) -> let <_18> = ~{'FILE':={'none',[{'string',Anno,OldName2}|[]]}|_rec13}~ in (case _1 of (<({'epp',_113,_114,_115,_116,_117,_118,_119,_120,_121,_rec16,_122,_123,_124}-|['compiler_generated'] )> when 'true' -> case OldSt of <{'epp',_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138}> when 'true' -> let <_24> = call 'erlang':'setelement' (11,OldSt,_rec16) in let <_25> = call 'erlang':'setelement' (10,_24,_18) in let <_27> = call 'erlang':'setelement' (8,_25,Sts) in do apply 'enter_file_reply'/5 (_0,OldName,Anno,CurrLoc,'code') do case call 'erlang':'=:=' (OldName2,OldName) of <'true'> when 'true' -> 'ok'
<'false'> when 'true' -> let <NFrom> = apply 'wait_request'/1 (_27) in let <OldAnno> = call 'erl_anno':'new' (OldLoc) in apply 'enter_file_reply'/5 (NFrom,OldName2,OldAnno,CurrLoc,'generated') end apply 'wait_req_scan'/1 (_27)
(<_139> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_125> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_rec13})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<[]> when 'true' -> (case _1 of (<({'epp',_140,_rec17,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}-|['compiler_generated'] )> when 'true' -> do apply 'epp_reply'/2 (_0,{'eof',_rec17}) apply 'wait_req_scan'/1 (_1)-|['compiler_generated'] )
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_34> when 'true' -> primop 'match_fail' ({'case_clause',_34})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_35> when 'true' -> primop 'match_fail' ({'case_clause',_35})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|[{'function',{'leave_file',2}}] )
'scan_toks'/2 = (fun (_0,_1) -> (case _1 of (<({'epp',_rec18,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'epp',_34,_rec19,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> case call 'io':'scan_erl_form' (_rec18,'',_rec19) of <{'ok',Toks,Cl}> when 'true' -> case _1 of <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' -> let <_8> = call 'erlang':'setelement' (3,_1,Cl) in apply 'scan_toks'/3 (Toks,_0,_8)
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',E,Cl}> when 'true' -> do apply 'epp_reply'/2 (_0,{'error',E}) case _1 of <{'epp',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' -> let <_11> = call 'erlang':'setelement' (3,_1,Cl) in apply 'wait_req_scan'/1 (_11)
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'eof',Cl}> when 'true' -> case _1 of <{'epp',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' -> let <_14> = call 'erlang':'setelement' (3,_1,Cl) in apply 'leave_file'/2 (_0,_14)
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',_X_E}> when 'true' -> (case _1 of (<({'epp',_89,_rec23,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> do apply 'epp_reply'/2 (_0,{'error',{_rec23,'epp','cannot_parse'}}) let <_17> = apply 'wait_request'/1 (_1) in apply 'leave_file'/2 (_17,_1)-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|[{'function',{'scan_toks',2}}] )
'scan_toks'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <[{'-',_X_Lh}|[Define = {'atom',_X_Ld,'define'}|Toks]],From,St> when 'true' -> apply 'scan_define'/4 (Toks,Define,From,St)
<[{'-',_X_Lh}|[Undef = {'atom',_X_Ld,'undef'}|Toks]],From,St> when 'true' -> apply 'scan_undef'/4 (Toks,Undef,From,St)
<[{'-',_X_Lh}|[Error = {'atom',_X_Ld,'error'}|Toks]],From,St> when 'true' -> apply 'scan_err_warn'/4 (Toks,Error,From,St)
<[{'-',_X_Lh}|[Warn = {'atom',_X_Ld,'warning'}|Toks]],From,St> when 'true' -> apply 'scan_err_warn'/4 (Toks,Warn,From,St)
<[{'-',_X_Lh}|[Inc = {'atom',_X_Li,'include'}|Toks]],From,St> when 'true' -> apply 'scan_include'/4 (Toks,Inc,From,St)
<[{'-',_X_Lh}|[IncLib = {'atom',_X_Li,'include_lib'}|Toks]],From,St> when 'true' -> apply 'scan_include_lib'/4 (Toks,IncLib,From,St)
<[{'-',_X_Lh}|[IfDef = {'atom',_X_Li,'ifdef'}|Toks]],From,St> when 'true' -> apply 'scan_ifdef'/4 (Toks,IfDef,From,St)
<[{'-',_X_Lh}|[IfnDef = {'atom',_X_Li,'ifndef'}|Toks]],From,St> when 'true' -> apply 'scan_ifndef'/4 (Toks,IfnDef,From,St)
<[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|Toks]],From,St> when 'true' -> apply 'scan_else'/4 (Toks,Else,From,St)
<[{'-',_X_Lh}|[If = {'if',_X_Le}|Toks]],From,St> when 'true' -> apply 'scan_if'/4 (Toks,If,From,St)
<[{'-',_X_Lh}|[Elif = {'atom',_X_Le,'elif'}|Toks]],From,St> when 'true' -> apply 'scan_elif'/4 (Toks,Elif,From,St)
<[{'-',_X_Lh}|[Endif = {'atom',_X_Le,'endif'}|Toks]],From,St> when 'true' -> apply 'scan_endif'/4 (Toks,Endif,From,St)
<[{'-',_X_Lh}|[FileToken = {'atom',_X_Lf,'file'}|Toks0]],From,St> when 'true' -> let <_3> = catch apply 'expand_macros'/2 (Toks0,St) in case _3 of <Toks1> when call 'erlang':'is_list' (_3) -> apply 'scan_file'/4 (Toks1,FileToken,From,St)
<{'error',ErrL,What}> when 'true' -> do apply 'epp_reply'/2 (From,{'error',{ErrL,'epp',What}}) apply 'wait_req_scan'/1 (St)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<Toks0,From,St> when 'true' -> let <_8> = catch case St of <{'epp',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' -> let <_7> = call 'erlang':'setelement' (14,St,Toks0) in apply 'expand_macros'/2 (Toks0,_7)
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _8 of <Toks1> when call 'erlang':'is_list' (_8) -> do apply 'epp_reply'/2 (From,{'ok',Toks1}) (case St of (<({'epp',_33,_34,_35,_36,_37,_38,_39,_40,_rec27,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> let <_rec25> = apply 'scan_module'/2 (Toks1,_rec27) in case St of <{'epp',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' -> let <_14> = call 'erlang':'setelement' (10,St,_rec25) in apply 'wait_req_scan'/1 (_14)
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'error',ErrL,What}> when 'true' -> do apply 'epp_reply'/2 (From,{'error',{ErrL,'epp',What}}) apply 'wait_req_scan'/1 (St)
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end end-|[{'function',{'scan_toks',3}}] )-|[{'function',{'scan_toks',3}}] )
'scan_module'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{'-',_X_Lh}|[{'atom',_X_Lm,'module'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' -> apply 'scan_module_1'/2 (Ts,Ms)
<[{'-',_X_Lh}|[{'atom',_X_Lm,'extends'}|[{'(',_X_Ll}|Ts]]],Ms> when 'true' -> apply 'scan_extends'/2 (Ts,Ms)
<_X_Ts,Ms> when 'true' -> Ms end-|[{'function',{'scan_module',2}}] )-|[{'function',{'scan_module',2}}] )
'scan_module_1'/2 = (fun (_0,_1) -> (case <_0,_1> of <[A = {'atom',_7,_8}|[{',',L}|Ts]],Ms> when 'true' -> apply 'scan_module_1'/2 ([A|[{')',L}|Ts]],Ms)
<[ModAtom = {'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],Ms0> when 'true' -> let <ModString> = call 'erlang':'atom_to_list' (A) in case <> of (<> when call 'erlang':'is_map' (Ms0) -> let <_3> = ~{'MODULE':={'none',[ModAtom|[]]}|Ms0}~ in case <> of (<> when call 'erlang':'is_map' (_3) -> ~{'MODULE_STRING':={'none',[{'string',Ln,ModString}|[]]}|_3}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_3})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Ms0})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<_X_Ts,Ms> when 'true' -> Ms end-|[{'function',{'scan_module_1',2}}] )-|[{'function',{'scan_module_1',2}}] )
'scan_extends'/2 = (fun (_0,_1) -> (case <_0,_1> of <[ModAtom = {'atom',Ln,A}|[{')',_X_Lr}|_X_Ts]],Ms0> when 'true' -> let <ModString> = call 'erlang':'atom_to_list' (A) in case <> of (<> when call 'erlang':'is_map' (Ms0) -> let <_3> = ~{'BASE_MODULE':={'none',[ModAtom|[]]}|Ms0}~ in case <> of (<> when call 'erlang':'is_map' (_3) -> ~{'BASE_MODULE_STRING':={'none',[{'string',Ln,ModString}|[]]}|_3}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_3})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Ms0})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<_X_Ts,Ms> when 'true' -> Ms end-|[{'function',{'scan_extends',2}}] )-|[{'function',{'scan_extends',2}}] )
'scan_err_warn'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <Toks0 = [{'(',_18}|_19],Token = {'atom',_20,Tag},From,St> when 'true' -> do try apply 'expand_macros'/2 (Toks0,St) of <_4> -> case _4 of <Toks> when call 'erlang':'is_list' (_4) -> case call 'erl_parse':'parse_term' (Toks) of <{'ok',Term}> when 'true' -> let <_5> = apply 'loc'/1 (Token) in apply 'epp_reply'/2 (From,{Tag,{_5,'epp',{Tag,Term}}})
<{'error',_21}> when 'true' -> let <_6> = apply 'loc'/1 (Token) in apply 'epp_reply'/2 (From,{'error',{_6,'epp',{'bad',Tag}}})
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'try_clause',_8})-|['compiler_generated'] ) end catch <_11,_10,_9> -> let <_12> = apply 'loc'/1 (Token) in apply 'epp_reply'/2 (From,{'error',{_12,'epp',{'bad',Tag}}}) apply 'wait_req_scan'/1 (St)
<_X_Toks,Token = {'atom',_25,Tag},From,St> when 'true' -> let <_13> = apply 'loc'/1 (Token) in do apply 'epp_reply'/2 (From,{'error',{_13,'epp',{'bad',Tag}}}) apply 'wait_req_scan'/1 (St)
(<_17,_16,_15,_14> when 'true' -> primop 'match_fail' ({'function_clause',_17,_16,_15,_14})-|['compiler_generated'] ) end-|[{'function',{'scan_err_warn',4}}] )-|[{'function',{'scan_err_warn',4}}] )
'scan_define'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Lp}|[Mac = {Type,_X_Lm,_11}|Toks]],Def,From,St> when let <_4> = call 'erlang':'=:=' (Type,'atom') in let <_5> = call 'erlang':'=:=' (Type,'var') in call 'erlang':'or' (_4,_5) -> apply 'scan_define_1'/5 (Toks,Mac,Def,From,St)
<_X_Toks,Def,From,St> when 'true' -> let <_6> = apply 'loc'/1 (Def) in do apply 'epp_reply'/2 (From,{'error',{_6,'epp',{'bad','define'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_define',4}}] )-|[{'function',{'scan_define',4}}] )
'scan_define_1'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <[Comma = {',',_17}|Toks],Mac,_X_Def,From,St> when 'true' -> let <_5> = catch apply 'macro_expansion'/2 (Toks,Comma) in case _5 of <Expansion> when call 'erlang':'is_list' (_5) -> apply 'scan_define_2'/5 ('none',{'none',Expansion},Mac,From,St)
<{'error',ErrL,What}> when 'true' -> do apply 'epp_reply'/2 (From,{'error',{ErrL,'epp',What}}) apply 'wait_req_scan'/1 (St)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<[{'(',_X_Lc}|Toks],Mac,Def,From,St> when 'true' -> let <_7> = catch apply 'macro_pars'/2 (Toks,[]) in case _7 of <{'ok',MacroDef = {As,_18}}> when 'true' -> let <Len> = call 'erlang':'length' (As) in apply 'scan_define_2'/5 (Len,MacroDef,Mac,From,St)
<{'error',ErrL,What}> when 'true' -> do apply 'epp_reply'/2 (From,{'error',{ErrL,'epp',What}}) apply 'wait_req_scan'/1 (St)
<_19> when 'true' -> let <_9> = apply 'loc'/1 (Def) in do apply 'epp_reply'/2 (From,{'error',{_9,'epp',{'bad','define'}}}) apply 'wait_req_scan'/1 (St) end
<_X_Toks,_X_Mac,Def,From,St> when 'true' -> let <_11> = apply 'loc'/1 (Def) in do apply 'epp_reply'/2 (From,{'error',{_11,'epp',{'bad','define'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_define_1',5}}] )-|[{'function',{'scan_define_1',5}}] )
'scan_define_2'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <Arity,Def,Mac = {_14,_15,Key},From,St = {'epp',_16,_17,_18,_19,_20,_21,_22,_23,Ms,_24,_25,_26,_27}> when 'true' -> case Ms of <~{Key:=Defs}~> when call 'erlang':'is_list' (Defs) -> case call 'proplists':'is_defined' (Arity,Defs) of <'true'> when 'true' -> let <_5> = apply 'loc'/1 (Mac) in do apply 'epp_reply'/2 (From,{'error',{_5,'epp',{'redefine',Key}}}) apply 'wait_req_scan'/1 (St)
<'false'> when 'true' -> apply 'scan_define_cont'/6 (From,St,Key,Defs,Arity,Def)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<~{Key:=_28}~> when 'true' -> let <_7> = apply 'loc'/1 (Mac) in do apply 'epp_reply'/2 (From,{'error',{_7,'epp',{'redefine_predef',Key}}}) apply 'wait_req_scan'/1 (St)
<_29> when 'true' -> apply 'scan_define_cont'/6 (From,St,Key,[],Arity,Def) end
(<_13,_12,_11,_10,_9> when 'true' -> primop 'match_fail' ({'function_clause',_13,_12,_11,_10,_9})-|['compiler_generated'] ) end-|[{'function',{'scan_define_2',5}}] )-|[{'function',{'scan_define_2',5}}] )
'scan_define_cont'/6 = (fun (_0,_1,_2,_3,_4,_5) -> (case <_0,_1,_2,_3,_4,_5> of <F,St = {'epp',_31,_32,_33,_34,_35,_36,_37,_38,Ms0,_39,_40,_41,_42},M,Defs,Arity,Def> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Ms0) -> let <_6> = ~{M=>[{Arity,Def}|Defs]|Ms0}~ in try apply 'macro_uses'/1 (Def) of <_8> -> (case St of (<({'epp',_43,_44,_45,_46,_47,_48,_49,_50,_51,_rec28,_52,_53,_54}-|['compiler_generated'] )> when 'true' -> let <_13> = case _rec28 of <~{M:=UseList}~> when 'true' -> UseList
<_56> when 'true' -> [] end in let <Val> = [{Arity,_8}|_13] in case <> of (<> when call 'erlang':'is_map' (_rec28) -> let <_15> = ~{M=>Val|_rec28}~ in case St of <{'epp',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' -> let <_18> = call 'erlang':'setelement' (11,St,_15) in let <_20> = call 'erlang':'setelement' (10,_18,_6) in apply 'scan_toks'/2 (F,_20)
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_rec28})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) catch <_24,_23,_22> -> case <_24,_23,_22> of <('throw'-|['compiler_generated'] ),({('error'-|['compiler_generated'] ),Line,Reason}-|['compiler_generated'] ),_71> when 'true' -> do apply 'epp_reply'/2 (F,{'error',{Line,'epp',Reason}}) apply 'wait_req_scan'/1 (St)
(<_73,_74,_75> when 'true' -> primop 'raise' (_75,_74)-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Ms0})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_30,_29,_28,_27,_26,_25> when 'true' -> primop 'match_fail' ({'function_clause',_30,_29,_28,_27,_26,_25})-|['compiler_generated'] ) end-|[{'function',{'scan_define_cont',6}}] )-|[{'function',{'scan_define_cont',6}}] )
'macro_uses'/1 = (fun (_0) -> (case (_0-|[{'function',{'macro_uses',1}}] ) of <{_X_Args,Tokens}> when 'true' -> let <Uses0> = apply 'macro_ref'/1 (Tokens) in call 'lists':'usort' (Uses0)
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'macro_uses',1}}] )-|[{'function',{'macro_uses',1}}] )
'macro_ref'/1 = (fun (_0) -> (case (_0-|[{'function',{'macro_ref',1}}] ) of <[]> when 'true' -> []
<[{'?',_8}|[{'?',_9}|Rest]]> when 'true' -> apply 'macro_ref'/1 (Rest)
<[{'?',_10}|[Atom = {'atom',_11,A}|Rest]]> when 'true' -> let <Lm> = apply 'loc'/1 (Atom) in let <Arity> = apply 'count_args'/3 (Rest,Lm,A) in let <_3> = apply 'macro_ref'/1 (Rest) in [{A,Arity}|_3]
<[{'?',_12}|[Var = {'var',_13,A}|Rest]]> when 'true' -> let <Lm> = apply 'loc'/1 (Var) in let <Arity> = apply 'count_args'/3 (Rest,Lm,A) in let <_6> = apply 'macro_ref'/1 (Rest) in [{A,Arity}|_6]
<[_X_Token|Rest]> when 'true' -> apply 'macro_ref'/1 (Rest)
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end-|[{'function',{'macro_ref',1}}] )-|[{'function',{'macro_ref',1}}] )
'scan_undef'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' -> (case St of (<({'epp',_29,_30,_31,_32,_33,_34,_35,_36,_rec30,_37,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> let <Macs> = call 'maps':'remove' (M,_rec30) in (case St of (<({'epp',_42,_43,_44,_45,_46,_47,_48,_49,_50,_rec31,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> let <Uses> = call 'maps':'remove' (M,_rec31) in case St of <{'epp',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' -> let <_11> = call 'erlang':'setelement' (11,St,Uses) in let <_13> = call 'erlang':'setelement' (10,_11,Macs) in apply 'scan_toks'/2 (From,_13)
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_Undef,From,St> when 'true' -> (case St of (<({'epp',_69,_70,_71,_72,_73,_74,_75,_76,_rec33,_77,_78,_79,_80}-|['compiler_generated'] )> when 'true' -> let <Macs> = call 'maps':'remove' (M,_rec33) in (case St of (<({'epp',_82,_83,_84,_85,_86,_87,_88,_89,_90,_rec34,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> let <Uses> = call 'maps':'remove' (M,_rec34) in case St of <{'epp',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' -> let <_21> = call 'erlang':'setelement' (11,St,Uses) in let <_23> = call 'erlang':'setelement' (10,_21,Macs) in apply 'scan_toks'/2 (From,_23)
(<_108> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,Undef,From,St> when 'true' -> let <_24> = apply 'loc'/1 (Undef) in do apply 'epp_reply'/2 (From,{'error',{_24,'epp',{'bad','undef'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_undef',4}}] )-|[{'function',{'scan_undef',4}}] )
'scan_include'/4 = (fun (_0,_1,_2,_3) -> let <Tokens> = apply 'coalesce_strings'/1 (_0) in apply 'scan_include1'/4 (Tokens,_1,_2,_3)-|[{'function',{'scan_include',4}}] )
'scan_include1'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],Inc,From,St> when 'true' -> let <NewName> = apply 'expand_var'/1 (NewName0) in apply 'enter_file'/4 (NewName,Inc,From,St)
<_X_Toks,Inc,From,St> when 'true' -> let <_5> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_5,'epp',{'bad','include'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_include1',4}}] )-|[{'function',{'scan_include1',4}}] )
'expand_lib_dir'/1 = (fun (_0) -> try case call 'filename':'split' ((_0-|[{'function',{'expand_lib_dir',1}}] )) of <[App|Path]> when 'true' -> let <_2> = call 'erlang':'list_to_atom' (App) in let <LibDir> = call 'code':'lib_dir' (_2) in let <_4> = apply 'fname_join'/1 ([LibDir|Path]) in {'ok',_4}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end of <_5> -> _5 catch <_8,_7,_6> -> 'error'-|[{'function',{'expand_lib_dir',1}}] )
'scan_include_lib'/4 = (fun (_0,_1,_2,_3) -> let <Tokens> = apply 'coalesce_strings'/1 (_0) in apply 'scan_include_lib1'/4 (Tokens,_1,_2,_3)-|[{'function',{'scan_include_lib',4}}] )
'scan_include_lib1'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'string',_X_Lf,_X_NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],Inc,From,St = {'epp',_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}> when (try let <_8> = call 'erlang':'element' (8,St) in let <_9> = call 'erlang':'length' (_8) in let <_10> = call 'erlang':'>=' (_9,8) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (('true'-|['compiler_generated'] ),_10)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_11> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_11,'epp',{'depth',[105|[110|[99|[108|[117|[100|[101|[95|[108|[105|[98]]]]]]]]]]]}}}) apply 'wait_req_scan'/1 (St)
<[{'(',_X_Llp}|[{'string',_X_Lf,NewName0}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],Inc,From,St> when 'true' -> let <NewName> = apply 'expand_var'/1 (NewName0) in (case St of (<({'epp',_43,_rec36,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}-|['compiler_generated'] )> when 'true' -> let <Loc> = apply 'start_loc'/1 (_rec36) in (case St of (<({'epp',_56,_57,_58,_59,_60,_61,_62,_rec37,_63,_64,_65,_66,_67}-|['compiler_generated'] )> when 'true' -> case call 'file':'path_open' (_rec37,NewName,['read']) of <{'ok',NewF,Pname}> when 'true' -> let <_18> = apply 'enter_file2'/5 (NewF,Pname,From,St,Loc) in apply 'wait_req_scan'/1 (_18)
<{'error',_X_E1}> when 'true' -> case apply 'expand_lib_dir'/1 (NewName) of <{'ok',Header}> when 'true' -> case call 'file':'open' (Header,['read']) of <{'ok',NewF}> when 'true' -> let <_19> = apply 'enter_file2'/5 (NewF,Header,From,St,Loc) in apply 'wait_req_scan'/1 (_19)
<{'error',_X_E2}> when 'true' -> let <_20> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_20,'epp',{'include','lib',NewName}}}) apply 'wait_req_scan'/1 (St)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<'error'> when 'true' -> let <_22> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_22,'epp',{'include','lib',NewName}}}) apply 'wait_req_scan'/1 (St)
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,Inc,From,St> when 'true' -> let <_25> = apply 'loc'/1 (Inc) in do apply 'epp_reply'/2 (From,{'error',{_25,'epp',{'bad','include_lib'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_include_lib1',4}}] )-|[{'function',{'scan_include_lib1',4}}] )
'scan_ifdef'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' -> (case St of (<({'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec38,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> case _rec38 of <~{M:=_X_Def}~> when 'true' -> (case St of (<({'epp',_40,_41,_42,_43,_44,_rec41,_45,_46,_47,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> let <_rec39> = ['ifdef'|_rec41] in case St of <{'epp',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' -> let <_11> = call 'erlang':'setelement' (7,St,_rec39) in apply 'scan_toks'/2 (From,_11)
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_67> when 'true' -> apply 'skip_toks'/3 (From,St,['ifdef']) end-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfD,From,St> when 'true' -> (case St of (<({'epp',_68,_69,_70,_71,_72,_73,_74,_75,_rec42,_76,_77,_78,_79}-|['compiler_generated'] )> when 'true' -> case _rec42 of <~{M:=_X_Def}~> when 'true' -> (case St of (<({'epp',_81,_82,_83,_84,_85,_rec45,_86,_87,_88,_89,_90,_91,_92}-|['compiler_generated'] )> when 'true' -> let <_rec43> = ['ifdef'|_rec45] in case St of <{'epp',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106}> when 'true' -> let <_20> = call 'erlang':'setelement' (7,St,_rec43) in apply 'scan_toks'/2 (From,_20)
(<_107> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_93> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_108> when 'true' -> apply 'skip_toks'/3 (From,St,['ifdef']) end-|['compiler_generated'] )
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,IfDef,From,St> when 'true' -> let <_22> = apply 'loc'/1 (IfDef) in do apply 'epp_reply'/2 (From,{'error',{_22,'epp',{'bad','ifdef'}}}) apply 'wait_req_skip'/2 (St,['ifdef']) end-|[{'function',{'scan_ifdef',4}}] )-|[{'function',{'scan_ifdef',4}}] )
'scan_ifndef'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'atom',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' -> (case St of (<({'epp',_27,_28,_29,_30,_31,_32,_33,_34,_rec46,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> case _rec46 of <~{M:=_X_Def}~> when 'true' -> apply 'skip_toks'/3 (From,St,['ifndef'])
<_40> when 'true' -> (case St of (<({'epp',_41,_42,_43,_44,_45,_rec49,_46,_47,_48,_49,_50,_51,_52}-|['compiler_generated'] )> when 'true' -> let <_rec47> = ['ifndef'|_rec49] in case St of <{'epp',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}> when 'true' -> let <_11> = call 'erlang':'setelement' (7,St,_rec47) in apply 'scan_toks'/2 (From,_11)
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[{'(',_X_Llp}|[{'var',_X_Lm,M}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]],_X_IfnD,From,St> when 'true' -> (case St of (<({'epp',_68,_69,_70,_71,_72,_73,_74,_75,_rec50,_76,_77,_78,_79}-|['compiler_generated'] )> when 'true' -> case _rec50 of <~{M:=_X_Def}~> when 'true' -> apply 'skip_toks'/3 (From,St,['ifndef'])
<_81> when 'true' -> (case St of (<({'epp',_82,_83,_84,_85,_86,_rec53,_87,_88,_89,_90,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> let <_rec51> = ['ifndef'|_rec53] in case St of <{'epp',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' -> let <_20> = call 'erlang':'setelement' (7,St,_rec51) in apply 'scan_toks'/2 (From,_20)
(<_108> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,IfnDef,From,St> when 'true' -> let <_22> = apply 'loc'/1 (IfnDef) in do apply 'epp_reply'/2 (From,{'error',{_22,'epp',{'bad','ifndef'}}}) apply 'wait_req_skip'/2 (St,['ifndef']) end-|[{'function',{'scan_ifndef',4}}] )-|[{'function',{'scan_ifndef',4}}] )
'scan_else'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'dot',_X_Ld}|[]],Else,From,St> when 'true' -> (case St of (<({'epp',_20,_21,_22,_23,_24,_rec54,_25,_26,_27,_28,_29,_30,_31}-|['compiler_generated'] )> when 'true' -> case _rec54 of <['else'|Cis]> when 'true' -> let <_6> = apply 'loc'/1 (Else) in do apply 'epp_reply'/2 (From,{'error',{_6,'epp',{'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}}) case St of <{'epp',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' -> let <_9> = call 'erlang':'setelement' (7,St,Cis) in apply 'wait_req_skip'/2 (_9,['else'])
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[_X_I|Cis]> when 'true' -> case St of <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' -> let <_12> = call 'erlang':'setelement' (7,St,Cis) in apply 'skip_toks'/3 (From,_12,['else'])
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[]> when 'true' -> let <_13> = apply 'loc'/1 (Else) in do apply 'epp_reply'/2 (From,{'error',{_13,'epp',{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'else'}}}) apply 'wait_req_scan'/1 (St)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,Else,From,St> when 'true' -> let <_15> = apply 'loc'/1 (Else) in do apply 'epp_reply'/2 (From,{'error',{_15,'epp',{'bad','else'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_else',4}}] )-|[{'function',{'scan_else',4}}] )
'scan_if'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <Toks = [{'(',_24}|_25],If,From,St> when 'true' -> try apply 'eval_if'/2 (Toks,St) of <_4> -> case _4 of <'true'> when 'true' -> (case St of (<({'epp',_26,_27,_28,_29,_30,_rec59,_31,_32,_33,_34,_35,_36,_37}-|['compiler_generated'] )> when 'true' -> let <_rec57> = ['if'|_rec59] in case St of <{'epp',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' -> let <_10> = call 'erlang':'setelement' (7,St,_rec57) in apply 'scan_toks'/2 (From,_10)
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_53> when 'true' -> apply 'skip_toks'/3 (From,St,['if']) end catch <_14,_13,_12> -> case <_14,_13,_12> of <('throw'-|['compiler_generated'] ),Error0,_54> when 'true' -> let <_17> = case Error0 of <{_55,'erl_parse',_56}> when 'true' -> {'error',Error0}
<_57> when 'true' -> let <_15> = apply 'loc'/1 (If) in {'error',{_15,'epp',Error0}} end in do apply 'epp_reply'/2 (From,_17) apply 'wait_req_skip'/2 (St,['if'])
(<_58,_59,_60> when 'true' -> primop 'raise' (_60,_59)-|['compiler_generated'] ) end
<_X_Toks,If,From,St> when 'true' -> let <_19> = apply 'loc'/1 (If) in do apply 'epp_reply'/2 (From,{'error',{_19,'epp',{'bad','if'}}}) apply 'wait_req_skip'/2 (St,['if']) end-|[{'function',{'scan_if',4}}] )-|[{'function',{'scan_if',4}}] )
'eval_if'/2 = (fun (_0,_1) -> let <Toks> = apply 'expand_macros'/2 (_0,_1) in case call 'erl_parse':'parse_exprs' (Toks) of <{'ok',Es0}> when 'true' -> let <Es> = apply 'rewrite_expr'/2 (Es0,_1) in do apply 'assert_guard_expr'/1 (Es) let <Bs> = call 'erl_eval':'new_bindings' () in let <LocalFun> = fun (_9,_8) -> call 'erlang':'error' ('badarg') in try call 'erl_eval':'exprs' (Es,Bs,{'value',LocalFun}) of <_13> -> case _13 of <{'value',Res,_20}> when 'true' -> Res
(<_14> when 'true' -> primop 'match_fail' ({'try_clause',_14})-|['compiler_generated'] ) end catch <_17,_16,_15> -> 'false'
<{'error',E}> when 'true' -> call 'erlang':'throw' (E)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end-|[{'function',{'eval_if',2}}] )
'assert_guard_expr'/1 = (fun (_0) -> (case (_0-|[{'function',{'assert_guard_expr',1}}] ) of <[E0|[]]> when 'true' -> let <E> = apply 'rewrite_expr'/2 (E0,'none') in case call 'erl_lint':'is_guard_expr' (E) of <'false'> when 'true' -> call 'erlang':'throw' ({'bad','if'})
<'true'> when 'true' -> 'ok'
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<_4> when 'true' -> call 'erlang':'throw' ({'bad','if'}) end-|[{'function',{'assert_guard_expr',1}}] )-|[{'function',{'assert_guard_expr',1}}] )
'rewrite_expr'/2 = (fun (_0,_1) -> (case <_0,_1> of <{'call',_19,{'atom',_20,'defined'},[N0|[]]},{'epp',_21,_22,_23,_24,_25,_26,_27,_28,Macs,_29,_30,_31,_32}> when 'true' -> let <_3> = case N0 of <{'var',_33,N1}> when 'true' -> N1
<{'atom',_34,N1}> when 'true' -> N1
<_35> when 'true' -> call 'erlang':'throw' ({'bad','if'}) end in let <_5> = call 'erlang':'is_map_key' (_3,Macs) in {'atom',0,_5}
<{'call',_36,{'atom',_37,Name},As0},'none'> when 'true' -> let <As> = apply 'rewrite_expr'/2 (As0,'none') in let <Arity> = call 'erlang':'length' (As) in let <_11> = case call 'erl_internal':'bif' (Name,Arity) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_9> = call 'erl_internal':'guard_bif' (Name,Arity) in call 'erlang':'not' (_9)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_8}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _11 of <'false'> when 'true' -> apply 'to_conses'/1 (As)
<'true'> when 'true' -> call 'erlang':'throw' ({'bad','if'})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<[H|T],St> when 'true' -> let <_13> = apply 'rewrite_expr'/2 (H,St) in let <_14> = apply 'rewrite_expr'/2 (T,St) in [_13|_14]
<Tuple,St> when call 'erlang':'is_tuple' (Tuple) -> let <_15> = call 'erlang':'tuple_to_list' (Tuple) in let <_16> = apply 'rewrite_expr'/2 (_15,St) in call 'erlang':'list_to_tuple' (_16)
<Other,_38> when 'true' -> Other end-|[{'function',{'rewrite_expr',2}}] )-|[{'function',{'rewrite_expr',2}}] )
'to_conses'/1 = (fun (_0) -> (case (_0-|[{'function',{'to_conses',1}}] ) of <[H|T]> when 'true' -> let <_1> = apply 'to_conses'/1 (T) in {'cons',0,H,_1}
<[]> when 'true' -> {'nil',0}
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'to_conses',1}}] )-|[{'function',{'to_conses',1}}] )
'scan_elif'/4 = (fun (_0,_1,_2,_3) -> (case _3 of (<({'epp',_19,_20,_21,_22,_23,_rec60,_24,_25,_26,_27,_28,_29,_30}-|['compiler_generated'] )> when 'true' -> case _rec60 of <['else'|Cis]> when 'true' -> let <_6> = apply 'loc'/1 (_1) in do apply 'epp_reply'/2 (_2,{'error',{_6,'epp',{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'elif'}}}) case _3 of <{'epp',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}> when 'true' -> let <_9> = call 'erlang':'setelement' (7,_3,Cis) in apply 'wait_req_skip'/2 (_9,['else'])
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[_X_I|Cis]> when 'true' -> case _3 of <{'epp',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' -> let <_12> = call 'erlang':'setelement' (7,_3,Cis) in apply 'skip_toks'/3 (_2,_12,['elif'])
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[]> when 'true' -> let <_13> = apply 'loc'/1 (_1) in do apply 'epp_reply'/2 (_2,{'error',{_13,'epp',{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'elif'}}}) apply 'wait_req_scan'/1 (_3)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|[{'function',{'scan_elif',4}}] )
'scan_endif'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'dot',_X_Ld}|[]],Endif,From,St> when 'true' -> (case St of (<({'epp',_16,_17,_18,_19,_20,_rec63,_21,_22,_23,_24,_25,_26,_27}-|['compiler_generated'] )> when 'true' -> case _rec63 of <[_X_I|Cis]> when 'true' -> case St of <{'epp',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> let <_8> = call 'erlang':'setelement' (7,St,Cis) in apply 'scan_toks'/2 (From,_8)
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[]> when 'true' -> let <_9> = apply 'loc'/1 (Endif) in do apply 'epp_reply'/2 (From,{'error',{_9,'epp',{'illegal',[117|[110|[98|[97|[108|[97|[110|[99|[101|[100]]]]]]]]]],'endif'}}}) apply 'wait_req_scan'/1 (St)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,Endif,From,St> when 'true' -> let <_11> = apply 'loc'/1 (Endif) in do apply 'epp_reply'/2 (From,{'error',{_11,'epp',{'bad','endif'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_endif',4}}] )-|[{'function',{'scan_endif',4}}] )
'scan_file'/4 = (fun (_0,_1,_2,_3) -> let <Tokens> = apply 'coalesce_strings'/1 (_0) in apply 'scan_file1'/4 (Tokens,_1,_2,_3)-|[{'function',{'scan_file',4}}] )
'scan_file1'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'(',_X_Llp}|[{'string',_X_Ls,Name}|[{',',_X_Lc}|[{'integer',_X_Li,Ln}|[{')',_X_Lrp}|[{'dot',_X_Ld}|[]]]]]]],Tf,From,St> when 'true' -> let <Anno> = call 'erl_anno':'new' (Ln) in let <_5> = apply 'loc'/1 (Tf) in do apply 'enter_file_reply'/5 (From,Name,Anno,_5,'generated') (case St of (<({'epp',_33,_34,_35,_36,_37,_38,_39,_40,_rec65,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> let <_9> = apply 'line1'/0 () in case <> of (<> when call 'erlang':'is_map' (_rec65) -> let <_10> = ~{'FILE':={'none',[{'string',_9,Name}|[]]}|_rec65}~ in let <Locf> = apply 'loc'/1 (Tf) in (case St of (<({'epp',_46,_rec66,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> let <NewLoc> = apply 'new_location'/3 (Ln,_rec66,Locf) in let <_18> = call 'erlang':'element' (2,Tf) in let <_19> = apply 'get_line'/1 (_18) in let <_20> = call 'erlang':'-' (_19,Ln) in (case St of (<({'epp',_59,_60,_rec67,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}-|['compiler_generated'] )> when 'true' -> let <Delta> = call 'erlang':'+' (_20,_rec67) in case St of <{'epp',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' -> let <_23> = call 'erlang':'setelement' (10,St,_10) in let <_24> = call 'erlang':'setelement' (6,_23,Name) in let <_25> = call 'erlang':'setelement' (4,_24,Delta) in let <_27> = call 'erlang':'setelement' (3,_25,NewLoc) in apply 'wait_req_scan'/1 (_27)
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_rec65})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Toks,Tf,From,St> when 'true' -> let <_28> = apply 'loc'/1 (Tf) in do apply 'epp_reply'/2 (From,{'error',{_28,'epp',{'bad','file'}}}) apply 'wait_req_scan'/1 (St) end-|[{'function',{'scan_file1',4}}] )-|[{'function',{'scan_file1',4}}] )
'new_location'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Ln,Le,Lf> when call 'erlang':'is_integer' (Lf) -> let <_3> = call 'erlang':'-' (Le,Lf) in call 'erlang':'+' (Ln,_3)
<Ln,{Le,_9},{Lf,_10}> when 'true' -> let <_4> = call 'erlang':'-' (Le,Lf) in let <_5> = call 'erlang':'+' (Ln,_4) in {_5,1}
(<_8,_7,_6> when 'true' -> primop 'match_fail' ({'function_clause',_8,_7,_6})-|['compiler_generated'] ) end-|[{'function',{'new_location',3}}] )-|[{'function',{'new_location',3}}] )
'skip_toks'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <From,St,_@r0 = [I|Sis]> when 'true' -> (case St of (<({'epp',_rec69,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> (case St of (<({'epp',_58,_rec70,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}-|['compiler_generated'] )> when 'true' -> case call 'io':'scan_erl_form' (_rec69,'',_rec70) of <{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifdef'}|_X_Toks]],Cl}> when 'true' -> case St of <{'epp',_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' -> let <_9> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_9,['ifdef'|_@r0])
(<_84> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',[{'-',_X_Lh}|[{'atom',_X_Li,'ifndef'}|_X_Toks]],Cl}> when 'true' -> case St of <{'epp',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}> when 'true' -> let <_12> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_12,['ifndef'|_@r0])
(<_98> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',[{'-',_X_Lh}|[{'if',_X_Li}|_X_Toks]],Cl}> when 'true' -> case St of <{'epp',_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}> when 'true' -> let <_15> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_15,['if'|_@r0])
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',[{'-',_X_Lh}|[Else = {'atom',_X_Le,'else'}|_X_Toks]],Cl}> when 'true' -> case St of <{'epp',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125}> when 'true' -> let <_18> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_else'/4 (Else,From,_18,_@r0)
(<_126> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',[{'-',_X_Lh}|[Elif = {'atom',_X_Le,'elif'}|Toks]],Cl}> when 'true' -> case St of <{'epp',_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139}> when 'true' -> let <_21> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_elif'/5 (Toks,Elif,From,_21,_@r0)
(<_140> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',[{'-',_X_Lh}|[{'atom',_X_Le,'endif'}|_X_Toks]],Cl}> when 'true' -> case St of <{'epp',_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153}> when 'true' -> let <_24> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_24,Sis)
(<_154> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',_X_Toks,Cl}> when 'true' -> case St of <{'epp',_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' -> let <_27> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_27,_@r0)
(<_168> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',E,Cl}> when 'true' -> case E of <{_169,'file_io_server','invalid_unicode'}> when 'true' -> do apply 'epp_reply'/2 (From,{'error',E}) let <_28> = apply 'wait_request'/1 (St) in apply 'leave_file'/2 (_28,St)
<_170> when 'true' -> case St of <{'epp',_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183}> when 'true' -> let <_31> = call 'erlang':'setelement' (3,St,Cl) in apply 'skip_toks'/3 (From,_31,_@r0)
(<_184> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<{'eof',Cl}> when 'true' -> let <_rec79> = _@r0 in case St of <{'epp',_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197}> when 'true' -> let <_35> = call 'erlang':'setelement' (7,St,_rec79) in let <_37> = call 'erlang':'setelement' (3,_35,Cl) in apply 'leave_file'/2 (From,_37)
(<_198> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',_X_E}> when 'true' -> (case St of (<({'epp',_199,_rec81,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210}-|['compiler_generated'] )> when 'true' -> do apply 'epp_reply'/2 (From,{'error',{_rec81,'epp','cannot_parse'}}) let <_40> = apply 'wait_request'/1 (St) in apply 'leave_file'/2 (_40,St)-|['compiler_generated'] )
(<_211> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_41> when 'true' -> primop 'match_fail' ({'case_clause',_41})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<From,St,[]> when 'true' -> apply 'scan_toks'/2 (From,St)
(<_44,_43,_42> when 'true' -> primop 'match_fail' ({'function_clause',_44,_43,_42})-|['compiler_generated'] ) end-|[{'function',{'skip_toks',3}}] )-|[{'function',{'skip_toks',3}}] )
'skip_else'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <Else,From,St,_@r0 = ['else'|Sis]> when 'true' -> let <_4> = apply 'loc'/1 (Else) in do apply 'epp_reply'/2 (From,{'error',{_4,'epp',{'illegal',[114|[101|[112|[101|[97|[116|[101|[100]]]]]]]],'else'}}}) apply 'wait_req_skip'/2 (St,_@r0)
<_X_Else,From,St,['elif'|Sis]> when 'true' -> apply 'skip_toks'/3 (From,St,['else'|Sis])
<_X_Else,From,St,[_X_I|[]]> when 'true' -> (case St of (<({'epp',_15,_16,_17,_18,_19,_rec84,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when 'true' -> let <_rec82> = ['else'|_rec84] in case St of <{'epp',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' -> let <_10> = call 'erlang':'setelement' (7,St,_rec82) in apply 'scan_toks'/2 (From,_10)
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Else,From,St,Sis> when 'true' -> apply 'skip_toks'/3 (From,St,Sis) end-|[{'function',{'skip_else',4}}] )-|[{'function',{'skip_else',4}}] )
'skip_elif'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <_X_Toks,Elif,From,St,Sis = ['else'|_11]> when 'true' -> let <_5> = apply 'loc'/1 (Elif) in do apply 'epp_reply'/2 (From,{'error',{_5,'epp','elif_after_else'}}) apply 'wait_req_skip'/2 (St,Sis)
<Toks,Elif,From,St,[_X_I|[]]> when 'true' -> apply 'scan_if'/4 (Toks,Elif,From,St)
<_X_Toks,_X_Elif,From,St,Sis> when 'true' -> apply 'skip_toks'/3 (From,St,Sis) end-|[{'function',{'skip_elif',5}}] )-|[{'function',{'skip_elif',5}}] )
'macro_pars'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{')',_X_Lp}|[Comma = {',',_X_Ld}|Ex]],Args> when 'true' -> let <_3> = call 'lists':'reverse' (Args) in let <_2> = apply 'macro_expansion'/2 (Ex,Comma) in {'ok',{_3,_2}}
<[{'var',_10,Name}|[{')',_X_Lp}|[Comma = {',',_X_Ld}|Ex]]],Args> when 'true' -> case call 'lists':'member' (Name,Args) of <'false'> when 'true' -> let <_6> = call 'lists':'reverse' ([Name|Args]) in let <_5> = apply 'macro_expansion'/2 (Ex,Comma) in {'ok',{_6,_5}}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<[{'var',_X_L,Name}|[{',',_11}|Ts]],Args> when 'true' -> case call 'lists':'member' (Name,Args) of <'false'> when 'true' -> apply 'macro_pars'/2 (Ts,[Name|Args])
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_9,_8> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8})-|['compiler_generated'] ) end-|[{'function',{'macro_pars',2}}] )-|[{'function',{'macro_pars',2}}] )
'macro_expansion'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{')',_X_Lp}|[{'dot',_X_Ld}|[]]],_X_T0> when 'true' -> []
<[Dot = {'dot',_7}|[]],_X_T0> when 'true' -> let <_2> = apply 'loc'/1 (Dot) in call 'erlang':'throw' ({'error',_2,'missing_parenthesis'})
<[T|Ts],_X_T0> when 'true' -> let <_3> = apply 'macro_expansion'/2 (Ts,T) in [T|_3]
<[],T0> when 'true' -> let <_4> = apply 'loc'/1 (T0) in call 'erlang':'throw' ({'error',_4,'premature_end'})
(<_6,_5> when 'true' -> primop 'match_fail' ({'function_clause',_6,_5})-|['compiler_generated'] ) end-|[{'function',{'macro_expansion',2}}] )-|[{'function',{'macro_expansion',2}}] )
'expand_macros'/4 = (fun (_0,_1,_2,_3) -> case _3 of <{'epp',_18,_19,_20,_21,_22,_23,_24,_25,Ms,U,_26,_27,_28}> when 'true' -> let <Lm> = apply 'loc'/1 (_0) in let <Tinfo> = call 'erlang':'element' (2,_0) in case apply 'expand_macro1'/4 (Lm,_1,_2,Ms) of <{'ok',{'none',Exp}}> when 'true' -> do apply 'check_uses'/4 ([{_1,'none'}|[]],[],U,Lm) let <_7> = apply 'expand_macro'/4 (Exp,Tinfo,[],~{}~) in let <Toks1> = apply 'expand_macros'/2 (_7,_3) in let <_9> = call 'erlang':'++' (Toks1,_2) in apply 'expand_macros'/2 (_9,_3)
<{'ok',{As,Exp}}> when 'true' -> let <_10> = call 'erlang':'length' (As) in do apply 'check_uses'/4 ([{_1,_10}|[]],[],U,Lm) case apply 'bind_args'/5 (_2,Lm,_1,As,~{}~) of <{Bs,Toks1}> when 'true' -> let <_12> = apply 'expand_macro'/4 (Exp,Tinfo,Toks1,Bs) in apply 'expand_macros'/2 (_12,_3)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end-|[{'function',{'expand_macros',4}}] )
'expand_macro1'/4 = (fun (_0,_1,_2,_3) -> let <Arity> = apply 'count_args'/3 (_2,_0,_1) in case _3 of <~{_1:='undefined'}~> when 'true' -> call 'erlang':'throw' ({'error',_0,{'undefined',_1,Arity}})
<~{_1:=[{'none',Def}|[]]}~> when 'true' -> {'ok',Def}
<~{_1:=Defs}~> when call 'erlang':'is_list' (Defs) -> case call 'proplists':'get_value' (Arity,Defs) of <'undefined'> when 'true' -> call 'erlang':'throw' ({'error',_0,{'mismatch',_1}})
<Def> when 'true' -> {'ok',Def} end
<~{_1:=PreDef}~> when 'true' -> {'ok',PreDef}
<_11> when 'true' -> call 'erlang':'throw' ({'error',_0,{'undefined',_1,Arity}}) end-|[{'function',{'expand_macro1',4}}] )
'check_uses'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[],_X_Anc,_X_U,_X_Lm> when 'true' -> 'ok'
<[M|Rest],Anc,U,Lm> when 'true' -> case call 'lists':'member' (M,Anc) of <'true'> when 'true' -> case M of <{Name,Arity}> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'circular',Name,Arity}})
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<'false'> when 'true' -> let <L> = apply 'get_macro_uses'/2 (M,U) in do apply 'check_uses'/4 (L,[M|Anc],U,Lm) apply 'check_uses'/4 (Rest,Anc,U,Lm)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
(<_10,_9,_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|['compiler_generated'] ) end-|[{'function',{'check_uses',4}}] )-|[{'function',{'check_uses',4}}] )
'get_macro_uses'/2 = (fun (_0,_1) -> (case <_0,_1> of <{M,Arity},U> when 'true' -> case U of <~{M:=L}~> when 'true' -> let <_2> = call 'proplists':'get_value' ('none',L,[]) in call 'proplists':'get_value' (Arity,L,_2)
<_6> when 'true' -> [] end
(<_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4})-|['compiler_generated'] ) end-|[{'function',{'get_macro_uses',2}}] )-|[{'function',{'get_macro_uses',2}}] )
'expand_macros'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{'?',_X_Lq}|[MacT = {'atom',_X_Lm,M}|Toks]],St> when 'true' -> apply 'expand_macros'/4 (MacT,M,Toks,St)
<[_@r0 = {'?',_X_Lq}|[Token = {'var',Lm,'FUNCTION_NAME'}|Toks]],St0> when 'true' -> let <St> = apply 'update_fun_name'/2 (Token,St0) in (case St of (<({'epp',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_rec85}-|['compiler_generated'] )> when 'true' -> let <_7> = case _rec85 of <'undefined'> when 'true' -> [_@r0|[Token|[]]]
<{Name,_37}> when 'true' -> [{'atom',Lm,Name}|[]]
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_3> = apply 'expand_macros'/2 (Toks,St) in call 'erlang':'++' (_7,_3)-|['compiler_generated'] )
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[_@r1 = {'?',_X_Lq}|[Token = {'var',Lm,'FUNCTION_ARITY'}|Toks]],St0> when 'true' -> let <St> = apply 'update_fun_name'/2 (Token,St0) in (case St of (<({'epp',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_rec86}-|['compiler_generated'] )> when 'true' -> let <_13> = case _rec86 of <'undefined'> when 'true' -> [_@r1|[Token|[]]]
<{_51,Arity}> when 'true' -> [{'integer',Lm,Arity}|[]]
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end in let <_9> = apply 'expand_macros'/2 (Toks,St) in call 'erlang':'++' (_13,_9)-|['compiler_generated'] )
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[{'?',_X_Lq}|[Tok = {'var',Lm,'LINE'}|Toks]],St> when 'true' -> let <Line> = call 'erl_scan':'line' (Tok) in let <_15> = apply 'expand_macros'/2 (Toks,St) in [{'integer',Lm,Line}|_15]
<[{'?',_X_Lq}|[MacT = {'var',_X_Lm,M}|Toks]],St> when 'true' -> apply 'expand_macros'/4 (MacT,M,Toks,St)
<[{'?',_X_Lq}|[Token|_X_Toks]],_X_St> when 'true' -> let <_18> = case call 'erl_scan':'text' (Token) of <Text> when call 'erlang':'is_list' (Text) -> Text
<'undefined'> when 'true' -> let <Symbol> = call 'erl_scan':'symbol' (Token) in call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']])}#,[Symbol|[]])
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end in let <_20> = apply 'loc'/1 (Token) in call 'erlang':'throw' ({'error',_20,{'call',[63|_18]}})
<[T|Ts],St> when 'true' -> let <_21> = apply 'expand_macros'/2 (Ts,St) in [T|_21]
<[],_X_St> when 'true' -> []
(<_23,_22> when 'true' -> primop 'match_fail' ({'function_clause',_23,_22})-|['compiler_generated'] ) end-|[{'function',{'expand_macros',2}}] )-|[{'function',{'expand_macros',2}}] )
'bind_args'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <[{'(',_X_Llp}|[{')',_X_Lrp}|Toks]],_X_Lm,_X_M,[],Bs> when 'true' -> {Bs,Toks}
<[{'(',_X_Llp}|Toks0],Lm,M,[A|As],Bs> when 'true' -> case apply 'macro_arg'/3 (Toks0,[],[]) of <{Arg,Toks1}> when 'true' -> let <_6> = apply 'store_arg'/5 (Lm,M,A,Arg,Bs) in apply 'macro_args'/5 (Toks1,Lm,M,As,_6)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'mismatch',M}}) end-|[{'function',{'bind_args',5}}] )-|[{'function',{'bind_args',5}}] )
'macro_args'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <[{')',_X_Lrp}|Toks],_X_Lm,_X_M,[],Bs> when 'true' -> {Bs,Toks}
<[{',',_X_Lc}|Toks0],Lm,M,[A|As],Bs> when 'true' -> case apply 'macro_arg'/3 (Toks0,[],[]) of <{Arg,Toks1}> when 'true' -> let <_6> = apply 'store_arg'/5 (Lm,M,A,Arg,Bs) in apply 'macro_args'/5 (Toks1,Lm,M,As,_6)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<[],Lm,M,_X_As,_X_Bs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'arg_error',M}})
<_X_Toks,Lm,M,_X_As,_X_Bs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'mismatch',M}}) end-|[{'function',{'macro_args',5}}] )-|[{'function',{'macro_args',5}}] )
'store_arg'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <L,M,_X_A,[],_X_Bs> when 'true' -> call 'erlang':'throw' ({'error',L,{'mismatch',M}})
<_X_L,_X_M,A,Arg,Bs> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Bs) -> ~{A=>Arg|Bs}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Bs})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end end-|[{'function',{'store_arg',5}}] )-|[{'function',{'store_arg',5}}] )
'count_args'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <[{'(',_X_Llp}|[{')',_X_Lrp}|_X_Toks]],_X_Lm,_X_M> when 'true' -> 0
<[{'(',_X_Llp}|[{',',_X_Lc}|_X_Toks]],Lm,M> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'arg_error',M}})
<[{'(',_X_Llp}|Toks0],Lm,M> when 'true' -> case apply 'macro_arg'/3 (Toks0,[],[]) of <{_X_Arg,Toks1}> when 'true' -> apply 'count_args'/4 (Toks1,Lm,M,1)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<_X_Toks,_X_Lm,_X_M> when 'true' -> 'none' end-|[{'function',{'count_args',3}}] )-|[{'function',{'count_args',3}}] )
'count_args'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{')',_X_Lrp}|_X_Toks],_X_Lm,_X_M,NbArgs> when 'true' -> NbArgs
<[{',',_X_Lc}|[{')',_X_Lrp}|_X_Toks]],Lm,M,_X_NbArgs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'arg_error',M}})
<[{',',_X_Lc}|Toks0],Lm,M,NbArgs> when 'true' -> case apply 'macro_arg'/3 (Toks0,[],[]) of <{_X_Arg,Toks1}> when 'true' -> let <_5> = call 'erlang':'+' (NbArgs,1) in apply 'count_args'/4 (Toks1,Lm,M,_5)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<[],Lm,M,_X_NbArgs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'arg_error',M}})
<_X_Toks,Lm,M,_X_NbArgs> when 'true' -> call 'erlang':'throw' ({'error',Lm,{'mismatch',M}}) end-|[{'function',{'count_args',4}}] )-|[{'function',{'count_args',4}}] )
'macro_arg'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <_@r0 = [{',',Lc}|Toks],[],Arg> when 'true' -> let <_3> = call 'lists':'reverse' (Arg) in {_3,_@r0}
<_@r1 = [{')',Lrp}|Toks],[],Arg> when 'true' -> let <_4> = call 'lists':'reverse' (Arg) in {_4,_@r1}
<[_@r2 = {'(',Llp}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,[')'|E],[_@r2|Arg])
<[_@r3 = {'<<',Lls}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['>>'|E],[_@r3|Arg])
<[_@r4 = {'[',Lls}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,[']'|E],[_@r4|Arg])
<[_@r5 = {'{',Llc}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['}'|E],[_@r5|Arg])
<[_@r6 = {'begin',Lb}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r6|Arg])
<[_@r7 = {'if',Li}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r7|Arg])
<[_@r8 = {'case',Lc}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r8|Arg])
<[_@r9 = {'fun',Lc}|Toks = [{'(',_9}|_10]],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r9|Arg])
<[Fun = {'fun',_11}|[Name = {'var',_12,_13}|Toks = [{'(',_14}|_15]]],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[Name|[Fun|Arg]])
<[_@r10 = {'receive',Lr}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r10|Arg])
<[_@r11 = {'try',Lr}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r11|Arg])
<[_@r12 = {'cond',Lr}|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,['end'|E],[_@r12|Arg])
<[_@r13 = {Rb,Lrb}|Toks],[_16|E],Arg> when call 'erlang':'=:=' (_16,Rb) -> apply 'macro_arg'/3 (Toks,E,[_@r13|Arg])
<[T|Toks],E,Arg> when 'true' -> apply 'macro_arg'/3 (Toks,E,[T|Arg])
<[],_X_E,Arg> when 'true' -> let <_5> = call 'lists':'reverse' (Arg) in {_5,[]}
(<_8,_7,_6> when 'true' -> primop 'match_fail' ({'function_clause',_8,_7,_6})-|['compiler_generated'] ) end-|[{'function',{'macro_arg',3}}] )-|[{'function',{'macro_arg',3}}] )
'expand_macro'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[{'var',_X_Lv,V}|Ts],L,Rest,Bs> when 'true' -> case Bs of <~{V:=Val}~> when 'true' -> apply 'expand_arg'/5 (Val,Ts,L,Rest,Bs)
<_15> when 'true' -> let <_4> = apply 'expand_macro'/4 (Ts,L,Rest,Bs) in [{'var',L,V}|_4] end
<[{'?',_16}|[{'?',_17}|[{'var',_X_Lv,V}|Ts]]],L,Rest,Bs> when 'true' -> case Bs of <~{V:=Val}~> when 'true' -> let <_6> = apply 'stringify'/2 (Val,L) in apply 'expand_arg'/5 (_6,Ts,L,Rest,Bs)
<_18> when 'true' -> let <_7> = apply 'expand_macro'/4 (Ts,L,Rest,Bs) in [{'var',L,V}|_7] end
<[T|Ts],L,Rest,Bs> when 'true' -> let <_9> = call 'erlang':'setelement' (2,T,L) in let <_10> = apply 'expand_macro'/4 (Ts,L,Rest,Bs) in [_9|_10]
<[],_X_L,Rest,_X_Bs> when 'true' -> Rest
(<_14,_13,_12,_11> when 'true' -> primop 'match_fail' ({'function_clause',_14,_13,_12,_11})-|['compiler_generated'] ) end-|[{'function',{'expand_macro',4}}] )-|[{'function',{'expand_macro',4}}] )
'expand_arg'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <[A|As],Ts,_X_L,Rest,Bs> when 'true' -> let <NextL> = call 'erlang':'element' (2,A) in let <_6> = apply 'expand_arg'/5 (As,Ts,NextL,Rest,Bs) in [A|_6]
<[],Ts,L,Rest,Bs> when 'true' -> apply 'expand_macro'/4 (Ts,L,Rest,Bs)
(<_11,_10,_9,_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7})-|['compiler_generated'] ) end-|[{'function',{'expand_arg',5}}] )-|[{'function',{'expand_arg',5}}] )
'update_fun_name'/2 = (fun (_0,_1) -> (case <_0,_1> of <Token,St = {'epp',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,Toks0}> when call 'erlang':'is_list' (Toks0) -> let <_5> = catch case St of <{'epp',_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' -> let <_4> = call 'erlang':'setelement' (14,St,'undefined') in apply 'expand_macros'/2 (Toks0,_4)
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _5 of <[{'atom',_45,Name}|[{'(',_46}|Toks]]> when 'true' -> let <FA> = apply 'update_fun_name_1'/4 (Toks,1,{Name,0},St) in case St of <{'epp',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' -> call 'erlang':'setelement' (14,St,FA)
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'?',_61}|_62]> when 'true' -> case Token of <{'var',_63,Macro}> when 'true' -> let <_11> = apply 'loc'/1 (Token) in call 'erlang':'throw' ({'error',_11,{'illegal_function_usage',Macro}})
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<_64> when call 'erlang':'is_list' (_5) -> case Token of <{'var',_65,Macro}> when 'true' -> let <_13> = apply 'loc'/1 (Token) in call 'erlang':'throw' ({'error',_13,{'illegal_function',Macro}})
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<_66> when 'true' -> case St of <{'epp',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' -> call 'erlang':'setelement' (14,St,{'_',0})
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','epp'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<_X_Token,St> when 'true' -> St end-|[{'function',{'update_fun_name',2}}] )-|[{'function',{'update_fun_name',2}}] )
'update_fun_name_1'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <[Tok|Toks],L,FA,St> when 'true' -> case apply 'classify_token'/1 (Tok) of <'comma'> when 'true' -> case <> of <> when call 'erlang':'=:=' (L,1) -> case FA of <{Name,Arity}> when 'true' -> let <_5> = call 'erlang':'+' (Arity,1) in apply 'update_fun_name_1'/4 (Toks,L,{Name,_5},St)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<> when 'true' -> apply 'update_fun_name_1'/4 (Toks,L,FA,St) end
<'left'> when 'true' -> let <_6> = call 'erlang':'+' (L,1) in apply 'update_fun_name_1'/4 (Toks,_6,FA,St)
<'right'> when call 'erlang':'=:=' (L,1) -> FA
<'right'> when 'true' -> let <_7> = call 'erlang':'-' (L,1) in apply 'update_fun_name_1'/4 (Toks,_7,FA,St)
<'other'> when 'true' -> case FA of <{Name,0}> when 'true' -> apply 'update_fun_name_1'/4 (Toks,L,{Name,1},St)
<{_14,_15}> when 'true' -> apply 'update_fun_name_1'/4 (Toks,L,FA,St)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<[],_16,FA,_17> when 'true' -> FA
(<_13,_12,_11,_10> when 'true' -> primop 'match_fail' ({'function_clause',_13,_12,_11,_10})-|['compiler_generated'] ) end-|[{'function',{'update_fun_name_1',4}}] )-|[{'function',{'update_fun_name_1',4}}] )
'classify_token'/1 = (fun (_0) -> (case (_0-|[{'function',{'classify_token',1}}] ) of <{C,_2}> when 'true' -> apply 'classify_token_1'/1 (C)
<_3> when 'true' -> 'other' end-|[{'function',{'classify_token',1}}] )-|[{'function',{'classify_token',1}}] )
'classify_token_1'/1 = (fun (_0) -> (case (_0-|[{'function',{'classify_token_1',1}}] ) of <','> when 'true' -> 'comma'
<'('> when 'true' -> 'left'
<'{'> when 'true' -> 'left'
<'['> when 'true' -> 'left'
<'<<'> when 'true' -> 'left'
<')'> when 'true' -> 'right'
<'}'> when 'true' -> 'right'
<']'> when 'true' -> 'right'
<'>>'> when 'true' -> 'right'
<_2> when 'true' -> 'other' end-|[{'function',{'classify_token_1',1}}] )-|[{'function',{'classify_token_1',1}}] )
'token_src'/1 = (fun (_0) -> (case (_0-|[{'function',{'token_src',1}}] ) of <{'dot',_2}> when 'true' -> [46]
<{X,_3}> when call 'erlang':'is_atom' (X) -> call 'erlang':'atom_to_list' (X)
<{'var',_4,X}> when 'true' -> call 'erlang':'atom_to_list' (X)
<{'char',_5,C}> when 'true' -> call 'io_lib':'write_char' (C)
<{'string',_6,X}> when 'true' -> call 'io_lib':'write_string' (X)
<{_7,_8,X}> when 'true' -> call 'io_lib':'format' ([126|[119]],[X|[]])
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'token_src',1}}] )-|[{'function',{'token_src',1}}] )
'stringify1'/1 = (fun (_0) -> (case (_0-|[{'function',{'stringify1',1}}] ) of <[]> when 'true' -> []
<[T|Tokens]> when 'true' -> let <_1> = apply 'token_src'/1 (T) in let <_2> = call 'io_lib':'format' ([32|[126|[116|[115]]]],[_1|[]]) in let <_3> = apply 'stringify1'/1 (Tokens) in [_2|_3]
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'stringify1',1}}] )-|[{'function',{'stringify1',1}}] )
'stringify'/2 = (fun (_0,_1) -> let <_2> = apply 'stringify1'/1 (_0) in case call 'lists':'flatten' (_2) of <[32|S]> when 'true' -> [{'string',_1,S}|[]]
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end-|[{'function',{'stringify',2}}] )
'coalesce_strings'/1 = (fun (_0) -> (case (_0-|[{'function',{'coalesce_strings',1}}] ) of <[{'string',A,S}|Tokens]> when 'true' -> apply 'coalesce_strings'/3 (Tokens,A,[S|[]])
<[T|Tokens]> when 'true' -> let <_1> = apply 'coalesce_strings'/1 (Tokens) in [T|_1]
<[]> when 'true' -> []
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'coalesce_strings',1}}] )-|[{'function',{'coalesce_strings',1}}] )
'coalesce_strings'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <[{'string',_9,S}|Tokens],A,S0> when 'true' -> apply 'coalesce_strings'/3 (Tokens,A,[S|S0])
<Tokens,A,S> when 'true' -> let <_3> = call 'lists':'reverse' (S) in let <_4> = call 'lists':'append' (_3) in let <_5> = apply 'coalesce_strings'/1 (Tokens) in [{'string',A,_4}|_5] end-|[{'function',{'coalesce_strings',3}}] )-|[{'function',{'coalesce_strings',3}}] )
'epp_request'/1 = (fun (_0) -> let <_1> = call 'erlang':'monitor' ('process',(_0-|[{'function',{'epp_request',1}}] )) in apply 'wait_epp_reply'/2 ((_0-|[{'function',{'epp_request',1}}] ),_1)-|[{'function',{'epp_request',1}}] )
'epp_request'/2 = (fun (_0,_1) -> let <_2> = call 'erlang':'self' () in do call 'erlang':'!' (_0,{'epp_request',_2,_1}) let <_3> = call 'erlang':'monitor' ('process',_0) in apply 'wait_epp_reply'/2 (_0,_3)-|[{'function',{'epp_request',2}}] )
'epp_reply'/2 = (fun (_0,_1) -> let <_2> = call 'erlang':'self' () in do call 'erlang':'!' (_0,{'epp_reply',_2,_1}) 'ok'-|[{'function',{'epp_reply',2}}] )
'wait_epp_reply'/2 = (fun (_0,_1) -> (letrec 'recv$^1'/0 = fun () -> let <_14,_12> = primop 'recv_peek_message' () in case _14 of <'true'> when 'true' -> case _12 of <{'epp_reply',_4,Rep}> when call 'erlang':'=:=' (_4,_0) -> do primop 'remove_message' () do call 'erlang':'demonitor' (_1,['flush']) Rep
<{'DOWN',_5,_6,_7,E}> when call 'erlang':'=:=' (_5,_1) -> do primop 'remove_message' () (letrec 'recv$^0'/0 = fun () -> let <_11,_9> = primop 'recv_peek_message' () in case _11 of <'true'> when 'true' -> case _9 of <{'epp_reply',_8,Rep}> when call 'erlang':'=:=' (_8,_0) -> do primop 'remove_message' () Rep
(<Other> when 'true' -> do primop 'recv_next' () (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['compiler_generated','dialyzer_ignore'] ) end
<'false'> when 'true' -> let <_10> = primop 'recv_wait_timeout' (0) in case _10 of <'true'> when 'true' -> do primop 'timeout' () call 'erlang':'exit' (E)
(<'false'> when 'true' -> (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end end in (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] )
(<Other> when 'true' -> do primop 'recv_next' () (apply 'recv$^1'/0 ()-|['dialyzer_ignore'] )-|['compiler_generated','dialyzer_ignore'] ) end
(<'false'> when 'true' -> let <_13> = primop 'recv_wait_timeout' ('infinity') in case _13 of <'true'> when 'true' -> do primop 'timeout' () 'true'
(<'false'> when 'true' -> (apply 'recv$^1'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end-|['dialyzer_ignore'] ) end in (apply 'recv$^1'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] )-|[{'function',{'wait_epp_reply',2}}] )
'expand_var'/1 = (fun (_0) -> (case (_0-|[{'function',{'expand_var',1}}] ) of <NewName = [36|_4]> when 'true' -> let <_1> = catch apply 'expand_var1'/1 (NewName) in case _1 of <{'ok',ExpName}> when 'true' -> ExpName
<_5> when 'true' -> NewName end
<NewName> when 'true' -> NewName end-|[{'function',{'expand_var',1}}] )-|[{'function',{'expand_var',1}}] )
'expand_var1'/1 = (fun (_0) -> case call 'filename':'split' ((_0-|[{'function',{'expand_var1',1}}] )) of <[[36|Var]|Rest]> when 'true' -> let <Value> = call 'os':'getenv' (Var) in case call 'erlang':'=/=' (Value,'false') of <'true'> when 'true' -> let <_4> = apply 'fname_join'/1 ([Value|Rest]) in {'ok',_4}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end-|[{'function',{'expand_var1',1}}] )
'fname_join'/1 = (fun (_0) -> (case (_0-|[{'function',{'fname_join',1}}] ) of <[[46]|Rest = [_2|_3]]> when 'true' -> apply 'fname_join'/1 (Rest)
<Components> when 'true' -> call 'filename':'join' (Components) end-|[{'function',{'fname_join',1}}] )-|[{'function',{'fname_join',1}}] )
'loc_anno'/1 = (fun (_0) -> (case (_0-|[{'function',{'loc_anno',1}}] ) of <Line> when call 'erlang':'is_integer' ((_0-|[{'function',{'loc_anno',1}}] )) -> call 'erl_anno':'new' (Line)
<{Line,_X_Column}> when 'true' -> call 'erl_anno':'new' (Line)
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'loc_anno',1}}] )-|[{'function',{'loc_anno',1}}] )
'loc'/1 = (fun (_0) -> call 'erl_scan':'location' ((_0-|[{'function',{'loc',1}}] ))-|[{'function',{'loc',1}}] )
'add_line'/2 = (fun (_0,_1) -> (case <_0,_1> of <Line,Offset> when call 'erlang':'is_integer' (Line) -> call 'erlang':'+' (Line,Offset)
<{Line,Column},Offset> when 'true' -> let <_2> = call 'erlang':'+' (Line,Offset) in {_2,Column}
(<_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_4,_3})-|['compiler_generated'] ) end-|[{'function',{'add_line',2}}] )-|[{'function',{'add_line',2}}] )
'start_loc'/1 = (fun (_0) -> (case (_0-|[{'function',{'start_loc',1}}] ) of <Line> when call 'erlang':'is_integer' ((_0-|[{'function',{'start_loc',1}}] )) -> 1
<{_X_Line,_X_Column}> when 'true' -> {1,1}
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'start_loc',1}}] )-|[{'function',{'start_loc',1}}] )
'line1'/0 = (fun () -> call 'erl_anno':'new' (1)-|[{'function',{'line1',0}}] )
'get_line'/1 = (fun (_0) -> call 'erl_anno':'line' ((_0-|[{'function',{'get_line',1}}] ))-|[{'function',{'get_line',1}}] )
'interpret_file_attribute'/1 = (fun (_0) -> apply 'interpret_file_attr'/3 ((_0-|[{'function',{'interpret_file_attribute',1}}] ),0,[])-|[{'function',{'interpret_file_attribute',1}}] )
'interpret_file_attr'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <[Form = {'attribute',Anno,'file',{File,Line}}|Forms],Delta,Fs> when 'true' -> let <L> = apply 'get_line'/1 (Anno) in let <Generated> = call 'erl_anno':'generated' (Anno) in case <> of <> when (call 'erlang':'=:=' (Generated,'true')-|['compiler_generated'] ) -> let <_5> = call 'erlang':'+' (L,Delta) in let <_6> = call 'erlang':'-' (_5,Line) in apply 'interpret_file_attr'/3 (Forms,_6,Fs)
<> when (call 'erlang':'=:=' (Generated,'false')-|['compiler_generated'] ) -> case Fs of <[_21|[_22|Fs1]]> when call 'erlang':'=:=' (_22,File) -> let <_8> = apply 'interpret_file_attr'/3 (Forms,0,[File|Fs1]) in [Form|_8]
<_23> when 'true' -> let <_9> = apply 'interpret_file_attr'/3 (Forms,0,[File|Fs]) in [Form|_9] end
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
<[Form0|Forms],Delta,Fs> when 'true' -> let <F> = fun (_13) -> let <Line> = call 'erl_anno':'line' (_13) in let <_12> = call 'erlang':'+' (Line,Delta) in call 'erl_anno':'set_line' (_12,_13) in let <Form> = call 'erl_parse':'map_anno' (F,Form0) in let <_17> = apply 'interpret_file_attr'/3 (Forms,Delta,Fs) in [Form|_17]
<[],_X_Delta,_X_Fs> when 'true' -> []
(<_20,_19,_18> when 'true' -> primop 'match_fail' ({'function_clause',_20,_19,_18})-|['compiler_generated'] ) end-|[{'function',{'interpret_file_attr',3}}] )-|[{'function',{'interpret_file_attr',3}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('epp')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('epp',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end