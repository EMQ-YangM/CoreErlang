module 'c' ['appcall'/4,'bi'/1,'bt'/1,'c'/1,'c'/2,'c'/3,'cd'/1,'display_info'/1,'erlangrc'/0,'erlangrc'/1,'flush'/0,'h'/1,'h'/2,'h'/3,'hcb'/1,'hcb'/2,'hcb'/3,'help'/0,'ht'/1,'ht'/2,'ht'/3,'i'/0,'i'/1,'i'/3,'l'/1,'lc'/1,'lc_batch'/0,'lc_batch'/1,'lm'/0,'ls'/0,'ls'/1,'m'/0,'m'/1,'memory'/0,'memory'/1,'mm'/0,'module_info'/0,'module_info'/1,'nc'/1,'nc'/2,'ni'/0,'nl'/1,'nregs'/0,'pid'/3,'pwd'/0,'q'/0,'regs'/0,'uptime'/0,'xm'/1,'y'/1,'y'/2] attributes [ 'file' = [{[115|[114|[99|[47|[99|[46|[101|[114|[108]]]]]]]]],1}]
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[51|[46|[48|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[55|[46|[48|[47|[105|[110|[99|[108|[117|[100|[101|[47|[101|[101|[112|[52|[56|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'docs_v1',[{'record_field',3,{'atom',3,'anno'}}|[{'record_field',4,{'atom',4,'beam_language'},{'atom',4,'erlang'}}|[{'record_field',5,{'atom',5,'format'},{'bin',5,[{'bin_element',5,{'string',5,[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[47|[101|[114|[108|[97|[110|[103|[43|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]]]},'default','default'}]}}|[{'record_field',6,{'atom',6,'module_doc'}}|[{'record_field',7,{'atom',7,'metadata'},{'map',7,[{'map_field_assoc',7,{'atom',7,'otp_doc_vsn'},{'tuple',7,[{'integer',7,1}|[{'integer',7,0}|[{'integer',7,0}]]]}}]}}|[{'record_field',8,{'atom',8,'docs'}}]]]]]]}]
, 'record' = [{'docs_v1_entry',[{'record_field',10,{'atom',10,'kind_name_arity'}}|[{'record_field',11,{'atom',11,'anno'}}|[{'record_field',12,{'atom',12,'signature'}}|[{'record_field',13,{'atom',13,'doc'}}|[{'record_field',14,{'atom',14,'metadata'}}]]]]]}]
, 'file' = [{[115|[114|[99|[47|[99|[46|[101|[114|[108]]]]]]]]],23}]
, 'compile' = [{'no_auto_import',[{'error',2}]}]
, 'spec' = [{{'help',0},[{'type',46,'fun',[{'type',46,'product',[]}|[{'atom',46,'ok'}]]}]}]
, 'spec' = [{{'c',1},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[{'var',84,'Module'}]}|[{'type',84,'union',[{'type',84,'tuple',[{'atom',84,'ok'}|[{'var',84,'ModuleName'}]]}|[{'atom',84,'error'}]]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Module'}|[{'remote_type',85,[{'atom',85,'file'}|[{'atom',85,'name'}|[[]]]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'ModuleName'}|[{'type',86,'module',[]}]]]]}]]]]}]}]
, 'spec' = [{{'c',2},[{'type',90,'bounded_fun',[{'type',90,'fun',[{'type',90,'product',[{'var',90,'Module'}|[{'var',90,'Options'}]]}|[{'type',90,'union',[{'type',90,'tuple',[{'atom',90,'ok'}|[{'var',90,'ModuleName'}]]}|[{'atom',90,'error'}]]}]]}|[[{'type',91,'constraint',[{'atom',91,'is_subtype'}|[[{'var',91,'Module'}|[{'remote_type',91,[{'atom',91,'file'}|[{'atom',91,'name'}|[[]]]]}]]]]}|[{'type',92,'constraint',[{'atom',92,'is_subtype'}|[[{'var',92,'Options'}|[{'type',92,'union',[{'type',92,'list',[{'remote_type',92,[{'atom',92,'compile'}|[{'atom',92,'option'}|[[]]]]}]}|[{'remote_type',92,[{'atom',92,'compile'}|[{'atom',92,'option'}|[[]]]]}]]}]]]]}|[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'ModuleName'}|[{'type',93,'module',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'c',3},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'Module'}|[{'var',120,'Options'}|[{'var',120,'Filter'}]]]}|[{'type',120,'union',[{'type',120,'tuple',[{'atom',120,'ok'}|[{'var',120,'ModuleName'}]]}|[{'atom',120,'error'}]]}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Module'}|[{'type',121,'atom',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Options'}|[{'type',122,'list',[{'remote_type',122,[{'atom',122,'compile'}|[{'atom',122,'option'}|[[]]]]}]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Filter'}|[{'type',123,'fun',[{'type',123,'product',[{'remote_type',123,[{'atom',123,'compile'}|[{'atom',123,'option'}|[[]]]]}]}|[{'type',123,'boolean',[]}]]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'ModuleName'}|[{'type',124,'module',[]}]]]]}]]]]]]}]}]
, 'type' = [{'h_return',{'type',156,'union',[{'atom',156,'ok'}|[{'type',156,'tuple',[{'atom',156,'error'}|[{'type',156,'union',[{'atom',156,'missing'}|[{'type',156,'tuple',[{'atom',156,'unknown_format'}|[{'remote_type',156,[{'atom',156,'unicode'}|[{'atom',156,'chardata'}|[[]]]]}]]}]]}]]}]]},[]}]
, 'type' = [{'hf_return',{'type',157,'union',[{'user_type',157,'h_return',[]}|[{'type',157,'tuple',[{'atom',157,'error'}|[{'atom',157,'function_missing'}]]}]]},[]}]
, 'type' = [{'ht_return',{'type',158,'union',[{'user_type',158,'h_return',[]}|[{'type',158,'tuple',[{'atom',158,'error'}|[{'atom',158,'type_missing'}]]}]]},[]}]
, 'type' = [{'hcb_return',{'type',159,'union',[{'user_type',159,'h_return',[]}|[{'type',159,'tuple',[{'atom',159,'error'}|[{'atom',159,'callback_missing'}]]}]]},[]}]
, 'spec' = [{{'h',1},[{'type',161,'fun',[{'type',161,'product',[{'type',161,'module',[]}]}|[{'user_type',161,'h_return',[]}]]}]}]
, 'spec' = [{{'h',2},[{'type',172,'fun',[{'type',172,'product',[{'type',172,'module',[]}|[{'type',172,'function',[]}]]}|[{'user_type',172,'hf_return',[]}]]}]}]
, 'spec' = [{{'h',3},[{'type',183,'fun',[{'type',183,'product',[{'type',183,'module',[]}|[{'type',183,'function',[]}|[{'type',183,'arity',[]}]]]}|[{'user_type',183,'hf_return',[]}]]}]}]
, 'spec' = [{{'ht',1},[{'type',194,'fun',[{'type',194,'product',[{'type',194,'module',[]}]}|[{'user_type',194,'h_return',[]}]]}]}]
, 'spec' = [{{'ht',2},[{'type',205,'fun',[{'type',205,'product',[{'type',205,'module',[]}|[{'ann_type',205,[{'var',205,'Type'}|[{'type',205,'atom',[]}]]}]]}|[{'user_type',205,'ht_return',[]}]]}]}]
, 'spec' = [{{'ht',3},[{'type',216,'fun',[{'type',216,'product',[{'type',216,'module',[]}|[{'ann_type',216,[{'var',216,'Type'}|[{'type',216,'atom',[]}]]}|[{'type',216,'arity',[]}]]]}|[{'user_type',217,'ht_return',[]}]]}]}]
, 'spec' = [{{'hcb',1},[{'type',228,'fun',[{'type',228,'product',[{'type',228,'module',[]}]}|[{'user_type',228,'h_return',[]}]]}]}]
, 'spec' = [{{'hcb',2},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'module',[]}|[{'ann_type',239,[{'var',239,'Callback'}|[{'type',239,'atom',[]}]]}]]}|[{'user_type',239,'hcb_return',[]}]]}]}]
, 'spec' = [{{'hcb',3},[{'type',250,'fun',[{'type',250,'product',[{'type',250,'module',[]}|[{'ann_type',250,[{'var',250,'Callback'}|[{'type',250,'atom',[]}]]}|[{'type',250,'arity',[]}]]]}|[{'user_type',251,'hcb_return',[]}]]}]}]
, 'spec' = [{{'outdir',1},[{'type',418,'fun',[{'type',418,'product',[{'type',418,'list',[{'remote_type',418,[{'atom',418,'compile'}|[{'atom',418,'option'}|[[]]]]}]}]}|[{'remote_type',418,[{'atom',418,'file'}|[{'atom',418,'filename'}|[[]]]]}]]}]}]
, 'spec' = [{{'lc',1},[{'type',470,'bounded_fun',[{'type',470,'fun',[{'type',470,'product',[{'var',470,'Files'}]}|[{'type',470,'union',[{'atom',470,'ok'}|[{'atom',470,'error'}]]}]]}|[[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Files'}|[{'type',471,'list',[{'ann_type',471,[{'var',471,'File'}|[{'remote_type',471,[{'atom',471,'erl_compile'}|[{'atom',471,'cmd_line_arg'}|[[]]]]}]]}]}]]]]}]]]}]}]
, 'spec' = [{{'lc_batch',0},[{'type',484,'fun',[{'type',484,'product',[]}|[{'type',484,'no_return',[]}]]}]}]
, 'spec' = [{{'lc_batch',1},[{'type',490,'fun',[{'type',490,'product',[{'type',490,'list',[{'remote_type',490,[{'atom',490,'erl_compile'}|[{'atom',490,'cmd_line_arg'}|[[]]]]}]}]}|[{'type',490,'no_return',[]}]]}]}]
, 'spec' = [{{'nc',1},[{'type',536,'bounded_fun',[{'type',536,'fun',[{'type',536,'product',[{'var',536,'File'}]}|[{'type',536,'union',[{'type',536,'tuple',[{'atom',536,'ok'}|[{'var',536,'Module'}]]}|[{'atom',536,'error'}]]}]]}|[[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'File'}|[{'remote_type',537,[{'atom',537,'file'}|[{'atom',537,'name'}|[[]]]]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'Module'}|[{'type',538,'module',[]}]]]]}]]]]}]}]
, 'spec' = [{{'nc',2},[{'type',542,'bounded_fun',[{'type',542,'fun',[{'type',542,'product',[{'var',542,'File'}|[{'var',542,'Options'}]]}|[{'type',542,'union',[{'type',542,'tuple',[{'atom',542,'ok'}|[{'var',542,'Module'}]]}|[{'atom',542,'error'}]]}]]}|[[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'File'}|[{'remote_type',543,[{'atom',543,'file'}|[{'atom',543,'name'}|[[]]]]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Options'}|[{'type',544,'union',[{'type',544,'list',[{'var',544,'Option'}]}|[{'var',544,'Option'}]]}]]]]}|[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'Option'}|[{'remote_type',545,[{'atom',545,'compile'}|[{'atom',545,'option'}|[[]]]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'Module'}|[{'type',546,'module',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'l',1},[{'type',570,'bounded_fun',[{'type',570,'fun',[{'type',570,'product',[{'var',570,'Module'}]}|[{'remote_type',570,[{'atom',570,'code'}|[{'atom',570,'load_ret'}|[[]]]]}]]}|[[{'type',571,'constraint',[{'atom',571,'is_subtype'}|[[{'var',571,'Module'}|[{'type',571,'module',[]}]]]]}]]]}]}]
, 'spec' = [{{'nl',1},[{'type',578,'bounded_fun',[{'type',578,'fun',[{'type',578,'product',[{'var',578,'Module'}]}|[{'type',578,'union',[{'atom',578,'abcast'}|[{'atom',578,'error'}]]}]]}|[[{'type',579,'constraint',[{'atom',579,'is_subtype'}|[[{'var',579,'Module'}|[{'type',579,'module',[]}]]]]}]]]}]}]
, 'spec' = [{{'i',0},[{'type',589,'fun',[{'type',589,'product',[]}|[{'atom',589,'ok'}]]}]}]
, 'spec' = [{{'ni',0},[{'type',593,'fun',[{'type',593,'product',[]}|[{'atom',593,'ok'}]]}]}]
, 'spec' = [{{'i',1},[{'type',597,'fun',[{'type',597,'product',[{'type',597,'list',[{'type',597,'pid',[]}]}]}|[{'atom',597,'ok'}]]}]}]
, 'spec' = [{{'pid',3},[{'type',736,'bounded_fun',[{'type',736,'fun',[{'type',736,'product',[{'var',736,'X'}|[{'var',736,'Y'}|[{'var',736,'Z'}]]]}|[{'type',736,'pid',[]}]]}|[[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'X'}|[{'type',737,'non_neg_integer',[]}]]]]}|[{'type',738,'constraint',[{'atom',738,'is_subtype'}|[[{'var',738,'Y'}|[{'type',738,'non_neg_integer',[]}]]]]}|[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Z'}|[{'type',739,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'i',3},[{'type',746,'bounded_fun',[{'type',746,'fun',[{'type',746,'product',[{'var',746,'X'}|[{'var',746,'Y'}|[{'var',746,'Z'}]]]}|[{'type',746,'list',[{'type',746,'tuple',[{'type',746,'atom',[]}|[{'type',746,'term',[]}]]}]}]]}|[[{'type',747,'constraint',[{'atom',747,'is_subtype'}|[[{'var',747,'X'}|[{'type',747,'non_neg_integer',[]}]]]]}|[{'type',748,'constraint',[{'atom',748,'is_subtype'}|[[{'var',748,'Y'}|[{'type',748,'non_neg_integer',[]}]]]]}|[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'Z'}|[{'type',749,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'q',0},[{'type',753,'fun',[{'type',753,'product',[]}|[{'type',753,'no_return',[]}]]}]}]
, 'spec' = [{{'bt',1},[{'type',758,'bounded_fun',[{'type',758,'fun',[{'type',758,'product',[{'var',758,'Pid'}]}|[{'type',758,'union',[{'atom',758,'ok'}|[{'atom',758,'undefined'}]]}]]}|[[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'Pid'}|[{'type',759,'pid',[]}]]]]}]]]}]}]
, 'spec' = [{{'m',0},[{'type',769,'fun',[{'type',769,'product',[]}|[{'atom',769,'ok'}]]}]}]
, 'spec' = [{{'mm',0},[{'type',778,'fun',[{'type',778,'product',[]}|[{'type',778,'list',[{'type',778,'module',[]}]}]]}]}]
, 'spec' = [{{'lm',0},[{'type',783,'fun',[{'type',783,'product',[]}|[{'type',783,'list',[{'remote_type',783,[{'atom',783,'code'}|[{'atom',783,'load_ret'}|[[]]]]}]}]]}]}]
, 'spec' = [{{'erlangrc',0},[{'type',791,'fun',[{'type',791,'product',[]}|[{'type',791,'union',[{'type',791,'tuple',[{'atom',791,'ok'}|[{'remote_type',791,[{'atom',791,'file'}|[{'atom',791,'filename'}|[[]]]]}]]}|[{'type',791,'tuple',[{'atom',791,'error'}|[{'type',791,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'erlangrc',1},[{'type',801,'bounded_fun',[{'type',801,'fun',[{'type',801,'product',[{'var',801,'PathList'}]}|[{'type',801,'union',[{'type',801,'tuple',[{'atom',801,'ok'}|[{'remote_type',801,[{'atom',801,'file'}|[{'atom',801,'filename'}|[[]]]]}]]}|[{'type',801,'tuple',[{'atom',801,'error'}|[{'type',801,'term',[]}]]}]]}]]}|[[{'type',802,'constraint',[{'atom',802,'is_subtype'}|[[{'var',802,'PathList'}|[{'type',802,'list',[{'ann_type',802,[{'var',802,'Dir'}|[{'remote_type',802,[{'atom',802,'file'}|[{'atom',802,'name'}|[[]]]]}]]}]}]]]]}]]]}]}]
, 'spec' = [{{'m',1},[{'type',836,'bounded_fun',[{'type',836,'fun',[{'type',836,'product',[{'var',836,'Module'}]}|[{'atom',836,'ok'}]]}|[[{'type',837,'constraint',[{'atom',837,'is_subtype'}|[[{'var',837,'Module'}|[{'type',837,'module',[]}]]]]}]]]}]}]
, 'spec' = [{{'flush',0},[{'type',932,'fun',[{'type',932,'product',[]}|[{'atom',932,'ok'}]]}]}]
, 'spec' = [{{'nregs',0},[{'type',949,'fun',[{'type',949,'product',[]}|[{'atom',949,'ok'}]]}]}]
, 'spec' = [{{'regs',0},[{'type',954,'fun',[{'type',954,'product',[]}|[{'atom',954,'ok'}]]}]}]
, 'spec' = [{{'pwd',0},[{'type',1029,'fun',[{'type',1029,'product',[]}|[{'atom',1029,'ok'}]]}]}]
, 'spec' = [{{'cd',1},[{'type',1039,'bounded_fun',[{'type',1039,'fun',[{'type',1039,'product',[{'var',1039,'Dir'}]}|[{'atom',1039,'ok'}]]}|[[{'type',1040,'constraint',[{'atom',1040,'is_subtype'}|[[{'var',1040,'Dir'}|[{'remote_type',1040,[{'atom',1040,'file'}|[{'atom',1040,'name'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'ls',0},[{'type',1050,'fun',[{'type',1050,'product',[]}|[{'atom',1050,'ok'}]]}]}]
, 'spec' = [{{'ls',1},[{'type',1055,'bounded_fun',[{'type',1055,'fun',[{'type',1055,'product',[{'var',1055,'Dir'}]}|[{'atom',1055,'ok'}]]}|[[{'type',1056,'constraint',[{'atom',1056,'is_subtype'}|[[{'var',1056,'Dir'}|[{'remote_type',1056,[{'atom',1056,'file'}|[{'atom',1056,'name'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'memory',0},[{'type',1092,'bounded_fun',[{'type',1092,'fun',[{'type',1092,'product',[]}|[{'type',1092,'list',[{'type',1092,'tuple',[{'var',1092,'Type'}|[{'var',1092,'Size'}]]}]}]]}|[[{'type',1093,'constraint',[{'atom',1093,'is_subtype'}|[[{'var',1093,'Type'}|[{'type',1093,'atom',[]}]]]]}|[{'type',1094,'constraint',[{'atom',1094,'is_subtype'}|[[{'var',1094,'Size'}|[{'type',1094,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'memory',1},[{'type',1098,'bounded_fun',[{'type',1098,'fun',[{'type',1098,'product',[{'var',1098,'Type'}]}|[{'var',1098,'Size'}]]}|[[{'type',1099,'constraint',[{'atom',1099,'is_subtype'}|[[{'var',1099,'Type'}|[{'type',1099,'atom',[]}]]]]}|[{'type',1100,'constraint',[{'atom',1100,'is_subtype'}|[[{'var',1100,'Size'}|[{'type',1100,'non_neg_integer',[]}]]]]}]]]]}|[{'type',1101,'bounded_fun',[{'type',1101,'fun',[{'type',1101,'product',[{'var',1101,'Types'}]}|[{'type',1101,'list',[{'type',1101,'tuple',[{'var',1101,'Type'}|[{'var',1101,'Size'}]]}]}]]}|[[{'type',1102,'constraint',[{'atom',1102,'is_subtype'}|[[{'var',1102,'Types'}|[{'type',1102,'list',[{'var',1102,'Type'}]}]]]]}|[{'type',1103,'constraint',[{'atom',1103,'is_subtype'}|[[{'var',1103,'Type'}|[{'type',1103,'atom',[]}]]]]}|[{'type',1104,'constraint',[{'atom',1104,'is_subtype'}|[[{'var',1104,'Size'}|[{'type',1104,'non_neg_integer',[]}]]]]}]]]]]}]]}]
, 'spec' = [{{'uptime',0},[{'type',1112,'fun',[{'type',1112,'product',[]}|[{'atom',1112,'ok'}]]}]}] ] 'help'/0 = (fun () -> call 'io':'put_chars' (#{#<98>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<80>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<68>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<65>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<88>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<90>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<88>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<90>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<91>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<93>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<69>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<68>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<68>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<84>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<84>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<60>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<62>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<88>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<90>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<88>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<44>(8,1,'integer',['unsigned'|['big']]),#<90>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<80>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<113>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<113>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<77>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<40>(8,1,'integer',['unsigned'|['big']]),#<70>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<41>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<45>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']])}#)-|[{'function',{'help',0}}] )
'c'/1 = (fun (_0) -> apply 'c'/2 ((_0-|[{'function',{'c',1}}] ),[])-|[{'function',{'c',1}}] )
'c'/2 = (fun (_0,_1) -> (case <_0,_1> of <Module,SingleOption> when let <_2> = call 'erlang':'is_list' (SingleOption) in call 'erlang':'not' (_2) -> apply 'c'/2 (Module,[SingleOption|[]])
<Module,Opts> when call 'erlang':'is_atom' (Module) -> let <_4> = case call 'filename':'extension' (Module) of <[]> when 'true' -> apply 'src_suffix'/1 (Opts)
<S> when 'true' -> S end in let <_6> = call 'filename':'rootname' (Module,_4) in let <SrcFile> = call 'erlang':'++' (_6,_4) in case call 'filelib':'is_file' (SrcFile) of <'true'> when 'true' -> apply 'compile_and_load'/2 (SrcFile,Opts)
<'false'> when 'true' -> let <_10> = fun (_8) -> 'true' in apply 'c'/3 (Module,Opts,_10)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<Module,Opts> when 'true' -> apply 'compile_and_load'/2 (Module,Opts) end-|[{'function',{'c',2}}] )-|[{'function',{'c',2}}] )
'c'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Module,Options,Filter> when call 'erlang':'is_atom' (Module) -> case apply 'find_beam'/1 (Module) of <BeamFile> when call 'erlang':'is_list' (BeamFile) -> apply 'c'/4 (Module,Options,Filter,BeamFile)
<Error> when 'true' -> {'error',Error} end
(<_6,_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_6,_5,_4})-|['compiler_generated'] ) end-|[{'function',{'c',3}}] )-|[{'function',{'c',3}}] )
'c'/4 = (fun (_0,_1,_2,_3) -> case apply 'compile_info'/2 (_0,_3) of <Info> when call 'erlang':'is_list' (Info) -> case apply 'find_source'/2 (_3,Info) of <SrcFile> when call 'erlang':'is_list' (SrcFile) -> apply 'c'/5 (SrcFile,_1,_2,_3,Info)
<Error> when 'true' -> Error end
<Error> when 'true' -> Error end-|[{'function',{'c',4}}] )
'c'/5 = (fun (_0,_1,_2,_3,_4) -> let <F> = fun (_8) -> (case apply 'is_outdir_opt'/1 (_8) of (<'false'> when 'true' -> apply _2 (_8)-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] ) in let <_13> = call 'filename':'dirname' (_3) in let <_11> = apply 'old_options'/1 (_4) in let <_12> = call 'lists':'filter' (F,_11) in let <_14> = [{'outdir',_13}|_12] in let <Options> = call 'erlang':'++' (_1,_14) in do call 'io':'format' ([82|[101|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]],[_0|[]]) apply 'safe_recompile'/3 (_0,Options,_3)-|[{'function',{'c',5}}] )
'h'/1 = (fun (_0) -> case call 'code':'get_doc' ((_0-|[{'function',{'h',1}}] )) of <{'ok',Docs = {'docs_v1',_4,_5,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_6,_7,_8}}> when 'true' -> let <_1> = call 'shell_docs':'render' ((_0-|[{'function',{'h',1}}] ),Docs) in apply 'format_docs'/1 (_1)
<{'ok',{'docs_v1',_9,_10,Enc,_11,_12,_13}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'h',1}}] )
'h'/2 = (fun (_0,_1) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_6,_7,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_8,_9,_10}}> when 'true' -> let <_2> = call 'shell_docs':'render' (_0,_1,Docs) in apply 'format_docs'/1 (_2)
<{'ok',{'docs_v1',_11,_12,Enc,_13,_14,_15}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'h',2}}] )
'h'/3 = (fun (_0,_1,_2) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_8,_9,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_10,_11,_12}}> when 'true' -> let <_3> = call 'shell_docs':'render' (_0,_1,_2,Docs) in apply 'format_docs'/1 (_3)
<{'ok',{'docs_v1',_13,_14,Enc,_15,_16,_17}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'h',3}}] )
'ht'/1 = (fun (_0) -> case call 'code':'get_doc' ((_0-|[{'function',{'ht',1}}] )) of <{'ok',Docs = {'docs_v1',_4,_5,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_6,_7,_8}}> when 'true' -> let <_1> = call 'shell_docs':'render_type' ((_0-|[{'function',{'ht',1}}] ),Docs) in apply 'format_docs'/1 (_1)
<{'ok',{'docs_v1',_9,_10,Enc,_11,_12,_13}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'ht',1}}] )
'ht'/2 = (fun (_0,_1) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_6,_7,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_8,_9,_10}}> when 'true' -> let <_2> = call 'shell_docs':'render_type' (_0,_1,Docs) in apply 'format_docs'/1 (_2)
<{'ok',{'docs_v1',_11,_12,Enc,_13,_14,_15}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'ht',2}}] )
'ht'/3 = (fun (_0,_1,_2) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_8,_9,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_10,_11,_12}}> when 'true' -> let <_3> = call 'shell_docs':'render_type' (_0,_1,_2,Docs) in apply 'format_docs'/1 (_3)
<{'ok',{'docs_v1',_13,_14,Enc,_15,_16,_17}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'ht',3}}] )
'hcb'/1 = (fun (_0) -> case call 'code':'get_doc' ((_0-|[{'function',{'hcb',1}}] )) of <{'ok',Docs = {'docs_v1',_4,_5,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_6,_7,_8}}> when 'true' -> let <_1> = call 'shell_docs':'render_callback' ((_0-|[{'function',{'hcb',1}}] ),Docs) in apply 'format_docs'/1 (_1)
<{'ok',{'docs_v1',_9,_10,Enc,_11,_12,_13}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'hcb',1}}] )
'hcb'/2 = (fun (_0,_1) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_6,_7,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_8,_9,_10}}> when 'true' -> let <_2> = call 'shell_docs':'render_callback' (_0,_1,Docs) in apply 'format_docs'/1 (_2)
<{'ok',{'docs_v1',_11,_12,Enc,_13,_14,_15}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'hcb',2}}] )
'hcb'/3 = (fun (_0,_1,_2) -> case call 'code':'get_doc' (_0) of <{'ok',Docs = {'docs_v1',_8,_9,#{#<97>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<43>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,_10,_11,_12}}> when 'true' -> let <_3> = call 'shell_docs':'render_callback' (_0,_1,_2,Docs) in apply 'format_docs'/1 (_3)
<{'ok',{'docs_v1',_13,_14,Enc,_15,_16,_17}}> when 'true' -> {'error',{'unknown_format',Enc}}
<Error> when 'true' -> Error end-|[{'function',{'hcb',3}}] )
'format_docs'/1 = (fun (_0) -> (case (_0-|[{'function',{'format_docs',1}}] ) of <E = {'error',_9}> when 'true' -> E
<Docs> when 'true' -> case call 're':'run' (Docs,[40|[46|[43|[10|[124|[10|[41]]]]]]],['unicode'|['global'|[{'capture','all_but_first','binary'}]]]) of <{'match',Lines}> when 'true' -> let <_6> = fun (_3,_2) -> do (call ('io'-|['result_not_wanted'] ):('format'-|['result_not_wanted'] ) (([126|[116|[115]]]-|['result_not_wanted'] ),_3)-|['result_not_wanted'] ) ({1,'undefined'}-|['result_not_wanted'] ) in do apply 'paged_output'/3 (_6,('undefined'-|['result_not_wanted'] ),Lines) 'ok'
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end end-|[{'function',{'format_docs',1}}] )-|[{'function',{'format_docs',1}}] )
'old_options'/1 = (fun (_0) -> case call 'lists':'keyfind' ('options',1,(_0-|[{'function',{'old_options',1}}] )) of <{'options',Opts}> when 'true' -> Opts
<'false'> when 'true' -> []
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'old_options',1}}] )
'find_source'/2 = (fun (_0,_1) -> case call 'lists':'keyfind' ('source',1,_1) of <{'source',SrcFile}> when 'true' -> case call 'filelib':'is_file' (SrcFile) of <'true'> when 'true' -> SrcFile
<'false'> when 'true' -> apply 'find_source'/1 (_0)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<_6> when 'true' -> apply 'find_source'/1 (_0) end-|[{'function',{'find_source',2}}] )
'find_source'/1 = (fun (_0) -> case call 'filelib':'find_source' ((_0-|[{'function',{'find_source',1}}] )) of <{'ok',SrcFile}> when 'true' -> SrcFile
<_3> when 'true' -> {'error','no_source'} end-|[{'function',{'find_source',1}}] )
'find_beam'/1 = (fun (_0) -> (case (_0-|[{'function',{'find_beam',1}}] ) of <Module> when call 'erlang':'is_atom' ((_0-|[{'function',{'find_beam',1}}] )) -> case call 'code':'which' (Module) of <Beam> when let <_1> = call 'erlang':'is_list' (Beam) in let <_2> = call 'erlang':'=/=' (Beam,[]) in call 'erlang':'and' (_1,_2) -> case call 'erlang':'module_loaded' (Module) of <'false'> when 'true' -> Beam
<'true'> when 'true' -> case call 'filelib':'is_file' (Beam) of <'true'> when 'true' -> Beam
<'false'> when 'true' -> apply 'find_beam_1'/1 (Module)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<Other> when let <_5> = call 'erlang':'=:=' (Other,[]) in let <_6> = call 'erlang':'=:=' (Other,'cover_compiled') in call 'erlang':'or' (_5,_6) -> apply 'find_beam_1'/1 (Module)
<Error> when 'true' -> Error end
(<_8> when 'true' -> primop 'match_fail' ({'function_clause',_8})-|['compiler_generated'] ) end-|[{'function',{'find_beam',1}}] )-|[{'function',{'find_beam',1}}] )
'find_beam_1'/1 = (fun (_0) -> let <_2> = call 'erlang':'atom_to_list' ((_0-|[{'function',{'find_beam_1',1}}] )) in let <_1> = call 'code':'objfile_extension' () in let <File> = call 'erlang':'++' (_2,_1) in case call 'code':'where_is_file' (File) of <Beam> when call 'erlang':'is_list' (Beam) -> Beam
<Error> when 'true' -> Error end-|[{'function',{'find_beam_1',1}}] )
'compile_info'/2 = (fun (_0,_1) -> (case <_0,_1> of <Module,Beam> when call 'erlang':'is_atom' (Module) -> case call 'erlang':'module_loaded' (Module) of <'true'> when 'true' -> try call 'erlang':'get_module_info' (Module,'compile') of <_2> -> _2 catch <_5,_4,_3> -> []
<'false'> when 'true' -> case call 'beam_lib':'chunks' (Beam,['compile_info']) of <{'ok',{_X_Module,[{'compile_info',Info}|[]]}}> when 'true' -> Info
<Error> when 'true' -> Error end
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
(<_9,_8> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8})-|['compiler_generated'] ) end-|[{'function',{'compile_info',2}}] )-|[{'function',{'compile_info',2}}] )
'safe_recompile'/3 = (fun (_0,_1,_2) -> let <Backup> = call 'erlang':'++' (_2,[46|[98|[97|[107]]]]) in case call 'file':'rename' (_2,Backup) of <Status> when let <_4> = call 'erlang':'=:=' (Status,'ok') in let <_5> = call 'erlang':'=:=' (Status,{'error','enoent'}) in call 'erlang':'or' (_4,_5) -> case apply 'compile_and_load'/2 (_0,_1) of <Result = {'ok',_15}> when 'true' -> do case <> of <> when (call ('erlang'-|['result_not_wanted'] ):('=:='-|['result_not_wanted'] ) (Status,('ok'-|['result_not_wanted'] ))-|['result_not_wanted'] ) -> (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Backup)-|['result_not_wanted'] )
<> when 'true' -> 'ok' end Result
<Error> when 'true' -> do case <> of <> when (call ('erlang'-|['result_not_wanted'] ):('=:='-|['result_not_wanted'] ) (Status,('ok'-|['result_not_wanted'] ))-|['result_not_wanted'] ) -> (call ('file'-|['result_not_wanted'] ):('rename'-|['result_not_wanted'] ) (Backup,_2)-|['result_not_wanted'] )
<> when 'true' -> 'ok' end Error end
<Error> when 'true' -> Error end-|[{'function',{'safe_recompile',3}}] )
'compile_and_load'/2 = (fun (_0,_1) -> (case <_0,_1> of <File,Opts0> when call 'erlang':'is_list' (Opts0) -> let <_3> = call 'filename':'extension' (File) in let <_2> = apply 'ensure_outdir'/2 ([46],Opts0) in let <_4> = apply 'ensure_from'/2 (_3,_2) in let <Opts> = ['report_errors'|['report_warnings'|_4]] in case call 'compile':'file' (File,Opts) of <{'ok',Mod}> when 'true' -> apply 'purge_and_load'/3 (Mod,File,Opts)
<{'ok',Mod,_X_Ws}> when 'true' -> apply 'purge_and_load'/3 (Mod,File,Opts)
<Other> when 'true' -> Other end
<File,Opt> when 'true' -> apply 'compile_and_load'/2 (File,[Opt|[]]) end-|[{'function',{'compile_and_load',2}}] )-|[{'function',{'compile_and_load',2}}] )
'ensure_from'/2 = (fun (_0,_1) -> let <_4> = 'is_from_opt'/1 in let <_2> = apply 'from_opt'/1 (_0) in let <_3> = call 'erlang':'++' (_1,_2) in case call 'lists':'partition' (_4,_3) of <{[Opt|_8],Opts}> when 'true' -> [Opt|Opts]
<{[],Opts}> when 'true' -> Opts
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|[{'function',{'ensure_from',2}}] )
'ensure_outdir'/2 = (fun (_0,_1) -> let <_3> = 'is_outdir_opt'/1 in let <_2> = call 'erlang':'++' (_1,[{'outdir',_0}|[]]) in case call 'lists':'partition' (_3,_2) of <{[Opt|_7],Opts}> when 'true' -> [Opt|Opts]
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end-|[{'function',{'ensure_outdir',2}}] )
'is_outdir_opt'/1 = (fun (_0) -> (case (_0-|[{'function',{'is_outdir_opt',1}}] ) of <{'outdir',_2}> when 'true' -> 'true'
<_3> when 'true' -> 'false' end-|[{'function',{'is_outdir_opt',1}}] )-|[{'function',{'is_outdir_opt',1}}] )
'is_from_opt'/1 = (fun (_0) -> (case (_0-|[{'function',{'is_from_opt',1}}] ) of <'from_core'> when 'true' -> 'true'
<'from_asm'> when 'true' -> 'true'
<'from_beam'> when 'true' -> 'true'
<_2> when 'true' -> 'false' end-|[{'function',{'is_from_opt',1}}] )-|[{'function',{'is_from_opt',1}}] )
'from_opt'/1 = (fun (_0) -> (case (_0-|[{'function',{'from_opt',1}}] ) of <[46|[99|[111|[114|[101]]]]]> when 'true' -> ['from_core']
<[46|[83]]> when 'true' -> ['from_asm']
<[46|[98|[101|[97|[109]]]]]> when 'true' -> ['from_beam']
<_2> when 'true' -> [] end-|[{'function',{'from_opt',1}}] )-|[{'function',{'from_opt',1}}] )
'outdir'/1 = (fun (_0) -> (case (_0-|[{'function',{'outdir',1}}] ) of <[]> when 'true' -> [46]
<[Opt|Rest]> when 'true' -> case Opt of <{'outdir',D}> when 'true' -> D
<_3> when 'true' -> apply 'outdir'/1 (Rest) end
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'outdir',1}}] )-|[{'function',{'outdir',1}}] )
'src_suffix'/1 = (fun (_0) -> (case (_0-|[{'function',{'src_suffix',1}}] ) of <['from_core'|_2]> when 'true' -> [46|[99|[111|[114|[101]]]]]
<['from_asm'|_3]> when 'true' -> [46|[83]]
<['from_beam'|_4]> when 'true' -> [46|[98|[101|[97|[109]]]]]
<[_5|Opts]> when 'true' -> apply 'src_suffix'/1 (Opts)
<[]> when 'true' -> [46|[101|[114|[108]]]]
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'src_suffix',1}}] )-|[{'function',{'src_suffix',1}}] )
'purge_and_load'/3 = (fun (_0,_1,_2) -> let <Dir> = apply 'outdir'/1 (_2) in let <_4> = apply 'src_suffix'/1 (_2) in let <Base> = call 'filename':'basename' (_1,_4) in let <OutFile> = call 'filename':'join' (Dir,Base) in case call 'compile':'output_generated' (_2) of <'true'> when 'true' -> case call 'erlang':'atom_to_list' (_0) of <_13> when call 'erlang':'=:=' (_13,Base) -> do call 'code':'purge' (_0) case call 'code':'load_abs' (OutFile,_0) of <Error = {'error',_X_R}> when 'true' -> Error
<_14> when 'true' -> {'ok',_0} end
<_X_OtherMod> when 'true' -> do call 'io':'format' ([42|[42|[32|[77|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[112|[39|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[116|[112|[39|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[]]]) {'error','badfile'} end
<'false'> when 'true' -> do call 'io':'format' ([42|[42|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[78|[111|[32|[111|[98|[106|[101|[99|[116|[32|[102|[105|[108|[101|[32|[99|[114|[101|[97|[116|[101|[100|[32|[45|[32|[110|[111|[116|[104|[105|[110|[103|[32|[108|[111|[97|[100|[101|[100|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]) 'ok'
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|[{'function',{'purge_and_load',3}}] )
'lc'/1 = (fun (_0) -> let <_1> = catch apply 'split'/3 ((_0-|[{'function',{'lc',1}}] ),[],[]) in case _1 of <'error'> when 'true' -> 'error'
<{Opts,Files}> when 'true' -> let <_2> = call 'lists':'reverse' (Opts) in let <COpts> = ['report_errors'|['report_warnings'|_2]] in let <_7> = fun (_5) -> call 'compile':'file' (_5,COpts) in let <_4> = call 'lists':'reverse' (Files) in call 'lists':'foreach' (_7,_4)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end-|[{'function',{'lc',1}}] )
'lc_batch'/0 = (fun () -> do call 'io':'format' ([69|[114|[114|[111|[114|[58|[32|[110|[111|[32|[102|[105|[108|[101|[115|[32|[116|[111|[32|[99|[111|[109|[112|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]) call 'erlang':'halt' (1)-|[{'function',{'lc_batch',0}}] )
'lc_batch'/1 = (fun (_0) -> try apply 'split'/3 ((_0-|[{'function',{'lc_batch',1}}] ),[],[]) of <_1> -> case _1 of <{Opts,Files}> when 'true' -> let <_2> = call 'lists':'reverse' (Opts) in let <COpts> = ['report_errors'|['report_warnings'|_2]] in let <_11> = letrec 'lc$^0'/1 = fun (_7) -> case _7 of <[File|_5]> when 'true' -> let <_9> = call 'compile':'file' (File,COpts) in let <_10> = apply 'lc$^0'/1 (_5) in ([_9|_10]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> primop 'match_fail' ({'function_clause',_8})-|['compiler_generated'] ) end in let <_6> = call 'lists':'reverse' (Files) in apply 'lc$^0'/1 (_6) in case call 'lists':'member' ('error',_11) of <'true'> when 'true' -> call 'erlang':'halt' (1)
<'false'> when 'true' -> call 'erlang':'halt' (0)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'try_clause',_14})-|['compiler_generated'] ) end catch <_17,_16,_15> -> case <_17,_16,_15> of <('throw'-|['compiler_generated'] ),('error'-|['compiler_generated'] ),_19> when 'true' -> call 'erlang':'halt' (1)
(<_20,_21,_22> when 'true' -> primop 'raise' (_22,_21)-|['compiler_generated'] ) end-|[{'function',{'lc_batch',1}}] )
'split'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <['@i'|[Dir|T]],Opts,Files> when 'true' -> let <_3> = call 'erlang':'atom_to_list' (Dir) in apply 'split'/3 (T,[{'i',_3}|Opts],Files)
<['@o'|[Dir|T]],Opts,Files> when 'true' -> let <_4> = call 'erlang':'atom_to_list' (Dir) in apply 'split'/3 (T,[{'outdir',_4}|Opts],Files)
<['@d'|[Def|T]],Opts,Files> when 'true' -> let <_5> = call 'erlang':'atom_to_list' (Def) in let <_6> = apply 'split_def'/2 (_5,[]) in apply 'split'/3 (T,[_6|Opts],Files)
<[File|T],Opts,Files> when 'true' -> apply 'split'/3 (T,Opts,[File|Files])
<[],Opts,Files> when 'true' -> {Opts,Files}
(<_9,_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8,_7})-|['compiler_generated'] ) end-|[{'function',{'split',3}}] )-|[{'function',{'split',3}}] )
'split_def'/2 = (fun (_0,_1) -> (case <_0,_1> of <[61|T],Res> when 'true' -> let <_3> = call 'lists':'reverse' (Res) in let <_4> = call 'erlang':'list_to_atom' (_3) in let <_2> = apply 'make_term'/1 (T) in {'d',_4,_2}
<[H|T],Res> when 'true' -> apply 'split_def'/2 (T,[H|Res])
<[],Res> when 'true' -> let <_5> = call 'lists':'reverse' (Res) in let <_6> = call 'erlang':'list_to_atom' (_5) in {'d',_6}
(<_8,_7> when 'true' -> primop 'match_fail' ({'function_clause',_8,_7})-|['compiler_generated'] ) end-|[{'function',{'split_def',2}}] )-|[{'function',{'split_def',2}}] )
'make_term'/1 = (fun (_0) -> case call 'erl_scan':'string' ((_0-|[{'function',{'make_term',1}}] )) of <{'ok',Tokens,_6}> when 'true' -> let <_1> = call 'erl_anno':'new' (1) in let <_2> = call 'erlang':'++' (Tokens,[{'dot',_1}|[]]) in case call 'erl_parse':'parse_term' (_2) of <{'ok',Term}> when 'true' -> Term
<{'error',{_7,_8,Reason}}> when 'true' -> do call 'io':'format' ([126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]],[Reason|[(_0-|[{'function',{'make_term',1}}] )|[]]]) call 'erlang':'throw' ('error')
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<{'error',{_9,_10,Reason},_11}> when 'true' -> do call 'io':'format' ([126|[116|[115|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]],[Reason|[(_0-|[{'function',{'make_term',1}}] )|[]]]) call 'erlang':'throw' ('error')
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'make_term',1}}] )
'nc'/1 = (fun (_0) -> apply 'nc'/2 ((_0-|[{'function',{'nc',1}}] ),[])-|[{'function',{'nc',1}}] )
'nc'/2 = (fun (_0,_1) -> (case <_0,_1> of <File,Opts0> when call 'erlang':'is_list' (Opts0) -> let <Opts> = call 'erlang':'++' (Opts0,['report_errors'|['report_warnings']]) in case call 'compile':'file' (File,Opts) of <_@r0 = {'ok',Mod}> when 'true' -> let <Dir> = apply 'outdir'/1 (Opts) in let <_5> = call 'filename':'basename' (File,[46|[101|[114|[108]]]]) in let <_4> = call 'code':'objfile_extension' () in let <Obj> = call 'erlang':'++' (_5,_4) in let <Fname> = call 'filename':'join' (Dir,Obj) in case call 'file':'read_file' (Fname) of <{'ok',Bin}> when 'true' -> do call 'rpc':'eval_everywhere' ('code','load_binary',[Mod|[Fname|[Bin|[]]]]) _@r0
<Other> when 'true' -> Other end
<Other> when 'true' -> Other end
<File,Opt> when call 'erlang':'is_atom' (Opt) -> apply 'nc'/2 (File,[Opt|[]])
(<_11,_10> when 'true' -> primop 'match_fail' ({'function_clause',_11,_10})-|['compiler_generated'] ) end-|[{'function',{'nc',2}}] )-|[{'function',{'nc',2}}] )
'l'/1 = (fun (_0) -> do call 'code':'purge' ((_0-|[{'function',{'l',1}}] )) call 'code':'load_file' ((_0-|[{'function',{'l',1}}] ))-|[{'function',{'l',1}}] )
'nl'/1 = (fun (_0) -> case call 'code':'get_object_code' ((_0-|[{'function',{'nl',1}}] )) of <{_X_Module,Bin,Fname}> when 'true' -> call 'rpc':'eval_everywhere' ('code','load_binary',[(_0-|[{'function',{'nl',1}}] )|[Fname|[Bin|[]]]])
<Other> when 'true' -> Other end-|[{'function',{'nl',1}}] )
'i'/0 = (fun () -> let <_0> = call 'erlang':'processes' () in apply 'i'/1 (_0)-|[{'function',{'i',0}}] )
'ni'/0 = (fun () -> let <_0> = apply 'all_procs'/0 () in apply 'i'/1 (_0)-|[{'function',{'ni',0}}] )
'i'/1 = (fun (_0) -> do apply 'iformat'/5 ([80|[105|[100]]],[73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]],[72|[101|[97|[112]]]],[82|[101|[100|[115]]]],[77|[115|[103|[115]]]]) do apply 'iformat'/5 ([82|[101|[103|[105|[115|[116|[101|[114|[101|[100]]]]]]]]]],[67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]],[83|[116|[97|[99|[107]]]]],[],[]) let <_10> = fun (_7,_6) -> case <_7,_6> of <Pid,{R,M,H,S}> when 'true' -> case apply 'display_info'/1 (Pid) of <{A,B,C,D}> when 'true' -> let <_5> = call 'erlang':'+' (R,A) in let <_4> = call 'erlang':'+' (M,B) in let <_3> = call 'erlang':'+' (H,C) in let <_2> = call 'erlang':'+' (S,D) in {2,{_5,_4,_3,_2}}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_9,_8> when 'true' -> primop 'match_fail' ({'function_clause',_9,_8})-|['compiler_generated'] ) end in case apply 'paged_output'/4 (_10,2,{0,0,0,0},(_0-|[{'function',{'i',1}}] )) of <{R,M,H,S}> when 'true' -> let <_13> = apply 'w'/1 (H) in let <_12> = apply 'w'/1 (R) in let <_11> = apply 'w'/1 (M) in do apply 'iformat'/5 ([84|[111|[116|[97|[108]]]]],[],_13,_12,_11) let <_14> = apply 'w'/1 (S) in apply 'iformat'/5 ([],[],_14,[],[])
<'less'> when 'true' -> 'ok'
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end-|[{'function',{'i',1}}] )
'paged_output'/3 = (fun (_0,_1,_2) -> apply 'paged_output'/4 (_0,0,_1,_2)-|[{'function',{'paged_output',3}}] )
'paged_output'/4 = (fun (_0,_1,_2,_3) -> let <_5> = case call 'io':'rows' () of <{'ok',Rows}> when 'true' -> call 'erlang':'-' (Rows,2)
<_11> when 'true' -> 100 end in apply 'paged_output'/5 (_0,_1,_5,_2,_3)-|[{'function',{'paged_output',4}}] )
'paged_output'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <PrintFun,CurrLine,Limit,Acc,Items> when call 'erlang':'>=' (CurrLine,Limit) -> case apply 'more'/0 () of <'more'> when 'true' -> apply 'paged_output'/5 (PrintFun,0,Limit,Acc,Items)
<'less'> when 'true' -> 'less'
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<PrintFun,CurrLine,Limit,Acc,[H|T]> when 'true' -> case apply PrintFun (H,Acc) of <{Lines,NewAcc}> when 'true' -> let <_7> = call 'erlang':'+' (CurrLine,Lines) in apply 'paged_output'/5 (PrintFun,_7,Limit,NewAcc,T)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<_13,_14,_15,Acc,[]> when 'true' -> Acc
(<_12,_11,_10,_9,_8> when 'true' -> primop 'match_fail' ({'function_clause',_12,_11,_10,_9,_8})-|['compiler_generated'] ) end-|[{'function',{'paged_output',5}}] )-|[{'function',{'paged_output',5}}] )
'more'/0 = (fun () -> case apply 'get_line'/2 ('more (y/n)? (y) ',[121|[10]]) of <[99|[10]]> when 'true' -> 'more'
<[121|[10]]> when 'true' -> 'more'
<[113|[10]]> when 'true' -> 'less'
<[110|[10]]> when 'true' -> 'less'
<_1> when 'true' -> apply 'more'/0 () end-|[{'function',{'more',0}}] )
'get_line'/2 = (fun (_0,_1) -> let <_2> = call 'io':'get_line' (_0) in case apply 'line_string'/1 (_2) of <[10]> when 'true' -> _1
<L> when 'true' -> L end-|[{'function',{'get_line',2}}] )
'line_string'/1 = (fun (_0) -> (case (_0-|[{'function',{'line_string',1}}] ) of <Binary> when call 'erlang':'is_binary' ((_0-|[{'function',{'line_string',1}}] )) -> call 'unicode':'characters_to_list' (Binary)
<Other> when 'true' -> Other end-|[{'function',{'line_string',1}}] )-|[{'function',{'line_string',1}}] )
'mfa_string'/1 = (fun (_0) -> (case (_0-|[{'function',{'mfa_string',1}}] ) of <Fun> when call 'erlang':'is_function' ((_0-|[{'function',{'mfa_string',1}}] )) -> case call 'erlang':'fun_info' (Fun,'module') of <{'module',M}> when 'true' -> case call 'erlang':'fun_info' (Fun,'name') of <{'name',F}> when 'true' -> case call 'erlang':'fun_info' (Fun,'arity') of <{'arity',A}> when 'true' -> apply 'mfa_string'/1 ({M,F,A})
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<{M,F,A}> when 'true' -> call 'io_lib':'format' ([126|[119|[58|[126|[116|[119|[47|[126|[119]]]]]]]]],[M|[F|[A|[]]]])
<X> when 'true' -> apply 'w'/1 (X) end-|[{'function',{'mfa_string',1}}] )-|[{'function',{'mfa_string',1}}] )
'display_info'/1 = (fun (_0) -> case apply 'pinfo'/1 ((_0-|[{'function',{'display_info',1}}] )) of <'undefined'> when 'true' -> {0,0,0,0}
<Info> when 'true' -> let <Call> = apply 'initial_call'/1 (Info) in let <_4> = case apply 'fetch'/2 ('current_function',Info) of <{Mod,F,Args}> when call 'erlang':'is_list' (Args) -> let <_2> = call 'erlang':'length' (Args) in {Mod,F,_2}
<Other> when 'true' -> Other end in let <Reds> = apply 'fetch'/2 ('reductions',Info) in let <LM> = apply 'fetch'/2 ('message_queue_len',Info) in let <HS> = apply 'fetch'/2 ('heap_size',Info) in let <SS> = apply 'fetch'/2 ('stack_size',Info) in let <_14> = apply 'w'/1 ((_0-|[{'function',{'display_info',1}}] )) in let <_13> = apply 'mfa_string'/1 (Call) in let <_12> = apply 'w'/1 (HS) in let <_11> = apply 'w'/1 (Reds) in let <_10> = apply 'w'/1 (LM) in do apply 'iformat'/5 (_14,_13,_12,_11,_10) let <_18> = case apply 'fetch'/2 ('registered_name',Info) of <0> when 'true' -> []
<X> when 'true' -> call 'io_lib':'format' ([126|[116|[119]]],[X|[]]) end in let <_16> = apply 'mfa_string'/1 (_4) in let <_15> = apply 'w'/1 (SS) in do apply 'iformat'/5 (_18,_16,_15,[],[]) {Reds,LM,HS,SS} end-|[{'function',{'display_info',1}}] )
'initial_call'/1 = (fun (_0) -> case apply 'fetch'/2 ('initial_call',(_0-|[{'function',{'initial_call',1}}] )) of <{'proc_lib','init_p',_3}> when 'true' -> call 'proc_lib':'translate_initial_call' ((_0-|[{'function',{'initial_call',1}}] ))
<ICall> when 'true' -> ICall end-|[{'function',{'initial_call',1}}] )
'iformat'/5 = (fun (_0,_1,_2,_3,_4) -> call 'io':'format' ([126|[45|[50|[49|[116|[115|[32|[126|[45|[51|[51|[116|[115|[32|[126|[56|[115|[32|[126|[56|[115|[32|[126|[52|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[_2|[_3|[_4|[]]]]]])-|[{'function',{'iformat',5}}] )
'all_procs'/0 = (fun () -> case call 'erlang':'is_alive' () of <'true'> when 'true' -> let <_4> = fun (_2) -> call 'rpc':'call' (_2,'erlang','processes',[]) in let <_0> = call 'erlang':'node' () in let <_1> = call 'erlang':'nodes' () in call 'lists':'flatmap' (_4,[_0|_1])
<'false'> when 'true' -> call 'erlang':'processes' ()
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|[{'function',{'all_procs',0}}] )
'pinfo'/1 = (fun (_0) -> case call 'erlang':'is_alive' () of <'true'> when 'true' -> let <_1> = call 'erlang':'node' ((_0-|[{'function',{'pinfo',1}}] )) in call 'rpc':'call' (_1,'erlang','process_info',[(_0-|[{'function',{'pinfo',1}}] )|[]])
<'false'> when 'true' -> call 'erlang':'process_info' ((_0-|[{'function',{'pinfo',1}}] ))
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'pinfo',1}}] )
'fetch'/2 = (fun (_0,_1) -> case call 'lists':'keyfind' (_0,1,_1) of <{_5,Val}> when 'true' -> Val
<'false'> when 'true' -> 0
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'fetch',2}}] )
'pid'/3 = (fun (_0,_1,_2) -> let <_9> = call 'erlang':'integer_to_list' (_0) in let <_6> = call 'erlang':'integer_to_list' (_1) in let <_3> = call 'erlang':'integer_to_list' (_2) in let <_4> = call 'erlang':'++' (_3,[62]) in let <_5> = [46|_4] in let <_7> = call 'erlang':'++' (_6,_5) in let <_8> = [46|_7] in let <_10> = call 'erlang':'++' (_9,_8) in let <_11> = [60|_10] in call 'erlang':'list_to_pid' (_11)-|[{'function',{'pid',3}}] )
'i'/3 = (fun (_0,_1,_2) -> let <_3> = apply 'pid'/3 (_0,_1,_2) in apply 'pinfo'/1 (_3)-|[{'function',{'i',3}}] )
'q'/0 = (fun () -> call 'init':'stop' ()-|[{'function',{'q',0}}] )
'bt'/1 = (fun (_0) -> let <_1> = catch call 'erlang':'process_display' ((_0-|[{'function',{'bt',1}}] ),'backtrace') in case _1 of <{'EXIT',_4}> when 'true' -> 'undefined'
<_5> when 'true' -> 'ok' end-|[{'function',{'bt',1}}] )
'm'/0 = (fun () -> do apply 'mformat'/2 ([77|[111|[100|[117|[108|[101]]]]]],[70|[105|[108|[101]]]]) let <_4> = fun (_2) -> case _2 of <{Mod,File}> when 'true' -> apply 'mformat'/2 (Mod,File)
(<_3> when 'true' -> primop 'match_fail' ({'function_clause',_3})-|['compiler_generated'] ) end in let <_0> = call 'code':'all_loaded' () in let <_1> = call 'lists':'sort' (_0) in call 'lists':'foreach' (_4,_1)-|[{'function',{'m',0}}] )
'mformat'/2 = (fun (_0,_1) -> call 'io':'format' ([126|[45|[50|[48|[115|[32|[32|[126|[116|[115|[10]]]]]]]]]]],[_0|[_1|[]]])-|[{'function',{'mformat',2}}] )
'mm'/0 = (fun () -> call 'code':'modified_modules' ()-|[{'function',{'mm',0}}] )
'lm'/0 = (fun () -> (letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[M|_1]> when 'true' -> let <_5> = apply 'l'/1 (M) in let <_6> = apply 'lc$^0'/1 (_1) in ([_5|_6]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end in let <_2> = apply 'mm'/0 () in apply 'lc$^0'/1 (_2)-|['list_comprehension'] )-|[{'function',{'lm',0}}] )
'erlangrc'/0 = (fun () -> case call 'init':'get_argument' ('home') of <{'ok',[_@r0 = [Home|[]]|[]]}> when 'true' -> apply 'erlangrc'/1 (_@r0)
<_1> when 'true' -> {'error','enoent'} end-|[{'function',{'erlangrc',0}}] )
'erlangrc'/1 = (fun (_0) -> (case (_0-|[{'function',{'erlangrc',1}}] ) of <Paths = [Home|_2]> when call 'erlang':'is_list' (Home) -> apply 'f_p_e'/2 (Paths,[46|[101|[114|[108|[97|[110|[103]]]]]]])
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'erlangrc',1}}] )-|[{'function',{'erlangrc',1}}] )
'error'/2 = (fun (_0,_1) -> call 'error_logger':'error_msg' (_0,_1)-|[{'function',{'error',2}}] )
'f_p_e'/2 = (fun (_0,_1) -> case call 'file':'path_eval' (_0,_1) of <Enoent = {'error','enoent'}> when 'true' -> Enoent
<_@r0 = {'error',E = {Line,_X_Mod,_X_Term}}> when 'true' -> let <_2> = call 'file':'format_error' (E) in do apply 'error'/2 ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[101|[118|[97|[108|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[101|[114|[114|[111|[114|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[Line|[_2|[]]]]]) _@r0
<_@r1 = {'error',E}> when 'true' -> let <_3> = call 'file':'format_error' (E) in do apply 'error'/2 ([102|[105|[108|[101|[58|[112|[97|[116|[104|[95|[101|[118|[97|[108|[40|[126|[116|[112|[44|[126|[116|[112|[41|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[_3|[]]]]) _@r1
<Other> when 'true' -> Other end-|[{'function',{'f_p_e',2}}] )
'bi'/1 = (fun (_0) -> case call 'erlang':'system_info' ((_0-|[{'function',{'bi',1}}] )) of <X> when call 'erlang':'is_binary' (X) -> let <_1> = call 'erlang':'binary_to_list' (X) in call 'io':'put_chars' (_1)
<X> when call 'erlang':'is_list' (X) -> call 'io':'put_chars' (X)
<X> when 'true' -> call 'io':'format' ([126|[119]],[X|[]]) end-|[{'function',{'bi',1}}] )
'm'/1 = (fun (_0) -> let <L> = call (_0-|[{'function',{'m',1}}] ):'module_info' () in case call 'lists':'keyfind' ('exports',1,L) of <{'exports',E}> when 'true' -> let <Time> = apply 'get_compile_time'/1 (L) in let <COpts> = apply 'get_compile_options'/1 (L) in do call 'io':'format' ([77|[111|[100|[117|[108|[101|[58|[32|[126|[119|[126|[110]]]]]]]]]]]],[(_0-|[{'function',{'m',1}}] )|[]]) do apply 'print_md5'/1 (L) do call 'io':'format' ([67|[111|[109|[112|[105|[108|[101|[100|[58|[32]]]]]]]]]]) do apply 'print_time'/1 (Time) do apply 'print_object_file'/1 ((_0-|[{'function',{'m',1}}] )) do call 'io':'format' ([67|[111|[109|[112|[105|[108|[101|[114|[32|[111|[112|[116|[105|[111|[110|[115|[58|[32|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]],[COpts|[]]) do call 'io':'format' ([69|[120|[112|[111|[114|[116|[115|[58|[32|[126|[110]]]]]]]]]]],[]) let <_5> = call 'lists':'keysort' (1,E) in apply 'print_exports'/1 (_5)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end-|[{'function',{'m',1}}] )
'print_object_file'/1 = (fun (_0) -> case call 'code':'is_loaded' ((_0-|[{'function',{'print_object_file',1}}] )) of <{'file',File}> when 'true' -> call 'io':'format' ([79|[98|[106|[101|[99|[116|[32|[102|[105|[108|[101|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]],[File|[]])
<_3> when 'true' -> 'ignore' end-|[{'function',{'print_object_file',1}}] )
'print_md5'/1 = (fun (_0) -> case call 'lists':'keyfind' ('md5',1,(_0-|[{'function',{'print_md5',1}}] )) of <{'md5',#{#<MD5>(128,1,'integer',['unsigned'|['big']])}#}> when 'true' -> call 'io':'format' ([77|[68|[53|[58|[32|[126|[46|[49|[54|[98|[126|[110]]]]]]]]]]]],[MD5|[]])
<_3> when 'true' -> 'ok' end-|[{'function',{'print_md5',1}}] )
'get_compile_time'/1 = (fun (_0) -> case apply 'get_compile_info'/2 ((_0-|[{'function',{'get_compile_time',1}}] ),'time') of <{'ok',Val}> when 'true' -> Val
<'error'> when 'true' -> 'notime'
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'get_compile_time',1}}] )
'get_compile_options'/1 = (fun (_0) -> case apply 'get_compile_info'/2 ((_0-|[{'function',{'get_compile_options',1}}] ),'options') of <{'ok',Val}> when 'true' -> Val
<'error'> when 'true' -> []
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'get_compile_options',1}}] )
'get_compile_info'/2 = (fun (_0,_1) -> case call 'lists':'keyfind' ('compile',1,_0) of <{'compile',I}> when 'true' -> case call 'lists':'keyfind' (_1,1,I) of <{_6,Val}> when call 'erlang':'=:=' (_6,_1) -> {'ok',Val}
<'false'> when 'true' -> 'error'
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<'false'> when 'true' -> 'error'
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end-|[{'function',{'get_compile_info',2}}] )
'print_exports'/1 = (fun (_0) -> (case (_0-|[{'function',{'print_exports',1}}] ) of <X> when try let <_1> = call 'erlang':'length' ((_0-|[{'function',{'print_exports',1}}] )) in call 'erlang':'>' (_1,16) of <Try> -> Try catch <T,R> -> 'false' -> apply 'split_print_exports'/1 (X)
<[]> when 'true' -> 'ok'
<[{F,A}|Tail]> when 'true' -> do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[116|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]]]]],[F|[A|[]]]) apply 'print_exports'/1 (Tail)
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'print_exports',1}}] )-|[{'function',{'print_exports',1}}] )
'split_print_exports'/1 = (fun (_0) -> let <Len> = call 'erlang':'length' ((_0-|[{'function',{'split_print_exports',1}}] )) in let <Mid> = call 'erlang':'div' (Len,2) in let <L1> = call 'lists':'sublist' ((_0-|[{'function',{'split_print_exports',1}}] ),1,Mid) in let <_6> = call 'erlang':'+' (Mid,1) in let <_4> = call 'erlang':'-' (Len,Mid) in let <_5> = call 'erlang':'+' (_4,1) in let <L2> = call 'lists':'sublist' ((_0-|[{'function',{'split_print_exports',1}}] ),_6,_5) in apply 'split_print_exports'/2 (L1,L2)-|[{'function',{'split_print_exports',1}}] )
'split_print_exports'/2 = (fun (_0,_1) -> (case <_0,_1> of <[],[{F,A}|T]> when 'true' -> do call 'io':'format' ([126|[45|[51|[48|[116|[115|[126|[116|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]],[[32]|[F|[A|[]]]]) apply 'split_print_exports'/2 ([],T)
<[{F1,A1}|T1],[{F2,A2}|T2]> when 'true' -> let <_3> = call 'io_lib':'format' ([126|[116|[119|[47|[126|[119]]]]]],[F1|[A1|[]]]) in let <Str> = call 'lists':'flatten' (_3) in do call 'io':'format' ([126|[45|[51|[48|[116|[115|[126|[116|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]],[Str|[F2|[A2|[]]]]) apply 'split_print_exports'/2 (T1,T2)
<[],[]> when 'true' -> 'ok'
(<_6,_5> when 'true' -> primop 'match_fail' ({'function_clause',_6,_5})-|['compiler_generated'] ) end-|[{'function',{'split_print_exports',2}}] )-|[{'function',{'split_print_exports',2}}] )
'print_time'/1 = (fun (_0) -> (case (_0-|[{'function',{'print_time',1}}] ) of <{Year,Month,Day,Hour,Min,_X_Secs}> when 'true' -> let <_1> = apply 'month'/1 (Month) in do call 'io':'format' ([126|[115|[32|[126|[119|[32|[126|[119|[44|[32]]]]]]]]]],[_1|[Day|[Year|[]]]]) call 'io':'format' ([126|[46|[50|[46|[48|[119|[58|[126|[46|[50|[46|[48|[119|[126|[110]]]]]]]]]]]]]]],[Hour|[Min|[]]])
<'notime'> when 'true' -> call 'io':'format' ([78|[111|[32|[99|[111|[109|[112|[105|[108|[101|[32|[116|[105|[109|[101|[32|[105|[110|[102|[111|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'print_time',1}}] )-|[{'function',{'print_time',1}}] )
'month'/1 = (fun (_0) -> (case (_0-|[{'function',{'month',1}}] ) of <1> when 'true' -> [74|[97|[110|[117|[97|[114|[121]]]]]]]
<2> when 'true' -> [70|[101|[98|[114|[117|[97|[114|[121]]]]]]]]
<3> when 'true' -> [77|[97|[114|[99|[104]]]]]
<4> when 'true' -> [65|[112|[114|[105|[108]]]]]
<5> when 'true' -> [77|[97|[121]]]
<6> when 'true' -> [74|[117|[110|[101]]]]
<7> when 'true' -> [74|[117|[108|[121]]]]
<8> when 'true' -> [65|[117|[103|[117|[115|[116]]]]]]
<9> when 'true' -> [83|[101|[112|[116|[101|[109|[98|[101|[114]]]]]]]]]
<10> when 'true' -> [79|[99|[116|[111|[98|[101|[114]]]]]]]
<11> when 'true' -> [78|[111|[118|[101|[109|[98|[101|[114]]]]]]]]
<12> when 'true' -> [68|[101|[99|[101|[109|[98|[101|[114]]]]]]]]
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'month',1}}] )-|[{'function',{'month',1}}] )
'flush'/0 = (fun () -> (letrec 'recv$^0'/0 = fun () -> let <_5,_3> = primop 'recv_peek_message' () in case _5 of <'true'> when 'true' -> do primop 'remove_message' () let <_0> = call 'io':'getopts' () in do case call 'lists':'keyfind' ('encoding',1,_0) of <{'encoding','unicode'}> when 'true' -> call 'io':'format' ([83|[104|[101|[108|[108|[32|[103|[111|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]],[_3|[]])
<_2> when 'true' -> call 'io':'format' ([83|[104|[101|[108|[108|[32|[103|[111|[116|[32|[126|[112|[126|[110]]]]]]]]]]]]]],[_3|[]]) end apply 'flush'/0 ()
<'false'> when 'true' -> let <_4> = primop 'recv_wait_timeout' (0) in case _4 of <'true'> when 'true' -> do primop 'timeout' () 'ok'
(<'false'> when 'true' -> (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end end in (apply 'recv$^0'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] )-|[{'function',{'flush',0}}] )
'nregs'/0 = (fun () -> let <_3> = fun (_1) -> apply 'print_node_regs'/1 (_1) in let <_0> = apply 'all_regs'/0 () in call 'lists':'foreach' (_3,_0)-|[{'function',{'nregs',0}}] )
'regs'/0 = (fun () -> let <_1> = call 'erlang':'node' () in let <_0> = call 'erlang':'registered' () in apply 'print_node_regs'/1 ({_1,_0})-|[{'function',{'regs',0}}] )
'all_regs'/0 = (fun () -> case call 'erlang':'is_alive' () of <'true'> when 'true' -> (letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[N|_1]> when 'true' -> let <_6> = call 'rpc':'call' (N,'erlang','registered',[]) in let <_7> = apply 'lc$^0'/1 (_1) in ([{N,_6}|_7]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_5> when 'true' -> primop 'match_fail' ({'function_clause',_5})-|['compiler_generated'] ) end in let <_2> = call 'erlang':'node' () in let <_3> = call 'erlang':'nodes' () in apply 'lc$^0'/1 ([_2|_3])-|['list_comprehension'] )
<'false'> when 'true' -> let <_9> = call 'erlang':'node' () in let <_8> = call 'erlang':'registered' () in [{_9,_8}|[]]
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|[{'function',{'all_regs',0}}] )
'print_node_regs'/1 = (fun (_0) -> (case (_0-|[{'function',{'print_node_regs',1}}] ) of <{N,List}> when call 'erlang':'is_list' (List) -> let <_1> = call 'lists':'sort' (List) in case apply 'pids_and_ports'/5 (N,_1,[],[],[]) of <{Pids,Ports,_X_Dead}> when 'true' -> do call 'io':'format' ([126|[110|[42|[42|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[112|[114|[111|[99|[115|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[N|[]]) do apply 'procformat'/5 ([78|[97|[109|[101]]]],[80|[105|[100]]],[73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]],[82|[101|[100|[115]]]],[77|[115|[103|[115]]]]) let <_5> = fun (_3) -> case _3 of <{Name,PI,Pid}> when 'true' -> apply 'procline'/3 (Name,PI,Pid)
(<_4> when 'true' -> primop 'match_fail' ({'function_clause',_4})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_5,Pids) do call 'io':'format' ([126|[110|[42|[42|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[112|[111|[114|[116|[115|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[N|[]]) do apply 'portformat'/3 ([78|[97|[109|[101]]]],[73|[100]],[67|[111|[109|[109|[97|[110|[100]]]]]]]) let <_8> = fun (_6) -> case _6 of <{Name,PI,Id}> when 'true' -> apply 'portline'/3 (Name,PI,Id)
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end in call 'lists':'foreach' (_8,Ports)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'function_clause',_9})-|['compiler_generated'] ) end-|[{'function',{'print_node_regs',1}}] )-|[{'function',{'print_node_regs',1}}] )
'pids_and_ports'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <_16,[],Pids,Ports,Dead> when 'true' -> let <_7> = call 'lists':'reverse' (Pids) in let <_6> = call 'lists':'reverse' (Ports) in let <_5> = call 'lists':'reverse' (Dead) in {_7,_6,_5}
<Node,[Name|Names],Pids,Ports,Dead> when 'true' -> case apply 'pwhereis'/2 (Node,Name) of <Pid> when call 'erlang':'is_pid' (Pid) -> let <_8> = apply 'pinfo'/1 (Pid) in apply 'pids_and_ports'/5 (Node,Names,[{Name,_8,Pid}|Pids],Ports,Dead)
<Id> when call 'erlang':'is_port' (Id) -> let <_9> = apply 'portinfo'/1 (Id) in apply 'pids_and_ports'/5 (Node,Names,Pids,[{Name,_9,Id}|Ports],Dead)
<'undefined'> when 'true' -> apply 'pids_and_ports'/5 (Node,Names,Pids,Ports,[Name|Dead])
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_15,_14,_13,_12,_11> when 'true' -> primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11})-|['compiler_generated'] ) end-|[{'function',{'pids_and_ports',5}}] )-|[{'function',{'pids_and_ports',5}}] )
'pwhereis'/2 = (fun (_0,_1) -> case call 'erlang':'is_alive' () of <'true'> when 'true' -> call 'rpc':'call' (_0,'erlang','whereis',[_1|[]])
<'false'> when 'true' -> call 'erlang':'whereis' (_1)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'pwhereis',2}}] )
'portinfo'/1 = (fun (_0) -> case call 'erlang':'is_alive' () of <'true'> when 'true' -> let <_1> = call 'erlang':'node' ((_0-|[{'function',{'portinfo',1}}] )) in let <_2> = call 'rpc':'call' (_1,'erlang','port_info',[(_0-|[{'function',{'portinfo',1}}] )|['name']]) in [_2|[]]
<'false'> when 'true' -> let <_3> = call 'erlang':'port_info' ((_0-|[{'function',{'portinfo',1}}] ),'name') in [_3|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'portinfo',1}}] )
'procline'/3 = (fun (_0,_1,_2) -> let <Call> = apply 'initial_call'/1 (_1) in let <Reds> = apply 'fetch'/2 ('reductions',_1) in let <LM> = apply 'fetch'/2 ('message_queue_len',_1) in let <_11> = call 'io_lib':'format' ([126|[116|[119]]],[_0|[]]) in let <_10> = call 'io_lib':'format' ([126|[119]],[_2|[]]) in let <_8> = apply 'mfa_string'/1 (Call) in let <_9> = call 'io_lib':'format' ([126|[116|[115]]],[_8|[]]) in let <_7> = call 'erlang':'integer_to_list' (Reds) in let <_6> = call 'erlang':'integer_to_list' (LM) in apply 'procformat'/5 (_11,_10,_9,_7,_6)-|[{'function',{'procline',3}}] )
'procformat'/5 = (fun (_0,_1,_2,_3,_4) -> call 'io':'format' ([126|[45|[50|[49|[116|[115|[32|[126|[45|[49|[50|[115|[32|[126|[45|[50|[53|[116|[115|[32|[126|[49|[50|[115|[32|[126|[52|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[_2|[_3|[_4|[]]]]]])-|[{'function',{'procformat',5}}] )
'portline'/3 = (fun (_0,_1,_2) -> let <Cmd> = apply 'fetch'/2 ('name',_1) in let <_5> = call 'io_lib':'format' ([126|[116|[119]]],[_0|[]]) in let <_4> = call 'erlang':'port_to_list' (_2) in apply 'portformat'/3 (_5,_4,Cmd)-|[{'function',{'portline',3}}] )
'portformat'/3 = (fun (_0,_1,_2) -> call 'io':'format' ([126|[45|[50|[49|[116|[115|[32|[126|[45|[49|[53|[115|[32|[126|[45|[52|[48|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[_2|[]]]])-|[{'function',{'portformat',3}}] )
'pwd'/0 = (fun () -> case call 'file':'get_cwd' () of <{'ok',Str}> when 'true' -> let <_3> = call 'io':'format' ([126|[116|[115|[10]]]],[Str|[]]) in case _3 of <'ok'> when 'true' -> (_3-|['compiler_generated'] )
(<_0> when 'true' -> primop 'match_fail' ({'badmatch',_0})-|['compiler_generated'] ) end
<{'error',_4}> when 'true' -> let <_5> = call 'io':'format' ([67|[97|[110|[110|[111|[116|[32|[100|[101|[116|[101|[114|[109|[105|[110|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) in case _5 of <'ok'> when 'true' -> (_5-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'pwd',0}}] )
'cd'/1 = (fun (_0) -> do (call ('file'-|['result_not_wanted'] ):('set_cwd'-|['result_not_wanted'] ) ((_0-|[{'function',{'cd',1}}] ))-|['result_not_wanted'] ) apply 'pwd'/0 ()-|[{'function',{'cd',1}}] )
'ls'/0 = (fun () -> apply 'ls'/1 ([46])-|[{'function',{'ls',0}}] )
'ls'/1 = (fun (_0) -> case call 'file':'list_dir' ((_0-|[{'function',{'ls',1}}] )) of <{'ok',Entries}> when 'true' -> let <_1> = call 'lists':'sort' (Entries) in apply 'ls_print'/1 (_1)
<{'error','enotdir'}> when 'true' -> apply 'ls_print'/1 ([(_0-|[{'function',{'ls',1}}] )|[]])
<{'error',Error}> when 'true' -> let <_2> = call 'file':'format_error' (Error) in call 'io':'format' ([126|[116|[115|[10]]]],[_2|[]])
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end-|[{'function',{'ls',1}}] )
'ls_print'/1 = (fun (_0) -> (case (_0-|[{'function',{'ls_print',1}}] ) of <[]> when 'true' -> 'ok'
<L> when 'true' -> let <_1> = apply 'lengths'/2 (L,[]) in let <_2> = call 'lists':'max' (_1) in let <_3> = call 'lists':'min' ([_2|[40]]) in let <Width> = call 'erlang':'+' (_3,5) in apply 'ls_print'/3 (L,Width,0) end-|[{'function',{'ls_print',1}}] )-|[{'function',{'ls_print',1}}] )
'ls_print'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <X,Width,Len> when try let <_3> = call 'erlang':'+' (Width,Len) in call 'erlang':'>=' (_3,80) of <Try> -> Try catch <T,R> -> 'false' -> do call 'io':'nl' () apply 'ls_print'/3 (X,Width,0)
<[H|T],Width,Len> when 'true' -> do call 'io':'format' ([126|[45|[42|[116|[115]]]]],[Width|[H|[]]]) let <_4> = call 'erlang':'+' (Len,Width) in apply 'ls_print'/3 (T,Width,_4)
<[],_8,_9> when 'true' -> call 'io':'nl' ()
(<_7,_6,_5> when 'true' -> primop 'match_fail' ({'function_clause',_7,_6,_5})-|['compiler_generated'] ) end-|[{'function',{'ls_print',3}}] )-|[{'function',{'ls_print',3}}] )
'lengths'/2 = (fun (_0,_1) -> (case <_0,_1> of <[H|T],L> when 'true' -> let <_2> = call 'erlang':'length' (H) in apply 'lengths'/2 (T,[_2|L])
<[],L> when 'true' -> L
(<_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_4,_3})-|['compiler_generated'] ) end-|[{'function',{'lengths',2}}] )-|[{'function',{'lengths',2}}] )
'w'/1 = (fun (_0) -> call 'io_lib':'write' ((_0-|[{'function',{'w',1}}] ))-|[{'function',{'w',1}}] )
'memory'/0 = (fun () -> call 'erlang':'memory' ()-|[{'function',{'memory',0}}] )
'memory'/1 = (fun (_0) -> call 'erlang':'memory' ((_0-|[{'function',{'memory',1}}] ))-|[{'function',{'memory',1}}] )
'uptime'/0 = (fun () -> let <_0> = apply 'get_uptime'/0 () in let <_1> = apply 'uptime'/1 (_0) in call 'io':'format' ([126|[115|[126|[110]]]],[_1|[]])-|[{'function',{'uptime',0}}] )
'uptime'/1 = (fun (_0) -> (case (_0-|[{'function',{'uptime',1}}] ) of <{D,{H,M,S}}> when 'true' -> let <_2> = case <> of <> when call 'erlang':'>' (D,0) -> let <_1> = call 'io_lib':'format' ([126|[112|[32|[100|[97|[121|[115|[44|[32]]]]]]]]],[D|[]]) in ([_1|[]]-|['compiler_generated'] )
(<> when 'true' -> []-|['compiler_generated'] ) end in let <_5> = case <> of <> when try let <_3> = call 'erlang':'+' (D,H) in call 'erlang':'>' (_3,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_4> = call 'io_lib':'format' ([126|[112|[32|[104|[111|[117|[114|[115|[44|[32]]]]]]]]]],[H|[]]) in ([_4|[]]-|['compiler_generated'] )
(<> when 'true' -> []-|['compiler_generated'] ) end in let <_9> = case <> of <> when try let <_6> = call 'erlang':'+' (D,H) in let <_7> = call 'erlang':'+' (_6,M) in call 'erlang':'>' (_7,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_8> = call 'io_lib':'format' ([126|[112|[32|[109|[105|[110|[117|[116|[101|[115|[32|[97|[110|[100|[32]]]]]]]]]]]]]]],[M|[]]) in ([_8|[]]-|['compiler_generated'] )
(<> when 'true' -> []-|['compiler_generated'] ) end in let <_10> = call 'io_lib':'format' ([126|[112|[32|[115|[101|[99|[111|[110|[100|[115]]]]]]]]]],[S|[]]) in call 'lists':'flatten' ([_2|[_5|[_9|[_10|[]]]]])
(<_11> when 'true' -> primop 'match_fail' ({'function_clause',_11})-|['compiler_generated'] ) end-|[{'function',{'uptime',1}}] )-|[{'function',{'uptime',1}}] )
'get_uptime'/0 = (fun () -> case call 'erlang':'statistics' ('wall_clock') of <{UpTime,_2}> when 'true' -> let <_1> = call 'erlang':'div' (UpTime,1000) in call 'calendar':'seconds_to_daystime' (_1)
(<_0> when 'true' -> primop 'match_fail' ({'badmatch',_0})-|['compiler_generated'] ) end-|[{'function',{'get_uptime',0}}] )
'xm'/1 = (fun (_0) -> apply 'appcall'/4 ('tools','xref','m',[(_0-|[{'function',{'xm',1}}] )|[]])-|[{'function',{'xm',1}}] )
'y'/1 = (fun (_0) -> apply 'y'/2 ((_0-|[{'function',{'y',1}}] ),[])-|[{'function',{'y',1}}] )
'y'/2 = (fun (_0,_1) -> apply 'appcall'/4 ('parsetools','yecc','file',[_0|[_1|[]]])-|[{'function',{'y',2}}] )
'appcall'/4 = (fun (_0,_1,_2,_3) -> try call 'erlang':'apply' (_1,_2,_3) of <_4> -> _4 catch <_7,_6,_5> -> case <_7,_6,_5> of <('error'-|['compiler_generated'] ),('undef'-|['compiler_generated'] ),_23> when 'true' -> let <S> = primop 'build_stacktrace' (_23) in case S of <[{_14,_15,_16,_17}|_18]> when let <_21> = call 'erlang':'=:=' (_14,_1) in let <_19> = call 'erlang':'=:=' (_15,_2) in let <_20> = call 'erlang':'=:=' (_16,_3) in let <_22> = call 'erlang':'and' (_19,_20) in call 'erlang':'and' (_21,_22) -> let <Arity> = call 'erlang':'length' (_3) in call 'io':'format' ([67|[97|[108|[108|[32|[116|[111|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[105|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[_2|[Arity|[_0|[]]]]])
<Stk> when 'true' -> call 'erlang':'raise' ('error','undef',Stk) end
(<_24,_25,_26> when 'true' -> primop 'raise' (_26,_25)-|['compiler_generated'] ) end-|[{'function',{'appcall',4}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('c')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('c',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end