module 'alarm_handler' ['add_alarm_handler'/1,'add_alarm_handler'/2,'clear_alarm'/1,'delete_alarm_handler'/1,'get_alarms'/0,'handle_call'/2,'handle_event'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'set_alarm'/1,'start_link'/0,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[97|[108|[97|[114|[109|[95|[104|[97|[110|[100|[108|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],1}] ] 'start_link'/0 = fun () -> case call 'gen_event':'start_link' ({'local','alarm_handler'}) of <_@r0 = {'ok',Pid}> when 'true' -> do call 'gen_event':'add_handler' ('alarm_handler','alarm_handler',[]) _@r0
<Error> when 'true' -> Error end
'set_alarm'/1 = fun (_0) -> call 'gen_event':'notify' ('alarm_handler',{'set_alarm',_0})
'clear_alarm'/1 = fun (_0) -> call 'gen_event':'notify' ('alarm_handler',{'clear_alarm',_0})
'get_alarms'/0 = fun () -> call 'gen_event':'call' ('alarm_handler','alarm_handler','get_alarms')
'add_alarm_handler'/1 = fun (_0) -> case _0 of <Module> when call 'erlang':'is_atom' (_0) -> call 'gen_event':'add_handler' ('alarm_handler',Module,[])
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'add_alarm_handler',1}}] )-|['compiler_generated'] ) end
'add_alarm_handler'/2 = fun (_0,_1) -> case <_0,_1> of <Module,Args> when call 'erlang':'is_atom' (Module) -> call 'gen_event':'add_handler' ('alarm_handler',Module,Args)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'add_alarm_handler',2}}] )-|['compiler_generated'] ) end
'delete_alarm_handler'/1 = fun (_0) -> case _0 of <Module> when call 'erlang':'is_atom' (_0) -> call 'gen_event':'delete_handler' ('alarm_handler',Module,[])
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'delete_alarm_handler',1}}] )-|['compiler_generated'] ) end
'init'/1 = fun (_0) -> {'ok',[]}
'handle_event'/2 = fun (_0,_1) -> case <_0,_1> of <{'set_alarm',Alarm},Alarms> when 'true' -> do call 'error_logger':'info_report' ([{'alarm_handler',{'set',Alarm}}|[]]) {'ok',[Alarm|Alarms]}
<{'clear_alarm',AlarmId},Alarms> when 'true' -> do call 'error_logger':'info_report' ([{'alarm_handler',{'clear',AlarmId}}|[]]) let <_2> = call 'lists':'keydelete' (AlarmId,1,Alarms) in {'ok',_2}
<_5,Alarms> when 'true' -> {'ok',Alarms} end
'handle_info'/2 = fun (_0,_1) -> {'ok',_1}
'handle_call'/2 = fun (_0,_1) -> case <_0,_1> of <'get_alarms',Alarms> when 'true' -> {'ok',Alarms,Alarms}
<_X_Query,Alarms> when 'true' -> {'ok',{'error','bad_query'},Alarms} end
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <'swap',Alarms> when 'true' -> {'alarm_handler',Alarms}
<_4,_5> when 'true' -> 'ok' end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('alarm_handler')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('alarm_handler',_0) end