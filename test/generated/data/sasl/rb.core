module 'rb' ['code_change'/3,'filter'/1,'filter'/2,'grep'/1,'h'/0,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'help'/0,'init'/1,'list'/0,'list'/1,'log_list'/0,'log_list'/1,'module_info'/0,'module_info'/1,'rescan'/0,'rescan'/1,'show'/0,'show'/1,'start'/0,'start'/1,'start_link'/1,'start_log'/1,'stop'/0,'stop_log'/0,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[114|[98|[46|[101|[114|[108]]]]]]]]]],1}]
, 'behaviour' = ['gen_server']
, 'record' = [{'state',[{'record_field',41,{'atom',41,'dir'}}|[{'record_field',41,{'atom',41,'data'}}|[{'record_field',41,{'atom',41,'device'}}|[{'record_field',41,{'atom',41,'max'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'abort'}}|[{'record_field',41,{'atom',41,'log'}}]]]]]]]}] ] 'start'/0 = fun () -> apply 'start'/1 ([])
'start'/1 = fun (_0) -> call 'supervisor':'start_child' ('sasl_sup',{'rb_server',{'rb','start_link',[_0|[]]},'temporary','brutal_kill','worker',['rb']})
'start_link'/1 = fun (_0) -> call 'gen_server':'start_link' ({'local','rb_server'},'rb',_0,[])
'stop'/0 = fun () -> call 'supervisor':'terminate_child' ('sasl_sup','rb_server')
'rescan'/0 = fun () -> apply 'rescan'/1 ([])
'rescan'/1 = fun (_0) -> apply 'call'/1 ({'rescan',_0})
'list'/0 = fun () -> apply 'list'/1 ('all')
'list'/1 = fun (_0) -> apply 'call'/1 ({'list',_0})
'log_list'/0 = fun () -> apply 'log_list'/1 ('all')
'log_list'/1 = fun (_0) -> apply 'call'/1 ({'log_list',_0})
'show'/0 = fun () -> apply 'call'/1 ('show')
'show'/1 = fun (_0) -> case _0 of <Number> when call 'erlang':'is_integer' (_0) -> apply 'call'/1 ({'show_number',Number})
<Type> when call 'erlang':'is_atom' (_0) -> apply 'call'/1 ({'show_type',Type})
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'show',1}}] )-|['compiler_generated'] ) end
'grep'/1 = fun (_0) -> apply 'call'/1 ({'grep',_0})
'filter'/1 = fun (_0) -> case _0 of <Filters> when call 'erlang':'is_list' (_0) -> apply 'call'/1 ({'filter',Filters})
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'filter',1}}] )-|['compiler_generated'] ) end
'filter'/2 = fun (_0,_1) -> case <_0,_1> of <Filters,FDates> when try (let <_4> = case call 'erlang':'is_list' (Filters) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'is_tuple' (FDates)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> _2-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'call'/1 ({'filter',{Filters,FDates}})
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'filter',2}}] )-|['compiler_generated'] ) end
'start_log'/1 = fun (_0) -> apply 'call'/1 ({'start_log',_0})
'stop_log'/0 = fun () -> apply 'call'/1 ('stop_log')
'h'/0 = fun () -> apply 'help'/0 ()
'help'/0 = fun () -> do call 'io':'format' ([126|[110|[82|[101|[112|[111|[114|[116|[32|[66|[114|[111|[119|[115|[101|[114|[32|[84|[111|[111|[108|[32|[45|[32|[117|[115|[97|[103|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[116|[97|[114|[116|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[116|[97|[114|[116|[32|[116|[104|[101|[32|[114|[98|[95|[115|[101|[114|[118|[101|[114|[32|[119|[105|[116|[104|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[116|[97|[114|[116|[40|[79|[112|[116|[105|[111|[110|[115|[41|[32|[32|[45|[32|[119|[104|[101|[114|[101|[32|[79|[112|[116|[105|[111|[110|[115|[32|[105|[115|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do apply 'print_options'/0 () do call 'io':'format' ([114|[98|[58|[104|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[116|[104|[105|[115|[32|[104|[101|[108|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[104|[101|[108|[112|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[116|[104|[105|[115|[32|[104|[101|[108|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[108|[105|[115|[116|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[108|[105|[115|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[108|[105|[115|[116|[40|[84|[121|[112|[101|[41|[32|[32|[32|[32|[32|[32|[45|[32|[108|[105|[115|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[108|[111|[103|[95|[108|[105|[115|[116|[40|[41|[32|[32|[32|[32|[32|[32|[45|[32|[108|[111|[103|[32|[108|[105|[115|[116|[32|[111|[102|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[108|[111|[103|[95|[108|[105|[115|[116|[40|[84|[121|[112|[101|[41|[32|[32|[45|[32|[108|[111|[103|[32|[108|[105|[115|[116|[32|[111|[102|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[99|[117|[114|[114|[101|[110|[116|[108|[121|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[115|[32|[97|[114|[101|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do apply 'print_types'/0 () do call 'io':'format' ([114|[98|[58|[103|[114|[101|[112|[40|[82|[101|[103|[69|[120|[112|[41|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[115|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[82|[101|[103|[69|[120|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[82|[101|[103|[69|[120|[112|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[118|[97|[108|[105|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[114|[101|[58|[114|[117|[110|[47|[50|[32|[111|[114|[32|[114|[101|[58|[114|[117|[110|[47|[51|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[102|[105|[108|[116|[101|[114|[40|[70|[105|[108|[116|[101|[114|[115|[41|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[115|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[70|[105|[108|[116|[101|[114|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[114|[101|[112|[111|[114|[116|[115|[32|[109|[117|[115|[116|[32|[98|[101|[32|[112|[114|[111|[112|[108|[105|[115|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[70|[105|[108|[116|[101|[114|[115|[32|[105|[115|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[116|[117|[112|[108|[101|[115|[32|[111|[102|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[111|[114|[109|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do apply 'print_filters'/0 () do call 'io':'format' ([114|[98|[58|[102|[105|[108|[116|[101|[114|[40|[70|[105|[108|[116|[101|[114|[115|[44|[32|[68|[97|[116|[101|[115|[41|[32|[32|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[115|[97|[109|[101|[32|[97|[115|[32|[114|[98|[58|[102|[105|[108|[116|[101|[114|[47|[49|[32|[98|[117|[116|[32|[97|[99|[99|[101|[112|[116|[115|[32|[100|[97|[116|[101|[32|[114|[97|[110|[103|[101|[115|[32|[116|[111|[32|[102|[105|[108|[116|[101|[114|[32|[114|[101|[112|[111|[114|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[68|[97|[116|[101|[115|[32|[109|[117|[115|[116|[32|[98|[101|[32|[111|[102|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[111|[114|[109|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do apply 'print_dates'/0 () do call 'io':'format' ([114|[98|[58|[114|[101|[115|[99|[97|[110|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[114|[101|[115|[99|[97|[110|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[119|[105|[116|[104|[32|[115|[97|[109|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[111|[112|[116|[105|[111|[110|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[114|[101|[115|[99|[97|[110|[40|[79|[112|[116|[105|[111|[110|[115|[41|[32|[45|[32|[114|[101|[115|[99|[97|[110|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[119|[105|[116|[104|[32|[110|[101|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[111|[112|[116|[105|[111|[110|[115|[46|[32|[79|[112|[116|[105|[111|[110|[115|[32|[105|[115|[32|[115|[97|[109|[101|[32|[97|[115|[32|[105|[110|[32|[115|[116|[97|[114|[116|[47|[49|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[104|[111|[119|[40|[78|[117|[109|[98|[101|[114|[41|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[32|[110|[111|[32|[78|[117|[109|[98|[101|[114|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[104|[111|[119|[40|[84|[121|[112|[101|[41|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[104|[111|[119|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[116|[97|[114|[116|[95|[108|[111|[103|[40|[70|[105|[108|[101|[41|[32|[45|[32|[114|[101|[100|[105|[114|[101|[99|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[111|[32|[102|[105|[108|[101|[32|[111|[114|[32|[105|[111|[95|[100|[101|[118|[105|[99|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([114|[98|[58|[115|[116|[111|[112|[95|[108|[111|[103|[40|[41|[32|[32|[32|[32|[32|[32|[45|[32|[99|[108|[111|[115|[101|[32|[116|[104|[101|[32|[108|[111|[103|[32|[102|[105|[108|[101|[32|[97|[110|[100|[32|[114|[101|[100|[105|[114|[101|[99|[116|[32|[116|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) call 'io':'format' ([114|[98|[58|[115|[116|[111|[112|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[116|[111|[112|[32|[116|[104|[101|[32|[114|[98|[95|[115|[101|[114|[118|[101|[114|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'call'/1 = fun (_0) -> call 'gen_server':'call' ('rb_server',_0,'infinity')
'print_options'/0 = fun () -> do call 'io':'format' ([32|[32|[32|[32|[32|[32|[123|[115|[116|[97|[114|[116|[95|[108|[111|[103|[44|[32|[70|[105|[108|[101|[78|[97|[109|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[123|[109|[97|[120|[44|[32|[77|[97|[120|[78|[111|[79|[102|[82|[101|[112|[111|[114|[116|[115|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[77|[97|[120|[78|[111|[79|[102|[82|[101|[112|[111|[114|[116|[115|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[110|[32|[105|[110|[116|[101|[103|[101|[114|[32|[111|[114|[32|[39|[97|[108|[108|[39|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[123|[114|[101|[112|[111|[114|[116|[95|[100|[105|[114|[44|[32|[68|[105|[114|[83|[116|[114|[105|[110|[103|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[68|[105|[114|[83|[116|[114|[105|[110|[103|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[32|[115|[116|[114|[105|[110|[103|[32|[119|[105|[116|[104|[111|[117|[116|[32|[116|[114|[97|[105|[108|[105|[110|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[100|[101|[108|[105|[109|[105|[116|[101|[114|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[123|[115|[97|[115|[108|[44|[32|[101|[114|[114|[111|[114|[95|[108|[111|[103|[103|[101|[114|[95|[109|[102|[95|[100|[105|[114|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[123|[116|[121|[112|[101|[44|[32|[82|[101|[112|[111|[114|[116|[84|[121|[112|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[82|[101|[112|[111|[114|[116|[84|[121|[112|[101|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[44|[32|[39|[97|[108|[108|[39|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[111|[114|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[123|[97|[98|[111|[114|[116|[95|[111|[110|[95|[101|[114|[114|[111|[114|[44|[32|[66|[111|[111|[108|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[66|[111|[111|[108|[58|[32|[116|[114|[117|[101|[32|[124|[32|[102|[97|[108|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[102|[97|[108|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
'print_types'/0 = fun () -> do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[99|[114|[97|[115|[104|[95|[114|[101|[112|[111|[114|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[114|[101|[112|[111|[114|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[111|[103|[114|[101|[115|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]) call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[101|[114|[114|[111|[114|[126|[110]]]]]]]]]]]]]]]]]])
'print_filters'/0 = fun () -> do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[105|[110|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[44|[32|[110|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[101|[120|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[44|[32|[114|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[82|[101|[103|[69|[120|[112|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[118|[97|[108|[105|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[114|[101|[58|[114|[117|[110|[47|[50|[32|[111|[114|[32|[114|[101|[58|[114|[117|[110|[47|[51|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[44|[32|[114|[101|[44|[32|[110|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[101|[120|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'print_dates'/0 = fun () -> do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[83|[116|[97|[114|[116|[68|[97|[116|[101|[44|[32|[69|[110|[100|[68|[97|[116|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[32|[61|[32|[69|[110|[100|[68|[97|[116|[101|[32|[61|[32|[123|[123|[89|[44|[77|[44|[68|[125|[44|[123|[72|[44|[77|[44|[83|[125|[125|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[98|[101|[116|[119|[101|[101|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[32|[97|[110|[100|[32|[69|[110|[100|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[83|[116|[97|[114|[116|[68|[97|[116|[101|[44|[32|[102|[114|[111|[109|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[103|[114|[101|[97|[116|[101|[114|[32|[116|[104|[97|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([32|[32|[32|[32|[32|[32|[45|[32|[123|[69|[110|[100|[68|[97|[116|[101|[44|[32|[116|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]) call 'io':'format' ([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[108|[101|[115|[115|[101|[114|[32|[116|[104|[97|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'init'/1 = fun (_0) -> do call 'erlang':'process_flag' ('priority','low') do call 'erlang':'process_flag' ('trap_exit','true') let <Log> = apply 'get_option'/3 (_0,'start_log','standard_io') in let <Device> = apply 'open_log_file'/1 (Log) in let <Dir> = apply 'get_report_dir'/1 (_0) in let <Max> = apply 'get_option'/3 (_0,'max','all') in let <Type> = apply 'get_option'/3 (_0,'type','all') in let <Abort> = apply 'get_option'/3 (_0,'abort_on_error','false') in let <_7> = call 'erlang':'++' (Dir,[47]) in let <Data> = apply 'scan_files'/3 (_7,Max,Type) in let <_9> = call 'erlang':'++' (Dir,[47]) in {'ok',{'state',_9,Data,Device,Max,Type,Abort,Log}}
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'rescan',Options},_X_From,State> when 'true' -> let <_224,_225> = case apply 'get_option'/3 (Options,'start_log',{'undefined'}) of <{'undefined'}> when 'true' -> (case State of (<({'state',_78,_79,_rec0,_80,_81,_82,_83}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_85,_86,_87,_88,_89,_90,_rec1}-|['compiler_generated'] )> when 'true' -> <_rec0,_rec1>-|['compiler_generated'] )
(<_91> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_84> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Log> when 'true' -> (case State of (<({'state',_92,_93,_rec2,_94,_95,_96,_97}-|['compiler_generated'] )> when 'true' -> do apply 'close_device'/1 (_rec2) let <_9> = apply 'open_log_file'/1 (Log) in <_9,Log>-|['compiler_generated'] )
(<_98> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end in (case State of (<({'state',_99,_100,_101,_rec3,_102,_103,_104}-|['compiler_generated'] )> when 'true' -> let <Max> = apply 'get_option'/3 (Options,'max',_rec3) in (case State of (<({'state',_106,_107,_108,_109,_rec4,_110,_111}-|['compiler_generated'] )> when 'true' -> let <Type> = apply 'get_option'/3 (Options,'type',_rec4) in let <Abort> = apply 'get_option'/3 (Options,'abort_on_error','false') in (case State of (<({'state',_rec5,_113,_114,_115,_116,_117,_118}-|['compiler_generated'] )> when 'true' -> let <Data> = apply 'scan_files'/3 (_rec5,Max,Type) in case State of <{'state',_rec7,_rec8,_rec9,_rec10,_rec11,_rec12,_rec13}> when 'true' -> let <_25> = {'state',_rec7,Data,(_224-|['compiler_generated'] ),Max,Type,Abort,(_225-|['compiler_generated'] )} in {'reply','ok',_25}
(<_120> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_119> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_121,_X_From,{'state',_122,'undefined',_123,_124,_125,_126,_127}> when 'true' -> {'reply',{'error','no_data'},{'state','undefined','undefined','undefined','undefined','undefined','undefined','undefined'}}
<{'list',Type},_X_From,State> when 'true' -> (case State of (<({'state',_128,_rec14,_129,_130,_131,_132,_133}-|['compiler_generated'] )> when 'true' -> do apply 'print_list'/3 ('standard_io',_rec14,Type) {'reply','ok',State}-|['compiler_generated'] )
(<_134> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'log_list',Type},_X_From,State> when 'true' -> (case State of (<({'state',_135,_136,_rec15,_137,_138,_139,_140}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_142,_rec16,_143,_144,_145,_146,_147}-|['compiler_generated'] )> when 'true' -> do apply 'print_list'/3 (_rec15,_rec16,Type) {'reply','ok',State}-|['compiler_generated'] )
(<_148> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_141> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'start_log',FileName},_X_From,State> when 'true' -> let <NewDevice> = apply 'open_log_file'/1 (FileName) in case State of <{'state',_149,_150,_151,_152,_153,_154,_155}> when 'true' -> let <_36> = call 'erlang':'setelement' (4,State,NewDevice) in {'reply','ok',_36}
(<_156> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'stop_log',_X_From,State> when 'true' -> (case State of (<({'state',_157,_158,_rec18,_159,_160,_161,_162}-|['compiler_generated'] )> when 'true' -> do apply 'close_device'/1 (_rec18) case State of <{'state',_164,_165,_166,_167,_168,_169,_170}> when 'true' -> let <_41> = call 'erlang':'setelement' (4,State,'standard_io') in {'reply','ok',_41}
(<_171> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_163> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'show_number',Number},_X_From,State> when 'true' -> case State of <{'state',Dir,Data,Device,_172,_173,Abort,Log}> when 'true' -> let <NewDevice> = apply 'print_report_by_num'/6 (Dir,Data,Number,Device,Abort,Log) in case State of <{'state',_174,_175,_176,_177,_178,_179,_180}> when 'true' -> let <_46> = call 'erlang':'setelement' (4,State,NewDevice) in {'reply','ok',_46}
(<_181> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_42> when 'true' -> primop 'match_fail' ({'badmatch',_42})-|['compiler_generated'] ) end
<{'show_type',Type},_X_From,State> when 'true' -> case State of <{'state',Dir,Data,Device,_182,_183,Abort,Log}> when 'true' -> let <NewDevice> = apply 'print_typed_reports'/6 (Dir,Data,Type,Device,Abort,Log) in case State of <{'state',_184,_185,_186,_187,_188,_189,_190}> when 'true' -> let <_51> = call 'erlang':'setelement' (4,State,NewDevice) in {'reply','ok',_51}
(<_191> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_47> when 'true' -> primop 'match_fail' ({'badmatch',_47})-|['compiler_generated'] ) end
<'show',_X_From,State> when 'true' -> case State of <{'state',Dir,Data,Device,_192,_193,Abort,Log}> when 'true' -> let <NewDevice> = apply 'print_all_reports'/5 (Dir,Data,Device,Abort,Log) in case State of <{'state',_194,_195,_196,_197,_198,_199,_200}> when 'true' -> let <_56> = call 'erlang':'setelement' (4,State,NewDevice) in {'reply','ok',_56}
(<_201> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_52> when 'true' -> primop 'match_fail' ({'badmatch',_52})-|['compiler_generated'] ) end
<{'grep',RegExp},_X_From,State> when 'true' -> case State of <{'state',Dir,Data,Device,_202,_203,Abort,Log}> when 'true' -> try apply 'print_grep_reports'/6 (Dir,Data,RegExp,Device,Abort,Log) of <_58> -> case State of <{'state',_204,_205,_206,_207,_208,_209,_210}> when 'true' -> let <_61> = call 'erlang':'setelement' (4,State,_58) in {'reply','ok',_61}
(<_211> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end catch <_65,_64,_63> -> case <_65,_64,_63> of <('error'-|['compiler_generated'] ),Error,_212> when 'true' -> {'reply',{'error',Error},State}
(<_231,_232,_233> when 'true' -> primop 'raise' (_233,_232)-|['compiler_generated'] ) end
(<_57> when 'true' -> primop 'match_fail' ({'badmatch',_57})-|['compiler_generated'] ) end
<{'filter',Filters},_X_From,State> when 'true' -> case State of <{'state',Dir,Data,Device,_213,_214,Abort,Log}> when 'true' -> try apply 'filter_all_reports'/6 (Dir,Data,Filters,Device,Abort,Log) of <_67> -> case State of <{'state',_215,_216,_217,_218,_219,_220,_221}> when 'true' -> let <_70> = call 'erlang':'setelement' (4,State,_67) in {'reply','ok',_70}
(<_222> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end catch <_74,_73,_72> -> case <_74,_73,_72> of <('error'-|['compiler_generated'] ),Error,_223> when 'true' -> {'reply',{'error',Error},State}
(<_235,_236,_237> when 'true' -> primop 'raise' (_237,_236)-|['compiler_generated'] ) end
(<_66> when 'true' -> primop 'match_fail' ({'badmatch',_66})-|['compiler_generated'] ) end
(<_77,_76,_75> when 'true' -> (primop 'match_fail' ({'function_clause',_77,_76,_75})-|[{'function_name',{'handle_call',3}}] )-|['compiler_generated'] ) end
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Reason,{'state',_4,_5,Device,_6,_7,_8,_9}> when 'true' -> apply 'close_device'/1 (Device)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'terminate',2}}] )-|['compiler_generated'] ) end
'handle_cast'/2 = fun (_0,_1) -> {'noreply',_1}
'handle_info'/2 = fun (_0,_1) -> {'noreply',_1}
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'open_log_file'/1 = fun (_0) -> case _0 of <'standard_io'> when 'true' -> 'standard_io'
<Fd> when let <_1> = call 'erlang':'is_atom' (_0) in let <_2> = call 'erlang':'=/=' (_0,'standard_error') in call 'erlang':'and' (_1,_2) -> case call 'erlang':'whereis' (Fd) of <'undefined'> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[110|[97|[109|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[32|[39|[126|[116|[115|[39|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Fd|[]]) do call 'io':'format' ([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]) apply 'open_log_file'/1 ('standard_io')
<Pid> when 'true' -> apply 'open_log_file'/1 (Pid) end
<Fd> when call 'erlang':'is_pid' (_0) -> Fd
<FileName> when call 'erlang':'is_list' (_0) -> case call 'file':'open' (FileName,['write'|['append'|[{'encoding','utf8'}]]]) of <{'ok',Fd}> when 'true' -> Fd
<Error> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[32|[40|[126|[119|[41|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FileName|[Error|[]]]) do call 'io':'format' ([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]) 'standard_io' end
<'standard_error'> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]) 'standard_io'
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'open_log_file',1}}] )-|['compiler_generated'] ) end
'close_device'/1 = fun (_0) -> case _0 of <Fd> when call 'erlang':'is_pid' (_0) -> catch call 'file':'close' (Fd)
<_2> when 'true' -> 'ok' end
'get_option'/3 = fun (_0,_1,_2) -> case call 'lists':'keysearch' (_1,1,_0) of <{'value',{_X_Key,Value}}> when 'true' -> Value
<_7> when 'true' -> _2 end
'get_report_dir'/1 = fun (_0) -> case call 'lists':'keysearch' ('report_dir',1,_0) of <{'value',{_X_Key,RptDir}}> when 'true' -> RptDir
<_5> when 'true' -> let <_1> = catch call 'application':'get_env' ('sasl','error_logger_mf_dir') in case _1 of <{'ok',Dir}> when 'true' -> Dir
<_6> when 'true' -> call 'erlang':'exit' ([99|[97|[110|[110|[111|[116|[32|[108|[111|[99|[97|[116|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) end end
'scan_files'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'++' (_0,[47|[105|[110|[100|[101|[120]]]]]]) in case call 'file':'open' (_3,['raw'|['read']]) of <{'ok',Fd}> when 'true' -> let <_4> = catch call 'file':'read' (Fd,1) in case _4 of <{'ok',[LastWritten|[]]}> when 'true' -> case call 'file':'close' (Fd) of <'ok'> when 'true' -> let <Files> = apply 'make_file_list'/2 (_0,LastWritten) in apply 'scan_files'/4 (_0,Files,_1,_2)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_X_X> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) call 'erlang':'exit' ([99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]) end
<_X_X> when 'true' -> call 'erlang':'exit' ([99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]) end
'make_file_list'/2 = fun (_0,_1) -> case call 'file':'list_dir' (_0) of <{'ok',FileNames}> when 'true' -> let <_6> = fun (_4) -> let <_2> = catch call 'erlang':'list_to_integer' (_4) in case _2 of <Int> when call 'erlang':'is_integer' (_2) -> {'true',Int}
<_12> when 'true' -> 'false' end in let <FileNumbers> = call 'lists':'zf' (_6,FileNames) in let <_8> = call 'lists':'sort' (FileNumbers) in apply 'shift'/2 (_8,_1)
<_13> when 'true' -> call 'erlang':'exit' ({'bad_directory',_0}) end
'shift'/2 = fun (_0,_1) -> apply 'shift'/3 (_0,_1,[])
'shift'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[H|T],_7,Res> when call 'erlang':'=:=' (_7,H) -> let <_3> = call 'lists':'reverse' (T) in [H|call 'erlang':'++' (Res,_3)]
<[H|T],First,Res> when 'true' -> apply 'shift'/3 (T,First,[H|Res])
<[],_8,Res> when 'true' -> Res
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'shift',3}}] )-|['compiler_generated'] ) end
'scan_files'/4 = fun (_0,_1,_2,_3) -> apply 'scan_files'/6 (_0,1,_1,[],_2,_3)
'scan_files'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_Dir,_17,[],Res,_X_Max,_X_Type> when 'true' -> Res
<_X_Dir,_18,_X_Files,Res,Max,_X_Type> when call 'erlang':'=<' (Max,0) -> Res
<Dir,No,[H|T],Res,Max,Type> when 'true' -> let <Data> = apply 'get_report_data_from_file'/5 (Dir,No,H,Max,Type) in let <Len> = call 'erlang':'length' (Data) in let <NewMax> = apply 'dec_max'/2 (Max,Len) in let <NewNo> = call 'erlang':'+' (No,Len) in let <NewData> = call 'erlang':'++' (Data,Res) in apply 'scan_files'/6 (Dir,NewNo,T,NewData,NewMax,Type)
(<_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11})-|[{'function_name',{'scan_files',6}}] )-|['compiler_generated'] ) end
'dec_max'/2 = fun (_0,_1) -> case <_0,_1> of <'all',_4> when 'true' -> 'all'
<X,Y> when 'true' -> call 'erlang':'-' (X,Y) end
'get_report_data_from_file'/5 = fun (_0,_1,_2,_3,_4) -> let <Fname> = call 'erlang':'integer_to_list' (_2) in let <FileName> = call 'lists':'concat' ([_0|[Fname|[]]]) in case call 'file':'open' (FileName,['read']) of <{'ok',Fd}> when call 'erlang':'is_pid' (Fd) -> apply 'read_reports'/5 (_1,Fd,Fname,_3,_4)
<_14> when 'true' -> let <_7> = call 'erlang':'++' ([67|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32]]]]]]]]]]]]]]]],Fname) in [{_1,'unknown',_7,[63|[63|[63]]],Fname,0}|[]] end
'read_reports'/5 = fun (_0,_1,_2,_3,_4) -> do call 'io':'format' ([114|[98|[58|[32|[114|[101|[97|[100|[105|[110|[103|[32|[114|[101|[112|[111|[114|[116|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]) let <_5> = catch apply 'read_reports'/3 (_1,[],_4) in case _5 of <{'ok',Res}> when 'true' -> case call 'file':'close' (_1) of <'ok'> when 'true' -> do call 'io':'format' ([100|[111|[110|[101|[46|[126|[110]]]]]]]) let <_8> = case <> of <> when try let <_7> = call 'erlang':'length' (Res) in call 'erlang':'>' (_7,_3) of <Try> -> Try catch <T,R> -> 'false' -> call 'lists':'sublist' (Res,1,_3)
<> when 'true' -> Res end in apply 'add_report_data'/3 (_8,_0,_2)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'error',_@r0 = [Problem|Res]}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) do call 'io':'format' ([69|[114|[114|[111|[114|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]],[Problem|[]]) let <_11> = call 'erlang':'length' (Res) in do call 'io':'format' ([83|[97|[108|[118|[97|[103|[101|[100|[32|[126|[112|[32|[101|[110|[116|[114|[105|[101|[115|[32|[102|[114|[111|[109|[32|[99|[111|[114|[114|[117|[112|[116|[32|[114|[101|[112|[111|[114|[116|[32|[102|[105|[108|[101|[32|[126|[116|[115|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_11|[_2|[]]]) let <_13> = case <> of <> when try let <_12> = call 'erlang':'+' (1,call 'erlang':'length' (Res)) in call 'erlang':'>' (_12,_3) of <Try> -> Try catch <T,R> -> 'false' -> call 'lists':'sublist' (_@r0,1,_3)
<> when 'true' -> _@r0 end in apply 'add_report_data'/3 (_13,_0,_2)
<Else> when 'true' -> do call 'io':'format' ([101|[114|[114|[32|[126|[116|[112|[126|[110]]]]]]]]],[Else|[]]) let <_15> = call 'erlang':'++' ([67|[97|[110|[39|[116|[32|[114|[101|[97|[100|[32|[114|[101|[112|[111|[114|[116|[115|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_2) in [{_0,'unknown',_15,[63|[63|[63]]],_2,0}|[]] end
'add_report_data'/3 = fun (_0,_1,_2) -> apply 'add_report_data'/4 (_0,_1,_2,[])
'add_report_data'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{Type,ShortDescr,Date,FilePos}|T],No,FName,Res> when 'true' -> let <_4> = call 'erlang':'+' (No,1) in apply 'add_report_data'/4 (T,_4,FName,[{No,Type,ShortDescr,Date,FName,FilePos}|Res])
<[],_X_No,_X_FName,Res> when 'true' -> Res
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'add_report_data',4}}] )-|['compiler_generated'] ) end
'read_reports'/3 = fun (_0,_1,_2) -> case call 'file':'position' (_0,'cur') of <{'ok',FilePos}> when 'true' -> let <_4> = catch apply 'read_report'/1 (_0) in case _4 of <{'ok',Report}> when 'true' -> let <RealType> = apply 'get_type'/1 (Report) in case apply 'get_short_descr'/1 (Report) of <{ShortDescr,Date}> when 'true' -> let <Rep> = {RealType,ShortDescr,Date,FilePos} in case <> of <> when call 'erlang':'=:=' (_2,'all') -> apply 'read_reports'/3 (_0,[Rep|_1],_2)
<> when call 'erlang':'==' (RealType,_2) -> apply 'read_reports'/3 (_0,[Rep|_1],_2)
<> when call 'erlang':'is_list' (_2) -> case call 'lists':'member' (RealType,_2) of <'true'> when 'true' -> apply 'read_reports'/3 (_0,[Rep|_1],_2)
<_13> when 'true' -> apply 'read_reports'/3 (_0,_1,_2) end
<> when 'true' -> apply 'read_reports'/3 (_0,_1,_2) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'error',Error}> when 'true' -> {'error',[{'unknown',Error,[],FilePos}|_1]}
<'eof'> when 'true' -> {'ok',_1}
<{'EXIT',Reason}> when 'true' -> [{'unknown',Reason,[],FilePos}|_1]
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'read_report'/1 = fun (_0) -> case call 'io':'get_chars' (_0,'',2) of <[Hi|[Lo|[]]]> when 'true' -> let <Size> = apply 'get_int16'/2 (Hi,Lo) in case call 'io':'get_chars' (_0,'',Size) of <'eof'> when 'true' -> {'error',[80|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]}
<List> when 'true' -> let <Bin> = call 'erlang':'list_to_binary' (List) in let <Ref> = call 'erlang':'make_ref' () in let <_5> = catch let <_4> = call 'erlang':'binary_to_term' (Bin) in {Ref,_4} in case _5 of <{'EXIT',_10}> when 'true' -> {'error',[73|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[101|[114|[108|[97|[110|[103|[32|[116|[101|[114|[109|[32|[105|[110|[32|[108|[111|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
<{_11,Term}> when call 'erlang':'=:=' (_11,Ref) -> {'ok',Term}
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end end
<'eof'> when 'true' -> 'eof'
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'get_int16'/2 = fun (_0,_1) -> let <_3> = call 'erlang':'bsl' (_0,8) in let <_4> = call 'erlang':'band' (_3,65280) in let <_2> = call 'erlang':'band' (_1,255) in call 'erlang':'bor' (_4,_2)
'get_type'/1 = fun (_0) -> case _0 of <{_X_Time,{'error_report',_X_Pid,{_2,'crash_report',_3}}}> when 'true' -> 'crash_report'
<{_X_Time,{'error_report',_X_Pid,{_4,'supervisor_report',_5}}}> when 'true' -> 'supervisor_report'
<{_X_Time,{'info_report',_X_Pid,{_6,'progress',_7}}}> when 'true' -> 'progress'
<{_X_Time,{Type,_8,_9}}> when 'true' -> Type
<_10> when 'true' -> 'unknown' end
'get_short_descr'/1 = fun (_0) -> case _0 of <{{Date,Time},{'error_report',Pid,{_13,'crash_report',Rep}}}> when 'true' -> case Rep of <[OwnRep|_14]> when 'true' -> let <_4> = case call 'lists':'keysearch' ('registered_name',1,OwnRep) of <{'value',{_X_Key,[]}}> when 'true' -> case call 'lists':'keysearch' ('initial_call',1,OwnRep) of <{'value',{_X_K,{M,_X_F,_X_A}}}> when 'true' -> M
<_15> when 'true' -> Pid end
<{'value',{_X_Key,N}}> when 'true' -> N
<_16> when 'true' -> Pid end in let <_6> = apply 'date_str'/2 (Date,Time) in {_4,_6}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<{{Date,Time},{'error_report',Pid,{_17,'supervisor_report',Rep}}}> when 'true' -> let <_8> = case call 'lists':'keysearch' ('supervisor',1,Rep) of <{'value',{_X_Key,N}}> when call 'erlang':'is_atom' (N) -> N
<_18> when 'true' -> Pid end in let <_10> = apply 'date_str'/2 (Date,Time) in {_8,_10}
<{{Date,Time},{_X_Type,Pid,_19}}> when 'true' -> let <_11> = apply 'date_str'/2 (Date,Time) in {Pid,_11}
<_20> when 'true' -> {'???',[63|[63|[63]]]} end
'date_str'/2 = fun (_0,_1) -> case <_0,_1> of <Date = {Y,Mo,D},Time = {H,Mi,S}> when 'true' -> case call 'application':'get_env' ('sasl','utc_log') of <{'ok','true'}> when 'true' -> case apply 'local_time_to_universal_time'/1 ({Date,Time}) of <{{YY,MoMo,DD},{HH,MiMi,SS}}> when 'true' -> let <_3> = call 'io_lib':'format' ([126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[32|[85|[84|[67]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[YY|[MoMo|[DD|[HH|[MiMi|[SS|[]]]]]]]) in call 'lists':'flatten' (_3)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<_8> when 'true' -> let <_4> = call 'io_lib':'format' ([126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Y|[Mo|[D|[H|[Mi|[S|[]]]]]]]) in call 'lists':'flatten' (_4) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'date_str',2}}] )-|['compiler_generated'] ) end
'local_time_to_universal_time'/1 = fun (_0) -> case _0 of <_@r0 = {Date,Time}> when 'true' -> case call 'calendar':'local_time_to_universal_time_dst' (_@r0) of <[UCT|[]]> when 'true' -> UCT
<[UCT1|[_X_UCT2|[]]]> when 'true' -> UCT1
<[]> when 'true' -> _@r0
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'local_time_to_universal_time',1}}] )-|['compiler_generated'] ) end
'print_list'/3 = fun (_0,_1,_2) -> let <Modifier> = call 'misc_supp':'modifier' (_0) in case apply 'find_widths'/5 (_1,Modifier,7,13,[]) of <{DescrWidth,DateWidth,Data}> when 'true' -> let <Format> = call 'lists':'concat' ([[126|[52|[115|[126|[50|[48|[115|[32|[126]]]]]]]]]|[DescrWidth|[[115|[126|[50|[48|[115|[126|[110]]]]]]]]]]) in do call 'io':'format' (_0,Format,[[78|[111]]|[[84|[121|[112|[101]]]]|[[80|[114|[111|[99|[101|[115|[115]]]]]]]|[[68|[97|[116|[101|[32|[32|[32|[32|[32|[84|[105|[109|[101]]]]]]]]]]]]]]]]]) do call 'io':'format' (_0,Format,[[61|[61]]|[[61|[61|[61|[61]]]]|[[61|[61|[61|[61|[61|[61|[61]]]]]]]|[[61|[61|[61|[61|[32|[32|[32|[32|[32|[61|[61|[61|[61]]]]]]]]]]]]]]]]]) apply 'print_list'/6 (_0,Data,_2,DescrWidth,DateWidth,Modifier)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'print_list'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_12,[],_13,_14,_15,_16> when 'true' -> 'true'
<Fd,[H|T],Type,Width,DateWidth,Modifier> when 'true' -> do apply 'print_one_report'/6 (Fd,H,Type,Width,DateWidth,Modifier) apply 'print_list'/6 (Fd,T,Type,Width,DateWidth,Modifier)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'print_list',6}}] )-|['compiler_generated'] ) end
'find_widths'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[],_X_Modifier,DescrWidth,DateWidth,Data> when 'true' -> let <_7> = call 'erlang':'+' (DescrWidth,1) in let <_6> = call 'erlang':'+' (DateWidth,1) in let <_5> = call 'lists':'reverse' (Data) in {_7,_6,_5}
<[H|T],Modifier,DescrWidth,DateWidth,Data> when 'true' -> let <DescrTerm> = call 'erlang':'element' (3,H) in let <_9> = call 'erlang':'++' (Modifier,[119]) in let <_10> = [126|_9] in let <Descr> = call 'io_lib':'format' (_10,[DescrTerm|[]]) in let <DescrTry> = call 'string':'length' (Descr) in let <_13> = case <> of <> when call 'erlang':'>' (DescrTry,DescrWidth) -> DescrTry
<> when 'true' -> DescrWidth end in let <_15> = call 'erlang':'element' (4,H) in let <DateTry> = call 'string':'length' (_15) in let <_17> = case <> of <> when call 'erlang':'>' (DateTry,DateWidth) -> DateTry
<> when 'true' -> DateWidth end in let <NewH> = call 'erlang':'setelement' (3,H,Descr) in apply 'find_widths'/5 (T,Modifier,_13,_17,[NewH|Data])
(<_24,_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20})-|[{'function_name',{'find_widths',5}}] )-|['compiler_generated'] ) end
'print_one_report'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Fd,{No,RealType,ShortDescr,Date,_X_Fname,_X_FilePos},WantedType,Width,DateWidth,Modifier> when 'true' -> case <> of <> when call 'erlang':'=:=' (WantedType,'all') -> apply 'print_short_descr'/8 (Fd,No,RealType,ShortDescr,Date,Width,DateWidth,Modifier)
<> when call 'erlang':'==' (WantedType,RealType) -> apply 'print_short_descr'/8 (Fd,No,RealType,ShortDescr,Date,Width,DateWidth,Modifier)
<> when 'true' -> 'ok' end
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'print_one_report',6}}] )-|['compiler_generated'] ) end
'print_short_descr'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <Format> = call 'lists':'concat' ([[126|[52|[119|[126|[50|[48]]]]]]|[_7|[[119|[32|[126]]]|[_5|[_7|[[115|[126]]|[_6|[[115|[126|[110]]]]]]]]]]]) in call 'io':'format' (_0,Format,[_1|[_2|[_3|[_4|[]]]]])
'print_report_by_num'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'print_report'/6 (_0,_1,_2,_3,_4,_5) of <{_13,Device1}> when 'true' -> Device1
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'print_typed_reports'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_Dir,[],_X_Type,Device,_X_Abort,_X_Log> when 'true' -> Device
<Dir,Data,Type,Device,Abort,Log> when 'true' -> let <_6> = call 'erlang':'hd' (Data) in let <_10> = case call 'erlang':'element' (2,_6) of <_19> when call 'erlang':'=:=' (_19,Type) -> let <_7> = call 'erlang':'hd' (Data) in let <_8> = call 'erlang':'element' (1,_7) in apply 'print_report'/6 (Dir,Data,_8,Device,Abort,Log)
<_20> when 'true' -> {'proceed',Device} end in case _10 of <{Next,Device1}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Next,'abort') -> Device1
<> when 'true' -> let <_12> = call 'erlang':'tl' (Data) in apply 'print_typed_reports'/6 (Dir,_12,Type,Device1,Abort,Log) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
'print_all_reports'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Dir,[],Device,_X_Abort,_X_Log> when 'true' -> Device
<Dir,Data,Device,Abort,Log> when 'true' -> let <_5> = call 'erlang':'hd' (Data) in let <_6> = call 'erlang':'element' (1,_5) in case apply 'print_report'/6 (Dir,Data,_6,Device,Abort,Log) of <{Next,Device1}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Next,'abort') -> Device1
<> when 'true' -> let <_8> = call 'erlang':'tl' (Data) in apply 'print_all_reports'/5 (Dir,_8,Device1,Abort,Log) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'print_report'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'find_report'/2 (_1,_2) of <{Fname,FilePosition}> when 'true' -> let <FileName> = call 'lists':'concat' ([_0|[Fname|[]]]) in case call 'file':'open' (FileName,['read']) of <{'ok',Fd}> when 'true' -> apply 'read_rep'/5 (Fd,FilePosition,_3,_4,_5)
<_15> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]],[Fname|[]]) {'proceed',_3} end
<'no_report'> when 'true' -> {'proceed',_3}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'find_report'/2 = fun (_0,_1) -> case <_0,_1> of <[{No,_X_Type,_X_Descr,_X_Date,Fname,FilePosition}|_X_T],_4> when call 'erlang':'=:=' (_4,No) -> {Fname,FilePosition}
<[_X_H|T],No> when 'true' -> apply 'find_report'/2 (T,No)
<[],No> when 'true' -> do call 'io':'format' ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[114|[101|[112|[111|[114|[116|[32|[119|[105|[116|[104|[32|[110|[117|[109|[98|[101|[114|[32|[126|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[No|[]]) 'no_report'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'find_report',2}}] )-|['compiler_generated'] ) end
'print_grep_reports'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_Dir,[],_X_RegExp,Device,_X_Abort,_X_Log> when 'true' -> Device
<Dir,Data,RegExp,Device,Abort,Log> when 'true' -> let <_6> = call 'erlang':'hd' (Data) in let <_7> = call 'erlang':'element' (1,_6) in case apply 'print_grep_report'/7 (Dir,Data,_7,Device,RegExp,Abort,Log) of <{Next,Device1}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Next,'abort') -> Device1
<> when 'true' -> let <_9> = call 'erlang':'tl' (Data) in apply 'print_grep_reports'/6 (Dir,_9,RegExp,Device1,Abort,Log) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end
'print_grep_report'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'find_report'/2 (_1,_2) of <{Fname,FilePosition}> when 'true' -> let <FileName> = call 'lists':'concat' ([_0|[Fname|[]]]) in case call 'file':'open' (FileName,['read']) of <{'ok',Fd}> when call 'erlang':'is_pid' (Fd) -> apply 'check_rep'/7 (Fd,FilePosition,_3,_4,_2,_5,_6)
<_17> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]],[Fname|[]]) {'proceed',_3} end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'check_rep'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'read_rep_msg'/2 (_0,_1) of <{Date,Msg}> when 'true' -> let <_7> = call 'io_lib':'format' ([126|[116|[112]]],[Msg|[]]) in let <MsgStr> = call 'lists':'flatten' (_7) in case apply 'run_re'/2 (MsgStr,_3) of <'match'> when 'true' -> do call 'io':'format' ([70|[111|[117|[110|[100|[32|[109|[97|[116|[99|[104|[32|[105|[110|[32|[114|[101|[112|[111|[114|[116|[32|[110|[117|[109|[98|[101|[114|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_4|[]]) let <_9> = catch call 'rb_format_supp':'print' (Date,Msg,_2) in case _9 of <{'EXIT',_20}> when 'true' -> apply 'handle_bad_form'/5 (Date,Msg,_2,_5,_6)
<_21> when 'true' -> {'proceed',_2} end
<_22> when 'true' -> {'proceed',_2} end
<_23> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',_2} end
'run_re'/2 = fun (_0,_1) -> case <_0,_1> of <Subject,{Regexp,Options}> when 'true' -> apply 'run_re'/3 (Subject,Regexp,Options)
<Subject,Regexp> when 'true' -> apply 'run_re'/3 (Subject,Regexp,[]) end
'run_re'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'--' (_2,['unicode']) in case call 're':'run' (_0,_1,['unicode'|_3]) of <'nomatch'> when 'true' -> 'nomatch'
<_8> when 'true' -> 'match' end
'filter_all_reports'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_Dir,[],_X_Filters,Device,_X_Abort,_X_Log> when 'true' -> Device
<Dir,Data,Filters,Device,Abort,Log> when 'true' -> let <_6> = call 'erlang':'hd' (Data) in let <_7> = call 'erlang':'element' (1,_6) in case apply 'filter_report'/7 (Dir,Data,Filters,_7,Device,Abort,Log) of <{Next,Device1}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Next,'abort') -> Device1
<> when 'true' -> let <_9> = call 'erlang':'tl' (Data) in apply 'filter_all_reports'/6 (Dir,_9,Filters,Device1,Abort,Log) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end
'filter_report'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'find_report'/2 (_1,_3) of <{Fname,FilePosition}> when 'true' -> let <FileName> = call 'lists':'concat' ([_0|[Fname|[]]]) in case call 'file':'open' (FileName,['read']) of <{'ok',Fd}> when 'true' -> apply 'filter_rep'/6 (_2,Fd,FilePosition,_4,_5,_6)
<_17> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]],[Fname|[]]) {'proceed',_4} end
<'no_report'> when 'true' -> {'proceed',_4}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'filter_rep'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <{Filters,FDates},Fd,FilePosition,Device,Abort,Log> when 'true' -> let <RepMsg> = apply 'read_rep_msg'/2 (Fd,FilePosition) in case RepMsg of <{_X_DateStr,{Date,_X_Msg}}> when 'true' -> case apply 'compare_dates'/2 (Date,FDates) of <'true'> when 'true' -> apply 'print_filter_report'/5 (RepMsg,Filters,Device,Abort,Log)
<_17> when 'true' -> {'proceed',Device} end
<_18> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',Device} end
<Filters,Fd,FilePosition,Device,Abort,Log> when 'true' -> case apply 'read_rep_msg'/2 (Fd,FilePosition) of <_@r0 = {Date,Msg}> when 'true' -> apply 'print_filter_report'/5 (_@r0,Filters,Device,Abort,Log)
<_19> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',Device} end end
'filter_report'/2 = fun (_0,_1) -> case <_0,_1> of <[],_X_Msg> when 'true' -> 'true'
<[{Key,Value}|T],Msg> when 'true' -> case call 'proplists':'get_value' (Key,Msg) of <_14> when call 'erlang':'=:=' (_14,Value) -> apply 'filter_report'/2 (T,Msg)
<_15> when 'true' -> 'false' end
<[{Key,Value,'no'}|T],Msg> when 'true' -> case call 'proplists':'get_value' (Key,Msg) of <_16> when call 'erlang':'=:=' (_16,Value) -> 'false'
<_17> when 'true' -> apply 'filter_report'/2 (T,Msg) end
<[{Key,RegExp,'re'}|T],Msg> when 'true' -> case call 'proplists':'get_value' (Key,Msg) of <'undefined'> when 'true' -> 'false'
<Value> when 'true' -> let <_4> = call 'io_lib':'format' ([126|[116|[112]]],[Value|[]]) in let <Subject> = call 'lists':'flatten' (_4) in case apply 'run_re'/2 (Subject,RegExp) of <'match'> when 'true' -> apply 'filter_report'/2 (T,Msg)
<_18> when 'true' -> 'false' end end
<[{Key,RegExp,'re','no'}|T],Msg> when 'true' -> case call 'proplists':'get_value' (Key,Msg) of <'undefined'> when 'true' -> 'true'
<Value> when 'true' -> let <_8> = call 'io_lib':'format' ([126|[116|[112]]],[Value|[]]) in let <Subject> = call 'lists':'flatten' (_8) in case apply 'run_re'/2 (Subject,RegExp) of <'match'> when 'true' -> 'false'
<_19> when 'true' -> apply 'filter_report'/2 (T,Msg) end end
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'filter_report',2}}] )-|['compiler_generated'] ) end
'get_compare_dates'/2 = fun (_0,_1) -> case call 'application':'get_env' ('sasl','utc_log') of <{'ok','true'}> when 'true' -> let <_3> = apply 'local_time_to_universal_time'/1 (_0) in let <_2> = apply 'local_time_to_universal_time'/1 (_1) in {_3,_2}
<_7> when 'true' -> {_0,_1} end
'get_compare_dates'/3 = fun (_0,_1,_2) -> case call 'application':'get_env' ('sasl','utc_log') of <{'ok','true'}> when 'true' -> let <_5> = apply 'local_time_to_universal_time'/1 (_0) in let <_4> = apply 'local_time_to_universal_time'/1 (_1) in let <_3> = apply 'local_time_to_universal_time'/1 (_2) in {_5,_4,_3}
<_10> when 'true' -> {_0,_1,_2} end
'compare_dates'/2 = fun (_0,_1) -> case <_0,_1> of <Date,{CompareDate,'from'}> when 'true' -> case apply 'get_compare_dates'/2 (Date,CompareDate) of <{Date2,DateFrom}> when 'true' -> let <_4> = call 'calendar':'datetime_to_gregorian_seconds' (Date2) in let <_3> = call 'calendar':'datetime_to_gregorian_seconds' (DateFrom) in call 'erlang':'>=' (_4,_3)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<Date,{CompareDate,'to'}> when 'true' -> case apply 'get_compare_dates'/2 (Date,CompareDate) of <{Date2,DateTo}> when 'true' -> let <_7> = call 'calendar':'datetime_to_gregorian_seconds' (Date2) in let <_6> = call 'calendar':'datetime_to_gregorian_seconds' (DateTo) in call 'erlang':'=<' (_7,_6)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<Date,{From,To}> when 'true' -> case apply 'get_compare_dates'/3 (Date,From,To) of <{Date2,DateFrom,DateTo}> when 'true' -> let <_11> = call 'calendar':'datetime_to_gregorian_seconds' (Date2) in let <_10> = call 'calendar':'datetime_to_gregorian_seconds' (DateFrom) in (case <> of (<> when call 'erlang':'>=' (_11,_10) -> let <_13> = call 'calendar':'datetime_to_gregorian_seconds' (Date2) in let <_12> = call 'calendar':'datetime_to_gregorian_seconds' (DateTo) in call 'erlang':'=<' (_13,_12)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'compare_dates',2}}] )-|['compiler_generated'] ) end
'print_filter_report'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <{Date,Msg},Filters,Device,Abort,Log> when 'true' -> case Msg of <{_X_D,M}> when 'true' -> case M of <{_16,_17,M2}> when 'true' -> case M2 of <{_18,_19,Report}> when 'true' -> case apply 'filter_report'/2 (Filters,Report) of <'true'> when 'true' -> let <_7> = catch call 'rb_format_supp':'print' (Date,Msg,Device) in case _7 of <{'EXIT',_20}> when 'true' -> apply 'handle_bad_form'/5 (Date,Msg,Device,Abort,Log)
<_21> when 'true' -> {'proceed',Device} end
<_22> when 'true' -> {'proceed',Device} end
<_23> when 'true' -> {'proceed',Device} end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11})-|[{'function_name',{'print_filter_report',5}}] )-|['compiler_generated'] ) end
'read_rep'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'read_rep_msg'/2 (_0,_1) of <{Date,Msg}> when 'true' -> let <_5> = catch call 'rb_format_supp':'print' (Date,Msg,_2) in case _5 of <{'EXIT',_13}> when 'true' -> apply 'handle_bad_form'/5 (Date,Msg,_2,_3,_4)
<_14> when 'true' -> {'proceed',_2} end
<_15> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',_2} end
'handle_bad_form'/5 = fun (_0,_1,_2,_3,_4) -> do call 'io':'format' ([114|[98|[58|[32|[69|[82|[82|[79|[82|[33|[32|[65|[32|[114|[101|[112|[111|[114|[116|[32|[111|[110|[32|[98|[97|[100|[32|[102|[111|[114|[109|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[46|[32|[73|[116|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[112|[114|[105|[110|[116|[101|[100|[32|[116|[111|[32|[116|[104|[101|[32|[108|[111|[103|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) do call 'io':'format' ([68|[101|[116|[97|[105|[108|[115|[58|[126|[110|[126|[112|[32|[126|[116|[112|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]],[_0|[_1|[]]]) let <_6> = apply 'open_log_file'/1 (_4) in case <_3,_2,_6> of <'true','standard_io','standard_io'> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]) {'abort',_2}
<'false','standard_io','standard_io'> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[114|[101|[115|[117|[109|[101|[100|[46|[46|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',_2}
<_18,_19,('standard_io'-|['compiler_generated'] )> when 'true' -> do call 'io':'format' ([114|[98|[58|[32|[67|[97|[110|[32|[110|[111|[116|[32|[114|[101|[111|[112|[101|[110|[32|[126|[116|[112|[46|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_4|[]]) {'abort',_2}
<('true'-|['compiler_generated'] ),_20,NewDevice> when 'true' -> do call 'io':'format' (NewDevice,[126|[110|[126|[110|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[82|[66|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110|[65|[32|[114|[101|[112|[111|[114|[116|[32|[111|[110|[32|[98|[97|[100|[32|[102|[111|[114|[109|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[32|[104|[101|[114|[101|[32|[97|[110|[100|[32|[116|[104|[101|[32|[108|[111|[103|[103|[105|[110|[103|[126|[110|[112|[114|[111|[99|[101|[115|[115|[32|[119|[97|[115|[32|[97|[98|[111|[114|[116|[101|[100|[46|[32|[78|[111|[116|[101|[32|[116|[104|[97|[116|[32|[116|[104|[101|[114|[101|[32|[109|[97|[121|[32|[119|[101|[108|[108|[32|[98|[101|[32|[114|[101|[109|[97|[105|[110|[105|[110|[103|[126|[110|[114|[101|[112|[111|[114|[116|[115|[32|[116|[104|[97|[116|[32|[104|[97|[118|[101|[110|[39|[116|[32|[121|[101|[116|[32|[98|[101|[101|[110|[32|[108|[111|[103|[103|[101|[100|[46|[32|[80|[108|[101|[97|[115|[101|[32|[115|[101|[101|[32|[116|[104|[101|[32|[114|[98|[126|[110|[109|[97|[110|[117|[97|[108|[32|[102|[111|[114|[32|[109|[111|[114|[101|[32|[105|[110|[102|[111|[46|[126|[110|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]) do call 'io':'format' ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]) {'abort',NewDevice}
<('false'-|['compiler_generated'] ),_21,NewDevice> when 'true' -> do call 'io':'format' (NewDevice,[126|[110|[32|[32|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[82|[66|[58|[32|[85|[78|[80|[82|[73|[78|[84|[65|[66|[76|[69|[32|[82|[69|[80|[79|[82|[84|[32|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]) do call 'io':'format' ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[114|[101|[115|[117|[109|[101|[100|[46|[46|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]) {'proceed',NewDevice}
(<(_22-|['compiler_generated'] ),(_23-|['compiler_generated'] ),(_24-|['compiler_generated'] )> when 'true' -> let <_12> = {(_22-|['compiler_generated'] ),(_23-|['compiler_generated'] ),(_24-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
'read_rep_msg'/2 = fun (_0,_1) -> case call 'file':'position' (_0,{'bof',_1}) of <{'ok',_11}> when 'true' -> let <_3> = catch apply 'read_report'/1 (_0) in let <_6> = case _3 of <{'ok',Report}> when 'true' -> case apply 'get_short_descr'/1 (Report) of <{_X_ShortDescr,Date}> when 'true' -> {Date,Report}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<_12> when 'true' -> 'error' end in case call 'file':'close' (_0) of <'ok'> when 'true' -> _6
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('rb')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('rb',_0) end