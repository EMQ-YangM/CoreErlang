module 'systools' ['compile_rel'/3,'make_relup'/3,'make_relup'/4,'make_script'/1,'make_script'/2,'make_tar'/1,'make_tar'/2,'module_info'/0,'module_info'/1,'script2boot'/1,'script2boot'/3] attributes [ 'file' = [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}]
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[97|[115|[108|[47|[46|[46|[47|[115|[116|[100|[108|[105|[98|[47|[105|[110|[99|[108|[117|[100|[101|[47|[101|[114|[108|[95|[99|[111|[109|[112|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'options',[{'typed_record_field',{'record_field',24,{'atom',24,'includes'},{'nil',24}},{'type',24,'list',[{'remote_type',24,[{'atom',24,'file'}|[{'atom',24,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'outdir'},{'string',26,[46]}},{'remote_type',26,[{'atom',26,'file'}|[{'atom',26,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'output_type'},{'atom',28,'undefined'}},{'type',28,'atom',[]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'defines'},{'nil',29}},{'type',29,'list',[{'type',29,'union',[{'type',29,'atom',[]}|[{'type',29,'tuple',[{'type',29,'atom',[]}|[{'var',29,'_'}]]}]]}]}}|[{'typed_record_field',{'record_field',33,{'atom',33,'warning'},{'integer',33,1}},{'type',33,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'verbose'},{'atom',36,'false'}},{'type',36,'boolean',[]}}|[{'record_field',37,{'atom',37,'optimize'},{'integer',37,999}}|[{'typed_record_field',{'record_field',38,{'atom',38,'specific'},{'nil',38}},{'type',38,'list',[{'var',38,'_'}]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'outfile'},{'string',39,[]}},{'remote_type',39,[{'atom',39,'file'}|[{'atom',39,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'cwd'}},{'remote_type',41,[{'atom',41,'file'}|[{'atom',41,'filename'}|[[]]]]}}]]]]]]]]]]}]
, 'file' = [{[115|[114|[99|[47|[115|[121|[115|[116|[111|[111|[108|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]],41}] ] 'make_script'/1 = fun (_0) -> case _0 of <[RelName|Opts]> when call 'erlang':'is_atom' (RelName) -> apply 'make_script'/2 ([RelName|[]],Opts)
<RelName> when 'true' -> apply 'make_script'/2 (RelName,[]) end
'make_script'/2 = fun (_0,_1) -> call 'systools_make':'make_script' (_0,_1)
'make_tar'/1 = fun (_0) -> apply 'make_tar'/2 (_0,[])
'make_tar'/2 = fun (_0,_1) -> call 'systools_make':'make_tar' (_0,_1)
'script2boot'/1 = fun (_0) -> let <_2> = call 'erlang':'++' (_0,[46|[115|[99|[114|[105|[112|[116]]]]]]]) in let <_1> = call 'erlang':'++' (_0,[46|[98|[111|[111|[116]]]]]) in case call 'systools_lib':'file_term2binary' (_2,_1) of <{'error',Error}> when 'true' -> let <_3> = call 'systools_make':'format_error' (Error) in do call 'io':'format' ([126|[116|[115]]],[_3|[]]) 'error'
<_6> when 'true' -> 'ok' end
'script2boot'/3 = fun (_0,_1,_2) -> let <Input> = call 'erlang':'++' (_0,[46|[115|[99|[114|[105|[112|[116]]]]]]]) in let <Output> = call 'erlang':'++' (_1,[46|[98|[111|[111|[116]]]]]) in case call 'systools_lib':'file_term2binary' (Input,Output) of <{'error',Error}> when 'true' -> let <_5> = call 'systools_make':'format_error' (Error) in do call 'io':'format' ([126|[116|[115]]],[_5|[]]) 'error'
<_10> when 'true' -> 'ok' end
'make_relup'/3 = fun (_0,_1,_2) -> call 'systools_relup':'mk_relup' (_0,_1,_2,[])
'make_relup'/4 = fun (_0,_1,_2,_3) -> call 'systools_relup':'mk_relup' (_0,_1,_2,_3)
'compile_rel'/3 = fun (_0,_1,_2) -> let <_3> = apply 'translate_options'/1 (_2) in call 'systools_make':'make_script' (_0,_1,_3)
'translate_options'/1 = fun (_0) -> (case _0 of (<({'options',_rec0,_6,_7,_8,_9,_10,_11,_12,_13,_14}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'options',_16,_17,_18,_19,_20,_21,_22,_rec1,_23,_24}-|['compiler_generated'] )> when 'true' -> [{'path',_rec0}|_rec1]-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('systools')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('systools',_0) end