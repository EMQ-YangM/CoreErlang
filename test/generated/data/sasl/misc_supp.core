module 'misc_supp' ['assq'/2,'format_pdict'/3,'format_tuples'/2,'is_string'/1,'modifier'/1,'module_info'/0,'module_info'/1,'multi_map'/2,'passq'/2] attributes [ 'file' = [{[115|[114|[99|[47|[109|[105|[115|[99|[95|[115|[117|[112|[112|[46|[101|[114|[108]]]]]]]]]]]]]]]]],1}] ] 'format_pdict'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'normal',_X_PDict,_X_Exclude> when 'true' -> []
<'all',PDict,Exclude> when 'true' -> case apply 'format_tuples'/2 (PDict,['$sys_dict$'|Exclude]) of <[]> when 'true' -> []
<Data> when 'true' -> [{'newline',1}|Data] end
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'format_pdict',3}}] )-|['compiler_generated'] ) end
'format_tuples'/2 = fun (_0,_1) -> case apply 'format_tuples'/3 (_0,_1,[]) of <[]> when 'true' -> []
<Data> when 'true' -> [{'data',Data}|[]] end
'format_tuples'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_X_Exclude,Res> when 'true' -> Res
<[_@r0 = {Key,Value}|T],Exclude,Res> when 'true' -> case call 'lists':'member' (Key,Exclude) of <'true'> when 'true' -> apply 'format_tuples'/3 (T,Exclude,Res)
<'false'> when 'true' -> apply 'format_tuples'/3 (T,Exclude,[_@r0|Res])
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'format_tuples',3}}] )-|['compiler_generated'] ) end
'assq'/2 = fun (_0,_1) -> case call 'lists':'keysearch' (_0,1,_1) of <{'value',{_5,Val}}> when call 'erlang':'=:=' (_5,_0) -> {'value',Val}
<_6> when 'true' -> 'false' end
'passq'/2 = fun (_0,_1) -> case call 'lists':'keysearch' (_0,1,_1) of <{'value',{_5,Val}}> when call 'erlang':'=:=' (_5,_0) -> Val
<_6> when 'true' -> 'undefined' end
'is_string'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'false'
<X> when 'true' -> apply 'is_string_2'/1 (X) end
'is_string_2'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'true'
<[H|T]> when try let <_1> = call 'erlang':'is_integer' (H) in let <_2> = call 'erlang':'>=' (H,32) in let <_3> = call 'erlang':'=<' (H,255) in let <_4> = call 'erlang':'and' (_2,_3) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> apply 'is_string_2'/1 (T)
<_6> when 'true' -> 'false' end
'multi_map'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Func,[[]|_X_ListOfLists]> when 'true' -> []
<Func,ListOfLists> when 'true' -> let <_4> = fun (_2) -> call 'erlang':'hd' (_2) in let <_5> = call 'lists':'map' (_4,ListOfLists) in let <_6> = call 'erlang':'apply' (Func,_5) in let <_9> = fun (_7) -> call 'erlang':'tl' (_7) in let <_10> = call 'lists':'map' (_9,ListOfLists) in let <_11> = apply 'multi_map'/2 (Func,_10) in [_6|_11] end
'modifier'/1 = fun (_0) -> let <_2> = case call 'io':'getopts' (_0) of <List> when call 'erlang':'is_list' (List) -> call 'proplists':'get_value' ('encoding',List,'latin1')
<_5> when 'true' -> 'latin1' end in apply 'encoding_to_modifier'/1 (_2)
'encoding_to_modifier'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('misc_supp')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('misc_supp',_0) end