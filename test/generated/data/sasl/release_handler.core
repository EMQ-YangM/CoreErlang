module 'release_handler' ['check_install_release'/1,'check_install_release'/2,'code_change'/3,'create_RELEASES'/1,'create_RELEASES'/2,'create_RELEASES'/4,'do_copy_file'/2,'do_copy_files'/1,'do_copy_files'/2,'do_ensure_RELEASES'/1,'do_remove_files'/1,'do_rename_files'/1,'do_write_file'/2,'do_write_file'/3,'do_write_release'/3,'downgrade_app'/2,'downgrade_app'/3,'downgrade_script'/3,'eval_appup_script'/4,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'init'/1,'install_file'/2,'install_release'/1,'install_release'/2,'make_permanent'/1,'module_info'/0,'module_info'/1,'new_emulator_upgrade'/2,'reboot_old_release'/1,'remove_file'/1,'remove_release'/1,'set_removed'/1,'set_unpacked'/2,'start_link'/0,'terminate'/2,'unpack_release'/1,'upgrade_app'/2,'upgrade_script'/2,'which_releases'/0,'which_releases'/1] attributes [ 'file' = [{[115|[114|[99|[47|[114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_server']
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}]
, 'record' = [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}]
, 'file' = [{[115|[114|[99|[47|[114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]],24}]
, 'record' = [{'state',[{'record_field',48,{'atom',48,'unpurged'},{'nil',48}}|[{'record_field',49,{'atom',49,'root'}}|[{'record_field',50,{'atom',50,'rel_dir'}}|[{'record_field',51,{'atom',51,'releases'}}|[{'record_field',52,{'atom',52,'timer'}}|[{'record_field',53,{'atom',53,'start_prg'}}|[{'record_field',54,{'atom',54,'masters'},{'atom',54,'false'}}|[{'record_field',55,{'atom',55,'client_dir'},{'atom',55,'false'}}|[{'record_field',56,{'atom',56,'static_emulator'},{'atom',56,'false'}}|[{'record_field',57,{'atom',57,'pre_sync_nodes'},{'nil',57}}]]]]]]]]]]}]
, 'record' = [{'release',[{'record_field',76,{'atom',76,'name'}}|[{'record_field',76,{'atom',76,'vsn'}}|[{'record_field',76,{'atom',76,'erts_vsn'}}|[{'record_field',76,{'atom',76,'libs'},{'nil',76}}|[{'record_field',76,{'atom',76,'status'}}]]]]]}] ] 'start_link'/0 = fun () -> call 'gen_server':'start_link' ({'local','release_handler'},'release_handler',[],[])
'unpack_release'/1 = fun (_0) -> apply 'call'/1 ({'unpack_release',_0})
'check_install_release'/1 = fun (_0) -> apply 'check_install_release'/2 (_0,[])
'check_install_release'/2 = fun (_0,_1) -> case apply 'check_check_install_options'/2 (_1,'false') of <{'ok',Purge}> when 'true' -> apply 'call'/1 ({'check_install_release',_0,Purge})
<Error> when 'true' -> Error end
'check_check_install_options'/2 = fun (_0,_1) -> case <_0,_1> of <['purge'|Opts],_4> when 'true' -> apply 'check_check_install_options'/2 (Opts,'true')
<[Illegal|_5],_X_Purge> when 'true' -> {'error',{'illegal_option',Illegal}}
<[],Purge> when 'true' -> {'ok',Purge}
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'check_check_install_options',2}}] )-|['compiler_generated'] ) end
'install_release'/1 = fun (_0) -> apply 'call'/1 ({'install_release',_0,'restart',[]})
'install_release'/2 = fun (_0,_1) -> case apply 'check_install_options'/3 (_1,'restart',[]) of <{'ok',ErrorAction,InstallOpt}> when 'true' -> apply 'call'/1 ({'install_release',_0,ErrorAction,InstallOpt})
<Error> when 'true' -> Error end
'check_install_options'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[Opt|Opts],ErrAct,InstOpts> when 'true' -> case apply 'install_option'/1 (Opt) of <{'error_action',EAct}> when 'true' -> apply 'check_install_options'/3 (Opts,EAct,InstOpts)
<'true'> when 'true' -> apply 'check_install_options'/3 (Opts,ErrAct,[Opt|InstOpts])
<'false'> when 'true' -> {'error',{'illegal_option',Opt}}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<[],ErrAct,InstOpts> when 'true' -> {'ok',ErrAct,InstOpts}
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'check_install_options',3}}] )-|['compiler_generated'] ) end
'install_option'/1 = fun (_0) -> case _0 of <Opt = {'error_action','reboot'}> when 'true' -> Opt
<Opt = {'error_action','restart'}> when 'true' -> Opt
<{'code_change_timeout',TimeOut}> when 'true' -> apply 'check_timeout'/1 (TimeOut)
<{'suspend_timeout',TimeOut}> when 'true' -> apply 'check_timeout'/1 (TimeOut)
<{'update_paths',Bool}> when let <_1> = call 'erlang':'=:=' (Bool,'true') in let <_2> = call 'erlang':'=:=' (Bool,'false') in call 'erlang':'or' (_1,_2) -> 'true'
<_X_Opt> when 'true' -> 'false' end
'check_timeout'/1 = fun (_0) -> case _0 of <'infinity'> when 'true' -> 'true'
<Int> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in call 'erlang':'and' (_1,_2) -> 'true'
<_X_Else> when 'true' -> 'false' end
'new_emulator_upgrade'/2 = fun (_0,_1) -> let <Result> = apply 'call'/1 ({'install_release',_0,'reboot',_1}) in do call 'error_logger':'info_msg' ([126|[119|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[126|[112|[44|[126|[112|[41|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[32|[97|[102|[116|[101|[114|[32|[110|[111|[100|[101|[32|[114|[101|[115|[116|[97|[114|[116|[32|[119|[105|[116|[104|[32|[110|[101|[119|[32|[101|[109|[117|[108|[97|[116|[111|[114|[32|[118|[101|[114|[115|[105|[111|[110|[126|[110|[82|[101|[115|[117|[108|[116|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],['release_handler'|[_0|[_1|[Result|[]]]]]) Result
'make_permanent'/1 = fun (_0) -> apply 'call'/1 ({'make_permanent',_0})
'reboot_old_release'/1 = fun (_0) -> apply 'call'/1 ({'reboot_old_release',_0})
'remove_release'/1 = fun (_0) -> apply 'call'/1 ({'remove_release',_0})
'set_unpacked'/2 = fun (_0,_1) -> apply 'call'/1 ({'set_unpacked',_0,_1})
'set_removed'/1 = fun (_0) -> apply 'call'/1 ({'set_removed',_0})
'install_file'/2 = fun (_0,_1) -> case <_0,_1> of <Vsn,File> when call 'erlang':'is_list' (File) -> apply 'call'/1 ({'install_file',File,Vsn})
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'install_file',2}}] )-|['compiler_generated'] ) end
'which_releases'/0 = fun () -> apply 'call'/1 ('which_releases')
'which_releases'/1 = fun (_0) -> let <Releases> = apply 'which_releases'/0 () in apply 'get_releases_with_status'/3 (Releases,_0,[])
'check_script'/2 = fun (_0,_1) -> call 'release_handler_1':'check_script' (_0,_1)
'eval_script'/5 = fun (_0,_1,_2,_3,_4) -> catch call 'release_handler_1':'eval_script' (_0,_1,_2,_3,_4)
'create_RELEASES'/1 = fun (_0) -> case _0 of <[Root|[RelFile|LibDirs]]> when 'true' -> let <_1> = call 'filename':'join' (Root,[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]) in apply 'create_RELEASES'/4 (Root,_1,RelFile,LibDirs)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'create_RELEASES',1}}] )-|['compiler_generated'] ) end
'create_RELEASES'/2 = fun (_0,_1) -> let <_2> = call 'filename':'join' (_0,[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]) in apply 'create_RELEASES'/4 (_0,_2,_1,[])
'create_RELEASES'/4 = fun (_0,_1,_2,_3) -> let <_4> = catch apply 'check_rel'/4 (_0,_2,_3,'false') in case _4 of <_@r0 = {'error',Reason}> when 'true' -> _@r0
<Rel> when 'true' -> case Rel of <{'release',_14,_15,_16,_17,_18}> when 'true' -> let <_7> = call 'erlang':'setelement' (6,Rel,'permanent') in catch apply 'write_releases'/3 (_1,[_7|[]],'false')
(<_19> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'upgrade_app'/2 = fun (_0,_1) -> try apply 'upgrade_script'/2 (_0,_1) of <_2> -> case _2 of <{'ok',NewVsn,Script}> when 'true' -> apply 'eval_appup_script'/4 (_0,NewVsn,_1,Script)
(<_3> when 'true' -> primop 'match_fail' ({'try_clause',_3})-|['compiler_generated'] ) end catch <_6,_5,_4> -> case <_6,_5,_4> of <('throw'-|['compiler_generated'] ),Reason,_9> when 'true' -> {'error',Reason}
(<_10,_11,_12> when 'true' -> primop 'raise' (_12,_11)-|['compiler_generated'] ) end
'downgrade_app'/2 = fun (_0,_1) -> let <_2> = call 'filename':'basename' (_1) in case call 'string':'lexemes' (_2,[45]) of <[_X_AppS|[OldVsn|[]]]> when 'true' -> apply 'downgrade_app'/3 (_0,OldVsn,_1)
<_6> when 'true' -> {'error',{'unknown_version',_0}} end
'downgrade_app'/3 = fun (_0,_1,_2) -> try apply 'downgrade_script'/3 (_0,_1,_2) of <_3> -> case _3 of <{'ok',Script}> when 'true' -> apply 'eval_appup_script'/4 (_0,_1,_2,Script)
(<_4> when 'true' -> primop 'match_fail' ({'try_clause',_4})-|['compiler_generated'] ) end catch <_7,_6,_5> -> case <_7,_6,_5> of <('throw'-|['compiler_generated'] ),Reason,_11> when 'true' -> {'error',Reason}
(<_12,_13,_14> when 'true' -> primop 'raise' (_14,_13)-|['compiler_generated'] ) end
'upgrade_script'/2 = fun (_0,_1) -> let <OldVsn> = apply 'ensure_running'/1 (_0) in let <OldDir> = call 'code':'lib_dir' (_0) in case apply 'find_script'/4 (_0,_1,OldVsn,'up') of <{NewVsn,Script}> when 'true' -> let <OldAppl> = apply 'read_app'/3 (_0,OldVsn,OldDir) in let <NewAppl> = apply 'read_app'/3 (_0,NewVsn,_1) in case call 'systools_rc':'translate_scripts' ('up',[Script|[]],[NewAppl|[]],[OldAppl|[]]) of <{'ok',LowLevelScript}> when 'true' -> {'ok',NewVsn,LowLevelScript}
<{'error',_X_SystoolsRC,Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'downgrade_script'/3 = fun (_0,_1,_2) -> let <NewVsn> = apply 'ensure_running'/1 (_0) in let <NewDir> = call 'code':'lib_dir' (_0) in case apply 'find_script'/4 (_0,NewDir,_1,'down') of <{_12,Script}> when call 'erlang':'=:=' (_12,NewVsn) -> let <OldAppl> = apply 'read_app'/3 (_0,_1,_2) in let <NewAppl> = apply 'read_app'/3 (_0,NewVsn,NewDir) in case call 'systools_rc':'translate_scripts' ('dn',[Script|[]],[OldAppl|[]],[NewAppl|[]]) of <_@r0 = {'ok',LowLevelScript}> when 'true' -> _@r0
<{'error',_X_SystoolsRC,Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'eval_appup_script'/4 = fun (_0,_1,_2,_3) -> let <EnvBefore> = call 'application_controller':'prep_config_change' () in let <AppSpecL> = apply 'read_appspec'/2 (_0,_2) in let <Res> = call 'release_handler_1':'eval_script' (_3,[],[{_0,_1,_2}|[]],[{_0,_1,_2}|[]],[]) in do case Res of <{'ok',_X_Unpurged}> when 'true' -> do call 'application_controller':'change_application_data' (AppSpecL,[]) call 'application_controller':'config_change' (EnvBefore)
<_X_Res> when 'true' -> 'ok' end Res
'ensure_running'/1 = fun (_0) -> let <_1> = call 'application':'which_applications' () in case call 'lists':'keysearch' (_0,1,_1) of <{'value',{_X_App,_X_Descr,Vsn}}> when 'true' -> Vsn
<'false'> when 'true' -> call 'erlang':'throw' ({'app_not_running',_0})
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'find_script'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'atom_to_list' (_0) in let <_5> = call 'erlang':'++' (_4,[46|[97|[112|[112|[117|[112]]]]]]) in let <Appup> = call 'filename':'join' ([_1|[[101|[98|[105|[110]]]]|[_5|[]]]]) in case call 'file':'consult' (Appup) of <{'ok',[{NewVsn,UpFromScripts,DownToScripts}|[]]}> when 'true' -> let <_8> = case _3 of <'up'> when 'true' -> UpFromScripts
<'down'> when 'true' -> DownToScripts
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end in case call 'systools_relup':'appup_search_for_version' (_2,_8) of <{'ok',Script}> when 'true' -> {NewVsn,Script}
<'error'> when 'true' -> call 'erlang':'throw' ({'version_not_in_appup',_2})
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<{'error','enoent'}> when 'true' -> call 'erlang':'throw' ('no_appup_found')
<{'error',Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'read_app'/3 = fun (_0,_1,_2) -> let <AppS> = call 'erlang':'atom_to_list' (_0) in let <_4> = call 'filename':'join' (_2,[101|[98|[105|[110]]]]) in let <Path> = [_4|[]] in case call 'systools_make':'read_application' (AppS,_1,Path,[]) of <{'ok',Appl}> when 'true' -> Appl
<{'error',{'not_found',_X_AppFile}}> when 'true' -> call 'erlang':'throw' ({'no_app_found',_1,_2})
<{'error',Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'read_appspec'/2 = fun (_0,_1) -> let <AppS> = call 'erlang':'atom_to_list' (_0) in let <_3> = call 'filename':'join' (_1,[101|[98|[105|[110]]]]) in let <Path> = [_3|[]] in let <_5> = call 'erlang':'++' (AppS,[46|[97|[112|[112]]]]) in case call 'file':'path_consult' (Path,_5) of <{'ok',AppSpecL,_X_File}> when 'true' -> AppSpecL
<{'error',Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'call'/1 = fun (_0) -> call 'gen_server':'call' ('release_handler',_0,'infinity')
'init'/1 = fun (_0) -> case _0 of <[]> when 'true' -> case call 'init':'get_argument' ('root') of <{'ok',[[Root|[]]|[]]}> when 'true' -> case apply 'is_client'/0 () of <{CliDir,Masters}> when 'true' -> let <_5> = case call 'application':'get_env' ('sasl','releases_dir') of <'undefined'> when 'true' -> case call 'os':'getenv' ([82|[69|[76|[68|[73|[82]]]]]]) of <'false'> when 'true' -> case <> of <> when call 'erlang':'=:=' (CliDir,'false') -> call 'filename':'join' ([Root|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]])
<> when 'true' -> call 'filename':'join' ([CliDir|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]]) end
<RELDIR> when 'true' -> RELDIR end
<{'ok',Dir}> when 'true' -> Dir
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in let <_7> = call 'filename':'join' (_5,[82|[69|[76|[69|[65|[83|[69|[83]]]]]]]]) in let <_10> = case apply 'consult'/2 (_7,Masters) of <{'ok',[Term|[]]}> when 'true' -> apply 'transform_release'/3 (_5,Term,Masters)
<_20> when 'true' -> case call 'init':'script_id' () of <{Name,Vsn}> when 'true' -> [{'release',Name,Vsn,'undefined',[],'permanent'}|[]]
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end in let <_14> = case call 'application':'get_env' ('start_prg') of <{'ok',Found2}> when call 'erlang':'is_list' (Found2) -> {'do_check',Found2}
<_21> when 'true' -> let <_12> = call 'filename':'join' ([Root|[[98|[105|[110]]]|[[115|[116|[97|[114|[116]]]]]]]]) in {'no_check',_12} end in let <_17> = case call 'application':'get_env' ('static_emulator') of <{'ok',SFlag}> when call 'erlang':'is_atom' (SFlag) -> SFlag
<_22> when 'true' -> 'false' end in {'ok',{'state',[],Root,_5,_10,'undefined',_14,Masters,CliDir,_17,[]}}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_19> when 'true' -> (primop 'match_fail' ({'function_clause',_19})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'unpack_release',ReleaseName},_X_From,S = {'state',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}> when (try let <_7> = call 'erlang':'element' (8,S) in call 'erlang':'=:=' (_7,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_15> = catch (case S of (<({'state',_127,_rec1,_128,_129,_130,_131,_132,_133,_134,_135}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_137,_138,_rec2,_139,_140,_141,_142,_143,_144,_145}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_147,_148,_149,_rec3,_150,_151,_152,_153,_154,_155}-|['compiler_generated'] )> when 'true' -> apply 'do_unpack_release'/4 (_rec1,_rec2,ReleaseName,_rec3)-|['compiler_generated'] )
(<_156> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_146> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_136> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _15 of <{'ok',NewReleases,Vsn}> when 'true' -> case S of <{'state',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166}> when 'true' -> let <_18> = call 'erlang':'setelement' (5,S,NewReleases) in {'reply',{'ok',Vsn},_18}
(<_167> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r0 = {'error',Reason}> when 'true' -> {'reply',_@r0,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
<{'unpack_release',_X_ReleaseName},_X_From,S> when 'true' -> {'reply',{'error','client_node'},S}
<{'check_install_release',Vsn,Purge},_X_From,S> when 'true' -> let <_26> = catch (case S of (<({'state',_168,_169,_rec5,_170,_171,_172,_173,_174,_175,_176}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_178,_179,_180,_rec6,_181,_182,_183,_184,_185,_186}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_188,_189,_190,_191,_192,_193,_rec7,_194,_195,_196}-|['compiler_generated'] )> when 'true' -> apply 'do_check_install_release'/5 (_rec5,Vsn,_rec6,_rec7,Purge)-|['compiler_generated'] )
(<_197> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_187> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_177> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _26 of <_@r1 = {'ok',CurrentVsn,Descr}> when 'true' -> {'reply',_@r1,S}
<_@r2 = {'error',Reason}> when 'true' -> {'reply',_@r2,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end
<{'install_release',Vsn,ErrorAction,Opts},From,S> when 'true' -> let <NS> = apply 'resend_sync_nodes'/1 (S) in let <_29> = catch apply 'do_install_release'/3 (S,Vsn,Opts) in case _29 of <{'ok',NewReleases,[],CurrentVsn,Descr}> when 'true' -> case NS of <{'state',_198,_199,_200,_201,_202,_203,_204,_205,_206,_207}> when 'true' -> let <_32> = call 'erlang':'setelement' (5,NS,NewReleases) in {'reply',{'ok',CurrentVsn,Descr},_32}
(<_208> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',NewReleases,Unpurged,CurrentVsn,Descr}> when 'true' -> (case S of (<({'state',_209,_210,_211,_212,_rec9,_213,_214,_215,_216,_217}-|['compiler_generated'] )> when 'true' -> let <_37> = case _rec9 of <'undefined'> when 'true' -> case call 'timer':'send_interval' (10000,'timeout') of <{'ok',Ref}> when 'true' -> Ref
(<_35> when 'true' -> primop 'match_fail' ({'badmatch',_35})-|['compiler_generated'] ) end
<Ref> when 'true' -> Ref end in case NS of <{'state',_219,_220,_221,_222,_223,_224,_225,_226,_227,_228}> when 'true' -> let <_40> = call 'erlang':'setelement' (6,NS,_37) in let <_41> = call 'erlang':'setelement' (5,_40,NewReleases) in let <_43> = call 'erlang':'setelement' (2,_41,Unpurged) in {'reply',{'ok',CurrentVsn,Descr},_43}
(<_229> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_218> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_@r3 = {'error',Reason}> when 'true' -> {'reply',_@r3,NS}
<{'restart_emulator',CurrentVsn,Descr}> when 'true' -> do call 'gen_server':'reply' (From,{'ok',CurrentVsn,Descr}) do call 'init':'reboot' () {'noreply',NS}
<{'restart_new_emulator',CurrentVsn,Descr}> when 'true' -> do call 'gen_server':'reply' (From,{'continue_after_restart',CurrentVsn,Descr}) do call 'init':'reboot' () {'noreply',NS}
<{'EXIT',Reason}> when 'true' -> do call 'io':'format' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[86|[115|[110|[61|[126|[116|[112|[32|[79|[112|[116|[115|[61|[126|[116|[112|[41|[32|[102|[97|[105|[108|[101|[100|[44|[32|[82|[101|[97|[115|[111|[110|[61|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Vsn|[Opts|[Reason|[]]]]) do call 'gen_server':'reply' (From,{'error',Reason}) do case ErrorAction of <'restart'> when 'true' -> call 'init':'restart' ()
<'reboot'> when 'true' -> call 'init':'reboot' ()
(<_45> when 'true' -> primop 'match_fail' ({'case_clause',_45})-|['compiler_generated'] ) end {'noreply',NS}
(<_46> when 'true' -> primop 'match_fail' ({'case_clause',_46})-|['compiler_generated'] ) end
<{'make_permanent',Vsn},_X_From,S> when 'true' -> let <_47> = catch apply 'do_make_permanent'/2 (S,Vsn) in case _47 of <{'ok',Releases,Unpurged}> when 'true' -> case S of <{'state',_230,_231,_232,_233,_234,_235,_236,_237,_238,_239}> when 'true' -> let <_49> = call 'erlang':'setelement' (5,S,Releases) in let <_51> = call 'erlang':'setelement' (2,_49,Unpurged) in {'reply','ok',_51}
(<_240> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r4 = {'error',Reason}> when 'true' -> {'reply',_@r4,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_52> when 'true' -> primop 'match_fail' ({'case_clause',_52})-|['compiler_generated'] ) end
<{'reboot_old_release',Vsn},From,S> when 'true' -> let <_53> = catch apply 'do_reboot_old_release'/2 (S,Vsn) in case _53 of <'ok'> when 'true' -> do call 'gen_server':'reply' (From,'ok') do call 'init':'reboot' () {'noreply',S}
<_@r5 = {'error',Reason}> when 'true' -> {'reply',_@r5,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_54> when 'true' -> primop 'match_fail' ({'case_clause',_54})-|['compiler_generated'] ) end
<{'remove_release',Vsn},_X_From,S = {'state',_241,_242,_243,_244,_245,_246,_247,_248,_249,_250}> when (try let <_59> = call 'erlang':'element' (8,S) in call 'erlang':'=:=' (_59,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_67> = catch (case S of (<({'state',_251,_rec12,_252,_253,_254,_255,_256,_257,_258,_259}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_261,_262,_rec13,_263,_264,_265,_266,_267,_268,_269}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_271,_272,_273,_rec14,_274,_275,_276,_277,_278,_279}-|['compiler_generated'] )> when 'true' -> apply 'do_remove_release'/4 (_rec12,_rec13,Vsn,_rec14)-|['compiler_generated'] )
(<_280> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_270> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_260> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _67 of <{'ok',NewReleases}> when 'true' -> case S of <{'state',_281,_282,_283,_284,_285,_286,_287,_288,_289,_290}> when 'true' -> let <_70> = call 'erlang':'setelement' (5,S,NewReleases) in {'reply','ok',_70}
(<_291> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r6 = {'error',Reason}> when 'true' -> {'reply',_@r6,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_71> when 'true' -> primop 'match_fail' ({'case_clause',_71})-|['compiler_generated'] ) end
<{'remove_release',_X_Vsn},_X_From,S> when 'true' -> {'reply',{'error','client_node'},S}
<{'set_unpacked',RelFile,LibDirs},_X_From,S> when 'true' -> (case S of (<({'state',_292,_rec16,_293,_294,_295,_296,_297,_298,_299,_300}-|['compiler_generated'] )> when 'true' -> let <_81> = catch (case S of (<({'state',_302,_303,_rec17,_304,_305,_306,_307,_308,_309,_310}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_312,_313,_314,_rec18,_315,_316,_317,_318,_319,_320}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_322,_323,_324,_325,_326,_327,_rec19,_328,_329,_330}-|['compiler_generated'] )> when 'true' -> apply 'do_set_unpacked'/6 (_rec16,_rec17,RelFile,LibDirs,_rec18,_rec19)-|['compiler_generated'] )
(<_331> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_321> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_311> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _81 of <{'ok',NewReleases,Vsn}> when 'true' -> case S of <{'state',_332,_333,_334,_335,_336,_337,_338,_339,_340,_341}> when 'true' -> let <_84> = call 'erlang':'setelement' (5,S,NewReleases) in {'reply',{'ok',Vsn},_84}
(<_342> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r7 = {'error',Reason}> when 'true' -> {'reply',_@r7,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_85> when 'true' -> primop 'match_fail' ({'case_clause',_85})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_301> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'set_removed',Vsn},_X_From,S> when 'true' -> let <_92> = catch (case S of (<({'state',_343,_344,_rec21,_345,_346,_347,_348,_349,_350,_351}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_353,_354,_355,_rec22,_356,_357,_358,_359,_360,_361}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_363,_364,_365,_366,_367,_368,_rec23,_369,_370,_371}-|['compiler_generated'] )> when 'true' -> apply 'do_set_removed'/4 (_rec21,Vsn,_rec22,_rec23)-|['compiler_generated'] )
(<_372> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_362> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_352> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _92 of <{'ok',NewReleases}> when 'true' -> case S of <{'state',_373,_374,_375,_376,_377,_378,_379,_380,_381,_382}> when 'true' -> let <_95> = call 'erlang':'setelement' (5,S,NewReleases) in {'reply','ok',_95}
(<_383> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r8 = {'error',Reason}> when 'true' -> {'reply',_@r8,S}
<{'EXIT',Reason}> when 'true' -> {'reply',{'error',Reason},S}
(<_96> when 'true' -> primop 'match_fail' ({'case_clause',_96})-|['compiler_generated'] ) end
<{'install_file',File,Vsn},_X_From,S> when 'true' -> (case S of (<({'state',_384,_385,_386,_rec25,_387,_388,_389,_390,_391,_392}-|['compiler_generated'] )> when 'true' -> let <_105> = case call 'lists':'keysearch' (Vsn,3,_rec25) of <{'value',_394}> when 'true' -> (case S of (<({'state',_395,_396,_rec26,_397,_398,_399,_400,_401,_402,_403}-|['compiler_generated'] )> when 'true' -> let <Dir> = call 'filename':'join' ([_rec26|[Vsn|[]]]) in catch (case S of (<({'state',_405,_406,_407,_408,_409,_410,_rec27,_411,_412,_413}-|['compiler_generated'] )> when 'true' -> apply 'copy_file'/3 (File,Dir,_rec27)-|['compiler_generated'] )
(<_414> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_404> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_415> when 'true' -> {'error',{'no_such_release',Vsn}} end in {'reply',_105,S}-|['compiler_generated'] )
(<_393> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'which_releases',_X_From,S> when 'true' -> let <_112> = fun (_110) -> case _110 of <{'release',Name,Vsn,_416,Libs,Status}> when 'true' -> let <_109> = apply 'mk_lib_name'/1 (Libs) in {Name,Vsn,_109,Status}
(<_111> when 'true' -> (primop 'match_fail' ({'function_clause',_111})-|[{'function_name',{'-handle_call/3-fun-0-',1}}] )-|['compiler_generated'] ) end in (case S of (<({'state',_417,_418,_419,_rec28,_420,_421,_422,_423,_424,_425}-|['compiler_generated'] )> when 'true' -> let <Reply> = call 'lists':'map' (_112,_rec28) in {'reply',Reply,S}-|['compiler_generated'] )
(<_426> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_116,_115,_114> when 'true' -> (primop 'match_fail' ({'function_clause',_116,_115,_114})-|[{'function_name',{'handle_call',3}}] )-|['compiler_generated'] ) end
'mk_lib_name'/1 = fun (_0) -> case _0 of <[{LibName,Vsn,_X_Dir}|T]> when 'true' -> let <_1> = call 'lists':'concat' ([LibName|[[45]|[Vsn|[]]]]) in let <_2> = apply 'mk_lib_name'/1 (T) in [_1|_2]
<[]> when 'true' -> []
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'mk_lib_name',1}}] )-|['compiler_generated'] ) end
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <'timeout',S> when 'true' -> (case S of (<({'state',_rec29,_24,_25,_26,_27,_28,_29,_30,_31,_32}-|['compiler_generated'] )> when 'true' -> case apply 'soft_purge'/1 (_rec29) of <[]> when 'true' -> (case S of (<({'state',_34,_35,_36,_37,_rec30,_38,_39,_40,_41,_42}-|['result_not_wanted','compiler_generated'] )> when 'true' -> do (call ('timer'-|['result_not_wanted'] ):('cancel'-|['result_not_wanted'] ) (_rec30)-|['result_not_wanted'] ) case S of <{'state',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}> when 'true' -> let <_8> = call 'erlang':'setelement' (6,S,'undefined') in let <_10> = call 'erlang':'setelement' (2,_8,[]) in {'noreply',_10}
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_43> when 'true' -> (call ('erlang'-|['result_not_wanted','compiler_generated'] ):('error'-|['result_not_wanted','compiler_generated'] ) (({'badrecord','state'}-|['result_not_wanted','compiler_generated'] ))-|['result_not_wanted','compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Unpurged> when 'true' -> case S of <{'state',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}> when 'true' -> let <_13> = call 'erlang':'setelement' (2,S,Unpurged) in {'noreply',_13}
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_@r0 = {'sync_nodes',Id,Node},S> when 'true' -> (case S of (<({'state',_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec33}-|['compiler_generated'] )> when 'true' -> let <_rec34> = [_@r0|_rec33] in case S of <{'state',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_21> = call 'erlang':'setelement' (11,S,_rec34) in {'noreply',_21}
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Msg,State> when 'true' -> do call 'error_logger':'info_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[103|[111|[116|[32|[117|[110|[107|[110|[111|[119|[110|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Msg|[]]) {'noreply',State} end
'terminate'/2 = fun (_0,_1) -> 'ok'
'handle_cast'/2 = fun (_0,_1) -> {'noreply',_1}
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'is_client'/0 = fun () -> case call 'application':'get_env' ('masters') of <{'ok',Masters}> when 'true' -> let <Alive> = call 'erlang':'is_alive' () in case apply 'atom_list'/1 (Masters) of <'true'> when call 'erlang':'=:=' (Alive,'true') -> case call 'application':'get_env' ('client_directory') of <{'ok',ClientDir}> when 'true' -> case apply 'int_list'/1 (ClientDir) of <'true'> when 'true' -> {ClientDir,Masters}
<_5> when 'true' -> call 'erlang':'exit' ({'bad_parameter','client_directory',ClientDir}) end
<_6> when 'true' -> {'false','false'} end
<_7> when 'true' -> call 'erlang':'exit' ({'bad_parameter','masters',Masters}) end
<_8> when 'true' -> {'false','false'} end
'atom_list'/1 = fun (_0) -> case _0 of <[A|T]> when call 'erlang':'is_atom' (A) -> apply 'atom_list'/1 (T)
<[]> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'int_list'/1 = fun (_0) -> case _0 of <[I|T]> when call 'erlang':'is_integer' (I) -> apply 'int_list'/1 (T)
<[]> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'resend_sync_nodes'/1 = fun (_0) -> let <_6> = fun (_4) -> let <_3> = call 'erlang':'self' () in call 'erlang':'!' (_3,_4) in (case _0 of (<({'state',_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec36}-|['compiler_generated'] )> when 'true' -> do call 'lists':'foreach' (_6,_rec36) case _0 of <{'state',_20,_21,_22,_23,_24,_25,_26,_27,_28,_29}> when 'true' -> call 'erlang':'setelement' (11,_0,[])
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_19> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'soft_purge'/1 = fun (_0) -> let <_4> = fun (_2) -> case _2 of <{Mod,_X_PostPurgeMethod}> when 'true' -> case call 'code':'soft_purge' (Mod) of <'true'> when 'true' -> 'false'
<'false'> when 'true' -> 'true'
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'-soft_purge/1-fun-0-',1}}] )-|['compiler_generated'] ) end in call 'lists':'filter' (_4,_0)
'brutal_purge'/1 = fun (_0) -> let <_3> = fun (_1) -> case _1 of <{Mod,'brutal_purge'}> when 'true' -> do call 'code':'purge' (Mod) 'false'
<_5> when 'true' -> 'true' end in call 'lists':'filter' (_3,_0)
'do_unpack_release'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'++' (_2,[46|[116|[97|[114|[46|[103|[122]]]]]]]) in let <Tar> = call 'filename':'join' (_1,_4) in do apply 'do_check_file'/2 (Tar,'regular') let <Rel> = call 'erlang':'++' (_2,[46|[114|[101|[108]]]]) in let <_7> = call ('filename'-|['result_not_wanted'] ):('join'-|['result_not_wanted'] ) (([114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]-|['result_not_wanted'] ),Rel) in do apply 'extract_rel_file'/3 (_7,Tar,_0) let <RelFile> = call 'filename':'join' (_1,Rel) in let <Release> = apply 'check_rel'/3 (_0,RelFile,'false') in case Release of <{'release',_24,Vsn,_25,_26,_27}> when 'true' -> do case call 'lists':'keysearch' (Vsn,3,_3) of <{'value',_28}> when 'true' -> call 'erlang':'throw' ({'error',{'existing_release',Vsn}})
<_29> when 'true' -> 'ok' end do apply 'extract_tar'/2 (_0,Tar) case Release of <{'release',_30,_31,_32,_33,_34}> when 'true' -> let <_15> = call 'erlang':'setelement' (6,Release,'unpacked') in let <NewReleases> = [_15|_3] in do apply 'write_releases'/3 (_1,NewReleases,'false') let <Dir> = call 'filename':'join' ([_1|[Vsn|[]]]) in do apply 'copy_file'/3 (RelFile,Dir,'false') do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tar)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (RelFile)-|['result_not_wanted'] ) {'ok',NewReleases,Vsn}
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
'check_rel'/3 = fun (_0,_1,_2) -> apply 'check_rel'/4 (_0,_1,[],_2)
'check_rel'/4 = fun (_0,_1,_2,_3) -> case apply 'consult'/2 (_1,_3) of <{'ok',[RelData|[]]}> when 'true' -> apply 'check_rel_data'/4 (RelData,_0,_2,_3)
<{'ok',_9}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_rel_file',_1}})
<{'error',Reason}> when call 'erlang':'is_tuple' (Reason) -> call 'erlang':'throw' ({'error',{'bad_rel_file',_1}})
<{'error',FileError}> when 'true' -> call 'erlang':'throw' ({'error',{FileError,_1}})
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'check_rel_data'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'release',{Name,Vsn},{'erts',EVsn},Libs},Root,LibDirs,Masters> when 'true' -> let <_13> = fun (_11) -> let <Lib> = call 'erlang':'element' (1,_11) in let <LibVsn> = call 'erlang':'element' (2,_11) in let <LibName> = call 'lists':'concat' ([Lib|[[45]|[LibVsn|[]]]]) in let <_9> = case call 'lists':'keysearch' (Lib,1,LibDirs) of <{'value',{_X_Lib,_X_Vsn,Dir}}> when 'true' -> let <Path> = call 'filename':'join' (Dir,LibName) in do apply 'check_path'/2 (Path,Masters) Path
<_19> when 'true' -> call 'filename':'join' ([Root|[[108|[105|[98]]]|[LibName|[]]]]) end in {Lib,LibVsn,_9} in let <Libs2> = call 'lists':'map' (_13,Libs) in {'release',Name,Vsn,EVsn,Libs2,'unpacking'}
<RelData,_X_Root,_X_LibDirs,_X_Masters> when 'true' -> call 'erlang':'throw' ({'error',{'bad_rel_data',RelData}}) end
'check_path'/1 = fun (_0) -> let <_1> = call 'file':'read_file_info' (_0) in apply 'check_path_response'/2 (_0,_1)
'check_path'/2 = fun (_0,_1) -> case <_0,_1> of <Path,'false'> when 'true' -> apply 'check_path'/1 (Path)
<Path,Masters> when 'true' -> apply 'check_path_master'/2 (Masters,Path) end
'check_path_master'/2 = fun (_0,_1) -> case <_0,_1> of <[Master|Ms],Path> when 'true' -> case call 'rpc':'call' (Master,'file','read_file_info',[Path|[]]) of <{'badrpc',_5}> when 'true' -> apply 'consult_master'/2 (Ms,Path)
<Res> when 'true' -> apply 'check_path_response'/2 (Path,Res) end
<[],_X_Path> when 'true' -> {'error','no_master'}
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'check_path_master',2}}] )-|['compiler_generated'] ) end
'check_path_response'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Path,{'ok',Info = {'file_info',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}}> when (try let <_6> = call 'erlang':'element' (3,Info) in call 'erlang':'=:=' (_6,'directory') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<Path,{'ok',_X_Info}> when 'true' -> call 'erlang':'throw' ({'error',{'not_a_directory',Path}})
<Path,{'error',_X_Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_directory',Path}})
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'check_path_response',2}}] )-|['compiler_generated'] ) end
'do_check_install_release'/5 = fun (_0,_1,_2,_3,_4) -> case call 'lists':'keysearch' (_1,3,_2) of <{'value',{'release',_32,_33,_34,_35,'current'}}> when 'true' -> {'error',{'already_installed',_1}}
<{'value',Release}> when 'true' -> let <LatestRelease> = apply 'get_latest_release'/1 (_2) in let <VsnDir> = call 'filename':'join' ([_0|[_1|[]]]) in let <_7> = call 'filename':'join' (VsnDir,[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]) in do apply 'check_file'/3 (_7,'regular',_3) let <_8> = call 'filename':'join' (VsnDir,[114|[101|[108|[117|[112]]]]]) in let <IsRelup> = apply 'check_opt_file'/3 (_8,'regular',_3) in let <_10> = call 'filename':'join' (VsnDir,[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]) in do apply 'check_opt_file'/3 (_10,'regular',_3) (case Release of (<({'release',_36,_37,_38,_rec39,_39}-|['compiler_generated'] )> when 'true' -> let <_17> = fun (_15) -> case _15 of <{_X_Lib,_X_LibVsn,LibDir}> when 'true' -> do apply 'check_file'/3 (LibDir,'directory',_3) let <Ebin> = call 'filename':'join' (LibDir,[101|[98|[105|[110]]]]) in apply 'check_file'/3 (Ebin,'directory',_3)
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'-do_check_install_release/5-fun-0-',1}}] )-|['compiler_generated'] ) end in do call 'lists':'foreach' (_17,_rec39) case <> of <> when (call 'erlang':'=:=' (IsRelup,'true')-|['compiler_generated'] ) -> case apply 'get_rh_script'/4 (LatestRelease,Release,_0,_3) of <{'ok',{CurrentVsn,Descr,Script}}> when 'true' -> let <_18> = catch apply 'check_script'/2 (Script,_rec39) in case _18 of <{'ok',SoftPurgeMods}> when call 'erlang':'=:=' (_4,'true') -> case call 'release_handler_1':'check_old_processes' (Script,'brutal_purge') of <{'ok',BrutalPurgeMods}> when 'true' -> let <_23> = fun (_21) -> catch call 'erlang':'purge_module' (_21) in let <_20> = call 'erlang':'++' (SoftPurgeMods,BrutalPurgeMods) in do call 'lists':'foreach' (_23,_20) {'ok',CurrentVsn,Descr}
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
<{'ok',_41}> when 'true' -> {'ok',CurrentVsn,Descr}
<Else> when 'true' -> Else end
<Error> when 'true' -> Error end
<> when 'true' -> {'ok',_1,[]} end-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_42> when 'true' -> {'error',{'no_such_release',_1}} end
'do_install_release'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'state',_28,RootDir,RelDir,Releases,_29,StartPrg,Masters,_30,Static,_31},Vsn,Opts> when 'true' -> case call 'lists':'keysearch' (Vsn,3,Releases) of <{'value',{'release',_32,_33,_34,_35,'current'}}> when 'true' -> {'error',{'already_installed',Vsn}}
<{'value',Release}> when 'true' -> let <LatestRelease> = apply 'get_latest_release'/1 (Releases) in case apply 'get_rh_script'/4 (LatestRelease,Release,RelDir,Masters) of <{'ok',{_X_CurrentVsn,_X_Descr,['restart_new_emulator'|_X_Script]}}> when call 'erlang':'=:=' (Static,'true') -> call 'erlang':'throw' ('static_emulator')
<{'ok',{CurrentVsn,Descr,['restart_new_emulator'|_X_Script]}}> when 'true' -> case apply 'new_emulator_make_tmp_release'/5 (LatestRelease,Release,RelDir,Opts,Masters) of <{TmpVsn,TmpRelease}> when 'true' -> let <NReleases> = [TmpRelease|Releases] in do apply 'prepare_restart_new_emulator'/7 (StartPrg,RootDir,RelDir,TmpVsn,TmpRelease,NReleases,Masters) {'restart_new_emulator',CurrentVsn,Descr}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{'ok',{CurrentVsn,Descr,Script}}> when 'true' -> (case LatestRelease of (<({'release',_36,_rec40,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> (case LatestRelease of (<({'release',_41,_42,_rec41,_43,_44}-|['compiler_generated'] )> when 'true' -> let <NReleases> = apply 'new_emulator_rm_tmp_release'/6 (_rec40,_rec41,Vsn,RelDir,Releases,Masters) in do apply 'mon_nodes'/1 ('true') let <EnvBefore> = call 'application_controller':'prep_config_change' () in let <Apps> = apply 'change_appl_data'/3 (RelDir,Release,Masters) in (case Release of (<({'release',_46,_47,_48,_rec42,_49}-|['compiler_generated'] )> when 'true' -> (case LatestRelease of (<({'release',_51,_52,_53,_rec43,_54}-|['compiler_generated'] )> when 'true' -> (case Release of (<({'release',_56,_57,_58,_rec44,_59}-|['compiler_generated'] )> when 'true' -> let <NewLibs> = apply 'get_new_libs'/2 (_rec43,_rec44) in case apply 'eval_script'/5 (Script,Apps,_rec42,NewLibs,Opts) of <{'ok',Unpurged}> when 'true' -> do call 'application_controller':'config_change' (EnvBefore) do apply 'mon_nodes'/1 ('false') let <NReleases1> = apply 'set_status'/3 (Vsn,'current',NReleases) in {'ok',NReleases1,Unpurged,CurrentVsn,Descr}
<'restart_emulator'> when call 'erlang':'=:=' (Static,'true') -> call 'erlang':'throw' ('static_emulator')
<'restart_emulator'> when 'true' -> do apply 'mon_nodes'/1 ('false') do apply 'prepare_restart_new_emulator'/7 (StartPrg,RootDir,RelDir,Vsn,Release,NReleases,Masters) {'restart_emulator',CurrentVsn,Descr}
<Else> when 'true' -> do call 'application_controller':'config_change' (EnvBefore) do apply 'mon_nodes'/1 ('false') Else end-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> Error end
<_61> when 'true' -> {'error',{'no_such_release',Vsn}} end
(<_27,_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26,_25})-|[{'function_name',{'do_install_release',3}}] )-|['compiler_generated'] ) end
'new_emulator_make_tmp_release'/5 = fun (_0,_1,_2,_3,_4) -> (case _0 of (<({'release',_31,_rec45,_32,_33,_34}-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'release',_36,_rec46,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> let <TmpVsn> = call 'erlang':'++' ([95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95]]]]]]]]]]]]]]]],_rec45) in (case _1 of (<({'release',_41,_42,_43,_rec47,_44}-|['compiler_generated'] )> when 'true' -> case apply 'get_base_libs'/1 (_rec47) of <{'ok',{Kernel,Stdlib,Sasl},_46}> when 'true' -> (case _0 of (<({'release',_47,_48,_49,_rec48,_50}-|['compiler_generated'] )> when 'true' -> case apply 'get_base_libs'/1 (_rec48) of <{'ok',_52,RestLibs}> when 'true' -> (case _1 of (<({'release',_53,_54,_rec49,_55,_56}-|['compiler_generated'] )> when 'true' -> let <TmpLibs> = [Kernel|[Stdlib|[Sasl|RestLibs]]] in case _0 of <{'release',_rec51,_rec52,_rec53,_rec54,_rec55}> when 'true' -> let <_22> = {'release',_rec51,TmpVsn,_rec49,TmpLibs,'unpacked'} in do apply 'new_emulator_make_hybrid_boot'/6 (_rec45,_rec46,TmpVsn,_2,_3,_4) do apply 'new_emulator_make_hybrid_config'/5 (_rec45,_rec46,TmpVsn,_2,_4) {TmpVsn,_22}
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'error',{'missing',Missing}}> when 'true' -> call 'erlang':'throw' ({'error',{'missing_base_app',_rec45,Missing}})
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'error',{'missing',Missing}}> when 'true' -> call 'erlang':'throw' ({'error',{'missing_base_app',_rec46,Missing}})
(<_25> when 'true' -> primop 'match_fail' ({'case_clause',_25})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'get_base_libs'/1 = fun (_0) -> apply 'get_base_libs'/5 (_0,'undefined','undefined','undefined',[])
'get_base_libs'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[Kernel = {'kernel',_11,_12}|Libs],'undefined',Stdlib,Sasl,Rest> when 'true' -> apply 'get_base_libs'/5 (Libs,Kernel,Stdlib,Sasl,Rest)
<[Stdlib = {'stdlib',_13,_14}|Libs],Kernel,'undefined',Sasl,Rest> when 'true' -> apply 'get_base_libs'/5 (Libs,Kernel,Stdlib,Sasl,Rest)
<[Sasl = {'sasl',_15,_16}|Libs],Kernel,Stdlib,'undefined',Rest> when 'true' -> apply 'get_base_libs'/5 (Libs,Kernel,Stdlib,Sasl,Rest)
<[Lib|Libs],Kernel,Stdlib,Sasl,Rest> when 'true' -> apply 'get_base_libs'/5 (Libs,Kernel,Stdlib,Sasl,[Lib|Rest])
<[],'undefined',_X_Stdlib,_X_Sasl,_X_Rest> when 'true' -> {'error',{'missing','kernel'}}
<[],_X_Kernel,'undefined',_X_Sasl,_X_Rest> when 'true' -> {'error',{'missing','stdlib'}}
<[],_X_Kernel,_X_Stdlib,'undefined',_X_Rest> when 'true' -> {'error',{'missing','sasl'}}
<[],Kernel,Stdlib,Sasl,Rest> when 'true' -> let <_5> = call 'lists':'reverse' (Rest) in {'ok',{Kernel,Stdlib,Sasl},_5}
(<_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7,_6})-|[{'function_name',{'get_base_libs',5}}] )-|['compiler_generated'] ) end
'new_emulator_make_hybrid_boot'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <FromBootFile> = call 'filename':'join' ([_3|[_0|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]]) in let <ToBootFile> = call 'filename':'join' ([_3|[_1|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]]) in let <TmpBootFile> = call 'filename':'join' ([_3|[_2|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]]) in do apply 'ensure_dir'/2 (TmpBootFile,_5) let <Args> = [_1|[_4|[]]] in case apply 'read_file'/2 (FromBootFile,_5) of <{'ok',FromBoot}> when 'true' -> case apply 'read_file'/2 (ToBootFile,_5) of <{'ok',ToBoot}> when 'true' -> case call 'systools_make':'make_hybrid_boot' (_2,FromBoot,ToBoot,Args) of <{'ok',TmpBoot}> when 'true' -> apply 'write_file'/3 (TmpBootFile,TmpBoot,_5)
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'could_not_create_hybrid_boot',Reason}})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
'new_emulator_make_hybrid_config'/5 = fun (_0,_1,_2,_3,_4) -> let <FromFile> = call 'filename':'join' ([_3|[_0|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]) in let <ToFile> = call 'filename':'join' ([_3|[_1|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]) in let <TmpFile> = call 'filename':'join' ([_3|[_2|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]) in let <_9> = case apply 'consult'/2 (FromFile,_4) of <{'ok',[FC|[]]}> when 'true' -> FC
<{'error',Error1}> when 'true' -> do call 'io':'format' ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],['release_handler'|[FromFile|[Error1|[]]]]) []
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in let <_17> = case apply 'consult'/2 (ToFile,_4) of <{'ok',[ToConfig|[]]}> when 'true' -> (letrec 'lc$^0'/1 = fun (_13) -> case _13 of <[App|_12]> when 'true' -> let <_14> = call 'lists':'keyfind' (App,1,ToConfig) in let <_15> = apply 'lc$^0'/1 (_12) in ([_14|_15]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_30> when 'true' -> (primop 'match_fail' ({'function_clause',_30})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (['kernel'|['stdlib'|['sasl']]])-|['list_comprehension'] )
<{'error',Error2}> when 'true' -> do call 'io':'format' ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[116|[112|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],['release_handler'|[ToFile|[Error2|[]]]]) ['false'|['false'|['false']]]
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end in case _17 of <[Kernel|[Stdlib|[Sasl|[]]]]> when 'true' -> let <Config1> = apply 'replace_config'/3 ('kernel',_9,Kernel) in let <Config2> = apply 'replace_config'/3 ('stdlib',Config1,Stdlib) in let <Config3> = apply 'replace_config'/3 ('sasl',Config2,Sasl) in let <_22> = call 'epp':'encoding_to_string' ('utf8') in let <ConfigStr> = call 'io_lib':'format' ([37|[37|[32|[126|[115|[126|[110|[126|[116|[112|[46|[126|[110]]]]]]]]]]]]],[_22|[Config3|[]]]) in let <_24> = call 'unicode':'characters_to_binary' (ConfigStr) in apply 'write_file'/3 (TmpFile,_24,_4)
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
'replace_config'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <App,Config,'false'> when 'true' -> call 'lists':'keydelete' (App,1,Config)
<App,Config,AppConfig> when 'true' -> call 'lists':'keystore' (App,1,Config,AppConfig) end
'new_emulator_rm_tmp_release'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_14]]]]]]]]]]]]]]]],EVsn,NewVsn,RelDir,Releases,Masters> when 'true' -> do case call 'os':'type' () of <{'win32','nt'}> when 'true' -> apply 'rename_tmp_service'/3 (EVsn,TmpVsn,NewVsn)
<_15> when 'true' -> 'ok' end let <_7> = call 'filename':'join' (RelDir,TmpVsn) in do apply 'remove_dir'/2 (_7,Masters) call 'lists':'keydelete' (TmpVsn,3,Releases)
<_16,_17,_18,_19,Releases,_20> when 'true' -> Releases end
'rename_tmp_service'/3 = fun (_0,_1,_2) -> let <_4> = call 'erlang':'node' () in let <_5> = call 'erlang':'atom_to_list' (_4) in let <_6> = call 'string':'lexemes' (_5,[64]) in let <_7> = call 'erlang':'hd' (_6) in let <_3> = [95|_1] in let <FromName> = call 'erlang':'++' (_7,_3) in let <_10> = call 'erlang':'node' () in let <_11> = call 'erlang':'atom_to_list' (_10) in let <_12> = call 'string':'lexemes' (_11,[64]) in let <_13> = call 'erlang':'hd' (_12) in let <_9> = [95|_2] in let <ToName> = call 'erlang':'++' (_13,_9) in do case call 'erlsrv':'get_service' (_0,ToName) of <{'error',_X_Error}> when 'true' -> 'ok'
<_X_Data> when 'true' -> case call 'erlsrv':'remove_service' (ToName) of <{'ok',_20}> when 'true' -> 'ok'
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end end apply 'rename_service'/3 (_0,FromName,ToName)
'rename_service'/3 = fun (_0,_1,_2) -> case call 'erlsrv':'rename_service' (_0,_1,_2) of <{'ok',_8}> when 'true' -> case call 'erlsrv':'get_service' (_0,_2) of <_@r0 = {'error',Error1}> when 'true' -> call 'erlang':'throw' (_@r0)
<_X_Data2> when 'true' -> 'ok' end
<Error2> when 'true' -> call 'erlang':'throw' ({'error',{'service_rename_failed',Error2}}) end
'do_make_services_permanent'/4 = fun (_0,_1,_2,_3) -> let <_5> = call 'erlang':'node' () in let <_6> = call 'erlang':'atom_to_list' (_5) in let <_7> = call 'string':'lexemes' (_6,[64]) in let <_8> = call 'erlang':'hd' (_7) in let <_4> = [95|_0] in let <PermName> = call 'erlang':'++' (_8,_4) in let <_11> = call 'erlang':'node' () in let <_12> = call 'erlang':'atom_to_list' (_11) in let <_13> = call 'string':'lexemes' (_12,[64]) in let <_14> = call 'erlang':'hd' (_13) in let <_10> = [95|_1] in let <Name> = call 'erlang':'++' (_14,_10) in case call 'erlsrv':'get_service' (_3,Name) of <{'error',_X_Error}> when 'true' -> let <_16> = call 'os':'getenv' ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]]) in case <> of <> when call 'erlang':'==' (_16,PermName) -> do apply 'rename_service'/3 (_3,PermName,Name) do call 'os':'putenv' ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]],Name) call 'heart':'cycle' ()
<> when 'true' -> call 'erlang':'throw' ({'error','service_name_missmatch'}) end
<Data> when 'true' -> let <UpdData> = call 'erlsrv':'new_service' (Name,Data,[]) in case call 'erlsrv':'store_service' (_3,UpdData) of <'ok'> when 'true' -> case call 'erlsrv':'disable_service' (_2,PermName) of <{'ok',_29}> when 'true' -> case call 'erlsrv':'enable_service' (_3,Name) of <{'ok',_30}> when 'true' -> case call 'erlsrv':'remove_service' (PermName) of <{'ok',_31}> when 'true' -> do call 'os':'putenv' ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]],Name) let <_32> = call 'heart':'cycle' () in case _32 of <'ok'> when 'true' -> (_32-|['compiler_generated'] )
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
<Error4> when 'true' -> call 'erlang':'throw' (Error4) end end
'do_make_permanent'/2 = fun (_0,_1) -> case <_0,_1> of <{'state',Unpurged,_30,RelDir,Releases,_31,_32,Masters,_33,Static,_34},Vsn> when 'true' -> case call 'lists':'keysearch' (Vsn,3,Releases) of <{'value',{'release',_35,_36,EVsn,_37,Status}}> when try let <_2> = call 'erlang':'=/=' (Status,'unpacked') in let <_3> = call 'erlang':'=/=' (Status,'old') in let <_4> = call 'erlang':'=/=' (Status,'permanent') in let <_5> = call 'erlang':'and' (_3,_4) in call 'erlang':'and' (_2,_5) of <Try> -> Try catch <T,R> -> 'false' -> let <Dir> = call 'filename':'join' ([RelDir|[Vsn|[]]]) in let <_8> = catch let <_7> = call 'filename':'join' (Dir,[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]) in apply 'check_file'/3 (_7,'regular',Masters) in let <_10> = case _8 of <'ok'> when 'true' -> call 'filename':'join' (Dir,[115|[121|[115]]])
<_38> when 'true' -> 'false' end in let <Boot> = call 'filename':'join' (Dir,[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]) in do apply 'check_file'/3 (Boot,'regular',Masters) do apply 'set_permanent_files'/5 (RelDir,EVsn,Vsn,Masters,Static) let <NewReleases> = apply 'set_status'/3 (Vsn,'permanent',Releases) in do apply 'write_releases'/3 (RelDir,NewReleases,Masters) do case call 'os':'type' () of <{'win32','nt'}> when 'true' -> case call 'lists':'keysearch' ('permanent',6,Releases) of <{'value',PermanentRelease}> when 'true' -> (case PermanentRelease of (<({'release',_39,_rec56,_40,_41,_42}-|['compiler_generated'] )> when 'true' -> (case PermanentRelease of (<({'release',_44,_45,_rec57,_46,_47}-|['compiler_generated'] )> when 'true' -> let <_21> = catch apply 'do_make_services_permanent'/4 (_rec56,Vsn,_rec57,EVsn) in case _21 of <{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'service_update_failed',Reason}})
<_49> when 'true' -> 'ok' end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_43> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<_50> when 'true' -> 'ok' end let <_24> = call 'filename':'join' (Dir,[115|[116|[97|[114|[116]]]]]) in case call 'init':'make_permanent' (_24,_10) of <'ok'> when 'true' -> let <_26> = apply 'brutal_purge'/1 (Unpurged) in {'ok',NewReleases,_26}
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
<{'value',{'release',_51,_52,_53,_54,'permanent'}}> when 'true' -> {'ok',Releases,Unpurged}
<{'value',{'release',_55,_56,_57,_58,Status}}> when 'true' -> {'error',{'bad_status',Status}}
<'false'> when 'true' -> {'error',{'no_such_release',Vsn}}
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end
(<_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28})-|[{'function_name',{'do_make_permanent',2}}] )-|['compiler_generated'] ) end
'do_back_service'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'node' () in let <_5> = call 'erlang':'atom_to_list' (_4) in let <_6> = call 'string':'lexemes' (_5,[64]) in let <NN> = call 'erlang':'hd' (_6) in let <_8> = [95|_0] in let <OldName> = call 'erlang':'++' (NN,_8) in let <_10> = [95|_1] in let <CurrentName> = call 'erlang':'++' (NN,_10) in let <_13> = case call 'erlsrv':'get_service' (_3,CurrentName) of <_@r0 = {'error',Error}> when 'true' -> call 'erlang':'throw' (_@r0)
<Data> when 'true' -> call 'erlsrv':'new_service' (OldName,Data,[]) end in case (call ('erlsrv'-|['result_not_wanted'] ):('store_service'-|['result_not_wanted'] ) (_2,_13)-|['result_not_wanted'] ) of <'ok'> when 'true' -> case (call ('erlsrv'-|['result_not_wanted'] ):('disable_service'-|['result_not_wanted'] ) (_3,CurrentName)-|['result_not_wanted'] ) of <({'ok',_35}-|['result_not_wanted'] )> when 'true' -> case (call ('erlsrv'-|['result_not_wanted'] ):('enable_service'-|['result_not_wanted'] ) (_2,OldName)-|['result_not_wanted'] ) of <({'ok',_37}-|['result_not_wanted'] )> when 'true' -> let <_20> = call 'erlsrv':'erlsrv' (_2) in let <OldErlSrv> = call 'filename':'nativename' (_20) in let <_22> = call 'erlsrv':'erlsrv' (_3) in let <CurrentErlSrv> = call 'filename':'nativename' (_22) in let <_24> = call 'erlang':'++' ([32|[115|[116|[97|[114|[116|[32]]]]]]],OldName) in let <_25> = call 'erlang':'++' (OldErlSrv,_24) in let <_26> = [32|[38|[32|_25]]] in let <_27> = call 'erlang':'++' (CurrentName,_26) in let <_28> = call 'erlang':'++' ([32|[114|[101|[109|[111|[118|[101|[32]]]]]]]],_27) in let <_29> = call 'erlang':'++' (CurrentErlSrv,_28) in case call 'heart':'set_cmd' (_29) of <'ok'> when 'true' -> 'ok'
<Error3> when 'true' -> call 'erlang':'throw' ({'error',{'heart:set_cmd() error',Error3}}) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<Error2> when 'true' -> (call ('erlang'-|['result_not_wanted'] ):('throw'-|['result_not_wanted'] ) (Error2)-|['result_not_wanted'] ) end
'do_reboot_old_release'/2 = fun (_0,_1) -> case <_0,_1> of <{'state',_15,_16,RelDir,Releases,_17,_18,Masters,_19,Static,_20},Vsn> when 'true' -> case call 'lists':'keysearch' (Vsn,3,Releases) of <{'value',{'release',_21,_22,EVsn,_23,'old'}}> when 'true' -> let <_4> = case call 'os':'type' () of <{'win32','nt'}> when 'true' -> case call 'lists':'keysearch' ('permanent',6,Releases) of <'false'> when 'true' -> call 'lists':'keysearch' ('current',6,Releases)
<{'value',CR}> when 'true' -> CR
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<_24> when 'true' -> 'false' end in do apply 'set_permanent_files'/5 (RelDir,EVsn,Vsn,Masters,Static) let <NewReleases> = apply 'set_status'/3 (Vsn,'permanent',Releases) in do apply 'write_releases'/3 (RelDir,NewReleases,Masters) do case call 'os':'type' () of <{'win32','nt'}> when 'true' -> (case _4 of (<({'release',_25,_rec58,_26,_27,_28}-|['compiler_generated'] )> when 'true' -> (case _4 of (<({'release',_30,_31,_rec59,_32,_33}-|['compiler_generated'] )> when 'true' -> apply 'do_back_service'/4 (Vsn,_rec58,EVsn,_rec59)-|['compiler_generated'] )
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_35> when 'true' -> 'ok' end 'ok'
<{'value',{'release',_36,_37,_38,_39,Status}}> when 'true' -> {'error',{'bad_status',Status}}
<'false'> when 'true' -> {'error',{'no_such_release',Vsn}}
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'do_reboot_old_release',2}}] )-|['compiler_generated'] ) end
'set_permanent_files'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <RelDir,EVsn,Vsn,'false',_17> when 'true' -> let <_7> = call 'filename':'join' ([RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]]) in let <_5> = [32|Vsn] in let <_6> = call 'erlang':'++' (EVsn,_5) in apply 'write_start'/3 (_7,_6,'false')
<RelDir,EVsn,Vsn,Masters,'false'> when 'true' -> let <_10> = call 'filename':'join' ([RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]]) in let <_8> = [32|Vsn] in let <_9> = call 'erlang':'++' (EVsn,_8) in apply 'write_start'/3 (_10,_9,Masters)
<RelDir,_X_EVsn,Vsn,Masters,_X_Static> when 'true' -> let <VsnDir> = call 'filename':'join' ([RelDir|[Vsn|[]]]) in apply 'set_static_files'/3 (VsnDir,RelDir,Masters) end
'do_remove_service'/1 = fun (_0) -> let <_2> = call 'erlang':'node' () in let <_3> = call 'erlang':'atom_to_list' (_2) in let <_4> = call 'string':'lexemes' (_3,[64]) in let <_5> = call 'erlang':'hd' (_4) in let <_1> = [95|_0] in let <ServiceName> = call 'erlang':'++' (_5,_1) in case call 'erlsrv':'get_service' (ServiceName) of <{'error',_X_Error}> when 'true' -> 'ok'
<_X_Data> when 'true' -> case call 'erlsrv':'remove_service' (ServiceName) of <{'ok',_10}> when 'true' -> 'ok'
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'do_remove_release'/4 = fun (_0,_1,_2,_3) -> case call 'lists':'keysearch' (_2,3,_3) of <{'value',{'release',_24,_25,_26,_27,'permanent'}}> when 'true' -> {'error',{'permanent',_2}}
<{'value',{'release',_28,_29,EVsn,RemoveLibs,_30}}> when call 'erlang':'=:=' (_29,_2) -> do case call 'os':'type' () of <{'win32','nt'}> when 'true' -> apply 'do_remove_service'/1 (_2)
<_31> when 'true' -> 'ok' end let <NewReleases> = call 'lists':'keydelete' (_2,3,_3) in let <_10> = fun (_7,_6) -> case <_7,_6> of <{'release',_32,_33,_34,Libs,_35},Remove> when 'true' -> apply 'diff_dir'/2 (Remove,Libs)
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'-do_remove_release/4-fun-0-',2}}] )-|['compiler_generated'] ) end in let <RemoveThese> = call 'lists':'foldl' (_10,RemoveLibs,NewReleases) in let <_14> = fun (_12) -> case _12 of <{_X_Lib,_X_LVsn,LDir}> when 'true' -> apply 'remove_file'/1 (LDir)
(<_13> when 'true' -> (primop 'match_fail' ({'function_clause',_13})-|[{'function_name',{'-do_remove_release/4-fun-1-',1}}] )-|['compiler_generated'] ) end in do call 'lists':'foreach' (_14,RemoveThese) let <_15> = call 'filename':'join' ([_1|[_2|[]]]) in do apply 'remove_file'/1 (_15) do case call 'lists':'keysearch' (EVsn,4,NewReleases) of <{'value',_36}> when 'true' -> 'ok'
<'false'> when 'true' -> let <_16> = call 'erlang':'++' ([101|[114|[116|[115|[45]]]]],EVsn) in let <_17> = call 'filename':'join' (_0,_16) in apply 'remove_file'/1 (_17)
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end do apply 'write_releases'/3 (_1,NewReleases,'false') {'ok',NewReleases}
<'false'> when 'true' -> {'error',{'no_such_release',_2}}
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
'do_set_unpacked'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <Release> = apply 'check_rel'/4 (_0,_2,_3,_5) in case Release of <{'release',_20,Vsn,_21,_22,_23}> when 'true' -> do case call 'lists':'keysearch' (Vsn,3,_4) of <{'value',_24}> when 'true' -> call 'erlang':'throw' ({'error',{'existing_release',Vsn}})
<'false'> when 'true' -> 'ok'
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end case Release of <{'release',_25,_26,_27,_28,_29}> when 'true' -> let <_11> = call 'erlang':'setelement' (6,Release,'unpacked') in let <NewReleases> = [_11|_4] in let <VsnDir> = call 'filename':'join' ([_1|[Vsn|[]]]) in do apply 'make_dir'/2 (VsnDir,_5) do apply 'write_releases'/3 (_1,NewReleases,_5) {'ok',NewReleases,Vsn}
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'do_set_removed'/4 = fun (_0,_1,_2,_3) -> case call 'lists':'keysearch' (_1,3,_2) of <{'value',{'release',_10,_11,_12,_13,'permanent'}}> when 'true' -> {'error',{'permanent',_1}}
<{'value',_14}> when 'true' -> let <NewReleases> = call 'lists':'keydelete' (_1,3,_2) in do apply 'write_releases'/3 (_0,NewReleases,_3) {'ok',NewReleases}
<'false'> when 'true' -> {'error',{'no_such_release',_1}}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'get_rh_script'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'release',_9,[95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|CurrentVsn]]]]]]]]]]]]]]]],_10,_11,_12},{'release',_13,ToVsn,_14,_15,_16},RelDir,Masters> when 'true' -> case apply 'do_get_rh_script'/4 (CurrentVsn,ToVsn,RelDir,Masters) of <{'ok',{Vsn,Descr,['restart_new_emulator'|Script]}}> when 'true' -> {'ok',{Vsn,Descr,Script}}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{'release',_17,CurrentVsn,_18,_19,_20},{'release',_21,ToVsn,_22,_23,_24},RelDir,Masters> when 'true' -> apply 'do_get_rh_script'/4 (CurrentVsn,ToVsn,RelDir,Masters)
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'get_rh_script',4}}] )-|['compiler_generated'] ) end
'do_get_rh_script'/4 = fun (_0,_1,_2,_3) -> let <Relup> = call 'filename':'join' ([_2|[_1|[[114|[101|[108|[117|[112]]]]]]]]) in case apply 'try_upgrade'/4 (_1,_0,Relup,_3) of <_@r0 = {'ok',RhScript}> when 'true' -> _@r0
<_12> when 'true' -> let <Relup2> = call 'filename':'join' ([_2|[_0|[[114|[101|[108|[117|[112]]]]]]]]) in case apply 'try_downgrade'/4 (_1,_0,Relup2,_3) of <_@r1 = {'ok',RhScript}> when 'true' -> _@r1
<_13> when 'true' -> call 'erlang':'throw' ({'error',{'no_matching_relup',_1,_0}}) end end
'try_upgrade'/4 = fun (_0,_1,_2,_3) -> case apply 'consult'/2 (_2,_3) of <{'ok',[{_10,ListOfRhScripts,_11}|[]]}> when call 'erlang':'=:=' (_10,_0) -> case call 'lists':'keysearch' (_1,1,ListOfRhScripts) of <{'value',RhScript}> when 'true' -> {'ok',RhScript}
<_12> when 'true' -> 'error' end
<{'ok',_13}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_relup_file',_2}})
<{'error',Reason}> when call 'erlang':'is_tuple' (Reason) -> call 'erlang':'throw' ({'error',{'bad_relup_file',_2}})
<{'error','enoent'}> when 'true' -> 'error'
<{'error',FileError}> when 'true' -> call 'erlang':'throw' ({'error',{FileError,_2}})
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'try_downgrade'/4 = fun (_0,_1,_2,_3) -> case apply 'consult'/2 (_2,_3) of <{'ok',[{_10,_11,ListOfRhScripts}|[]]}> when call 'erlang':'=:=' (_10,_1) -> case call 'lists':'keysearch' (_0,1,ListOfRhScripts) of <{'value',RhScript}> when 'true' -> {'ok',RhScript}
<_12> when 'true' -> 'error' end
<{'ok',_13}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_relup_file',_2}})
<{'error',Reason}> when call 'erlang':'is_tuple' (Reason) -> call 'erlang':'throw' ({'error',{'bad_relup_file',_2}})
<{'error',FileError}> when 'true' -> call 'erlang':'throw' ({'error',{FileError,_2}})
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'set_status'/3 = fun (_0,_1,_2) -> let <_32> = fun (_30) -> case _30 of <Release = {'release',_36,_37,_38,_39,_40}> when (try let <_7> = call 'erlang':'element' (3,Release) in let <_8> = call 'erlang':'==' (_7,_0) in let <_10> = call 'erlang':'element' (6,Release) in let <_11> = call 'erlang':'=:=' (_10,'permanent') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_11)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'true'
<Release = {'release',_41,_42,_43,_44,_45}> when (try let <_16> = call 'erlang':'element' (3,Release) in call 'erlang':'==' (_16,_0) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case Release of <{'release',_46,_47,_48,_49,_50}> when 'true' -> let <_20> = call 'erlang':'setelement' (6,Release,_1) in {'true',_20}
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Release = {'release',_52,_53,_54,_55,_56}> when (try let <_25> = call 'erlang':'element' (6,Release) in call 'erlang':'==' (_25,_1) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case Release of <{'release',_57,_58,_59,_60,_61}> when 'true' -> let <_29> = call 'erlang':'setelement' (6,Release,'old') in {'true',_29}
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_63> when 'true' -> 'true' end in call 'lists':'zf' (_32,_2)
'get_latest_release'/1 = fun (_0) -> case call 'lists':'keysearch' ('current',6,_0) of <{'value',Release}> when 'true' -> Release
<'false'> when 'true' -> case call 'lists':'keysearch' ('permanent',6,_0) of <{'value',Release}> when 'true' -> Release
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'diff_dir'/2 = fun (_0,_1) -> case <_0,_1> of <[H|T],L> when 'true' -> case apply 'memlib'/2 (H,L) of <'true'> when 'true' -> apply 'diff_dir'/2 (T,L)
<'false'> when 'true' -> let <_2> = apply 'diff_dir'/2 (T,L) in [H|_2]
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<[],_6> when 'true' -> []
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'diff_dir',2}}] )-|['compiler_generated'] ) end
'memlib'/2 = fun (_0,_1) -> case <_0,_1> of <{Lib,Vsn,_X_Dir},[{_4,_5,_X_Dir2}|_X_T]> when let <_6> = call 'erlang':'=:=' (_4,Lib) in let <_7> = call 'erlang':'=:=' (_5,Vsn) in call 'erlang':'and' (_6,_7) -> 'true'
<Lib,[_X_H|T]> when 'true' -> apply 'memlib'/2 (Lib,T)
<_X_Lib,[]> when 'true' -> 'false'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'memlib',2}}] )-|['compiler_generated'] ) end
'remove_file'/1 = fun (_0) -> case call 'file':'read_link_info' (_0) of <{'ok',Info = {'file_info',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}}> when (try let <_5> = call 'erlang':'element' (3,Info) in call 'erlang':'=:=' (_5,'directory') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case call 'file':'list_dir' (_0) of <{'ok',Files}> when 'true' -> let <_10> = fun (_8) -> let <_7> = call 'filename':'join' (_0,_8) in apply 'remove_file'/1 (_7) in do call 'lists':'foreach' (_10,Files) case call 'file':'del_dir' (_0) of <'ok'> when 'true' -> 'ok'
<_@r0 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r0)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<_@r1 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r1)
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<{'ok',_X_Info}> when 'true' -> case call 'file':'delete' (_0) of <'ok'> when 'true' -> 'ok'
<_@r2 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r2)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
<{'error',_X_Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_file',_0}})
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
'do_write_file'/2 = fun (_0,_1) -> apply 'do_write_file'/3 (_0,_1,[])
'do_write_file'/3 = fun (_0,_1,_2) -> case call 'file':'open' (_0,['write'|_2]) of <{'ok',Fd}> when 'true' -> do call 'io':'put_chars' (Fd,_1) let <_8> = call 'file':'close' (Fd) in case _8 of <'ok'> when 'true' -> (_8-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> {'error',{Reason,_0}}
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'change_appl_data'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <RelDir,{'release',_16,Vsn,_17,_18,_19},Masters> when 'true' -> let <Dir> = call 'filename':'join' ([RelDir|[Vsn|[]]]) in let <BootFile> = call 'filename':'join' (Dir,[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]) in case apply 'read_file'/2 (BootFile,Masters) of <{'ok',Bin}> when 'true' -> let <_5> = call 'filename':'join' (Dir,[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]) in let <_7> = case apply 'consult'/2 (_5,Masters) of <{'ok',[Conf|[]]}> when 'true' -> Conf
<_20> when 'true' -> [] end in let <_9> = call 'erlang':'binary_to_term' (Bin) in let <Appls> = apply 'get_appls'/1 (_9) in case call 'application_controller':'change_application_data' (Appls,_7) of <'ok'> when 'true' -> Appls
<{'error',Reason}> when 'true' -> call 'erlang':'exit' ({'change_appl_data',Reason})
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<{'error',_X_Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_file',BootFile}})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13})-|[{'function_name',{'change_appl_data',3}}] )-|['compiler_generated'] ) end
'get_appls'/1 = fun (_0) -> case _0 of <{'script',_2,Script}> when 'true' -> apply 'get_appls'/2 (Script,[])
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'get_appls',1}}] )-|['compiler_generated'] ) end
'get_appls'/2 = fun (_0,_1) -> case <_0,_1> of <[{'kernelProcess','application_controller',{'application_controller','start',[App|[]]}}|T],Res> when 'true' -> apply 'get_appls'/2 (T,[App|Res])
<[{'apply',{'application','load',[App|[]]}}|T],Res> when 'true' -> apply 'get_appls'/2 (T,[App|Res])
<[_4|T],Res> when 'true' -> apply 'get_appls'/2 (T,Res)
<[],Res> when 'true' -> Res
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'get_appls',2}}] )-|['compiler_generated'] ) end
'mon_nodes'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> let <_4> = call 'net_kernel':'monitor_nodes' ('true') in case _4 of <'ok'> when 'true' -> (_4-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<'false'> when 'true' -> case call 'net_kernel':'monitor_nodes' ('false') of <'ok'> when 'true' -> apply 'flush'/0 ()
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'mon_nodes',1}}] )-|['compiler_generated'] ) end
'flush'/0 = fun () -> receive <{'nodedown',_0}> when 'true' -> apply 'flush'/0 ()
<{'nodeup',_1}> when 'true' -> apply 'flush'/0 () after 0 -> 'ok'
'prepare_restart_nt'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'release',_30,Vsn,EVsn,_31,_32},{'release',_33,PermVsn,PermEVsn,_34,_35},DataFileName> when 'true' -> let <_4> = call 'erlang':'node' () in let <_5> = call 'erlang':'atom_to_list' (_4) in let <_6> = call 'string':'lexemes' (_5,[64]) in let <_7> = call 'erlang':'hd' (_6) in let <_3> = [95|PermVsn] in let <CurrentServiceName> = call 'erlang':'++' (_7,_3) in let <_10> = call 'erlang':'node' () in let <_11> = call 'erlang':'atom_to_list' (_10) in let <_12> = call 'string':'lexemes' (_11,[64]) in let <_13> = call 'erlang':'hd' (_12) in let <_9> = [95|Vsn] in let <FutureServiceName> = call 'erlang':'++' (_13,_9) in let <_16> = case call 'erlsrv':'get_service' (PermEVsn,CurrentServiceName) of <Error1 = {'error',_36}> when 'true' -> call 'erlang':'throw' (Error1)
<CS> when 'true' -> CS end in let <_18> = call 'filename':'nativename' (DataFileName) in let <FutureService> = call 'erlsrv':'new_service' (FutureServiceName,_16,_18,CurrentServiceName) in case call 'erlsrv':'store_service' (EVsn,FutureService) of <Error2 = {'error',_37}> when 'true' -> call 'erlang':'throw' (Error2)
<_X_X> when 'true' -> case call 'erlsrv':'disable_service' (EVsn,FutureServiceName) of <{'ok',_38}> when 'true' -> let <_21> = call 'erlsrv':'erlsrv' (EVsn) in let <ErlSrv> = call 'filename':'nativename' (_21) in let <_23> = call 'erlang':'++' ([32|[115|[116|[97|[114|[116|[95|[100|[105|[115|[97|[98|[108|[101|[100|[32]]]]]]]]]]]]]]]],FutureServiceName) in let <StartDisabled> = call 'erlang':'++' (ErlSrv,_23) in case call 'heart':'set_cmd' (StartDisabled) of <'ok'> when 'true' -> 'ok'
<Error3> when 'true' -> call 'erlang':'throw' ({'error',{'heart:set_cmd() error',Error3}}) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end end
(<_29,_28,_27> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28,_27})-|[{'function_name',{'prepare_restart_nt',3}}] )-|['compiler_generated'] ) end
'prepare_restart_new_emulator'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case call 'lists':'keysearch' ('permanent',6,_5) of <{'value',PRelease}> when 'true' -> let <NReleases1> = apply 'set_status'/3 (_3,'current',_5) in let <NReleases2> = apply 'set_status'/3 (_3,'tmp_current',NReleases1) in do apply 'write_releases'/3 (_2,NReleases2,_6) apply 'prepare_restart_new_emulator'/6 (_0,_1,_2,_4,PRelease,_6)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'prepare_restart_new_emulator'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _3 of <{'release',_21,Vsn,EVsn,_22,_23}> when 'true' -> let <_7> = [32|Vsn] in let <Data> = call 'erlang':'++' (EVsn,_7) in let <DataFile> = apply 'write_new_start_erl'/3 (Data,_2,_5) in case call 'os':'type' () of <{'win32','nt'}> when 'true' -> do apply 'write_ini_file'/3 (_1,EVsn,_5) apply 'prepare_restart_nt'/3 (_3,_4,DataFile)
<{'unix',_24}> when 'true' -> let <StartP> = apply 'check_start_prg'/2 (_0,_5) in let <_11> = [32|DataFile] in let <_12> = call 'erlang':'++' (StartP,_11) in case call 'heart':'set_cmd' (_12) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' ({'error',{'heart:set_cmd() error',Error}}) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'check_start_prg'/2 = fun (_0,_1) -> case <_0,_1> of <{'do_check',StartPrg},Masters> when 'true' -> do apply 'check_file'/3 (StartPrg,'regular',Masters) StartPrg
<{_4,StartPrg},_5> when 'true' -> StartPrg
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'check_start_prg',2}}] )-|['compiler_generated'] ) end
'write_new_start_erl'/3 = fun (_0,_1,_2) -> let <DataFile> = call 'filename':'join' ([_1|[[110|[101|[119|[95|[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]]) in do apply 'write_file'/3 (DataFile,_0,_2) DataFile
'transform_release'/3 = fun (_0,_1,_2) -> case call 'init':'script_id' () of <_@r0 = {Name,TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_20]]]]]]]]]]]]]]]]}> when 'true' -> let <DReleases> = call 'lists':'keydelete' (TmpVsn,3,_1) in do apply 'write_releases'/3 (_0,DReleases,_2) apply 'set_current'/2 (_@r0,_1)
<ScriptId> when 'true' -> let <F> = fun (_12) -> case _12 of <Release = {'release',_21,_22,_23,_24,_25}> when (try let <_8> = call 'erlang':'element' (6,Release) in call 'erlang':'=:=' (_8,'tmp_current') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case Release of <{'release',_26,_27,_28,_29,_30}> when 'true' -> call 'erlang':'setelement' (6,Release,'unpacked')
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Release> when 'true' -> Release end in case call 'lists':'map' (F,_1) of <_32> when call 'erlang':'=:=' (_32,_1) -> _1
<DReleases> when 'true' -> do apply 'write_releases'/3 (_0,DReleases,_2) apply 'set_current'/2 (ScriptId,_1) end end
'set_current'/2 = fun (_0,_1) -> let <F1> = fun (_19) -> case _19 of <Release = {'release',_24,_25,_26,_27,_28}> when (try let <_6> = call 'erlang':'element' (6,Release) in call 'erlang':'=:=' (_6,'tmp_current') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case _0 of <{_X_Name,Vsn}> when (try (let <_10> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Release,('release'-|['compiler_generated'] ),(6-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_8-|['compiler_generated'] )> when 'true' -> (_8-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'element' (3,Release) in let <_13> = call 'erlang':'==' (_12,Vsn) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_13)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case Release of <{'release',_29,_30,_31,_32,_33}> when 'true' -> call 'erlang':'setelement' (6,Release,'current')
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_35> when 'true' -> case Release of <{'release',_36,_37,_38,_39,_40}> when 'true' -> call 'erlang':'setelement' (6,Release,'unpacked')
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<Release> when 'true' -> Release end in call 'lists':'map' (F1,_1)
'check_opt_file'/3 = fun (_0,_1,_2) -> let <_3> = catch apply 'check_file'/3 (_0,_1,_2) in case _3 of <'ok'> when 'true' -> 'true'
<_X_Error> when 'true' -> do call 'io':'format' ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[116|[112|[32|[109|[105|[115|[115|[105|[110|[103|[32|[40|[111|[112|[116|[105|[111|[110|[97|[108|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[]]) 'false' end
'check_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <FileName,Type,'false'> when 'true' -> apply 'do_check_file'/2 (FileName,Type)
<FileName,Type,Masters> when 'true' -> apply 'check_file_masters'/3 (FileName,Type,Masters) end
'check_file_masters'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <FileName,Type,[Master|Masters]> when 'true' -> do apply 'do_check_file'/3 (Master,FileName,Type) apply 'check_file_masters'/3 (FileName,Type,Masters)
<_X_FileName,_X_Type,[]> when 'true' -> 'ok'
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'check_file_masters',3}}] )-|['compiler_generated'] ) end
'do_check_file'/2 = fun (_0,_1) -> case call 'file':'read_file_info' (_0) of <{'ok',Info = {'file_info',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}}> when (try let <_6> = call 'erlang':'element' (3,Info) in call 'erlang':'==' (_6,_1) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<{'error',_X_Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_file',_0}})
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'do_check_file'/3 = fun (_0,_1,_2) -> case call 'rpc':'call' (_0,'file','read_file_info',[_1|[]]) of <{'ok',Info = {'file_info',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25}}> when (try let <_7> = call 'erlang':'element' (3,Info) in call 'erlang':'==' (_7,_2) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<_26> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_file',{_0,_1}}}) end
'extract_rel_file'/3 = fun (_0,_1,_2) -> (call ('erl_tar'-|['result_not_wanted'] ):('extract'-|['result_not_wanted'] ) (_1,([({('files'-|['result_not_wanted'] ),([_0|([]-|['result_not_wanted'] )]-|['result_not_wanted'] )}-|['result_not_wanted'] )|([({('cwd'-|['result_not_wanted'] ),_2}-|['result_not_wanted'] )|(['compressed']-|['result_not_wanted'] )]-|['result_not_wanted'] )]-|['result_not_wanted'] ))-|['result_not_wanted'] )
'extract_tar'/2 = fun (_0,_1) -> case call 'erl_tar':'extract' (_1,['keep_old_files'|[{'cwd',_0}|['compressed']]]) of <'ok'> when 'true' -> 'ok'
<{'error',{Name,Reason}}> when 'true' -> call 'erlang':'throw' ({'error',{'cannot_extract_file',Name,Reason}})
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'write_releases'/3 = fun (_0,_1,_2) -> let <_14> = fun (_12) -> case _12 of <Release = {'release',_19,_20,_21,_22,_23}> when (try let <_7> = call 'erlang':'element' (6,Release) in call 'erlang':'=:=' (_7,'current') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case Release of <{'release',_24,_25,_26,_27,_28}> when 'true' -> let <_11> = call 'erlang':'setelement' (6,Release,'unpacked') in {'true',_11}
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','release'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_30> when 'true' -> 'true' end in let <NewReleases> = call 'lists':'zf' (_14,_1) in apply 'write_releases_1'/3 (_0,NewReleases,_2)
'write_releases_1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Dir,NewReleases,'false'> when 'true' -> case apply 'do_write_release'/3 (Dir,[82|[69|[76|[69|[65|[83|[69|[83]]]]]]]],NewReleases) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<Dir,NewReleases,Masters> when 'true' -> do apply 'all_masters'/1 (Masters) apply 'write_releases_m'/3 (Dir,NewReleases,Masters) end
'do_write_release'/3 = fun (_0,_1,_2) -> let <_3> = call 'filename':'join' (_0,_1) in case call 'file':'open' (_3,['write'|[{'encoding','utf8'}]]) of <{'ok',Fd}> when 'true' -> let <_4> = call 'epp':'encoding_to_string' ('utf8') in case call 'io':'format' (Fd,[37|[37|[32|[126|[115|[126|[110|[126|[116|[112|[46|[126|[110]]]]]]]]]]]]],[_4|[_2|[]]]) of <'ok'> when 'true' -> let <_11> = call 'file':'close' (Fd) in case _11 of <'ok'> when 'true' -> (_11-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_@r0 = {'error',Reason}> when 'true' -> _@r0
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'write_releases_m'/3 = fun (_0,_1,_2) -> let <RelFile> = call 'filename':'join' (_0,[82|[69|[76|[69|[65|[83|[69|[83]]]]]]]]) in let <Backup> = call 'filename':'join' (_0,[82|[69|[76|[69|[65|[83|[69|[83|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]]]]]) in let <Change> = call 'filename':'join' (_0,[82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]]) in do apply 'ensure_RELEASES_exists'/2 (_2,RelFile) case apply 'at_all_masters'/4 (_2,'release_handler','do_copy_files',[RelFile|[[Backup|[Change|[]]]|[]]]) of <'ok'> when 'true' -> case apply 'at_all_masters'/4 (_2,'release_handler','do_write_release',[_0|[[82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]]|[_1|[]]]]) of <'ok'> when 'true' -> case apply 'at_all_masters'/4 (_2,'file','rename',[Change|[RelFile|[]]]) of <'ok'> when 'true' -> do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_2) 'ok'
<{'error',{Master,R}}> when 'true' -> do apply 'takewhile'/5 (Master,_2,'file','rename',[Backup|[RelFile|[]]]) do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_2) call 'erlang':'throw' ({'error',{Master,R,'move_releases'}})
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<{'error',{Master,R}}> when 'true' -> do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_2) call 'erlang':'throw' ({'error',{Master,R,'update_releases'}})
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<{'error',{Master,R}}> when 'true' -> do apply 'remove_files'/3 (Master,[Backup|[Change|[]]],_2) call 'erlang':'throw' ({'error',{Master,R,'backup_releases'}})
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'ensure_RELEASES_exists'/2 = fun (_0,_1) -> case apply 'at_all_masters'/4 (_0,'release_handler','do_ensure_RELEASES',[_1|[]]) of <'ok'> when 'true' -> 'ok'
<{'error',{Master,R}}> when 'true' -> call 'erlang':'throw' ({'error',{Master,R,'ensure_RELEASES_exists'}})
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'copy_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,Dir,'false'> when 'true' -> case apply 'do_copy_file'/2 (File,Dir) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<File,Dir,Masters> when 'true' -> do apply 'all_masters'/1 (Masters) apply 'copy_file_m'/3 (File,Dir,Masters) end
'copy_file_m'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,Dir,[Master|Masters]> when 'true' -> case call 'rpc':'call' (Master,'release_handler','do_copy_file',[File|[Dir|[]]]) of <'ok'> when 'true' -> apply 'copy_file_m'/3 (File,Dir,Masters)
<{'error',{Reason,F}}> when 'true' -> call 'erlang':'throw' ({'error',{Master,Reason,F}})
<Other> when 'true' -> call 'erlang':'throw' ({'error',{Master,Other,File}}) end
<_X_File,_X_Dir,[]> when 'true' -> 'ok'
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'copy_file_m',3}}] )-|['compiler_generated'] ) end
'do_copy_file'/2 = fun (_0,_1) -> let <_2> = call 'filename':'basename' (_0) in let <File2> = call 'filename':'join' (_1,_2) in apply 'do_copy_file1'/2 (_0,File2)
'do_copy_file1'/2 = fun (_0,_1) -> case call 'file':'read_file' (_0) of <{'ok',Bin}> when 'true' -> case call 'file':'write_file' (_1,Bin) of <'ok'> when 'true' -> 'ok'
<{'error',Reason}> when 'true' -> {'error',{Reason,_1}}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> {'error',{Reason,_0}}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'do_copy_files'/2 = fun (_0,_1) -> case <_0,_1> of <File,[ToFile|ToFiles]> when 'true' -> case apply 'do_copy_file1'/2 (File,ToFile) of <'ok'> when 'true' -> apply 'do_copy_files'/2 (File,ToFiles)
<Error> when 'true' -> Error end
<_5,[]> when 'true' -> 'ok'
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'do_copy_files',2}}] )-|['compiler_generated'] ) end
'do_copy_files'/1 = fun (_0) -> case _0 of <[{Src,Dest}|Files]> when 'true' -> case apply 'do_copy_file1'/2 (Src,Dest) of <'ok'> when 'true' -> apply 'do_copy_files'/1 (Files)
<Error> when 'true' -> Error end
<[]> when 'true' -> 'ok'
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'do_copy_files',1}}] )-|['compiler_generated'] ) end
'do_rename_files'/1 = fun (_0) -> case _0 of <[{Src,Dest}|Files]> when 'true' -> case call 'file':'rename' (Src,Dest) of <'ok'> when 'true' -> apply 'do_rename_files'/1 (Files)
<Error> when 'true' -> Error end
<[]> when 'true' -> 'ok'
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'do_rename_files',1}}] )-|['compiler_generated'] ) end
'do_remove_files'/1 = fun (_0) -> case _0 of <[File|Files]> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (File)-|['result_not_wanted'] ) apply 'do_remove_files'/1 (Files)
<[]> when 'true' -> 'ok'
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'do_remove_files',1}}] )-|['compiler_generated'] ) end
'do_ensure_RELEASES'/1 = fun (_0) -> case call 'file':'read_file_info' (_0) of <{'ok',_3}> when 'true' -> 'ok'
<_4> when 'true' -> apply 'do_write_file'/2 (_0,[91|[93|[46|[32]]]]) end
'make_dir'/2 = fun (_0,_1) -> case <_0,_1> of <Dir,'false'> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('make_dir'-|['result_not_wanted'] ) (Dir)-|['result_not_wanted'] ) 'ok'
<Dir,Masters> when 'true' -> let <_5> = fun (_3) -> call 'rpc':'call' (_3,'file','make_dir',[Dir|[]]) in call 'lists':'foreach' (_5,Masters) end
'all_masters'/1 = fun (_0) -> case call 'rpc':'multicall' (_0,'erlang','info',['version']) of <{_3,[]}> when 'true' -> 'ok'
<{_4,BadNodes}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_masters',BadNodes}})
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'at_all_masters'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[Master|Masters],M,F,A> when 'true' -> case call 'rpc':'call' (Master,M,F,A) of <'ok'> when 'true' -> apply 'at_all_masters'/4 (Masters,M,F,A)
<Error> when 'true' -> {'error',{Master,Error}} end
<[],_9,_10,_11> when 'true' -> 'ok'
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'at_all_masters',4}}] )-|['compiler_generated'] ) end
'takewhile'/5 = fun (_0,_1,_2,_3,_4) -> let <_7> = fun (_5) -> (case (_5-|['result_not_wanted'] ) of <Ma> when (call ('erlang'-|['result_not_wanted'] ):('=='-|['result_not_wanted'] ) ((_5-|['result_not_wanted'] ),_0)-|['result_not_wanted'] ) -> ('false'-|['result_not_wanted'] )
<Ma> when 'true' -> do (call ('rpc'-|['result_not_wanted'] ):('call'-|['result_not_wanted'] ) (Ma,_2,_3,_4)-|['result_not_wanted'] ) ('true'-|['result_not_wanted'] ) end-|['result_not_wanted'] ) in do (call ('lists'-|['result_not_wanted'] ):('takewhile'-|['result_not_wanted'] ) (_7,_1)-|['result_not_wanted'] ) 'ok'
'consult'/2 = fun (_0,_1) -> case <_0,_1> of <File,'false'> when 'true' -> call 'file':'consult' (File)
<File,Masters> when 'true' -> apply 'consult_master'/2 (Masters,File) end
'consult_master'/2 = fun (_0,_1) -> case <_0,_1> of <[Master|Ms],File> when 'true' -> case call 'rpc':'call' (Master,'file','consult',[File|[]]) of <{'badrpc',_5}> when 'true' -> apply 'consult_master'/2 (Ms,File)
<Res> when 'true' -> Res end
<[],_X_File> when 'true' -> {'error','no_master'}
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'consult_master',2}}] )-|['compiler_generated'] ) end
'read_file'/2 = fun (_0,_1) -> case <_0,_1> of <File,'false'> when 'true' -> call 'file':'read_file' (File)
<File,Masters> when 'true' -> apply 'read_master'/2 (Masters,File) end
'write_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,Data,'false'> when 'true' -> case call 'file':'write_file' (File,Data) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<File,Data,Masters> when 'true' -> case apply 'at_all_masters'/4 (Masters,'file','write_file',[File|[Data|[]]]) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end end
'ensure_dir'/2 = fun (_0,_1) -> case <_0,_1> of <File,'false'> when 'true' -> case call 'filelib':'ensure_dir' (File) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<File,Masters> when 'true' -> case apply 'at_all_masters'/4 (Masters,'filelib','ensure_dir',[File|[]]) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end end
'remove_dir'/2 = fun (_0,_1) -> case <_0,_1> of <Dir,'false'> when 'true' -> apply 'remove_file'/1 (Dir)
<Dir,Masters> when 'true' -> case apply 'at_all_masters'/4 (Masters,'release_handler','remove_file',[Dir|[]]) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end end
'remove_files'/3 = fun (_0,_1,_2) -> apply 'takewhile'/5 (_0,_2,'release_handler','do_remove_files',[_1|[]])
'read_master'/2 = fun (_0,_1) -> case <_0,_1> of <[Master|Ms],File> when 'true' -> case call 'rpc':'call' (Master,'file','read_file',[File|[]]) of <{'badrpc',_5}> when 'true' -> apply 'read_master'/2 (Ms,File)
<Res> when 'true' -> Res end
<[],_X_File> when 'true' -> {'error','no_master'}
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'read_master',2}}] )-|['compiler_generated'] ) end
'write_start'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,Data,'false'> when 'true' -> case apply 'do_write_file'/2 (File,Data) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<File,Data,Masters> when 'true' -> do apply 'all_masters'/1 (Masters) apply 'safe_write_file_m'/3 (File,Data,Masters) end
'set_static_files'/3 = fun (_0,_1,_2) -> do apply 'all_masters'/1 (_2) let <SrcBoot> = call 'filename':'join' (_0,[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]) in let <DestBoot> = call 'filename':'join' (_1,[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]) in let <BackupBoot> = call 'filename':'join' (_1,[115|[116|[97|[114|[116|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]]) in let <SrcConf> = call 'filename':'join' (_0,[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]) in let <DestConf> = call 'filename':'join' (_1,[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]) in let <BackupConf> = call 'filename':'join' (_1,[115|[121|[115|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]) in case apply 'at_all_masters'/4 (_2,'release_handler','do_copy_files',[[{DestBoot,BackupBoot}|[{DestConf,BackupConf}|[]]]|[]]) of <'ok'> when 'true' -> case apply 'at_all_masters'/4 (_2,'release_handler','do_copy_files',[[{SrcBoot,DestBoot}|[{SrcConf,DestConf}|[]]]|[]]) of <'ok'> when 'true' -> do apply 'remove_files'/3 ('all',[BackupBoot|[BackupConf|[]]],_2) 'ok'
<{'error',{Master,R}}> when 'true' -> do apply 'takewhile'/5 (Master,_2,'release_handler','do_rename_files',[{BackupBoot,DestBoot}|[{BackupConf,DestConf}|[]]]) do apply 'remove_files'/3 ('all',[BackupBoot|[BackupConf|[]]],_2) call 'erlang':'throw' ({'error',{Master,R,'copy_start_config'}})
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<{'error',{Master,R}}> when 'true' -> do apply 'remove_files'/3 (Master,[BackupBoot|[BackupConf|[]]],_2) call 'erlang':'throw' ({'error',{Master,R,'backup_start_config'}})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
'write_ini_file'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'++' ([101|[114|[116|[115|[45]]]]],_1) in let <BinDir> = call 'filename':'join' ([_0|[_3|[[98|[105|[110]]]]]]) in let <_5> = call 'filename':'nativename' (BinDir) in let <_6> = call 'filename':'nativename' (_0) in let <Str0> = call 'io_lib':'format' ([91|[101|[114|[108|[97|[110|[103|[93|[126|[110|[66|[105|[110|[100|[105|[114|[61|[126|[116|[115|[126|[110|[80|[114|[111|[103|[110|[97|[109|[101|[61|[101|[114|[108|[126|[110|[82|[111|[111|[116|[100|[105|[114|[61|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_5|[_6|[]]]) in let <Str> = call 're':'replace' (Str0,[92|[92]],[92|[92|[92|[92]]]],[{'return','list'}|['global'|['unicode']]]) in let <IniFile> = call 'filename':'join' (BinDir,[101|[114|[108|[46|[105|[110|[105]]]]]]]) in apply 'do_write_ini_file'/3 (IniFile,Str,_2)
'do_write_ini_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,Data,'false'> when 'true' -> case apply 'do_write_file'/3 (File,Data,[{'encoding','utf8'}]) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<File,Data,Masters> when 'true' -> do apply 'all_masters'/1 (Masters) apply 'safe_write_file_m'/4 (File,Data,[{'encoding','utf8'}],Masters) end
'safe_write_file_m'/3 = fun (_0,_1,_2) -> apply 'safe_write_file_m'/4 (_0,_1,[],_2)
'safe_write_file_m'/4 = fun (_0,_1,_2,_3) -> let <Backup> = call 'erlang':'++' (_0,[46|[98|[97|[99|[107|[117|[112]]]]]]]) in let <Change> = call 'erlang':'++' (_0,[46|[99|[104|[97|[110|[103|[101]]]]]]]) in case apply 'at_all_masters'/4 (_3,'release_handler','do_copy_files',[_0|[[Backup|[]]|[]]]) of <'ok'> when 'true' -> case apply 'at_all_masters'/4 (_3,'release_handler','do_write_file',[Change|[_1|[_2|[]]]]) of <'ok'> when 'true' -> case apply 'at_all_masters'/4 (_3,'file','rename',[Change|[_0|[]]]) of <'ok'> when 'true' -> do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_3) 'ok'
<{'error',{Master,R}}> when 'true' -> do apply 'takewhile'/5 (Master,_3,'file','rename',[Backup|[_0|[]]]) do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_3) let <_7> = call 'filename':'basename' (Change) in let <_6> = call 'filename':'basename' (_0) in call 'erlang':'throw' ({'error',{Master,R,'rename',_7,_6}})
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
<{'error',{Master,R}}> when 'true' -> do apply 'remove_files'/3 ('all',[Backup|[Change|[]]],_3) let <_9> = call 'filename':'basename' (Change) in call 'erlang':'throw' ({'error',{Master,R,'write',_9}})
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<{'error',{Master,R}}> when 'true' -> do apply 'remove_files'/3 (Master,[Backup|[]],_3) let <_12> = call 'filename':'basename' (_0) in let <_11> = call 'filename':'basename' (Backup) in call 'erlang':'throw' ({'error',{Master,R,'backup',_12,_11}})
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
'get_new_libs'/2 = fun (_0,_1) -> case <_0,_1> of <[{App,Vsn,_X_LibDir}|CurrentLibs],NewLibs> when 'true' -> case call 'lists':'keyfind' (App,1,NewLibs) of <LibInfo = {_6,NewVsn,_7}> when let <_8> = call 'erlang':'=:=' (_6,App) in let <_9> = call 'erlang':'=/=' (NewVsn,Vsn) in call 'erlang':'and' (_8,_9) -> let <_2> = apply 'get_new_libs'/2 (CurrentLibs,NewLibs) in [LibInfo|_2]
<_10> when 'true' -> apply 'get_new_libs'/2 (CurrentLibs,NewLibs) end
<[],_11> when 'true' -> []
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'get_new_libs',2}}] )-|['compiler_generated'] ) end
'get_releases_with_status'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_6,Acc> when 'true' -> Acc
<[Head = {_7,_8,_9,ReleaseStatus}|Tail],Status,Acc> when call 'erlang':'==' (ReleaseStatus,Status) -> apply 'get_releases_with_status'/3 (Tail,Status,[Head|Acc])
<[_10|Tail],Status,Acc> when 'true' -> apply 'get_releases_with_status'/3 (Tail,Status,Acc)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'get_releases_with_status',3}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('release_handler')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('release_handler',_0) end