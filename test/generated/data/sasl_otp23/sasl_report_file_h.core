module 'sasl_report_file_h' ['handle_call'/2,'handle_event'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[115|[97|[115|[108|[95|[114|[101|[112|[111|[114|[116|[95|[102|[105|[108|[101|[95|[104|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]],1}] ] 'init'/1 = (fun (_0) -> (case (_0-|[{'function',{'init',1}}] ) of <{File,Modes0,Type}> when call 'erlang':'is_list' (Modes0) -> do call 'erlang':'process_flag' ('trap_exit','true') let <_2> = case call 'lists':'keymember' ('encoding',1,Modes0) of <'true'> when 'true' -> Modes0
<'false'> when 'true' -> [{'encoding','utf8'}|Modes0]
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end in let <_10> = letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[M|_5]> when 'true' -> (case call 'lists':'member' (M,['write'|['append'|['exclusive']]]) of <'true'> when 'true' -> let <_8> = apply 'lc$^0'/1 (_5) in ([M|_8]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['list_comprehension'] )
<[]> when 'true' -> []
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_2) in let <_12> = case _10 of <[]> when 'true' -> ['write'|_2]
<_16> when 'true' -> _2 end in case call 'file':'open' (File,_12) of <{'ok',Fd}> when 'true' -> {'ok',{Fd,File,Type}}
<What> when 'true' -> What end
(<_15> when 'true' -> primop 'match_fail' ({'function_clause',_15})-|['compiler_generated'] ) end-|[{'function',{'init',1}}] )-|[{'function',{'init',1}}] )
'handle_event'/2 = (fun (_0,_1) -> (case <_0,_1> of <{_X_Type,GL,_X_Msg},State> when try let <_3> = call 'erlang':'node' (GL) in let <_2> = call 'erlang':'node' () in call 'erlang':'/=' (_3,_2) of <Try> -> Try catch <T,R> -> 'false' -> {'ok',State}
<Event,_@r0 = {Fd,File,Type}> when 'true' -> let <_4> = apply 'tag_event'/1 (Event) in do (call ('sasl_report'-|['result_not_wanted'] ):('write_report'-|['result_not_wanted'] ) (Fd,Type,_4)-|['result_not_wanted'] ) {'ok',_@r0}
<_8,State> when 'true' -> {'ok',State} end-|[{'function',{'handle_event',2}}] )-|[{'function',{'handle_event',2}}] )
'handle_info'/2 = (fun (_0,_1) -> (case <_0,_1> of <{'EXIT',Fd,_X_Reason},{_4,_X_File,_X_Type}> when call 'erlang':'=:=' (_4,Fd) -> 'remove_handler'
<_5,State> when 'true' -> {'ok',State} end-|[{'function',{'handle_info',2}}] )-|[{'function',{'handle_info',2}}] )
'handle_call'/2 = (fun (_0,_1) -> {'error','bad_query'}-|[{'function',{'handle_call',2}}] )
'terminate'/2 = (fun (_0,_1) -> (case <_0,_1> of <_5,{Fd,_X_File,_X_Type}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) []
(<_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_4,_3})-|['compiler_generated'] ) end-|[{'function',{'terminate',2}}] )-|[{'function',{'terminate',2}}] )
'tag_event'/1 = (fun (_0) -> let <_1> = call 'calendar':'local_time' () in {_1,(_0-|[{'function',{'tag_event',1}}] )}-|[{'function',{'tag_event',1}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('sasl_report_file_h')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('sasl_report_file_h',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end