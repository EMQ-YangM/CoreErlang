module 'release_handler_1' ['check_old_processes'/2,'check_script'/2,'eval_script'/1,'eval_script'/5,'get_current_vsn'/1,'get_supervised_procs'/0,'module_info'/0,'module_info'/1] attributes [ 'file' = [{[115|[114|[99|[47|[114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[95|[49|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'eval_state',[{'record_field',27,{'atom',27,'bins'},{'nil',27}}|[{'record_field',27,{'atom',27,'stopped'},{'nil',27}}|[{'record_field',27,{'atom',27,'suspended'},{'nil',27}}|[{'record_field',27,{'atom',27,'apps'},{'nil',27}}|[{'record_field',28,{'atom',28,'libdirs'}}|[{'record_field',28,{'atom',28,'unpurged'},{'nil',28}}|[{'record_field',28,{'atom',28,'vsns'},{'nil',28}}|[{'record_field',28,{'atom',28,'newlibs'},{'nil',28}}|[{'record_field',29,{'atom',29,'opts'},{'nil',29}}]]]]]]]]]}] ] 'check_script'/2 = (fun (_0,_1) -> (case <_0,_1> of <['restart_new_emulator'|Script],LibDirs> when 'true' -> apply 'do_check_script'/3 (Script,LibDirs,[])
<Script,LibDirs> when 'true' -> let <_2> = catch apply 'check_old_processes'/2 (Script,'soft_purge') in case _2 of <{'ok',PurgeMods}> when 'true' -> apply 'do_check_script'/3 (Script,LibDirs,PurgeMods)
<{'error',Mod}> when 'true' -> {'error',{'old_processes',Mod}}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end end-|[{'function',{'check_script',2}}] )-|[{'function',{'check_script',2}}] )
'do_check_script'/3 = (fun (_0,_1,_2) -> case apply 'split_instructions'/1 (_0) of <{Before,After}> when 'true' -> let <_9> = catch let <_8> = fun (_5,_4) -> apply 'eval'/2 (_5,_4) in call 'lists':'foldl' (_8,{'eval_state',[],[],[],[],_1,[],[],[],[]},Before) in case _9 of <EvalState2 = {'eval_state',_16,_17,_18,_19,_20,_21,_22,_23,_24}> when ('true'-|['compiler_generated'] ) -> let <_10> = catch apply 'syntax_check_script'/1 (After) in case _10 of <'ok'> when 'true' -> {'ok',_2}
<Other> when 'true' -> {'error',Other} end
<_@r0 = {'error',Error}> when 'true' -> _@r0
<Other> when 'true' -> {'error',Other} end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end-|[{'function',{'do_check_script',3}}] )
'eval_script'/1 = (fun (_0) -> apply 'eval_script'/5 ((_0-|[{'function',{'eval_script',1}}] ),[],[],[],[])-|[{'function',{'eval_script',1}}] )
'eval_script'/5 = (fun (_0,_1,_2,_3,_4) -> let <_5> = catch apply 'check_old_processes'/2 (_0,'soft_purge') in case _5 of <{'ok',_31}> when 'true' -> case apply 'split_instructions'/1 (_0) of <{Before,After}> when 'true' -> let <_12> = catch let <_11> = fun (_8,_7) -> apply 'eval'/2 (_8,_7) in call 'lists':'foldl' (_11,{'eval_state',[],[],[],_1,_2,[],[],_3,_4},Before) in case _12 of <EvalState2 = {'eval_state',_32,_33,_34,_35,_36,_37,_38,_39,_40}> when ('true'-|['compiler_generated'] ) -> let <_13> = catch apply 'syntax_check_script'/1 (After) in case _13 of <'ok'> when 'true' -> let <_19> = catch let <_18> = fun (_15,_14) -> apply 'eval'/2 (_15,_14) in call 'lists':'foldl' (_18,EvalState2,After) in case _19 of <EvalState4 = {'eval_state',_41,_42,_43,_44,_45,_46,_47,_48,_49}> when ('true'-|['compiler_generated'] ) -> (case EvalState4 of (<({'eval_state',_50,_51,_52,_53,_54,_rec0,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> {'ok',_rec0}-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'restart_emulator'> when 'true' -> 'restart_emulator'
<Error> when 'true' -> {'EXIT',Error} end
<Other> when 'true' -> {'error',Other} end
<_@r0 = {'error',Error}> when 'true' -> _@r0
<Other> when 'true' -> {'error',Other} end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'error',Mod}> when 'true' -> {'error',{'old_processes',Mod}}
(<_25> when 'true' -> primop 'match_fail' ({'case_clause',_25})-|['compiler_generated'] ) end-|[{'function',{'eval_script',5}}] )
'split_instructions'/1 = (fun (_0) -> apply 'split_instructions'/2 ((_0-|[{'function',{'split_instructions',1}}] ),[])-|[{'function',{'split_instructions',1}}] )
'split_instructions'/2 = (fun (_0,_1) -> (case <_0,_1> of <_@r0 = ['point_of_no_return'|T],Before> when 'true' -> let <_2> = call 'lists':'reverse' (Before) in {_2,_@r0}
<[H|T],Before> when 'true' -> apply 'split_instructions'/2 (T,[H|Before])
<[],Before> when 'true' -> let <_3> = call 'lists':'reverse' (Before) in {[],_3}
(<_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4})-|['compiler_generated'] ) end-|[{'function',{'split_instructions',2}}] )-|[{'function',{'split_instructions',2}}] )
'check_old_processes'/2 = (fun (_0,_1) -> let <Procs> = call 'erlang':'processes' () in let <_5> = fun (_3) -> case _3 of <{'load',{Mod,PPM,_X_PostPurgeMethod}}> when call 'erlang':'==' (PPM,_1) -> apply 'check_old_code'/3 (Mod,Procs,_1)
<{'remove',{Mod,PPM,_X_PostPurgeMethod}}> when call 'erlang':'==' (PPM,_1) -> apply 'check_old_code'/3 (Mod,Procs,_1)
<_9> when 'true' -> [] end in let <_6> = call 'lists':'flatmap' (_5,_0) in {'ok',_6}-|[{'function',{'check_old_processes',2}}] )
'check_old_code'/3 = (fun (_0,_1,_2) -> case call 'erlang':'check_old_code' (_0) of <'true'> when call 'erlang':'==' (_2,'soft_purge') -> apply 'do_check_old_code'/2 (_0,_1)
<'true'> when call 'erlang':'==' (_2,'brutal_purge') -> let <_3> = catch apply 'do_check_old_code'/2 (_0,_1) in case _3 of <{'error',_9}> when call 'erlang':'=:=' (_9,_0) -> []
<R> when 'true' -> R end
<'false'> when 'true' -> []
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|[{'function',{'check_old_code',3}}] )
'do_check_old_code'/2 = (fun (_0,_1) -> let <_5> = fun (_3) -> case call 'erlang':'check_process_code' (_3,_0) of <'false'> when 'true' -> 'ok'
<'true'> when 'true' -> call 'erlang':'throw' ({'error',_0})
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_5,_1) [_0|[]]-|[{'function',{'do_check_old_code',2}}] )
'syntax_check_script'/1 = (fun (_0) -> (case (_0-|[{'function',{'syntax_check_script',1}}] ) of <['point_of_no_return'|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'load',{_2,_3,_4}}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'remove',{_5,_6,_7}}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'purge',_8}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'suspend',_9}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'resume',_10}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'code_change',_11}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'code_change',_12,_13}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'stop',_14}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'start',_15}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'sync_nodes',_16,{_17,_18,_19}}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'sync_nodes',_20,_21}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[{'apply',{_22,_23,_24}}|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<['restart_emulator'|Script]> when 'true' -> apply 'syntax_check_script'/1 (Script)
<[Illegal|_X_Script]> when 'true' -> call 'erlang':'throw' ({'illegal_instruction_after_point_of_no_return',Illegal})
<[]> when 'true' -> 'ok'
(<_1> when 'true' -> primop 'match_fail' ({'function_clause',_1})-|['compiler_generated'] ) end-|[{'function',{'syntax_check_script',1}}] )-|[{'function',{'syntax_check_script',1}}] )
'eval'/2 = (fun (_0,_1) -> (case <_0,_1> of <{'load_object_code',{Lib,LibVsn,Modules}},EvalState> when 'true' -> (case EvalState of (<({'eval_state',_127,_128,_129,_130,_rec1,_131,_132,_133,_134}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keysearch' (Lib,1,_rec1) of <{'value',LibInfo = {_136,_137,LibDir}}> when let <_138> = call 'erlang':'=:=' (_136,Lib) in let <_139> = call 'erlang':'=:=' (_137,LibVsn) in call 'erlang':'and' (_138,_139) -> let <Ext> = call 'code':'objfile_extension' () in let <_17> = fun (_14,_13) -> case <_14,_13> of <Mod,{Bins,Vsns}> when 'true' -> let <File> = call 'lists':'concat' ([Mod|[Ext|[]]]) in let <FName> = call 'filename':'join' ([LibDir|[[101|[98|[105|[110]]]]|[File|[]]]]) in case call 'erl_prim_loader':'get_file' (FName) of <{'ok',Bin,FName2}> when 'true' -> let <NVsns> = apply 'add_vsns'/3 (Mod,Bin,Vsns) in {[{Mod,Bin,FName2}|Bins],NVsns}
<'error'> when 'true' -> call 'erlang':'throw' ({'error',{'no_such_file',FName}})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_16,_15> when 'true' -> primop 'match_fail' ({'function_clause',_16,_15})-|['compiler_generated'] ) end in (case EvalState of (<({'eval_state',_rec2,_140,_141,_142,_143,_144,_145,_146,_147}-|['compiler_generated'] )> when 'true' -> (case EvalState of (<({'eval_state',_149,_150,_151,_152,_153,_154,_rec3,_155,_156}-|['compiler_generated'] )> when 'true' -> case call 'lists':'foldl' (_17,{_rec2,_rec3},Modules) of <{NewBins,NewVsns}> when 'true' -> (case EvalState of (<({'eval_state',_158,_159,_160,_161,_162,_163,_164,_rec4,_165}-|['compiler_generated'] )> when 'true' -> let <NewLibs> = call 'lists':'keystore' (Lib,1,_rec4,LibInfo) in case EvalState of <{'eval_state',_167,_168,_169,_170,_171,_172,_173,_174,_175}> when 'true' -> let <_23> = call 'erlang':'setelement' (9,EvalState,NewLibs) in let <_24> = call 'erlang':'setelement' (8,_23,NewVsns) in call 'erlang':'setelement' (2,_24,NewBins)
(<_176> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_166> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_157> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_148> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'value',{_177,LibVsn2,_X_LibDir}}> when call 'erlang':'=:=' (_177,Lib) -> call 'erlang':'throw' ({'error',{'bad_lib_vsn',Lib,LibVsn2}})
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_135> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'point_of_no_return',EvalState> when 'true' -> let <_30> = case apply 'get_opt'/3 ('update_paths',EvalState,'false') of <'false'> when 'true' -> (case EvalState of (<({'eval_state',_178,_179,_180,_181,_182,_183,_184,_rec6,_185}-|['compiler_generated'] )> when 'true' -> _rec6-|['compiler_generated'] )
(<_186> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'true'> when 'true' -> (case EvalState of (<({'eval_state',_187,_188,_189,_190,_rec7,_191,_192,_193,_194}-|['compiler_generated'] )> when 'true' -> _rec7-|['compiler_generated'] )
(<_195> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end in let <_35> = fun (_33) -> case _33 of <{Lib,_X_LibVsn,LibDir}> when 'true' -> let <Ebin> = call 'filename':'join' (LibDir,[101|[98|[105|[110]]]]) in call 'code':'replace_path' (Lib,Ebin)
(<_34> when 'true' -> primop 'match_fail' ({'function_clause',_34})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_35,_30) EvalState
<{'load',{Mod,_X_PrePurgeMethod,PostPurgeMethod}},EvalState> when 'true' -> (case EvalState of (<({'eval_state',_rec8,_196,_197,_198,_199,_200,_201,_202,_203}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keysearch' (Mod,1,_rec8) of <{'value',{_X_Mod,Bin,File}}> when 'true' -> case call 'code':'load_binary' (Mod,File,Bin) of <{'module',_205}> when 'true' -> (case EvalState of (<({'eval_state',_206,_207,_208,_209,_210,_rec9,_211,_212,_213}-|['compiler_generated'] )> when 'true' -> let <Unpurged> = apply 'do_soft_purge'/3 (Mod,PostPurgeMethod,_rec9) in let <_rec10> = call 'lists':'keydelete' (Mod,1,_rec8) in case EvalState of <{'eval_state',_215,_216,_217,_218,_219,_220,_221,_222,_223}> when 'true' -> let <_46> = call 'erlang':'setelement' (7,EvalState,Unpurged) in call 'erlang':'setelement' (2,_46,_rec10)
(<_224> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_214> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_40> when 'true' -> primop 'match_fail' ({'badmatch',_40})-|['compiler_generated'] ) end
(<_39> when 'true' -> primop 'match_fail' ({'badmatch',_39})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_204> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'remove',{Mod,_X_PrePurgeMethod,PostPurgeMethod}},EvalState> when 'true' -> do call 'code':'purge' (Mod) do call 'code':'delete' (Mod) (case EvalState of (<({'eval_state',_225,_226,_227,_228,_229,_rec12,_230,_231,_232}-|['compiler_generated'] )> when 'true' -> let <Unpurged> = apply 'do_soft_purge'/3 (Mod,PostPurgeMethod,_rec12) in case EvalState of <{'eval_state',_234,_235,_236,_237,_238,_239,_240,_241,_242}> when 'true' -> call 'erlang':'setelement' (7,EvalState,Unpurged)
(<_243> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_233> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'purge',Modules},EvalState> when 'true' -> let <_55> = fun (_53) -> call 'code':'purge' (_53) in do call 'lists':'foreach' (_55,Modules) EvalState
<{'suspend',Modules},EvalState> when 'true' -> let <Procs> = apply 'get_supervised_procs'/0 () in let <_68> = fun (_65,_64) -> let <_350,_351> = case _65 of <{Mod,ModTimeout}> when 'true' -> <Mod,ModTimeout>
<Mod> when 'true' -> <Mod,'default'> end in let <Timeout> = apply 'get_opt'/3 ('suspend_timeout',EvalState,(_351-|['compiler_generated'] )) in let <Pids> = apply 'suspend'/3 ((_350-|['compiler_generated'] ),Procs,Timeout) in [{(_350-|['compiler_generated'] ),Pids}|_64] in (case EvalState of (<({'eval_state',_244,_245,_rec14,_246,_247,_248,_249,_250,_251}-|['compiler_generated'] )> when 'true' -> let <NewSuspended> = call 'lists':'foldl' (_68,_rec14,Modules) in case EvalState of <{'eval_state',_253,_254,_255,_256,_257,_258,_259,_260,_261}> when 'true' -> call 'erlang':'setelement' (4,EvalState,NewSuspended)
(<_262> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_252> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'resume',Modules},EvalState> when 'true' -> let <_81> = fun (_78,_77) -> let <_76> = fun (_74) -> case _74 of <{Mod2,Pids}> when call 'erlang':'==' (Mod2,_78) -> do apply 'resume'/1 (Pids) 'false'
<_263> when 'true' -> 'true' end in call 'lists':'filter' (_76,_77) in (case EvalState of (<({'eval_state',_264,_265,_rec16,_266,_267,_268,_269,_270,_271}-|['compiler_generated'] )> when 'true' -> let <NewSuspended> = call 'lists':'foldl' (_81,_rec16,Modules) in case EvalState of <{'eval_state',_273,_274,_275,_276,_277,_278,_279,_280,_281}> when 'true' -> call 'erlang':'setelement' (4,EvalState,NewSuspended)
(<_282> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_272> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'code_change',Modules},EvalState> when 'true' -> apply 'eval'/2 ({'code_change','up',Modules},EvalState)
<{'code_change',Mode,Modules},EvalState> when 'true' -> (case EvalState of (<({'eval_state',_283,_284,_rec18,_285,_286,_287,_288,_289,_290}-|['compiler_generated'] )> when 'true' -> (case EvalState of (<({'eval_state',_292,_293,_294,_295,_296,_297,_rec19,_298,_299}-|['compiler_generated'] )> when 'true' -> let <Timeout> = apply 'get_opt'/3 ('code_change_timeout',EvalState,'default') in let <_98> = fun (_96) -> case _96 of <{Mod,Extra}> when 'true' -> let <_93> = case call 'lists':'keysearch' (Mod,1,_rec19) of <{'value',{_301,OldVsn,_X_NewVsn}}> when let <_302> = call 'erlang':'=:=' (_301,Mod) in let <_303> = call 'erlang':'==' (Mode,'up') in call 'erlang':'and' (_302,_303) -> OldVsn
<{'value',{_304,_X_OldVsn,NewVsn}}> when let <_305> = call 'erlang':'=:=' (_304,Mod) in let <_306> = call 'erlang':'==' (Mode,'down') in call 'erlang':'and' (_305,_306) -> {'down',NewVsn}
<_307> when call 'erlang':'==' (Mode,'up') -> 'undefined'
<_308> when 'true' -> {'down','undefined'} end in case call 'lists':'keysearch' (Mod,1,_rec18) of <{'value',{_X_Mod,Pids}}> when 'true' -> apply 'change_code'/5 (Pids,Mod,_93,Extra,Timeout)
<_309> when 'true' -> 'ok' end
(<_97> when 'true' -> primop 'match_fail' ({'function_clause',_97})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_98,Modules) EvalState-|['compiler_generated'] )
(<_300> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_291> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'stop',Modules},EvalState> when 'true' -> let <Procs> = apply 'get_supervised_procs'/0 () in let <_107> = fun (_104,_103) -> let <Procs2> = apply 'stop'/2 (_104,Procs) in [{_104,Procs2}|_103] in (case EvalState of (<({'eval_state',_310,_rec20,_311,_312,_313,_314,_315,_316,_317}-|['compiler_generated'] )> when 'true' -> let <NewStopped> = call 'lists':'foldl' (_107,_rec20,Modules) in case EvalState of <{'eval_state',_319,_320,_321,_322,_323,_324,_325,_326,_327}> when 'true' -> call 'erlang':'setelement' (3,EvalState,NewStopped)
(<_328> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_318> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'start',Modules},EvalState> when 'true' -> let <_120> = fun (_117,_116) -> let <_115> = fun (_113) -> case _113 of <{Mod2,Procs}> when call 'erlang':'==' (Mod2,_117) -> do apply 'start'/1 (Procs) 'false'
<_329> when 'true' -> 'true' end in call 'lists':'filter' (_115,_116) in (case EvalState of (<({'eval_state',_330,_rec22,_331,_332,_333,_334,_335,_336,_337}-|['compiler_generated'] )> when 'true' -> let <NewStopped> = call 'lists':'foldl' (_120,_rec22,Modules) in case EvalState of <{'eval_state',_339,_340,_341,_342,_343,_344,_345,_346,_347}> when 'true' -> call 'erlang':'setelement' (3,EvalState,NewStopped)
(<_348> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_338> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'sync_nodes',Id,{M,F,A}},EvalState> when 'true' -> let <_124> = call 'erlang':'apply' (M,F,A) in do apply 'sync_nodes'/2 (Id,_124) EvalState
<{'sync_nodes',Id,Nodes},EvalState> when 'true' -> do apply 'sync_nodes'/2 (Id,Nodes) EvalState
<{'apply',{M,F,A}},EvalState> when 'true' -> do call 'erlang':'apply' (M,F,A) EvalState
<'restart_emulator',_X_EvalState> when 'true' -> call 'erlang':'throw' ('restart_emulator')
<'restart_new_emulator',_X_EvalState> when 'true' -> call 'erlang':'throw' ('restart_new_emulator')
(<_126,_125> when 'true' -> primop 'match_fail' ({'function_clause',_126,_125})-|['compiler_generated'] ) end-|[{'function',{'eval',2}}] )-|[{'function',{'eval',2}}] )
'get_opt'/3 = (fun (_0,_1,_2) -> (case _1 of (<({'eval_state',_9,_10,_11,_12,_13,_14,_15,_16,_rec24}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keysearch' (_0,1,_rec24) of <{'value',{_X_Tag,Value}}> when 'true' -> Value
<'false'> when 'true' -> _2
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','eval_state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|[{'function',{'get_opt',3}}] )
'suspend'/3 = (fun (_0,_1,_2) -> let <_8> = fun (_6) -> case _6 of <{_X_Sup,_X_Name,Pid,Mods}> when 'true' -> case call 'lists':'member' (_0,Mods) of <'true'> when 'true' -> let <_3> = catch apply 'sys_suspend'/2 (Pid,_2) in case _3 of <'ok'> when 'true' -> {'true',Pid}
<_12> when 'true' -> do try call 'sys':'resume' (Pid) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'false' end
<'false'> when 'true' -> 'false'
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'function_clause',_7})-|['compiler_generated'] ) end in call 'lists':'zf' (_8,_1)-|[{'function',{'suspend',3}}] )
'sys_suspend'/2 = (fun (_0,_1) -> (case <_0,_1> of <Pid,'default'> when 'true' -> call 'sys':'suspend' (Pid)
<Pid,Timeout> when 'true' -> call 'sys':'suspend' (Pid,Timeout) end-|[{'function',{'sys_suspend',2}}] )-|[{'function',{'sys_suspend',2}}] )
'resume'/1 = (fun (_0) -> let <_3> = fun (_1) -> catch call 'sys':'resume' (_1) in call 'lists':'foreach' (_3,(_0-|[{'function',{'resume',1}}] ))-|[{'function',{'resume',1}}] )
'change_code'/5 = (fun (_0,_1,_2,_3,_4) -> let <Fun> = fun (_6) -> case apply 'sys_change_code'/5 (_6,_1,_2,_3,_4) of <'ok'> when 'true' -> 'ok'
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'code_change_failed',_6,_1,_2,Reason})
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in call 'lists':'foreach' (Fun,_0)-|[{'function',{'change_code',5}}] )
'sys_change_code'/5 = (fun (_0,_1,_2,_3,_4) -> (case <_0,_1,_2,_3,_4> of <Pid,Mod,Vsn,Extra,'default'> when 'true' -> call 'sys':'change_code' (Pid,Mod,Vsn,Extra)
<Pid,Mod,Vsn,Extra,Timeout> when 'true' -> call 'sys':'change_code' (Pid,Mod,Vsn,Extra,Timeout) end-|[{'function',{'sys_change_code',5}}] )-|[{'function',{'sys_change_code',5}}] )
'stop'/2 = (fun (_0,_1) -> let <_7> = fun (_5) -> case _5 of <{'undefined',_X_Name,_X_Pid,_X_Mods}> when 'true' -> 'false'
<{Sup,Name,_X_Pid,Mods}> when 'true' -> case call 'lists':'member' (_0,Mods) of <'true'> when 'true' -> let <_2> = catch call 'supervisor':'terminate_child' (Sup,Name) in case _2 of <'ok'> when 'true' -> {'true',{Sup,Name}}
<_10> when 'true' -> 'false' end
<'false'> when 'true' -> 'false'
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'function_clause',_6})-|['compiler_generated'] ) end in call 'lists':'zf' (_7,_1)-|[{'function',{'stop',2}}] )
'start'/1 = (fun (_0) -> let <_3> = fun (_1) -> case _1 of <{Sup,Name}> when 'true' -> catch call 'supervisor':'restart_child' (Sup,Name)
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end in call 'lists':'foreach' (_3,(_0-|[{'function',{'start',1}}] ))-|[{'function',{'start',1}}] )
'get_supervised_procs'/0 = (fun () -> let <_6> = fun (_3,_2) -> let <_1> = call 'application_controller':'get_master' (_3) in apply 'get_master_procs'/3 (_3,_2,_1) in let <_0> = apply 'get_application_names'/0 () in call 'lists':'foldl' (_6,[],_0)-|[{'function',{'get_supervised_procs',0}}] )
'get_supervised_procs'/4 = (fun (_0,_1,_2,_3) -> (case <_0,_1,_2,_3> of <_12,Root,Procs,{'ok',SupMod}> when 'true' -> let <_4> = apply 'maybe_supervisor_which_children'/3 (Root,SupMod,Root) in let <_5> = apply 'get_procs'/2 (_4,Root) in call 'erlang':'++' (_5,[{'undefined','undefined',Root,[SupMod|[]]}|Procs])
<Application,Root,Procs,{'error',_13}> when 'true' -> do call 'error_logger':'error_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[99|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[116|[111|[112|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[102|[111|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Application|[]]) let <_6> = apply 'maybe_supervisor_which_children'/3 (Root,Application,Root) in let <_7> = apply 'get_procs'/2 (_6,Root) in call 'erlang':'++' (_7,Procs)
(<_11,_10,_9,_8> when 'true' -> primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|['compiler_generated'] ) end-|[{'function',{'get_supervised_procs',4}}] )-|[{'function',{'get_supervised_procs',4}}] )
'get_application_names'/0 = (fun () -> let <_3> = fun (_1) -> case _1 of <{Application,_X_Name,_X_Vsn}> when 'true' -> Application
(<_2> when 'true' -> primop 'match_fail' ({'function_clause',_2})-|['compiler_generated'] ) end in let <_0> = call 'application':'which_applications' () in call 'lists':'map' (_3,_0)-|[{'function',{'get_application_names',0}}] )
'get_master_procs'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Application,Procs,Pid> when call 'erlang':'is_pid' (Pid) -> case call 'application_master':'get_child' (Pid) of <{Root,_X_AppMod}> when 'true' -> let <_4> = apply 'get_supervisor_module'/1 (Root) in apply 'get_supervised_procs'/4 (Application,Root,Procs,_4)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<_8,Procs,_9> when 'true' -> Procs end-|[{'function',{'get_master_procs',3}}] )-|[{'function',{'get_master_procs',3}}] )
'get_procs'/2 = (fun (_0,_1) -> (case <_0,_1> of <[{Name,Pid,'worker','dynamic'}|T],Sup> when call 'erlang':'is_pid' (Pid) -> let <Mods> = apply 'maybe_get_dynamic_mods'/2 (Name,Pid) in let <_3> = apply 'get_procs'/2 (T,Sup) in [{Sup,Name,Pid,Mods}|_3]
<[{Name,Pid,'worker',Mods}|T],Sup> when let <_4> = call 'erlang':'is_pid' (Pid) in let <_5> = call 'erlang':'is_list' (Mods) in call 'erlang':'and' (_4,_5) -> let <_6> = apply 'get_procs'/2 (T,Sup) in [{Sup,Name,Pid,Mods}|_6]
<[{Name,Pid,'supervisor',Mods}|T],Sup> when call 'erlang':'is_pid' (Pid) -> let <_9> = apply 'get_procs'/2 (T,Sup) in let <_7> = apply 'maybe_supervisor_which_children'/3 (Pid,Name,Pid) in let <_8> = apply 'get_procs'/2 (_7,Pid) in [{Sup,Name,Pid,Mods}|call 'erlang':'++' (_9,_8)]
<[_X_H|T],Sup> when 'true' -> apply 'get_procs'/2 (T,Sup)
<_12,_X_Sup> when 'true' -> [] end-|[{'function',{'get_procs',2}}] )-|[{'function',{'get_procs',2}}] )
'maybe_supervisor_which_children'/3 = (fun (_0,_1,_2) -> case apply 'get_proc_state'/1 (_0) of <'noproc'> when 'true' -> do call 'error_logger':'warning_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[97|[32|[112|[114|[111|[99|[101|[115|[115|[32|[40|[126|[112|[41|[32|[101|[120|[105|[116|[101|[100|[32|[100|[117|[114|[105|[110|[103|[32|[115|[117|[112|[101|[114|[118|[105|[115|[105|[111|[110|[32|[116|[114|[101|[101|[32|[105|[110|[116|[101|[114|[114|[111|[103|[97|[116|[105|[111|[110|[46|[32|[67|[111|[110|[116|[105|[110|[117|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[]]) []
<'suspended'> when 'true' -> do call 'error_logger':'error_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[97|[32|[119|[104|[105|[99|[104|[95|[99|[104|[105|[108|[100|[114|[101|[110|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[32|[119|[97|[115|[32|[97|[118|[111|[105|[100|[101|[100|[46|[32|[84|[104|[105|[115|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[105|[115|[32|[115|[117|[115|[112|[101|[110|[100|[101|[100|[32|[97|[110|[100|[32|[115|[104|[111|[117|[108|[100|[32|[108|[105|[107|[101|[108|[121|[32|[98|[101|[32|[117|[112|[103|[114|[97|[100|[101|[100|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[108|[121|[46|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[_2|[]]]) call 'erlang':'error' ('suspended_supervisor')
<'running'> when 'true' -> let <_3> = catch call 'supervisor':'which_children' (_2) in case _3 of <Res> when call 'erlang':'is_list' (_3) -> Res
<Other> when 'true' -> do call 'error_logger':'error_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[126|[112|[126|[110|[101|[114|[114|[111|[114|[32|[100|[117|[114|[105|[110|[103|[32|[97|[32|[119|[104|[105|[99|[104|[95|[99|[104|[105|[108|[100|[114|[101|[110|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[46|[32|[91|[83|[116|[97|[116|[101|[58|[32|[114|[117|[110|[110|[105|[110|[103|[93|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Other|[_1|[_2|[]]]]) call 'erlang':'error' ('which_children_failed') end
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|[{'function',{'maybe_supervisor_which_children',3}}] )
'get_proc_state'/1 = (fun (_0) -> try call 'sys':'get_status' ((_0-|[{'function',{'get_proc_state',1}}] )) of <_1> -> case _1 of <{'status',_9,{'module',_10},[_11|[State|[_12|[_13|[_14|[]]]]]]}> when let <_2> = call 'erlang':'==' (State,'running') in let <_3> = call 'erlang':'==' (State,'suspended') in call 'erlang':'or' (_2,_3) -> State
(<_4> when 'true' -> primop 'match_fail' ({'try_clause',_4})-|['compiler_generated'] ) end catch <_7,_6,_5> -> case <_7,_6,_5> of <('exit'-|['compiler_generated'] ),({('noproc'-|['compiler_generated'] ),({('sys'-|['compiler_generated'] ),('get_status'-|['compiler_generated'] ),([_15|([]-|['compiler_generated'] )]-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] ),_16> when call 'erlang':'=:=' (_15,(_0-|[{'function',{'get_proc_state',1}}] )) -> 'noproc'
(<_17,_18,_19> when 'true' -> primop 'raise' (_19,_18)-|['compiler_generated'] ) end-|[{'function',{'get_proc_state',1}}] )
'maybe_get_dynamic_mods'/2 = (fun (_0,_1) -> let <_3> = catch let <_2> = call 'erlang':'self' () in call 'gen':'call' (_1,_2,'get_modules') in case _3 of <{'ok',Res}> when 'true' -> Res
<Other> when 'true' -> do call 'error_logger':'error_msg' ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[126|[112|[126|[110|[101|[114|[114|[111|[114|[32|[100|[117|[114|[105|[110|[103|[32|[97|[32|[103|[101|[116|[95|[109|[111|[100|[117|[108|[101|[115|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[44|[32|[116|[104|[101|[114|[101|[32|[109|[97|[121|[32|[98|[101|[32|[97|[110|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[105|[116|[39|[115|[32|[99|[104|[105|[108|[100|[115|[112|[101|[99|[46|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Other|[_0|[_1|[]]]]) call 'erlang':'error' ('get_modules_failed') end-|[{'function',{'maybe_get_dynamic_mods',2}}] )
'get_supervisor_module'/1 = (fun (_0) -> let <_1> = catch call 'supervisor':'get_callback_module' ((_0-|[{'function',{'get_supervisor_module',1}}] )) in case _1 of <Module> when call 'erlang':'is_atom' (_1) -> {'ok',Module}
<_X_Other> when 'true' -> do call 'io':'format' ([126|[119|[58|[32|[114|[101|[97|[115|[111|[110|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]],[(_0-|[{'function',{'get_supervisor_module',1}}] )|[_X_Other|[]]]) {'error','undefined'} end-|[{'function',{'get_supervisor_module',1}}] )
'do_soft_purge'/3 = (fun (_0,_1,_2) -> let <IsNoOldProcsLeft> = call 'code':'soft_purge' (_0) in case call 'lists':'keymember' (_0,1,_2) of <'true'> when call 'erlang':'==' (IsNoOldProcsLeft,'true') -> call 'lists':'keydelete' (_0,1,_2)
<'true'> when 'true' -> _2
<'false'> when call 'erlang':'==' (IsNoOldProcsLeft,'true') -> _2
<'false'> when 'true' -> [{_0,_1}|_2]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|[{'function',{'do_soft_purge',3}}] )
'sync_nodes'/2 = (fun (_0,_1) -> let <_2> = call 'erlang':'node' () in let <NNodes> = call 'lists':'delete' (_2,_1) in let <_7> = fun (_5) -> let <_4> = call 'erlang':'node' () in call 'erlang':'!' ({'release_handler',_5},{'sync_nodes',_0,_4}) in do call 'lists':'foreach' (_7,NNodes) let <_10> = fun (_8) -> (letrec 'recv$^2'/0 = fun () -> let <_20,_18> = primop 'recv_peek_message' () in case _20 of <'true'> when 'true' -> case _18 of <{'sync_nodes',_13,_14}> when let <_15> = call 'erlang':'=:=' (_13,_0) in let <_16> = call 'erlang':'=:=' (_14,_8) in call 'erlang':'and' (_15,_16) -> do primop 'remove_message' () 'ok'
<{'nodedown',_17}> when call 'erlang':'=:=' (_17,_8) -> do primop 'remove_message' () call 'erlang':'throw' ({'sync_error',{'nodedown',_8}})
(<Other> when 'true' -> do primop 'recv_next' () (apply 'recv$^2'/0 ()-|['dialyzer_ignore'] )-|['compiler_generated','dialyzer_ignore'] ) end
(<'false'> when 'true' -> let <_19> = primop 'recv_wait_timeout' ('infinity') in case _19 of <'true'> when 'true' -> do primop 'timeout' () 'true'
(<'false'> when 'true' -> (apply 'recv$^2'/0 ()-|['dialyzer_ignore'] )-|['dialyzer_ignore'] ) end-|['dialyzer_ignore'] ) end in (apply 'recv$^2'/0 ()-|['dialyzer_ignore'] )-|['letrec_goto'] ) in call 'lists':'foreach' (_10,NNodes)-|[{'function',{'sync_nodes',2}}] )
'add_vsns'/3 = (fun (_0,_1,_2) -> let <OldVsn> = apply 'get_current_vsn'/1 (_0) in let <NewVsn> = apply 'get_vsn'/1 (_1) in case call 'lists':'keysearch' (_0,1,_2) of <{'value',{_11,OldVsn0,NewVsn0}}> when call 'erlang':'=:=' (_11,_0) -> let <_6> = apply 'replace_undefined'/2 (OldVsn0,OldVsn) in let <_5> = apply 'replace_undefined'/2 (NewVsn0,NewVsn) in call 'lists':'keyreplace' (_0,1,_2,{_0,_6,_5})
<'false'> when 'true' -> [{_0,OldVsn,NewVsn}|_2]
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end-|[{'function',{'add_vsns',3}}] )
'replace_undefined'/2 = (fun (_0,_1) -> (case <_0,_1> of <'undefined',Vsn> when 'true' -> Vsn
<Vsn,_4> when 'true' -> Vsn end-|[{'function',{'replace_undefined',2}}] )-|[{'function',{'replace_undefined',2}}] )
'get_current_vsn'/1 = (fun (_0) -> let <File> = call 'code':'which' ((_0-|[{'function',{'get_current_vsn',1}}] )) in case call 'erl_prim_loader':'get_file' (File) of <{'ok',Bin,_X_File2}> when 'true' -> apply 'get_vsn'/1 (Bin)
<'error'> when 'true' -> 'undefined'
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end-|[{'function',{'get_current_vsn',1}}] )
'get_vsn'/1 = (fun (_0) -> case call 'beam_lib':'version' ((_0-|[{'function',{'get_vsn',1}}] )) of <{'ok',{_X_Mod,Vsn}}> when 'true' -> case call 'misc_supp':'is_string' (Vsn) of <'true'> when 'true' -> Vsn
<'false'> when 'true' -> case Vsn of <[VsnTerm|[]]> when 'true' -> VsnTerm
<_5> when 'true' -> Vsn end
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end-|[{'function',{'get_vsn',1}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('release_handler_1')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('release_handler_1',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end