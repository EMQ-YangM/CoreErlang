module 'format_lib_supp' ['module_info'/0,'module_info'/1,'print_info'/2,'print_info'/3] attributes [ 'file' = [{[115|[114|[99|[47|[102|[111|[114|[109|[97|[116|[95|[108|[105|[98|[95|[115|[117|[112|[112|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]],1}] ] 'print_info'/2 = (fun (_0,_1) -> apply 'print_info'/3 (_0,79,_1)-|[{'function',{'print_info',2}}] )
'print_info'/3 = (fun (_0,_1,_2) -> do apply 'print_header'/3 (_0,_1,_2) apply 'print_format'/3 (_0,_1,_2)-|[{'function',{'print_info',3}}] )
'print_header'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Device,Line,[{'header',Header}|_6]> when 'true' -> apply 'print_header2'/3 (Device,Line,Header)
<Device,Line,_7> when 'true' -> apply 'print_header2'/3 (Device,Line,[]) end-|[{'function',{'print_header',3}}] )-|[{'function',{'print_header',3}}] )
'print_header2'/3 = (fun (_0,_1,_2) -> let <Format1> = call 'lists':'concat' ([[126|[110|[126]]]|[_1|[[46]|[_1|[[115|[126|[110]]]]]]]]) in let <Format2> = call 'lists':'concat' ([[126]|[_1|[[99|[126|[110]]]]]]) in do call 'io':'format' (_0,Format1,[_2|[]]) call 'io':'format' (_0,Format2,[61])-|[{'function',{'print_header2',3}}] )
'print_format'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Device,_X_Line,[]> when 'true' -> call 'io':'format' (Device,'~n',[])
<Device,Line,[{'data',Data}|T]> when 'true' -> do apply 'print_data'/3 (Device,Line,Data) apply 'print_format'/3 (Device,Line,T)
<Device,Line,[{'items',Items}|T]> when 'true' -> do apply 'print_items'/3 (Device,Line,Items) apply 'print_format'/3 (Device,Line,T)
<Device,Line,[{'newline',N}|T]> when 'true' -> do apply 'print_newlines'/2 (Device,N) apply 'print_format'/3 (Device,Line,T)
<Device,Line,[_6|T]> when 'true' -> apply 'print_format'/3 (Device,Line,T)
(<_5,_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4,_3})-|['compiler_generated'] ) end-|[{'function',{'print_format',3}}] )-|[{'function',{'print_format',3}}] )
'print_data'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <_X_Device,_X_Line,[]> when 'true' -> 'ok'
<Device,Line,[{Key,Value}|T]> when 'true' -> do apply 'print_one_line'/4 (Device,Line,Key,Value) apply 'print_data'/3 (Device,Line,T)
<Device,Line,[Value|T]> when 'true' -> let <Modifier> = call 'misc_supp':'modifier' (Device) in let <_4> = call 'erlang':'++' (Modifier,[112|[126|[110]]]) in let <_5> = [126|_4] in do call 'io':'format' (Device,_5,[Value|[]]) apply 'print_data'/3 (Device,Line,T)
<Device,_X_Line,Value> when 'true' -> let <Modifier> = call 'misc_supp':'modifier' (Device) in let <_7> = call 'erlang':'++' (Modifier,[112|[126|[110]]]) in let <_8> = [126|_7] in call 'io':'format' (Device,_8,[Value|[]]) end-|[{'function',{'print_data',3}}] )-|[{'function',{'print_data',3}}] )
'print_items'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <Device,Line,{Name,Items}> when 'true' -> apply 'print_items'/4 (Device,Line,Name,Items)
(<_5,_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_5,_4,_3})-|['compiler_generated'] ) end-|[{'function',{'print_items',3}}] )-|[{'function',{'print_items',3}}] )
'print_newlines'/2 = (fun (_0,_1) -> (case <_0,_1> of <_X_Device,0> when 'true' -> 'ok'
<Device,N> when call 'erlang':'>' (N,0) -> do call 'io':'format' (Device,'~n',[]) let <_2> = call 'erlang':'-' (N,1) in apply 'print_newlines'/2 (Device,_2)
(<_4,_3> when 'true' -> primop 'match_fail' ({'function_clause',_4,_3})-|['compiler_generated'] ) end-|[{'function',{'print_newlines',2}}] )-|[{'function',{'print_newlines',2}}] )
'print_one_line'/4 = (fun (_0,_1,_2,_3) -> let <Modifier> = call 'misc_supp':'modifier' (_0) in let <StrKey> = apply 'term_to_string'/2 (_2,Modifier) in let <_6> = call 'string':'length' (StrKey) in let <KeyLen> = call 'lists':'min' ([_6|[_1|[]]]) in let <ValueLen> = call 'erlang':'-' (_1,KeyLen) in let <Format1> = call 'lists':'concat' ([[126|[45]]|[KeyLen|[Modifier|[[115]]]]]) in let <Format2> = call 'lists':'concat' ([[126]|[ValueLen|[Modifier|[[115|[126|[110]]]]]]]) in do call 'io':'format' (_0,Format1,[StrKey|[]]) let <Try> = apply 'term_to_string'/2 (_3,Modifier) in let <Length> = call 'string':'length' (Try) in case <> of <> when call 'erlang':'<' (Length,ValueLen) -> call 'io':'format' (_0,Format2,[Try|[]])
<> when 'true' -> do call 'io':'format' (_0,[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]],[]) let <Format3> = call 'lists':'concat' ([[126]|[_1|[[46|[57]]|[Modifier|[[112|[126|[110]]]]]]]]) in call 'io':'format' (_0,Format3,[_3|[]]) end-|[{'function',{'print_one_line',4}}] )
'term_to_string'/2 = (fun (_0,_1) -> let <_2> = apply 'get_format'/2 (_0,_1) in call 'io_lib':'format' (_2,[_0|[]])-|[{'function',{'term_to_string',2}}] )
'get_format'/2 = (fun (_0,_1) -> (case <_0,_1> of <[],_7> when 'true' -> [126|[112]]
<Value,Modifier> when 'true' -> case call 'io_lib':'printable_list' (Value) of <'true'> when 'true' -> let <_2> = call 'erlang':'++' (Modifier,[115]) in [126|_2]
<'false'> when 'true' -> let <_3> = call 'erlang':'++' (Modifier,[112]) in [126|_3]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end end-|[{'function',{'get_format',2}}] )-|[{'function',{'get_format',2}}] )
'print_items'/4 = (fun (_0,_1,_2,_3) -> do apply 'print_one_line'/4 (_0,_1,_2,[32]) apply 'print_item_elements'/3 (_0,_1,_3)-|[{'function',{'print_items',4}}] )
'print_item_elements'/3 = (fun (_0,_1,_2) -> (case <_0,_1,_2> of <_X_Device,_X_Line,[]> when 'true' -> 'ok'
<Device,Line,[{Key,Value}|T]> when 'true' -> let <_3> = call 'lists':'concat' ([[32|[32|[32]]]|[Key|[]]]) in do apply 'print_one_line'/4 (Device,Line,_3,Value) apply 'print_item_elements'/3 (Device,Line,T)
(<_6,_5,_4> when 'true' -> primop 'match_fail' ({'function_clause',_6,_5,_4})-|['compiler_generated'] ) end-|[{'function',{'print_item_elements',3}}] )-|[{'function',{'print_item_elements',3}}] )
'module_info'/0 = (fun () -> call 'erlang':'get_module_info' ('format_lib_supp')-|[{'function',{'module_info',0}}] )
'module_info'/1 = (fun (_0) -> call 'erlang':'get_module_info' ('format_lib_supp',(_0-|[{'function',{'module_info',1}}] ))-|[{'function',{'module_info',1}}] ) end