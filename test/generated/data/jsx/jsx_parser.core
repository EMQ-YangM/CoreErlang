module 'jsx_parser' ['handle_event'/2,'init'/1,'module_info'/0,'module_info'/1,'parser'/3,'resume'/5] attributes [ 'file' = [{[106|[115|[120|[95|[112|[97|[114|[115|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]],1}]
, 'spec' = [{{'parser',3},[{'type',30,'fun',[{'type',30,'product',[{'ann_type',30,[{'var',30,'Handler'}|[{'type',30,'module',[]}]]}|[{'ann_type',30,[{'var',30,'State'}|[{'type',30,'any',[]}]]}|[{'ann_type',30,[{'var',30,'Config'}|[{'type',30,'list',[]}]]}]]]}|[{'remote_type',30,[{'atom',30,'jsx'}|[{'atom',30,'parser'}|[[]]]]}]]}]}]
, 'spec' = [{{'resume',5},[{'type',38,'fun',[{'type',38,'product',[{'ann_type',39,[{'var',39,'Rest'}|[{'remote_type',39,[{'atom',39,'jsx'}|[{'atom',39,'token'}|[[]]]]}]]}|[{'ann_type',40,[{'var',40,'State'}|[{'type',40,'atom',[]}]]}|[{'ann_type',41,[{'var',41,'Handler'}|[{'type',41,'module',[]}]]}|[{'ann_type',42,[{'var',42,'Stack'}|[{'type',42,'list',[{'type',42,'atom',[]}]}]]}|[{'ann_type',43,[{'var',43,'Config'}|[{'remote_type',43,[{'atom',43,'jsx'}|[{'atom',43,'config'}|[[]]]]}]]}]]]]]}|[{'type',44,'union',[{'remote_type',44,[{'atom',44,'jsx'}|[{'atom',44,'parser'}|[[]]]]}|[{'type',44,'tuple',[{'atom',44,'incomplete'}|[{'remote_type',44,[{'atom',44,'jsx'}|[{'atom',44,'parser'}|[[]]]]}]]}]]}]]}]}]
, 'file' = [{[106|[115|[120|[95|[99|[111|[110|[102|[105|[103|[46|[104|[114|[108]]]]]]]]]]]]]],1}]
, 'record' = [{'config',[{'typed_record_field',{'record_field',2,{'atom',2,'dirty_strings'},{'atom',2,'false'}},{'type',2,'boolean',[]}}|[{'typed_record_field',{'record_field',3,{'atom',3,'escaped_forward_slashes'},{'atom',3,'false'}},{'type',3,'boolean',[]}}|[{'typed_record_field',{'record_field',4,{'atom',4,'escaped_strings'},{'atom',4,'false'}},{'type',4,'boolean',[]}}|[{'typed_record_field',{'record_field',5,{'atom',5,'multi_term'},{'atom',5,'false'}},{'type',5,'boolean',[]}}|[{'typed_record_field',{'record_field',6,{'atom',6,'strict_comments'},{'atom',6,'false'}},{'type',6,'boolean',[]}}|[{'typed_record_field',{'record_field',7,{'atom',7,'strict_commas'},{'atom',7,'false'}},{'type',7,'boolean',[]}}|[{'typed_record_field',{'record_field',8,{'atom',8,'strict_utf8'},{'atom',8,'false'}},{'type',8,'boolean',[]}}|[{'typed_record_field',{'record_field',9,{'atom',9,'strict_single_quotes'},{'atom',9,'false'}},{'type',9,'boolean',[]}}|[{'typed_record_field',{'record_field',10,{'atom',10,'strict_escapes'},{'atom',10,'false'}},{'type',10,'boolean',[]}}|[{'typed_record_field',{'record_field',11,{'atom',11,'strict_control_codes'},{'atom',11,'false'}},{'type',11,'boolean',[]}}|[{'typed_record_field',{'record_field',12,{'atom',12,'stream'},{'atom',12,'false'}},{'type',12,'boolean',[]}}|[{'typed_record_field',{'record_field',13,{'atom',13,'return_tail'},{'atom',13,'false'}},{'type',13,'boolean',[]}}|[{'typed_record_field',{'record_field',14,{'atom',14,'uescape'},{'atom',14,'false'}},{'type',14,'boolean',[]}}|[{'typed_record_field',{'record_field',15,{'atom',15,'unescaped_jsonp'},{'atom',15,'false'}},{'type',15,'boolean',[]}}|[{'typed_record_field',{'record_field',16,{'atom',16,'error_handler'},{'atom',16,'false'}},{'type',16,'union',[{'atom',16,'false'}|[{'remote_type',16,[{'atom',16,'jsx_config'}|[{'atom',16,'handler'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',17,{'atom',17,'incomplete_handler'},{'atom',17,'false'}},{'type',17,'union',[{'atom',17,'false'}|[{'remote_type',17,[{'atom',17,'jsx_config'}|[{'atom',17,'handler'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]}]
, 'file' = [{[106|[115|[120|[95|[112|[97|[114|[115|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]],57}]
, 'spec' = [{{'init',1},[{'type',633,'fun',[{'type',633,'product',[{'remote_type',633,[{'atom',633,'proplists'}|[{'atom',633,'proplist'}|[[]]]]}]}|[{'type',633,'list',[]}]]}]}]
, 'spec' = [{{'handle_event',2},[{'type',638,'fun',[{'type',638,'product',[{'ann_type',638,[{'var',638,'Event'}|[{'type',638,'any',[]}]]}|[{'ann_type',638,[{'var',638,'Acc'}|[{'type',638,'list',[]}]]}]]}|[{'type',638,'list',[]}]]}]}] ] 'parser'/3 = fun (_0,_1,_2) -> (fun (_5) -> let <_4> = call _0:'init' (_1) in let <_3> = call 'jsx_config':'parse_config' (_2) in apply 'value'/4 (_5,{_0,_4},[],_3)-|[{'id',{0,0,'-parser/3-fun-0-'}}] )
'resume'/5 = fun (_0,_1,_2,_3,_4) -> case _1 of <'value'> when 'true' -> apply 'value'/4 (_0,_2,_3,_4)
<'object'> when 'true' -> apply 'object'/4 (_0,_2,_3,_4)
<'array'> when 'true' -> apply 'array'/4 (_0,_2,_3,_4)
<'maybe_done'> when 'true' -> apply 'maybe_done'/4 (_0,_2,_3,_4)
<'done'> when 'true' -> apply 'done'/4 (_0,_2,_3,_4)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'incomplete'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <State,Handler,Stack,Config = {'config',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,'false',_33,_34,_35,_36,_37}> when 'true' -> (case Config of (<({'config',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_rec0,_52}-|['compiler_generated'] )> when 'true' -> case _rec0 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_6> = call 'jsx_config':'config_to_list' (Config) in apply F ([],{'parser',State,Handler,Stack},_6) end-|['compiler_generated'] )
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<State,Handler,Stack,Config = {'config',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,'false'}> when 'true' -> let <_17> = fun (_15) -> case _15 of <End> when let <_8> = call 'erlang':'=:=' (_15,'end_stream') in let <_9> = call 'erlang':'=:=' (_15,'end_json') in call 'erlang':'or' (_8,_9) -> case apply 'resume'/5 (['end_json'],State,Handler,Stack,Config) of <{'incomplete',_69}> when 'true' -> (case Config of (<({'config',_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_rec1,_84}-|['compiler_generated'] )> when 'true' -> case _rec1 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = call 'jsx_config':'config_to_list' (Config) in apply F ([],{'parser',State,Handler,Stack},_12) end-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Else> when 'true' -> Else end
<Tokens> when 'true' -> apply 'resume'/5 (Tokens,State,Handler,Stack,Config) end in {'incomplete',_17}
<State,Handler,Stack,Config = {'config',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,F}> when 'true' -> let <_18> = call 'jsx_config':'config_to_list' (Config) in apply F ([],{'parser',State,Handler,Stack},_18)
(<_22,_21,_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20,_19})-|[{'function_name',{'incomplete',4}}] )-|['compiler_generated'] ) end
'handle_event'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Event,{Handler,State},_X_Config> when 'true' -> let <_3> = call Handler:'handle_event' (Event,State) in {Handler,_3}
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'handle_event',3}}] )-|['compiler_generated'] ) end
'value'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[String|Tokens],Handler,Stack,Config> when call 'erlang':'is_binary' (String) -> try apply 'clean_string'/2 (String,Config) of <_4> -> let <_5> = apply 'handle_event'/3 ({'string',_4},Handler,Config) in apply 'maybe_done'/4 (Tokens,_5,Stack,Config) catch <_9,_8,_7> -> case <_9,_8,_7> of <('error'-|['compiler_generated'] ),('badarg'-|['compiler_generated'] ),_74> when 'true' -> (case Config of (<({'config',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_rec2,_89}-|['compiler_generated'] )> when 'true' -> case _rec2 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = call 'jsx_config':'config_to_list' (Config) in apply F ([{'string',String}|Tokens],{'parser','value',Handler,Stack},_12) end-|['compiler_generated'] )
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_111,_112,_113> when 'true' -> primop 'raise' (_113,_112)-|['compiler_generated'] ) end
<['true'|Tokens],Handler,Stack,Config> when 'true' -> let <_14> = apply 'handle_event'/3 ({'literal','true'},Handler,Config) in apply 'maybe_done'/4 (Tokens,_14,Stack,Config)
<['false'|Tokens],Handler,Stack,Config> when 'true' -> let <_15> = apply 'handle_event'/3 ({'literal','false'},Handler,Config) in apply 'maybe_done'/4 (Tokens,_15,Stack,Config)
<['null'|Tokens],Handler,Stack,Config> when 'true' -> let <_16> = apply 'handle_event'/3 ({'literal','null'},Handler,Config) in apply 'maybe_done'/4 (Tokens,_16,Stack,Config)
<['start_object'|Tokens],Handler,Stack,Config> when 'true' -> let <_17> = apply 'handle_event'/3 ('start_object',Handler,Config) in apply 'object'/4 (Tokens,_17,['object'|Stack],Config)
<['start_array'|Tokens],Handler,Stack,Config> when 'true' -> let <_18> = apply 'handle_event'/3 ('start_array',Handler,Config) in apply 'array'/4 (Tokens,_18,['array'|Stack],Config)
<[Number|Tokens],Handler,Stack,Config> when call 'erlang':'is_integer' (Number) -> let <_19> = apply 'handle_event'/3 ({'integer',Number},Handler,Config) in apply 'maybe_done'/4 (Tokens,_19,Stack,Config)
<[Number|Tokens],Handler,Stack,Config> when call 'erlang':'is_float' (Number) -> let <_20> = apply 'handle_event'/3 ({'float',Number},Handler,Config) in apply 'maybe_done'/4 (Tokens,_20,Stack,Config)
<[{'raw',Raw}|Tokens],Handler,Stack,Config> when call 'erlang':'is_binary' (Raw) -> let <_21> = call 'jsx':'decoder' ('jsx_parser',[],[]) in let <_22> = apply _21 (Raw) in let <_23> = call 'erlang':'++' (_22,Tokens) in apply 'value'/4 (_23,Handler,Stack,Config)
<[Timestamp = {_91,_92,_93}|Tokens],Handler,Stack,Config> when 'true' -> case call 'calendar':'now_to_datetime' (Timestamp) of <{{Year,Month,Day},{Hour,Min,Sec}}> when 'true' -> let <_25> = call 'io_lib':'format' ([126|[52|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[84|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[90]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Year|[Month|[Day|[Hour|[Min|[Sec|[]]]]]]]) in let <_26> = call 'unicode':'characters_to_binary' (_25) in apply 'value'/4 ([{'string',_26}|Tokens],Handler,Stack,Config)
(<_24> when 'true' -> primop 'match_fail' ({'badmatch',_24})-|['compiler_generated'] ) end
<[{{Year,Month,Day},{Hour,Min,Sec}}|Tokens],Handler,Stack,Config> when try let <_27> = call 'erlang':'is_integer' (Year) in let <_28> = call 'erlang':'is_integer' (Month) in let <_29> = call 'erlang':'is_integer' (Day) in let <_30> = call 'erlang':'is_integer' (Hour) in let <_31> = call 'erlang':'is_integer' (Min) in let <_32> = call 'erlang':'is_integer' (Sec) in let <_33> = call 'erlang':'and' (_31,_32) in let <_34> = call 'erlang':'and' (_30,_33) in let <_35> = call 'erlang':'and' (_29,_34) in let <_36> = call 'erlang':'and' (_28,_35) in call 'erlang':'and' (_27,_36) of <Try> -> Try catch <T,R> -> 'false' -> let <_37> = call 'io_lib':'format' ([126|[52|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[84|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[90]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Year|[Month|[Day|[Hour|[Min|[Sec|[]]]]]]]) in let <_38> = call 'unicode':'characters_to_binary' (_37) in apply 'value'/4 ([{'string',_38}|Tokens],Handler,Stack,Config)
<[{{Year,Month,Day},{Hour,Min,Sec}}|Tokens],Handler,Stack,Config> when try let <_39> = call 'erlang':'is_integer' (Year) in let <_40> = call 'erlang':'is_integer' (Month) in let <_41> = call 'erlang':'is_integer' (Day) in let <_42> = call 'erlang':'is_integer' (Hour) in let <_43> = call 'erlang':'is_integer' (Min) in let <_44> = call 'erlang':'is_float' (Sec) in let <_45> = call 'erlang':'and' (_43,_44) in let <_46> = call 'erlang':'and' (_42,_45) in let <_47> = call 'erlang':'and' (_41,_46) in let <_48> = call 'erlang':'and' (_40,_47) in call 'erlang':'and' (_39,_48) of <Try> -> Try catch <T,R> -> 'false' -> let <_49> = call 'io_lib':'format' ([126|[52|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[84|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[57|[46|[54|[46|[48|[102|[90]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Year|[Month|[Day|[Hour|[Min|[Sec|[]]]]]]]) in let <_50> = call 'unicode':'characters_to_binary' (_49) in apply 'value'/4 ([{'string',_50}|Tokens],Handler,Stack,Config)
<[{'literal',Value}|Tokens],Handler,Stack,Config> when let <_51> = call 'erlang':'=:=' (Value,'true') in let <_52> = call 'erlang':'=:=' (Value,'false') in let <_53> = call 'erlang':'=:=' (Value,'null') in let <_54> = call 'erlang':'or' (_52,_53) in call 'erlang':'or' (_51,_54) -> let <_55> = [Value|Tokens] in apply 'value'/4 (_55,Handler,Stack,Config)
<[{'integer',Value}|Tokens],Handler,Stack,Config> when call 'erlang':'is_integer' (Value) -> let <_56> = [Value|Tokens] in apply 'value'/4 (_56,Handler,Stack,Config)
<[{'float',Value}|Tokens],Handler,Stack,Config> when call 'erlang':'is_float' (Value) -> let <_57> = [Value|Tokens] in apply 'value'/4 (_57,Handler,Stack,Config)
<[{'string',Value}|Tokens],Handler,Stack,Config> when let <_58> = call 'erlang':'is_binary' (Value) in let <_59> = call 'erlang':'is_atom' (Value) in call 'erlang':'or' (_58,_59) -> let <_60> = [Value|Tokens] in apply 'value'/4 (_60,Handler,Stack,Config)
<[{'number',Value}|Tokens],Handler,Stack,Config> when let <_61> = call 'erlang':'is_float' (Value) in let <_62> = call 'erlang':'is_integer' (Value) in call 'erlang':'or' (_61,_62) -> let <_63> = [Value|Tokens] in apply 'value'/4 (_63,Handler,Stack,Config)
<[String|Tokens],Handler,Stack,Config> when call 'erlang':'is_atom' (String) -> let <_64> = call 'erlang':'atom_to_binary' (String,'utf8') in let <_65> = [{'string',_64}|Tokens] in apply 'value'/4 (_65,Handler,Stack,Config)
<[],Handler,Stack,Config> when 'true' -> apply 'incomplete'/4 ('value',Handler,Stack,Config)
<BadTokens,Handler,Stack,Config> when call 'erlang':'is_list' (BadTokens) -> (case Config of (<({'config',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_rec3,_108}-|['compiler_generated'] )> when 'true' -> case _rec3 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_68> = call 'jsx_config':'config_to_list' (Config) in apply F (BadTokens,{'parser','value',Handler,Stack},_68) end-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Token,Handler,Stack,Config> when 'true' -> apply 'value'/4 ([Token|[]],Handler,Stack,Config) end
'object'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <['end_object'|Tokens],Handler,['object'|Stack],Config> when 'true' -> let <_4> = apply 'handle_event'/3 ('end_object',Handler,Config) in apply 'maybe_done'/4 (Tokens,_4,Stack,Config)
<[{'key',Key}|Tokens],Handler,Stack,Config> when let <_5> = call 'erlang':'is_atom' (Key) in let <_6> = call 'erlang':'is_binary' (Key) in let <_7> = call 'erlang':'is_integer' (Key) in let <_8> = call 'erlang':'or' (_6,_7) in call 'erlang':'or' (_5,_8) -> apply 'object'/4 ([Key|Tokens],Handler,Stack,Config)
<[Key|Tokens],Handler,_@r0 = ['object'|Stack],Config> when let <_9> = call 'erlang':'is_atom' (Key) in let <_10> = call 'erlang':'is_binary' (Key) in let <_11> = call 'erlang':'is_integer' (Key) in let <_12> = call 'erlang':'or' (_10,_11) in call 'erlang':'or' (_9,_12) -> try let <_13> = apply 'fix_key'/1 (Key) in apply 'clean_string'/2 (_13,Config) of <_14> -> let <_15> = apply 'handle_event'/3 ({'key',_14},Handler,Config) in apply 'value'/4 (Tokens,_15,_@r0,Config) catch <_19,_18,_17> -> case <_19,_18,_17> of <('error'-|['compiler_generated'] ),('badarg'-|['compiler_generated'] ),_28> when 'true' -> (case Config of (<({'config',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_rec4,_43}-|['compiler_generated'] )> when 'true' -> case _rec4 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_22> = call 'jsx_config':'config_to_list' (Config) in apply F ([{'string',Key}|Tokens],{'parser','object',Handler,Stack},_22) end-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_46,_47,_48> when 'true' -> primop 'raise' (_48,_47)-|['compiler_generated'] ) end
<[],Handler,Stack,Config> when 'true' -> apply 'incomplete'/4 ('object',Handler,Stack,Config)
<Token,Handler,Stack,Config> when 'true' -> apply 'object'/4 ([Token|[]],Handler,Stack,Config) end
'array'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <['end_array'|Tokens],Handler,['array'|Stack],Config> when 'true' -> let <_4> = apply 'handle_event'/3 ('end_array',Handler,Config) in apply 'maybe_done'/4 (Tokens,_4,Stack,Config)
<[],Handler,Stack,Config> when 'true' -> apply 'incomplete'/4 ('array',Handler,Stack,Config)
<Tokens,Handler,Stack,Config> when call 'erlang':'is_list' (Tokens) -> apply 'value'/4 (Tokens,Handler,Stack,Config)
<Token,Handler,Stack,Config> when 'true' -> apply 'array'/4 ([Token|[]],Handler,Stack,Config) end
'maybe_done'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <['end_json'],Handler,[],Config> when 'true' -> apply 'done'/4 (['end_json'],Handler,[],Config)
<Tokens,Handler,Stack = ['object'|_12],Config> when call 'erlang':'is_list' (Tokens) -> apply 'object'/4 (Tokens,Handler,Stack,Config)
<Tokens,Handler,Stack = ['array'|_13],Config> when call 'erlang':'is_list' (Tokens) -> apply 'array'/4 (Tokens,Handler,Stack,Config)
<[],Handler,Stack,Config> when 'true' -> apply 'incomplete'/4 ('maybe_done',Handler,Stack,Config)
<BadTokens,Handler,Stack,Config> when call 'erlang':'is_list' (BadTokens) -> (case Config of (<({'config',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_rec5,_28}-|['compiler_generated'] )> when 'true' -> case _rec5 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_6> = call 'jsx_config':'config_to_list' (Config) in apply F (BadTokens,{'parser','maybe_done',Handler,Stack},_6) end-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Token,Handler,Stack,Config> when 'true' -> apply 'maybe_done'/4 ([Token|[]],Handler,Stack,Config) end
'done'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[],Handler,[],Config = {'config',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,'true',_25,_26,_27,_28,_29}> when 'true' -> apply 'incomplete'/4 ('done',Handler,[],Config)
<Tokens,Handler,[],Config> when let <_4> = call 'erlang':'=:=' (Tokens,['end_json']) in let <_5> = call 'erlang':'=:=' (Tokens,[]) in call 'erlang':'or' (_4,_5) -> case apply 'handle_event'/3 ('end_json',Handler,Config) of <{_30,State}> when 'true' -> State
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<BadTokens,Handler,Stack,Config> when call 'erlang':'is_list' (BadTokens) -> (case Config of (<({'config',_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_rec6,_45}-|['compiler_generated'] )> when 'true' -> case _rec6 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_9> = call 'jsx_config':'config_to_list' (Config) in apply F (BadTokens,{'parser','done',Handler,Stack},_9) end-|['compiler_generated'] )
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Token,Handler,Stack,Config> when 'true' -> apply 'done'/4 ([Token|[]],Handler,Stack,Config) end
'fix_key'/1 = fun (_0) -> case _0 of <Key> when call 'erlang':'is_atom' (_0) -> call 'erlang':'atom_to_binary' (Key,'utf8')
<Key> when call 'erlang':'is_integer' (_0) -> let <_1> = call 'erlang':'integer_to_list' (Key) in call 'erlang':'list_to_binary' (_1)
<Key> when call 'erlang':'is_binary' (_0) -> Key
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'fix_key',1}}] )-|['compiler_generated'] ) end
'clean_string'/2 = fun (_0,_1) -> case <_0,_1> of <Bin,{'config','true',_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18}> when 'true' -> Bin
<Bin,Config> when 'true' -> apply 'clean'/3 (Bin,[],Config) end
'clean'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <#{#<0>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_3> = apply 'maybe_replace'/2 (0,Config) in apply 'clean'/3 (Rest,[Acc|[_3|[]]],Config)
<#{#<1>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_4> = apply 'maybe_replace'/2 (1,Config) in apply 'clean'/3 (Rest,[Acc|[_4|[]]],Config)
<#{#<2>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_5> = apply 'maybe_replace'/2 (2,Config) in apply 'clean'/3 (Rest,[Acc|[_5|[]]],Config)
<#{#<3>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_6> = apply 'maybe_replace'/2 (3,Config) in apply 'clean'/3 (Rest,[Acc|[_6|[]]],Config)
<#{#<4>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_7> = apply 'maybe_replace'/2 (4,Config) in apply 'clean'/3 (Rest,[Acc|[_7|[]]],Config)
<#{#<5>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_8> = apply 'maybe_replace'/2 (5,Config) in apply 'clean'/3 (Rest,[Acc|[_8|[]]],Config)
<#{#<6>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_9> = apply 'maybe_replace'/2 (6,Config) in apply 'clean'/3 (Rest,[Acc|[_9|[]]],Config)
<#{#<7>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_10> = apply 'maybe_replace'/2 (7,Config) in apply 'clean'/3 (Rest,[Acc|[_10|[]]],Config)
<#{#<8>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_11> = apply 'maybe_replace'/2 (8,Config) in apply 'clean'/3 (Rest,[Acc|[_11|[]]],Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_12> = apply 'maybe_replace'/2 (9,Config) in apply 'clean'/3 (Rest,[Acc|[_12|[]]],Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_13> = apply 'maybe_replace'/2 (10,Config) in apply 'clean'/3 (Rest,[Acc|[_13|[]]],Config)
<#{#<11>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_14> = apply 'maybe_replace'/2 (11,Config) in apply 'clean'/3 (Rest,[Acc|[_14|[]]],Config)
<#{#<12>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_15> = apply 'maybe_replace'/2 (12,Config) in apply 'clean'/3 (Rest,[Acc|[_15|[]]],Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_16> = apply 'maybe_replace'/2 (13,Config) in apply 'clean'/3 (Rest,[Acc|[_16|[]]],Config)
<#{#<14>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_17> = apply 'maybe_replace'/2 (14,Config) in apply 'clean'/3 (Rest,[Acc|[_17|[]]],Config)
<#{#<15>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_18> = apply 'maybe_replace'/2 (15,Config) in apply 'clean'/3 (Rest,[Acc|[_18|[]]],Config)
<#{#<16>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_19> = apply 'maybe_replace'/2 (16,Config) in apply 'clean'/3 (Rest,[Acc|[_19|[]]],Config)
<#{#<17>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_20> = apply 'maybe_replace'/2 (17,Config) in apply 'clean'/3 (Rest,[Acc|[_20|[]]],Config)
<#{#<18>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_21> = apply 'maybe_replace'/2 (18,Config) in apply 'clean'/3 (Rest,[Acc|[_21|[]]],Config)
<#{#<19>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_22> = apply 'maybe_replace'/2 (19,Config) in apply 'clean'/3 (Rest,[Acc|[_22|[]]],Config)
<#{#<20>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_23> = apply 'maybe_replace'/2 (20,Config) in apply 'clean'/3 (Rest,[Acc|[_23|[]]],Config)
<#{#<21>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_24> = apply 'maybe_replace'/2 (21,Config) in apply 'clean'/3 (Rest,[Acc|[_24|[]]],Config)
<#{#<22>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_25> = apply 'maybe_replace'/2 (22,Config) in apply 'clean'/3 (Rest,[Acc|[_25|[]]],Config)
<#{#<23>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_26> = apply 'maybe_replace'/2 (23,Config) in apply 'clean'/3 (Rest,[Acc|[_26|[]]],Config)
<#{#<24>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_27> = apply 'maybe_replace'/2 (24,Config) in apply 'clean'/3 (Rest,[Acc|[_27|[]]],Config)
<#{#<25>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_28> = apply 'maybe_replace'/2 (25,Config) in apply 'clean'/3 (Rest,[Acc|[_28|[]]],Config)
<#{#<26>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_29> = apply 'maybe_replace'/2 (26,Config) in apply 'clean'/3 (Rest,[Acc|[_29|[]]],Config)
<#{#<27>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_30> = apply 'maybe_replace'/2 (27,Config) in apply 'clean'/3 (Rest,[Acc|[_30|[]]],Config)
<#{#<28>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_31> = apply 'maybe_replace'/2 (28,Config) in apply 'clean'/3 (Rest,[Acc|[_31|[]]],Config)
<#{#<29>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_32> = apply 'maybe_replace'/2 (29,Config) in apply 'clean'/3 (Rest,[Acc|[_32|[]]],Config)
<#{#<30>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_33> = apply 'maybe_replace'/2 (30,Config) in apply 'clean'/3 (Rest,[Acc|[_33|[]]],Config)
<#{#<31>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_34> = apply 'maybe_replace'/2 (31,Config) in apply 'clean'/3 (Rest,[Acc|[_34|[]]],Config)
<#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_35> = apply 'maybe_replace'/2 (34,Config) in apply 'clean'/3 (Rest,[Acc|[_35|[]]],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_36> = apply 'maybe_replace'/2 (47,Config) in apply 'clean'/3 (Rest,[Acc|[_36|[]]],Config)
<#{#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_37> = apply 'maybe_replace'/2 (92,Config) in apply 'clean'/3 (Rest,[Acc|[_37|[]]],Config)
<Bin = #{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config = {'config',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,'true',_71,_72,_73}> when 'true' -> case X of <_74> when call 'erlang':'<' (X,128) -> apply 'start_count'/3 (Bin,Acc,Config)
<_77> when 'true' -> let <_38> = apply 'json_escape_sequence'/1 (X) in apply 'clean'/3 (Rest,[Acc|[_38|[]]],Config) end
<#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<168>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_40> = apply 'maybe_replace'/2 (8232,Config) in apply 'clean'/3 (Rest,[Acc|[_40|[]]],Config)
<#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<169>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_41> = apply 'maybe_replace'/2 (8233,Config) in apply 'clean'/3 (Rest,[Acc|[_41|[]]],Config)
<Bin = #{#<_78>('undefined','undefined','utf8',['unsigned'|['big']]),#<_79>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> apply 'start_count'/3 (Bin,Acc,Config)
<#{#<237>(8,1,'integer',['unsigned'|['big']]),#<X>(8,1,'integer',['unsigned'|['big']]),#<_80>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when call 'erlang':'>=' (X,160) -> let <_42> = apply 'maybe_replace'/2 ('surrogate',Config) in apply 'clean'/3 (Rest,[Acc|[_42|[]]],Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when let <_43> = call 'erlang':'>=' (X,192) in let <_44> = call 'erlang':'=<' (X,223) in call 'erlang':'and' (_43,_44) -> let <_46> = apply 'strip_continuations'/2 (Rest,1) in let <_45> = apply 'maybe_replace'/2 ('badutf',Config) in apply 'clean'/3 (_46,[Acc|[_45|[]]],Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when let <_47> = call 'erlang':'>=' (X,224) in let <_48> = call 'erlang':'=<' (X,239) in call 'erlang':'and' (_47,_48) -> let <_50> = apply 'strip_continuations'/2 (Rest,2) in let <_49> = apply 'maybe_replace'/2 ('badutf',Config) in apply 'clean'/3 (_50,[Acc|[_49|[]]],Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when let <_51> = call 'erlang':'>=' (X,240) in let <_52> = call 'erlang':'=<' (X,247) in call 'erlang':'and' (_51,_52) -> let <_54> = apply 'strip_continuations'/2 (Rest,3) in let <_53> = apply 'maybe_replace'/2 ('badutf',Config) in apply 'clean'/3 (_54,[Acc|[_53|[]]],Config)
<#{#<_81>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Config> when 'true' -> let <_55> = apply 'maybe_replace'/2 ('badutf',Config) in apply 'clean'/3 (Rest,[Acc|[_55|[]]],Config)
<#{}#,Acc,_82> when 'true' -> call 'erlang':'iolist_to_binary' (Acc)
(<_58,_57,_56> when 'true' -> (primop 'match_fail' ({'function_clause',_58,_57,_56})-|[{'function_name',{'clean',3}}] )-|['compiler_generated'] ) end
'start_count'/3 = fun (_0,_1,_2) -> let <Size> = apply 'count'/3 (_0,0,_2) in case _0 of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'clean'/3 (Rest,[_1|[Clean|[]]],_2)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'count'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <#{#<0>(8,1,'integer',['unsigned'|['big']]),#<_103>('all',8,'binary',['unsigned'|['big']])}#,N,_104> when 'true' -> N
<#{#<1>(8,1,'integer',['unsigned'|['big']]),#<_105>('all',8,'binary',['unsigned'|['big']])}#,N,_106> when 'true' -> N
<#{#<2>(8,1,'integer',['unsigned'|['big']]),#<_107>('all',8,'binary',['unsigned'|['big']])}#,N,_108> when 'true' -> N
<#{#<3>(8,1,'integer',['unsigned'|['big']]),#<_109>('all',8,'binary',['unsigned'|['big']])}#,N,_110> when 'true' -> N
<#{#<4>(8,1,'integer',['unsigned'|['big']]),#<_111>('all',8,'binary',['unsigned'|['big']])}#,N,_112> when 'true' -> N
<#{#<5>(8,1,'integer',['unsigned'|['big']]),#<_113>('all',8,'binary',['unsigned'|['big']])}#,N,_114> when 'true' -> N
<#{#<6>(8,1,'integer',['unsigned'|['big']]),#<_115>('all',8,'binary',['unsigned'|['big']])}#,N,_116> when 'true' -> N
<#{#<7>(8,1,'integer',['unsigned'|['big']]),#<_117>('all',8,'binary',['unsigned'|['big']])}#,N,_118> when 'true' -> N
<#{#<8>(8,1,'integer',['unsigned'|['big']]),#<_119>('all',8,'binary',['unsigned'|['big']])}#,N,_120> when 'true' -> N
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<_121>('all',8,'binary',['unsigned'|['big']])}#,N,_122> when 'true' -> N
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<_123>('all',8,'binary',['unsigned'|['big']])}#,N,_124> when 'true' -> N
<#{#<11>(8,1,'integer',['unsigned'|['big']]),#<_125>('all',8,'binary',['unsigned'|['big']])}#,N,_126> when 'true' -> N
<#{#<12>(8,1,'integer',['unsigned'|['big']]),#<_127>('all',8,'binary',['unsigned'|['big']])}#,N,_128> when 'true' -> N
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<_129>('all',8,'binary',['unsigned'|['big']])}#,N,_130> when 'true' -> N
<#{#<14>(8,1,'integer',['unsigned'|['big']]),#<_131>('all',8,'binary',['unsigned'|['big']])}#,N,_132> when 'true' -> N
<#{#<15>(8,1,'integer',['unsigned'|['big']]),#<_133>('all',8,'binary',['unsigned'|['big']])}#,N,_134> when 'true' -> N
<#{#<16>(8,1,'integer',['unsigned'|['big']]),#<_135>('all',8,'binary',['unsigned'|['big']])}#,N,_136> when 'true' -> N
<#{#<17>(8,1,'integer',['unsigned'|['big']]),#<_137>('all',8,'binary',['unsigned'|['big']])}#,N,_138> when 'true' -> N
<#{#<18>(8,1,'integer',['unsigned'|['big']]),#<_139>('all',8,'binary',['unsigned'|['big']])}#,N,_140> when 'true' -> N
<#{#<19>(8,1,'integer',['unsigned'|['big']]),#<_141>('all',8,'binary',['unsigned'|['big']])}#,N,_142> when 'true' -> N
<#{#<20>(8,1,'integer',['unsigned'|['big']]),#<_143>('all',8,'binary',['unsigned'|['big']])}#,N,_144> when 'true' -> N
<#{#<21>(8,1,'integer',['unsigned'|['big']]),#<_145>('all',8,'binary',['unsigned'|['big']])}#,N,_146> when 'true' -> N
<#{#<22>(8,1,'integer',['unsigned'|['big']]),#<_147>('all',8,'binary',['unsigned'|['big']])}#,N,_148> when 'true' -> N
<#{#<23>(8,1,'integer',['unsigned'|['big']]),#<_149>('all',8,'binary',['unsigned'|['big']])}#,N,_150> when 'true' -> N
<#{#<24>(8,1,'integer',['unsigned'|['big']]),#<_151>('all',8,'binary',['unsigned'|['big']])}#,N,_152> when 'true' -> N
<#{#<25>(8,1,'integer',['unsigned'|['big']]),#<_153>('all',8,'binary',['unsigned'|['big']])}#,N,_154> when 'true' -> N
<#{#<26>(8,1,'integer',['unsigned'|['big']]),#<_155>('all',8,'binary',['unsigned'|['big']])}#,N,_156> when 'true' -> N
<#{#<27>(8,1,'integer',['unsigned'|['big']]),#<_157>('all',8,'binary',['unsigned'|['big']])}#,N,_158> when 'true' -> N
<#{#<28>(8,1,'integer',['unsigned'|['big']]),#<_159>('all',8,'binary',['unsigned'|['big']])}#,N,_160> when 'true' -> N
<#{#<29>(8,1,'integer',['unsigned'|['big']]),#<_161>('all',8,'binary',['unsigned'|['big']])}#,N,_162> when 'true' -> N
<#{#<30>(8,1,'integer',['unsigned'|['big']]),#<_163>('all',8,'binary',['unsigned'|['big']])}#,N,_164> when 'true' -> N
<#{#<31>(8,1,'integer',['unsigned'|['big']]),#<_165>('all',8,'binary',['unsigned'|['big']])}#,N,_166> when 'true' -> N
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_3,Config)
<#{#<33>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_4,Config)
<#{#<34>(8,1,'integer',['unsigned'|['big']]),#<_167>('all',8,'binary',['unsigned'|['big']])}#,N,_168> when 'true' -> N
<#{#<35>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_5,Config)
<#{#<36>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_6,Config)
<#{#<37>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_7,Config)
<#{#<38>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_8,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_9,Config)
<#{#<40>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_10,Config)
<#{#<41>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_11,Config)
<#{#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_12> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_12,Config)
<#{#<43>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_13> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_13,Config)
<#{#<44>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_14> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_14,Config)
<#{#<45>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_15> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_15,Config)
<#{#<46>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_16> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_16,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<_169>('all',8,'binary',['unsigned'|['big']])}#,N,_170> when 'true' -> N
<#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_17> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_17,Config)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_18> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_18,Config)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_19> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_19,Config)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_20> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_20,Config)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_21> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_21,Config)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_22> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_22,Config)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_23> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_23,Config)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_24> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_24,Config)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_25> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_25,Config)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_26> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_26,Config)
<#{#<58>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_27> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_27,Config)
<#{#<59>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_28> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_28,Config)
<#{#<60>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_29> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_29,Config)
<#{#<61>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_30> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_30,Config)
<#{#<62>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_31> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_31,Config)
<#{#<63>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_32> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_32,Config)
<#{#<64>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_33> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_33,Config)
<#{#<65>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_34> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_34,Config)
<#{#<66>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_35> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_35,Config)
<#{#<67>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_36> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_36,Config)
<#{#<68>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_37> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_37,Config)
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_38> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_38,Config)
<#{#<70>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_39> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_39,Config)
<#{#<71>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_40> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_40,Config)
<#{#<72>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_41> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_41,Config)
<#{#<73>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_42> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_42,Config)
<#{#<74>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_43> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_43,Config)
<#{#<75>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_44> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_44,Config)
<#{#<76>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_45> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_45,Config)
<#{#<77>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_46> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_46,Config)
<#{#<78>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_47> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_47,Config)
<#{#<79>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_48> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_48,Config)
<#{#<80>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_49> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_49,Config)
<#{#<81>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_50> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_50,Config)
<#{#<82>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_51> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_51,Config)
<#{#<83>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_52> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_52,Config)
<#{#<84>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_53> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_53,Config)
<#{#<85>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_54> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_54,Config)
<#{#<86>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_55> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_55,Config)
<#{#<87>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_56> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_56,Config)
<#{#<88>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_57> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_57,Config)
<#{#<89>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_58> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_58,Config)
<#{#<90>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_59> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_59,Config)
<#{#<91>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_60> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_60,Config)
<#{#<92>(8,1,'integer',['unsigned'|['big']]),#<_171>('all',8,'binary',['unsigned'|['big']])}#,N,_172> when 'true' -> N
<#{#<93>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_61> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_61,Config)
<#{#<94>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_62> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_62,Config)
<#{#<95>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_63> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_63,Config)
<#{#<96>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_64> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_64,Config)
<#{#<97>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_65> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_65,Config)
<#{#<98>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_66> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_66,Config)
<#{#<99>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_67> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_67,Config)
<#{#<100>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_68> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_68,Config)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_69> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_69,Config)
<#{#<102>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_70> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_70,Config)
<#{#<103>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_71> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_71,Config)
<#{#<104>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_72> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_72,Config)
<#{#<105>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_73> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_73,Config)
<#{#<106>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_74> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_74,Config)
<#{#<107>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_75> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_75,Config)
<#{#<108>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_76> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_76,Config)
<#{#<109>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_77> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_77,Config)
<#{#<110>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_78> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_78,Config)
<#{#<111>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_79> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_79,Config)
<#{#<112>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_80> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_80,Config)
<#{#<113>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_81> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_81,Config)
<#{#<114>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_82> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_82,Config)
<#{#<115>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_83> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_83,Config)
<#{#<116>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_84> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_84,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_85> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_85,Config)
<#{#<118>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_86> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_86,Config)
<#{#<119>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_87> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_87,Config)
<#{#<120>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_88> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_88,Config)
<#{#<121>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_89> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_89,Config)
<#{#<122>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_90> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_90,Config)
<#{#<123>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_91> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_91,Config)
<#{#<124>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_92> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_92,Config)
<#{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_93> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_93,Config)
<#{#<126>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_94> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_94,Config)
<#{#<127>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_95> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_95,Config)
<#{#<_173>('undefined','undefined','utf8',['unsigned'|['big']]),#<_174>('all',8,'binary',['unsigned'|['big']])}#,N,{'config',_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,'true',_187,_188,_189}> when 'true' -> N
<#{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> case X of <_190> when call 'erlang':'<' (X,2048) -> let <_96> = call 'erlang':'+' (N,2) in apply 'count'/3 (Rest,_96,Config)
<8232> when 'true' -> N
<8233> when 'true' -> N
<_193> when call 'erlang':'<' (X,65536) -> let <_97> = call 'erlang':'+' (N,3) in apply 'count'/3 (Rest,_97,Config)
<_196> when 'true' -> let <_98> = call 'erlang':'+' (N,4) in apply 'count'/3 (Rest,_98,Config) end
<#{#<_197>(8,1,'integer',['unsigned'|['big']]),#<_198>('all',8,'binary',['unsigned'|['big']])}#,N,_199> when 'true' -> N
<#{}#,N,_200> when 'true' -> N
(<_102,_101,_100> when 'true' -> (primop 'match_fail' ({'function_clause',_102,_101,_100})-|[{'function_name',{'count',3}}] )-|['compiler_generated'] ) end
'strip_continuations'/2 = fun (_0,_1) -> case <_0,_1> of <Bin,0> when 'true' -> Bin
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when let <_2> = call 'erlang':'>=' (X,128) in let <_3> = call 'erlang':'=<' (X,191) in call 'erlang':'and' (_2,_3) -> let <_4> = call 'erlang':'-' (N,1) in apply 'strip_continuations'/2 (Rest,_4)
<Bin,_7> when 'true' -> Bin end
'maybe_replace'/2 = fun (_0,_1) -> case <_0,_1> of <8,{'config',_12,_13,'true',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']])}#
<9,{'config',_27,_28,'true',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#
<10,{'config',_42,_43,'true',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#
<12,{'config',_57,_58,'true',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']])}#
<13,{'config',_72,_73,'true',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']])}#
<34,{'config',_87,_88,'true',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<34>(8,1,'integer',['unsigned'|['big']])}#
<47,Config = {'config',_102,_103,'true',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}> when 'true' -> (case Config of (<({'config',_117,_rec7,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}-|['compiler_generated'] )> when 'true' -> case _rec7 of <'true'> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']])}#
<'false'> when 'true' -> #{#<47>(8,1,'integer',['unsigned'|['big']])}#
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_132> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<92,{'config',_133,_134,'true',_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']])}#
<X,{'config',_148,_149,'true',_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when call 'erlang':'<' (X,32) -> apply 'json_escape_sequence'/1 (X)
<X,Config = {'config',_163,_164,'true',_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}> when let <_5> = call 'erlang':'==' (X,8232) in let <_6> = call 'erlang':'==' (X,8233) in call 'erlang':'or' (_5,_6) -> (case Config of (<({'config',_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_rec8,_191,_192}-|['compiler_generated'] )> when 'true' -> case _rec8 of <'true'> when 'true' -> #{#<X>('undefined','undefined','utf8',['unsigned'|['big']])}#
<'false'> when 'true' -> apply 'json_escape_sequence'/1 (X)
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_193> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Atom,{'config',_194,_195,_196,_197,_198,_199,'true',_200,_201,_202,_203,_204,_205,_206,_207,_208}> when call 'erlang':'is_atom' (Atom) -> call 'erlang':'error' ('badarg')
<'surrogate',_X_Config> when 'true' -> #{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#
<'badutf',_X_Config> when 'true' -> #{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#
<X,_X_Config> when 'true' -> #{#<X>('undefined','undefined','utf8',['unsigned'|['big']])}# end
'json_escape_sequence'/1 = fun (_0) -> case _0 of <X> when call 'erlang':'<' (_0,65536) -> case #{#<X>(16,1,'integer',['unsigned'|['big']])}# of <#{#<A>(4,1,'integer',['unsigned'|['big']]),#<B>(4,1,'integer',['unsigned'|['big']]),#<C>(4,1,'integer',['unsigned'|['big']]),#<D>(4,1,'integer',['unsigned'|['big']])}#> when 'true' -> let <_5> = apply 'to_hex'/1 (A) in let <_4> = apply 'to_hex'/1 (B) in let <_3> = apply 'to_hex'/1 (C) in let <_2> = apply 'to_hex'/1 (D) in #{#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<_5>(8,1,'integer',['unsigned'|['big']]),#<_4>(8,1,'integer',['unsigned'|['big']]),#<_3>(8,1,'integer',['unsigned'|['big']]),#<_2>(8,1,'integer',['unsigned'|['big']])}#
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<X> when 'true' -> let <Adjusted> = call 'erlang':'-' (X,65536) in case #{#<Adjusted>(20,1,'integer',['unsigned'|['big']])}# of <#{#<A>(10,1,'integer',['unsigned'|['big']]),#<B>(10,1,'integer',['unsigned'|['big']])}#> when 'true' -> let <_8> = call 'erlang':'+' (A,55296) in let <_9> = apply 'json_escape_sequence'/1 (_8) in let <_10> = call 'erlang':'+' (B,56320) in let <_11> = apply 'json_escape_sequence'/1 (_10) in [_9|[_11|[]]]
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'to_hex'/1 = fun (_0) -> case _0 of <10> when 'true' -> 97
<11> when 'true' -> 98
<12> when 'true' -> 99
<13> when 'true' -> 100
<14> when 'true' -> 101
<15> when 'true' -> 102
<X> when 'true' -> call 'erlang':'+' (X,48) end
'init'/1 = fun (_0) -> case _0 of <[]> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'handle_event'/2 = fun (_0,_1) -> case <_0,_1> of <'end_json',State> when 'true' -> call 'lists':'reverse' (State)
<Event,State> when 'true' -> [Event|State] end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('jsx_parser')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('jsx_parser',_0) end