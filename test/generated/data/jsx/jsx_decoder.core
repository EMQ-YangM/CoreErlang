module 'jsx_decoder' ['decoder'/3,'module_info'/0,'module_info'/1,'resume'/6] attributes [ 'file' = [{[106|[115|[120|[95|[100|[101|[99|[111|[100|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'compile' = [{'inline',[{'handle_event',3}]}]
, 'compile' = [{'inline',[{'format_number',1}]}]
, 'compile' = [{'inline',[{'maybe_replace',2}]}]
, 'compile' = [{'inline',[{'doublequote',5}|[{'singlequote',5}]]}]
, 'spec' = [{{'decoder',3},[{'type',35,'fun',[{'type',35,'product',[{'ann_type',35,[{'var',35,'Handler'}|[{'type',35,'module',[]}]]}|[{'ann_type',35,[{'var',35,'State'}|[{'type',35,'any',[]}]]}|[{'ann_type',35,[{'var',35,'Config'}|[{'type',35,'list',[]}]]}]]]}|[{'remote_type',35,[{'atom',35,'jsx'}|[{'atom',35,'decoder'}|[[]]]]}]]}]}]
, 'spec' = [{{'resume',6},[{'type',43,'fun',[{'type',43,'product',[{'ann_type',44,[{'var',44,'Rest'}|[{'type',44,'binary',[]}]]}|[{'ann_type',45,[{'var',45,'State'}|[{'type',45,'atom',[]}]]}|[{'ann_type',46,[{'var',46,'Handler'}|[{'type',46,'module',[]}]]}|[{'ann_type',47,[{'var',47,'Acc'}|[{'type',47,'any',[]}]]}|[{'ann_type',48,[{'var',48,'Stack'}|[{'type',48,'list',[{'type',48,'atom',[]}]}]]}|[{'ann_type',49,[{'var',49,'Config'}|[{'remote_type',49,[{'atom',49,'jsx'}|[{'atom',49,'config'}|[[]]]]}]]}]]]]]]}|[{'type',50,'union',[{'remote_type',50,[{'atom',50,'jsx'}|[{'atom',50,'decoder'}|[[]]]]}|[{'type',50,'tuple',[{'atom',50,'incomplete'}|[{'remote_type',50,[{'atom',50,'jsx'}|[{'atom',50,'decoder'}|[[]]]]}]]}]]}]]}]}]
, 'file' = [{[106|[115|[120|[95|[99|[111|[110|[102|[105|[103|[46|[104|[114|[108]]]]]]]]]]]]]],1}]
, 'record' = [{'config',[{'typed_record_field',{'record_field',2,{'atom',2,'dirty_strings'},{'atom',2,'false'}},{'type',2,'boolean',[]}}|[{'typed_record_field',{'record_field',3,{'atom',3,'escaped_forward_slashes'},{'atom',3,'false'}},{'type',3,'boolean',[]}}|[{'typed_record_field',{'record_field',4,{'atom',4,'escaped_strings'},{'atom',4,'false'}},{'type',4,'boolean',[]}}|[{'typed_record_field',{'record_field',5,{'atom',5,'multi_term'},{'atom',5,'false'}},{'type',5,'boolean',[]}}|[{'typed_record_field',{'record_field',6,{'atom',6,'strict_comments'},{'atom',6,'false'}},{'type',6,'boolean',[]}}|[{'typed_record_field',{'record_field',7,{'atom',7,'strict_commas'},{'atom',7,'false'}},{'type',7,'boolean',[]}}|[{'typed_record_field',{'record_field',8,{'atom',8,'strict_utf8'},{'atom',8,'false'}},{'type',8,'boolean',[]}}|[{'typed_record_field',{'record_field',9,{'atom',9,'strict_single_quotes'},{'atom',9,'false'}},{'type',9,'boolean',[]}}|[{'typed_record_field',{'record_field',10,{'atom',10,'strict_escapes'},{'atom',10,'false'}},{'type',10,'boolean',[]}}|[{'typed_record_field',{'record_field',11,{'atom',11,'strict_control_codes'},{'atom',11,'false'}},{'type',11,'boolean',[]}}|[{'typed_record_field',{'record_field',12,{'atom',12,'stream'},{'atom',12,'false'}},{'type',12,'boolean',[]}}|[{'typed_record_field',{'record_field',13,{'atom',13,'return_tail'},{'atom',13,'false'}},{'type',13,'boolean',[]}}|[{'typed_record_field',{'record_field',14,{'atom',14,'uescape'},{'atom',14,'false'}},{'type',14,'boolean',[]}}|[{'typed_record_field',{'record_field',15,{'atom',15,'unescaped_jsonp'},{'atom',15,'false'}},{'type',15,'boolean',[]}}|[{'typed_record_field',{'record_field',16,{'atom',16,'error_handler'},{'atom',16,'false'}},{'type',16,'union',[{'atom',16,'false'}|[{'remote_type',16,[{'atom',16,'jsx_config'}|[{'atom',16,'handler'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',17,{'atom',17,'incomplete_handler'},{'atom',17,'false'}},{'type',17,'union',[{'atom',17,'false'}|[{'remote_type',17,[{'atom',17,'jsx_config'}|[{'atom',17,'handler'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]}]
, 'file' = [{[106|[115|[120|[95|[100|[101|[99|[111|[100|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],72}] ] 'decoder'/3 = fun (_0,_1,_2) -> (fun (_5) -> let <_4> = call _0:'init' (_1) in let <_3> = call 'jsx_config':'parse_config' (_2) in apply 'start'/4 (_5,{_0,_4},[],_3)-|[{'id',{0,0,'-decoder/3-fun-0-'}}] )
'resume'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _1 of <'start'> when 'true' -> apply 'start'/4 (_0,_2,_4,_5)
<'value'> when 'true' -> apply 'value'/4 (_0,_2,_4,_5)
<'object'> when 'true' -> apply 'object'/4 (_0,_2,_4,_5)
<'array'> when 'true' -> apply 'array'/4 (_0,_2,_4,_5)
<'colon'> when 'true' -> apply 'colon'/4 (_0,_2,_4,_5)
<'key'> when 'true' -> apply 'key'/4 (_0,_2,_4,_5)
<'string'> when 'true' -> apply 'string'/5 (_0,_2,_3,_4,_5)
<'number'> when 'true' -> apply 'number'/5 (_0,_2,_3,_4,_5)
<'true'> when 'true' -> apply 'true'/4 (_0,_2,_4,_5)
<'false'> when 'true' -> apply 'false'/4 (_0,_2,_4,_5)
<'null'> when 'true' -> apply 'null'/4 (_0,_2,_4,_5)
<'comment'> when 'true' -> apply 'comment'/5 (_0,_2,_3,_4,_5)
<'maybe_done'> when 'true' -> apply 'maybe_done'/4 (_0,_2,_4,_5)
<'done'> when 'true' -> apply 'done'/4 (_0,_2,_4,_5)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'incomplete'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <State,Rest,Handler,Stack,Config = {'config',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,'false',_24,_25,_26,_27,_28}> when 'true' -> (case Config of (<({'config',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_rec0,_43}-|['compiler_generated'] )> when 'true' -> case _rec0 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (Rest,{'decoder',State,Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<State,Rest,Handler,Stack,Config> when 'true' -> apply 'incomplete'/6 (State,Rest,Handler,'unused',Stack,Config) end
'incomplete'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <State,Rest,Handler,Acc,Stack,Config = {'config',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,'false',_42,_43,_44,_45,_46}> when 'true' -> (case Config of (<({'config',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec1,_61}-|['compiler_generated'] )> when 'true' -> case _rec1 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_8> = call 'jsx_config':'config_to_list' (Config) in apply F (Rest,{'decoder',State,Handler,Acc,Stack},_8) end-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<State,Rest,Handler,Acc,Stack,Config = {'config',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,'false'}> when 'true' -> let <_24> = fun (_22) -> case _22 of <Stream> when call 'erlang':'is_binary' (_22) -> let <_10> = #{#<Rest>('all',8,'binary',['unsigned'|['big']]),#<Stream>('all',8,'binary',['unsigned'|['big']])}# in apply 'resume'/6 (_10,State,Handler,Acc,Stack,Config)
<End> when let <_11> = call 'erlang':'=:=' (_22,'end_stream') in let <_12> = call 'erlang':'=:=' (_22,'end_json') in call 'erlang':'or' (_11,_12) -> let <_16> = #{#<Rest>('all',8,'binary',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}# in case Config of <{'config',_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_15> = call 'erlang':'setelement' (12,Config,'false') in case apply 'resume'/6 (_16,State,Handler,Acc,Stack,_15) of <{'incomplete',_95}> when 'true' -> (case Config of (<({'config',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_rec3,_110}-|['compiler_generated'] )> when 'true' -> case _rec3 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_19> = call 'jsx_config':'config_to_list' (Config) in apply F (Rest,{'decoder',State,Handler,Acc,Stack},_19) end-|['compiler_generated'] )
(<_111> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Else> when 'true' -> Else end
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_23> when 'true' -> (primop 'match_fail' ({'function_clause',_23})-|[{'function_name',{'-incomplete/6-fun-0-',1}}] )-|['compiler_generated'] ) end in {'incomplete',_24}
<State,Rest,Handler,Acc,Stack,Config = {'config',_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,F}> when 'true' -> let <_25> = call 'jsx_config':'config_to_list' (Config) in apply F (Rest,{'decoder',State,Handler,Acc,Stack},_25)
(<_31,_30,_29,_28,_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_31,_30,_29,_28,_27,_26})-|[{'function_name',{'incomplete',6}}] )-|['compiler_generated'] ) end
'handle_event'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Event,{Handler,State},_X_Config> when 'true' -> let <_3> = call Handler:'handle_event' (Event,State) in {Handler,_3}
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'handle_event',3}}] )-|['compiler_generated'] ) end
'start'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<239>(8,1,'integer',['unsigned'|['big']]),#<187>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<239>(8,1,'integer',['unsigned'|['big']]),#<187>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('start',#{#<239>(8,1,'integer',['unsigned'|['big']]),#<187>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{#<239>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('start',#{#<239>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('start',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Bin,Handler,Stack,Config) end
'value'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'string'/4 (Rest,Handler,Stack,Config)
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<123>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_103,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_104> = call _103:('handle_event'-|['compiler_generated'] ) (('start_object'-|['compiler_generated'] ),State) in let <_4> = {_103,_104} in apply 'object'/4 (Rest,_4,['key'|Stack],Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('start_object'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<91>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_108,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_109> = call _108:('handle_event'-|['compiler_generated'] ) (('start_array'-|['compiler_generated'] ),State) in let <_5> = {_108,_109} in apply 'array'/4 (Rest,_5,['array'|Stack],Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('start_array'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_113,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_114> = call _113:('handle_event'-|['compiler_generated'] ) (({'literal','true'}-|['compiler_generated'] ),State) in let <_6> = {_113,_114} in apply 'maybe_done'/4 (Rest,_6,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','true'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<102>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_118,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_119> = call _118:('handle_event'-|['compiler_generated'] ) (({'literal','false'}-|['compiler_generated'] ),State) in let <_7> = {_118,_119} in apply 'maybe_done'/4 (Rest,_7,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','false'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<110>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_123,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_124> = call _123:('handle_event'-|['compiler_generated'] ) (({'literal','null'}-|['compiler_generated'] ),State) in let <_8> = {_123,_124} in apply 'maybe_done'/4 (Rest,_8,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','null'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[48],['zero'|Stack],Config)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[49],['integer'|Stack],Config)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[50],['integer'|Stack],Config)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[51],['integer'|Stack],Config)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[52],['integer'|Stack],Config)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[53],['integer'|Stack],Config)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[54],['integer'|Stack],Config)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[55],['integer'|Stack],Config)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[56],['integer'|Stack],Config)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[57],['integer'|Stack],Config)
<#{#<45>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'number'/5 (Rest,Handler,[45],['negative'|Stack],Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<116>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'true'/4 (Rest,Handler,Stack,Config)
<#{#<102>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'false'/4 (Rest,Handler,Stack,Config)
<#{#<110>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'null'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_22,_23,_24,_25,_26,_27,_28,'false',_29,_30,_31,_32,_33,_34,_35,_36}> when 'true' -> apply 'string'/4 (Rest,Handler,['singlequote'|Stack],Config)
<Rest = #{#<93>(8,1,'integer',['unsigned'|['big']]),#<_37>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_38,_39,_40,_41,_42,'false',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' -> apply 'maybe_done'/4 (Rest,Handler,Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_53,_54,_55,_56,'true',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' -> (case Config of (<({'config',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_rec4,_82}-|['compiler_generated'] )> when 'true' -> case _rec4 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_11> = call 'jsx_config':'config_to_list' (Config) in apply F (_12,{'decoder','value',Handler,'null',Stack},_11) end-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'value',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'value',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('value',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('value',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_rec5,_98}-|['compiler_generated'] )> when 'true' -> case _rec5 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_16> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','value',Handler,'null',Stack},_16) end-|['compiler_generated'] )
(<_99> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'object'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'string'/4 (Rest,Handler,Stack,Config)
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'object'/4 (Rest,Handler,Stack,Config)
<#{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['key'|Stack],Config> when 'true' -> (case <Handler,Config> of (<({_83,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_84> = call _83:('handle_event'-|['compiler_generated'] ) (('end_object'-|['compiler_generated'] ),State) in let <_4> = {_83,_84} in apply 'maybe_done'/4 (Rest,_4,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('end_object'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'object'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'object'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'object'/4 (Rest,Handler,Stack,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_18,_19,_20,_21,_22,_23,_24,'false',_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> apply 'string'/4 (Rest,Handler,['singlequote'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_33,_34,_35,_36,'true',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' -> (case Config of (<({'config',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_rec6,_62}-|['compiler_generated'] )> when 'true' -> case _rec6 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_8> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (_8,{'decoder','object',Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'object',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'object',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('object',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('object',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_rec7,_78}-|['compiler_generated'] )> when 'true' -> case _rec7 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','object',Handler,'null',Stack},_12) end-|['compiler_generated'] )
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'array'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<93>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['array'|Stack],Config> when 'true' -> (case <Handler,Config> of (<({_28,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_29> = call _28:('handle_event'-|['compiler_generated'] ) (('end_array'-|['compiler_generated'] ),State) in let <_4> = {_28,_29} in apply 'maybe_done'/4 (Rest,_4,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('end_array'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'array'/4 (Rest,Handler,Stack,Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'array'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'array'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'array'/4 (Rest,Handler,Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_10,_11,_12,_13,'true',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24}> when 'true' -> let <_5> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in apply 'value'/4 (_5,Handler,Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'array',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'array',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('array',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('array',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> apply 'value'/4 (Bin,Handler,Stack,Config) end
'colon'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<58>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['key'|Stack],Config> when 'true' -> apply 'value'/4 (Rest,Handler,['object'|Stack],Config)
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'colon'/4 (Rest,Handler,Stack,Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'colon'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'colon'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'colon'/4 (Rest,Handler,Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_17,_18,_19,_20,'true',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' -> (case Config of (<({'config',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_rec8,_46}-|['compiler_generated'] )> when 'true' -> case _rec8 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_6> = call 'jsx_config':'config_to_list' (Config) in apply F (_7,{'decoder','colon',Handler,'null',Stack},_6) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'colon',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'colon',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('colon',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('colon',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_rec9,_62}-|['compiler_generated'] )> when 'true' -> case _rec9 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_11> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','colon',Handler,'null',Stack},_11) end-|['compiler_generated'] )
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'key'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'string'/4 (Rest,Handler,Stack,Config)
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'key'/4 (Rest,Handler,Stack,Config)
<#{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['key'|Stack],Config = {'config',_18,_19,_20,_21,_22,'false',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> let <_4> = #{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in apply 'maybe_done'/4 (_4,Handler,['object'|Stack],Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'key'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'key'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'key'/4 (Rest,Handler,Stack,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_33,_34,_35,_36,_37,_38,_39,'false',_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' -> apply 'string'/4 (Rest,Handler,['singlequote'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_48,_49,_50,_51,'true',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' -> (case Config of (<({'config',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec10,_77}-|['compiler_generated'] )> when 'true' -> case _rec10 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_8> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (_8,{'decoder','key',Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'key',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'key',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('key',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('key',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_rec11,_93}-|['compiler_generated'] )> when 'true' -> case _rec11 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','key',Handler,'null',Stack},_12) end-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'string'/4 = fun (_0,_1,_2,_3) -> apply 'string'/5 (_0,_1,[],_2,_3)
'string'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> (case <Rest,Handler,Acc,Stack,Config> of (<_214,_215,_216,(_217 = ([('key'-|['compiler_generated'] )|_15]-|['compiler_generated'] )-|['compiler_generated'] ),_218> when ('true'-|['compiler_generated'] ) -> (let <_5> = call ('erlang'-|['compiler_generated'] ):('iolist_to_binary'-|['compiler_generated'] ) (_216) in (let <_219> = {('key'-|['compiler_generated'] ),_5} in (case <_219,_215,_218> of (<Event,({_222,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_223> = call _222:('handle_event'-|['compiler_generated'] ) (Event,State) in (let <_6> = {_222,_223} in (apply 'colon'/4 (_214,_6,_217,_218)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_224,_225> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_224,_225}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_226,_227,_228,(_229 = ([('singlequote'-|['compiler_generated'] )|_16]-|['compiler_generated'] )-|['compiler_generated'] ),_230> when ('true'-|['compiler_generated'] ) -> (let <_7> = apply 'maybe_replace'/2 ((34-|['compiler_generated'] ),_230) in (apply 'string'/5 (_226,_227,([_228|([_7|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),_229,_230)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<(#{}#-|['compiler_generated'] ),_231,_232,(_233 = ([('singlequote'-|['compiler_generated'] )|_17]-|['compiler_generated'] )-|['compiler_generated'] ),_234> when ('true'-|['compiler_generated'] ) -> (apply 'incomplete'/6 (('string'-|['compiler_generated'] ),(#{#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] ),_231,_232,_233,_234)-|['compiler_generated'] )-|['compiler_generated'] )
(<_235,_236,_237,_238,_239> when ('true'-|['compiler_generated'] ) -> (let <_8> = call ('erlang'-|['compiler_generated'] ):('iolist_to_binary'-|['compiler_generated'] ) (_237) in (let <_240> = {('string'-|['compiler_generated'] ),_8} in (case <_240,_236,_239> of (<Event,({_243,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_244> = call _243:('handle_event'-|['compiler_generated'] ) (Event,State) in (let <_9> = {_243,_244} in (apply 'maybe_done'/4 (_235,_9,_238,_239)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_5,_245> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_5,_245}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> (case <Rest,Handler,Acc,Stack,Config> of (<_251,_252,_253,([('singlequote'-|['compiler_generated'] )|((_@r0-|['compiler_generated'] ) = ([('key'-|['compiler_generated'] )|_254]-|['compiler_generated'] )-|['compiler_generated'] )]-|['compiler_generated'] ),_255> when ('true'-|['compiler_generated'] ) -> (let <_5> = call ('erlang'-|['compiler_generated'] ):('iolist_to_binary'-|['compiler_generated'] ) (_253) in (let <_256> = {('key'-|['compiler_generated'] ),_5} in (case <_256,_252,_255> of (<Event,({_259,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_260> = call _259:('handle_event'-|['compiler_generated'] ) (Event,State) in (let <_6> = {_259,_260} in (apply 'colon'/4 (_251,_6,(_@r0-|['compiler_generated'] ),_255)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_261,_262> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_261,_262}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_263,_264,_265,([('singlequote'-|['compiler_generated'] )|_266]-|['compiler_generated'] ),_267> when ('true'-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('iolist_to_binary'-|['compiler_generated'] ) (_265) in (let <_268> = {('string'-|['compiler_generated'] ),_7} in (case <_268,_264,_267> of (<Event,({_271,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_272> = call _271:('handle_event'-|['compiler_generated'] ) (Event,State) in (let <_8> = {_271,_272} in (apply 'maybe_done'/4 (_263,_8,_266,_267)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_5,_273> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_5,_273}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_274,_275,_276,_277,_278> when ('true'-|['compiler_generated'] ) -> (apply 'string'/5 (_274,_275,([_276|([39]-|['compiler_generated'] )]-|['compiler_generated'] ),_277,_278)-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_5> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(_281 = ({('config'-|['compiler_generated'] ),_117,_118,('true'-|['compiler_generated'] ),_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _281 of (<({('config'-|['compiler_generated'] ),_132,_rec18,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec18 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_283> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_283}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_147> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_5|[]]],Stack,Config)
<#{#<92>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> apply 'unescape'/5 (Rest,Handler,Acc,Stack,Config)
<Bin = #{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,'true',_46,_47,_48}> when 'true' -> case X of <_49> when call 'erlang':'<' (X,128) -> apply 'count'/5 (Bin,Handler,Acc,Stack,Config)
<_52> when 'true' -> let <_6> = apply 'json_escape_sequence'/1 (X) in apply 'string'/5 (Rest,Handler,[Acc|[_6|[]]],Stack,Config) end
<#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<168>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_8> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<40>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(_292 = ({('config'-|['compiler_generated'] ),_163,_164,('true'-|['compiler_generated'] ),_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _292 of (<({('config'-|['compiler_generated'] ),_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_rec19,_191,_192}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec19 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<168>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((8232-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_193> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<168>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_8|[]]],Stack,Config)
<#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<169>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_9> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<41>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(_299 = ({('config'-|['compiler_generated'] ),_163,_164,('true'-|['compiler_generated'] ),_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _299 of (<({('config'-|['compiler_generated'] ),_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_rec19,_191,_192}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec19 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<169>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((8233-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_193> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<226>(8,1,'integer',['unsigned'|['big']]),#<128>(8,1,'integer',['unsigned'|['big']]),#<169>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_9|[]]],Stack,Config)
<Bin = #{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<_53>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_54,_55,_56,_57,_58,_59,_60,_61,_62,'true',_63,_64,_65,_66,_67,_68}> when call 'erlang':'>' (X,31) -> apply 'count'/5 (Bin,Handler,Acc,Stack,Config)
<Bin = #{#<_69>('undefined','undefined','utf8',['unsigned'|['big']]),#<_70>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_71,_72,_73,_74,_75,_76,_77,_78,_79,'false',_80,_81,_82,_83,_84,_85}> when 'true' -> apply 'count'/5 (Bin,Handler,Acc,Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config','true',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100}> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[X|[]]],Stack,Config)
<#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<190>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<190>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{}#,Handler,Acc,Stack,Config> when 'true' -> apply 'incomplete'/6 ('string',#{}#,Handler,Acc,Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when call 'erlang':'>=' (X,192) -> let <_10> = #{#<X>(8,1,'integer',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_10,Handler,Acc,Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when let <_11> = call 'erlang':'>=' (X,224) in let <_12> = call 'erlang':'>=' (Y,128) in call 'erlang':'and' (_11,_12) -> let <_13> = #{#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_13,Handler,Acc,Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']]),#<Z>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try let <_14> = call 'erlang':'>=' (X,224) in let <_15> = call 'erlang':'>=' (Y,128) in let <_16> = call 'erlang':'>=' (Z,128) in let <_17> = call 'erlang':'and' (_15,_16) in call 'erlang':'and' (_14,_17) of <Try> -> Try catch <T,R> -> 'false' -> let <_18> = #{#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']]),#<Z>(8,1,'integer',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_18,Handler,Acc,Stack,Config)
<#{#<237>(8,1,'integer',['unsigned'|['big']]),#<X>(8,1,'integer',['unsigned'|['big']]),#<_101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_102,_103,_104,_105,_106,_107,'false',_108,_109,_110,_111,_112,_113,_114,_115,_116}> when call 'erlang':'>=' (X,160) -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_117,_118,_119,_120,_121,_122,'false',_123,_124,_125,_126,_127,_128,_129,_130,_131}> when let <_19> = call 'erlang':'>=' (X,192) in let <_20> = call 'erlang':'=<' (X,223) in call 'erlang':'and' (_19,_20) -> apply 'strip_continuations'/6 (Rest,Handler,Acc,Stack,Config,1)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_132,_133,_134,_135,_136,_137,'false',_138,_139,_140,_141,_142,_143,_144,_145,_146}> when let <_21> = call 'erlang':'>=' (X,224) in let <_22> = call 'erlang':'=<' (X,239) in call 'erlang':'and' (_21,_22) -> apply 'strip_continuations'/6 (Rest,Handler,Acc,Stack,Config,2)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_147,_148,_149,_150,_151,_152,'false',_153,_154,_155,_156,_157,_158,_159,_160,_161}> when let <_23> = call 'erlang':'>=' (X,240) in let <_24> = call 'erlang':'=<' (X,247) in call 'erlang':'and' (_23,_24) -> apply 'strip_continuations'/6 (Rest,Handler,Acc,Stack,Config,3)
<#{#<_162>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_163,_164,_165,_166,_167,_168,'false',_169,_170,_171,_172,_173,_174,_175,_176,_177}> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<Bin,Handler,Acc,Stack,Config> when 'true' -> (case Config of (<({'config',_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_rec12,_192}-|['compiler_generated'] )> when 'true' -> case _rec12 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_27> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','string',Handler,Acc,Stack},_27) end-|['compiler_generated'] )
(<_193> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'count'/5 = fun (_0,_1,_2,_3,_4) -> let <Size> = apply 'count'/3 (_0,0,_4) in case _0 of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'string'/5 (Rest,_1,[_2|[Clean|[]]],_3,_4)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'count'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_3,Config)
<#{#<33>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_4,Config)
<#{#<34>(8,1,'integer',['unsigned'|['big']]),#<_104>('all',8,'binary',['unsigned'|['big']])}#,N,_105> when 'true' -> N
<#{#<35>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_5,Config)
<#{#<36>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_6,Config)
<#{#<37>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_7,Config)
<#{#<38>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_8,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<_106>('all',8,'binary',['unsigned'|['big']])}#,N,_107> when 'true' -> N
<#{#<40>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_9,Config)
<#{#<41>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_10,Config)
<#{#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_11,Config)
<#{#<43>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_12> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_12,Config)
<#{#<44>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_13> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_13,Config)
<#{#<45>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_14> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_14,Config)
<#{#<46>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_15> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_15,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<_108>('all',8,'binary',['unsigned'|['big']])}#,N,_109> when 'true' -> N
<#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_16> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_16,Config)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_17> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_17,Config)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_18> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_18,Config)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_19> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_19,Config)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_20> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_20,Config)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_21> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_21,Config)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_22> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_22,Config)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_23> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_23,Config)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_24> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_24,Config)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_25> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_25,Config)
<#{#<58>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_26> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_26,Config)
<#{#<59>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_27> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_27,Config)
<#{#<60>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_28> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_28,Config)
<#{#<61>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_29> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_29,Config)
<#{#<62>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_30> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_30,Config)
<#{#<63>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_31> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_31,Config)
<#{#<64>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_32> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_32,Config)
<#{#<65>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_33> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_33,Config)
<#{#<66>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_34> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_34,Config)
<#{#<67>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_35> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_35,Config)
<#{#<68>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_36> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_36,Config)
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_37> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_37,Config)
<#{#<70>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_38> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_38,Config)
<#{#<71>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_39> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_39,Config)
<#{#<72>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_40> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_40,Config)
<#{#<73>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_41> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_41,Config)
<#{#<74>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_42> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_42,Config)
<#{#<75>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_43> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_43,Config)
<#{#<76>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_44> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_44,Config)
<#{#<77>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_45> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_45,Config)
<#{#<78>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_46> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_46,Config)
<#{#<79>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_47> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_47,Config)
<#{#<80>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_48> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_48,Config)
<#{#<81>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_49> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_49,Config)
<#{#<82>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_50> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_50,Config)
<#{#<83>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_51> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_51,Config)
<#{#<84>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_52> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_52,Config)
<#{#<85>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_53> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_53,Config)
<#{#<86>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_54> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_54,Config)
<#{#<87>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_55> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_55,Config)
<#{#<88>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_56> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_56,Config)
<#{#<89>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_57> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_57,Config)
<#{#<90>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_58> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_58,Config)
<#{#<91>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_59> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_59,Config)
<#{#<92>(8,1,'integer',['unsigned'|['big']]),#<_110>('all',8,'binary',['unsigned'|['big']])}#,N,_111> when 'true' -> N
<#{#<93>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_60> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_60,Config)
<#{#<94>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_61> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_61,Config)
<#{#<95>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_62> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_62,Config)
<#{#<96>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_63> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_63,Config)
<#{#<97>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_64> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_64,Config)
<#{#<98>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_65> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_65,Config)
<#{#<99>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_66> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_66,Config)
<#{#<100>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_67> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_67,Config)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_68> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_68,Config)
<#{#<102>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_69> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_69,Config)
<#{#<103>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_70> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_70,Config)
<#{#<104>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_71> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_71,Config)
<#{#<105>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_72> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_72,Config)
<#{#<106>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_73> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_73,Config)
<#{#<107>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_74> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_74,Config)
<#{#<108>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_75> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_75,Config)
<#{#<109>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_76> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_76,Config)
<#{#<110>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_77> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_77,Config)
<#{#<111>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_78> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_78,Config)
<#{#<112>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_79> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_79,Config)
<#{#<113>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_80> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_80,Config)
<#{#<114>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_81> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_81,Config)
<#{#<115>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_82> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_82,Config)
<#{#<116>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_83> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_83,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_84> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_84,Config)
<#{#<118>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_85> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_85,Config)
<#{#<119>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_86> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_86,Config)
<#{#<120>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_87> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_87,Config)
<#{#<121>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_88> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_88,Config)
<#{#<122>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_89> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_89,Config)
<#{#<123>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_90> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_90,Config)
<#{#<124>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_91> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_91,Config)
<#{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_92> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_92,Config)
<#{#<126>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_93> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_93,Config)
<#{#<127>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> let <_94> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_94,Config)
<#{#<_112>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config = {'config','true',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127}> when 'true' -> let <_95> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_95,Config)
<#{#<_128>('undefined','undefined','utf8',['unsigned'|['big']]),#<_129>('all',8,'binary',['unsigned'|['big']])}#,N,{'config',_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,'true',_142,_143,_144}> when 'true' -> N
<#{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config = {'config',_145,_146,_147,_148,_149,_150,_151,_152,_153,'false',_154,_155,_156,_157,_158,_159}> when call 'erlang':'<' (X,32) -> let <_96> = call 'erlang':'+' (N,1) in apply 'count'/3 (Rest,_96,Config)
<#{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<_160>('all',8,'binary',['unsigned'|['big']])}#,N,{'config',_161,_162,_163,_164,_165,_166,_167,_168,_169,'true',_170,_171,_172,_173,_174,_175}> when call 'erlang':'<' (X,32) -> N
<#{#<X>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N,Config> when 'true' -> case X of <_176> when call 'erlang':'<' (X,2048) -> let <_97> = call 'erlang':'+' (N,2) in apply 'count'/3 (Rest,_97,Config)
<8232> when 'true' -> N
<8233> when 'true' -> N
<_179> when call 'erlang':'<' (X,65536) -> let <_98> = call 'erlang':'+' (N,3) in apply 'count'/3 (Rest,_98,Config)
<_182> when 'true' -> let <_99> = call 'erlang':'+' (N,4) in apply 'count'/3 (Rest,_99,Config) end
<_183,N,_184> when 'true' -> N end
'doublequote'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Rest,Handler,Acc,Stack = ['key'|_15],Config> when 'true' -> let <_5> = call 'erlang':'iolist_to_binary' (Acc) in let <_209> = {('key'-|['compiler_generated'] ),_5} in (case <_209,Handler,Config> of (<Event,({_212,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_213> = call _212:('handle_event'-|['compiler_generated'] ) (Event,State) in let <_6> = {_212,_213} in apply 'colon'/4 (Rest,_6,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_214,_215> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_214,_215}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Rest,Handler,Acc,Stack = ['singlequote'|_16],Config> when 'true' -> let <_7> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_218,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_102,_103,('true'-|['compiler_generated'] ),_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_7|[]]],Stack,Config)
<#{}#,Handler,Acc,Stack = ['singlequote'|_17],Config> when 'true' -> apply 'incomplete'/6 ('string',#{#<34>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config)
<Rest,Handler,Acc,Stack,Config> when 'true' -> let <_8> = call 'erlang':'iolist_to_binary' (Acc) in let <_224> = {('string'-|['compiler_generated'] ),_8} in (case <_224,Handler,Config> of (<Event,({_227,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_228> = call _227:('handle_event'-|['compiler_generated'] ) (Event,State) in let <_9> = {_227,_228} in apply 'maybe_done'/4 (Rest,_9,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_5,_229> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_5,_229}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'singlequote'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Rest,Handler,Acc,['singlequote'|_@r0 = ['key'|Stack]],Config> when 'true' -> let <_5> = call 'erlang':'iolist_to_binary' (Acc) in let <_14> = {('key'-|['compiler_generated'] ),_5} in (case <_14,Handler,Config> of (<Event,({_17,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_18> = call _17:('handle_event'-|['compiler_generated'] ) (Event,State) in let <_6> = {_17,_18} in apply 'colon'/4 (Rest,_6,_@r0,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_19,_20> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_19,_20}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Rest,Handler,Acc,['singlequote'|Stack],Config> when 'true' -> let <_7> = call 'erlang':'iolist_to_binary' (Acc) in let <_21> = {('string'-|['compiler_generated'] ),_7} in (case <_21,Handler,Config> of (<Event,({_24,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_25> = call _24:('handle_event'-|['compiler_generated'] ) (Event,State) in let <_8> = {_24,_25} in apply 'maybe_done'/4 (Rest,_8,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_5,_26> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_5,_26}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Rest,Handler,Acc,Stack,Config> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[39]],Stack,Config) end
'strip_continuations'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <#{#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config,0> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{#<X>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config,N> when let <_6> = call 'erlang':'>=' (X,128) in let <_7> = call 'erlang':'=<' (X,191) in call 'erlang':'and' (_6,_7) -> let <_8> = call 'erlang':'-' (N,1) in apply 'strip_continuations'/6 (Rest,Handler,Acc,Stack,Config,_8)
<#{}#,Handler,Acc,Stack,Config,N> when 'true' -> case N of <1> when 'true' -> apply 'incomplete'/6 ('string',#{#<192>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config)
<2> when 'true' -> apply 'incomplete'/6 ('string',#{#<224>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config)
<3> when 'true' -> apply 'incomplete'/6 ('string',#{#<240>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config)
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<#{#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config,_16> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
(<_15,_14,_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11,_10})-|[{'function_name',{'strip_continuations',6}}] )-|['compiler_generated'] ) end
'unescape'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <#{#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config','true',_417,_418,_419,_420,_421,_422,_423,_424,_425,_426,_427,_428,_429,_430,_431}> when 'true' -> let <_5> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in apply 'string'/5 (_5,Handler,[Acc|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{#<C>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config','true',_432,_433,_434,_435,_436,_437,_438,_439,_440,_441,_442,_443,_444,_445,_446}> when 'true' -> let <_6> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}# in apply 'string'/5 (Rest,Handler,[Acc|[_6|[]]],Stack,Config)
<#{#<98>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_7> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<8>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_27,_28,('true'-|['compiler_generated'] ),_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((8-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<8>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_7|[]]],Stack,Config)
<#{#<102>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_8> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<12>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_72,_73,('true'-|['compiler_generated'] ),_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((12-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<12>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_8|[]]],Stack,Config)
<#{#<110>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_9> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<10>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_57,_58,('true'-|['compiler_generated'] ),_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((10-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<10>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_9|[]]],Stack,Config)
<#{#<114>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_10> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<13>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_87,_88,('true'-|['compiler_generated'] ),_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((13-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<13>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_10|[]]],Stack,Config)
<#{#<116>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_11> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<9>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_42,_43,('true'-|['compiler_generated'] ),_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 ((9-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<9>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_11|[]]],Stack,Config)
<#{#<34>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_12> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_102,_103,('true'-|['compiler_generated'] ),_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_12|[]]],Stack,Config)
<#{#<39>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config = {'config',_447,_448,_449,_450,_451,_452,_453,'false',_454,_455,_456,_457,_458,_459,_460,_461}> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<39>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
<#{#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_13> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<({('config'-|['compiler_generated'] ),_148,_149,('true'-|['compiler_generated'] ),_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_13|[]]],Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when 'true' -> let <_14> = case Config of (<({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(_595 = ({('config'-|['compiler_generated'] ),_117,_118,('true'-|['compiler_generated'] ),_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _595 of (<({('config'-|['compiler_generated'] ),_132,_rec18,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec18 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_597> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_597}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_147> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_X_Config> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_14|[]]],Stack,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<F>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<G>(8,1,'integer',['unsigned'|['big']]),#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']]),#<Z>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try (let <_25> = case call 'erlang':'==' (A,56) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,57) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,98) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (A,66)-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> _15-|['compiler_generated'] ) end in let <_26> = call 'erlang':'=:=' ((_25-|['compiler_generated'] ),'true') in (let <_41> = case call 'erlang':'==' (X,99) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,101) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,102) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,67) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,68) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (X,69) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (X,70)-|['compiler_generated'] )
(<_33> when 'true' -> _33-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_32> when 'true' -> _32-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_31> when 'true' -> _31-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when 'true' -> _30-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when 'true' -> _29-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_28> when 'true' -> _28-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_27> when 'true' -> _27-|['compiler_generated'] ) end in let <_42> = call 'erlang':'=:=' ((_41-|['compiler_generated'] ),'true') in (let <_45> = case call 'erlang':'==' (F,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (F,68)-|['compiler_generated'] )
(<_43> when 'true' -> _43-|['compiler_generated'] ) end in let <_46> = call 'erlang':'=:=' ((_45-|['compiler_generated'] ),'true') in (let <_49> = case call 'erlang':'==' (G,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (G,68)-|['compiler_generated'] )
(<_47> when 'true' -> _47-|['compiler_generated'] ) end in let <_50> = call 'erlang':'=:=' ((_49-|['compiler_generated'] ),'true') in let <_54> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_52> when 'true' -> _52-|['compiler_generated'] ) end in (let <_63> = case _54 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_58> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_56> when 'true' -> _56-|['compiler_generated'] ) end in (case _58 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_59> when 'true' -> _59-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_55> when 'true' -> _55-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_51> when 'true' -> _51-|['compiler_generated'] ) end in let <_64> = call 'erlang':'=:=' ((_63-|['compiler_generated'] ),'true') in let <_68> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_66> when 'true' -> _66-|['compiler_generated'] ) end in (let <_77> = case _68 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_72> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_70> when 'true' -> _70-|['compiler_generated'] ) end in (case _72 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_73> when 'true' -> _73-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_69> when 'true' -> _69-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> _65-|['compiler_generated'] ) end in let <_78> = call 'erlang':'=:=' ((_77-|['compiler_generated'] ),'true') in let <_82> = case call 'erlang':'>=' (Y,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_80> when 'true' -> _80-|['compiler_generated'] ) end in (let <_91> = case _82 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_86> = case call 'erlang':'>=' (Y,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_84> when 'true' -> _84-|['compiler_generated'] ) end in (case _86 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Y,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_87> when 'true' -> _87-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_83> when 'true' -> _83-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_79> when 'true' -> _79-|['compiler_generated'] ) end in let <_92> = call 'erlang':'=:=' ((_91-|['compiler_generated'] ),'true') in let <_96> = case call 'erlang':'>=' (Z,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_94> when 'true' -> _94-|['compiler_generated'] ) end in (let <_105> = case _96 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_100> = case call 'erlang':'>=' (Z,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_98> when 'true' -> _98-|['compiler_generated'] ) end in (case _100 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Z,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_101> when 'true' -> _101-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_97> when 'true' -> _97-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_93> when 'true' -> _93-|['compiler_generated'] ) end in let <_106> = call 'erlang':'=:=' ((_105-|['compiler_generated'] ),'true') in let <_107> = call 'erlang':'and' (_92,_106) in let <_108> = call 'erlang':'and' (_78,_107) in let <_109> = call 'erlang':'and' (_64,_108) in let <_110> = call 'erlang':'and' (_50,_109) in let <_111> = call 'erlang':'and' (_46,_110) in let <_112> = call 'erlang':'and' (_42,_111) in call 'erlang':'and' (_26,_112)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <High> = call 'erlang':'list_to_integer' ([100|[A|[B|[C|[]]]]],16) in let <Low> = call 'erlang':'list_to_integer' ([100|[X|[Y|[Z|[]]]]],16) in let <_116> = call 'erlang':'-' (High,55296) in let <_117> = call 'erlang':'*' (_116,1024) in let <_115> = call 'erlang':'-' (Low,56320) in let <_118> = call 'erlang':'+' (_117,_115) in let <Codepoint> = call 'erlang':'+' (_118,65536) in let <_120> = #{#<Codepoint>('undefined','undefined','utf8',['unsigned'|['big']])}# in apply 'string'/5 (Rest,Handler,[Acc|[_120|[]]],Stack,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<F0>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<W>(8,1,'integer',['unsigned'|['big']]),#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']]),#<Z>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try (let <_131> = case call 'erlang':'==' (A,56) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,57) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,98) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (A,66)-|['compiler_generated'] )
(<_125> when 'true' -> _125-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_124> when 'true' -> _124-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_123> when 'true' -> _123-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_122> when 'true' -> _122-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_121> when 'true' -> _121-|['compiler_generated'] ) end in let <_132> = call 'erlang':'=:=' ((_131-|['compiler_generated'] ),'true') in (let <_135> = case call 'erlang':'==' (F0,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (F0,68)-|['compiler_generated'] )
(<_133> when 'true' -> _133-|['compiler_generated'] ) end in let <_136> = call 'erlang':'=:=' ((_135-|['compiler_generated'] ),'true') in let <_140> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_138> when 'true' -> _138-|['compiler_generated'] ) end in (let <_149> = case _140 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_144> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_142> when 'true' -> _142-|['compiler_generated'] ) end in (case _144 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_145> when 'true' -> _145-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_141> when 'true' -> _141-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_137> when 'true' -> _137-|['compiler_generated'] ) end in let <_150> = call 'erlang':'=:=' ((_149-|['compiler_generated'] ),'true') in let <_154> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_152> when 'true' -> _152-|['compiler_generated'] ) end in (let <_163> = case _154 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_158> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_156> when 'true' -> _156-|['compiler_generated'] ) end in (case _158 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_159> when 'true' -> _159-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_155> when 'true' -> _155-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_151> when 'true' -> _151-|['compiler_generated'] ) end in let <_164> = call 'erlang':'=:=' ((_163-|['compiler_generated'] ),'true') in let <_168> = case call 'erlang':'>=' (W,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (W,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_166> when 'true' -> _166-|['compiler_generated'] ) end in (let <_177> = case _168 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_172> = case call 'erlang':'>=' (W,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (W,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_170> when 'true' -> _170-|['compiler_generated'] ) end in (case _172 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (W,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (W,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_173> when 'true' -> _173-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_169> when 'true' -> _169-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_165> when 'true' -> _165-|['compiler_generated'] ) end in let <_178> = call 'erlang':'=:=' ((_177-|['compiler_generated'] ),'true') in let <_182> = case call 'erlang':'>=' (X,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (X,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_180> when 'true' -> _180-|['compiler_generated'] ) end in (let <_191> = case _182 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_186> = case call 'erlang':'>=' (X,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (X,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_184> when 'true' -> _184-|['compiler_generated'] ) end in (case _186 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (X,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (X,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_187> when 'true' -> _187-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_183> when 'true' -> _183-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_179> when 'true' -> _179-|['compiler_generated'] ) end in let <_192> = call 'erlang':'=:=' ((_191-|['compiler_generated'] ),'true') in let <_196> = case call 'erlang':'>=' (Y,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_194> when 'true' -> _194-|['compiler_generated'] ) end in (let <_205> = case _196 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_200> = case call 'erlang':'>=' (Y,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_198> when 'true' -> _198-|['compiler_generated'] ) end in (case _200 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Y,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Y,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_201> when 'true' -> _201-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_197> when 'true' -> _197-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_193> when 'true' -> _193-|['compiler_generated'] ) end in let <_206> = call 'erlang':'=:=' ((_205-|['compiler_generated'] ),'true') in let <_210> = case call 'erlang':'>=' (Z,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_208> when 'true' -> _208-|['compiler_generated'] ) end in (let <_219> = case _210 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_214> = case call 'erlang':'>=' (Z,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_212> when 'true' -> _212-|['compiler_generated'] ) end in (case _214 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Z,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Z,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_215> when 'true' -> _215-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_211> when 'true' -> _211-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_207> when 'true' -> _207-|['compiler_generated'] ) end in let <_220> = call 'erlang':'=:=' ((_219-|['compiler_generated'] ),'true') in let <_221> = call 'erlang':'and' (_206,_220) in let <_222> = call 'erlang':'and' (_192,_221) in let <_223> = call 'erlang':'and' (_178,_222) in let <_224> = call 'erlang':'and' (_164,_223) in let <_225> = call 'erlang':'and' (_150,_224) in let <_226> = call 'erlang':'and' (_136,_225) in call 'erlang':'and' (_132,_226)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case Config of (<({'config',_462,_463,_464,_465,_466,_467,_rec13,_468,_469,_470,_471,_472,_473,_474,_475,_476}-|['compiler_generated'] )> when 'true' -> case _rec13 of <'true'> when 'true' -> (case Config of (<({'config',_478,_479,_480,_481,_482,_483,_484,_485,_486,_487,_488,_489,_490,_491,_rec14,_492}-|['compiler_generated'] )> when 'true' -> case _rec14 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_232> = #{#<117>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<W>(8,1,'integer',['unsigned'|['big']]),#<X>(8,1,'integer',['unsigned'|['big']]),#<Y>(8,1,'integer',['unsigned'|['big']]),#<Z>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_231> = call 'jsx_config':'config_to_list' (Config) in apply F (_232,{'decoder','string',Handler,Acc,Stack},_231) end-|['compiler_generated'] )
(<_493> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]]],Stack,Config)
(<_234> when 'true' -> primop 'match_fail' ({'case_clause',_234})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_477> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<F>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try (let <_245> = case call 'erlang':'==' (A,56) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,57) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,98) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (A,66)-|['compiler_generated'] )
(<_239> when 'true' -> _239-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_238> when 'true' -> _238-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_237> when 'true' -> _237-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_236> when 'true' -> _236-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_235> when 'true' -> _235-|['compiler_generated'] ) end in let <_246> = call 'erlang':'=:=' ((_245-|['compiler_generated'] ),'true') in (let <_249> = case call 'erlang':'==' (F,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (F,68)-|['compiler_generated'] )
(<_247> when 'true' -> _247-|['compiler_generated'] ) end in let <_250> = call 'erlang':'=:=' ((_249-|['compiler_generated'] ),'true') in let <_254> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_252> when 'true' -> _252-|['compiler_generated'] ) end in (let <_263> = case _254 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_258> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_256> when 'true' -> _256-|['compiler_generated'] ) end in (case _258 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_259> when 'true' -> _259-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_255> when 'true' -> _255-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_251> when 'true' -> _251-|['compiler_generated'] ) end in let <_264> = call 'erlang':'=:=' ((_263-|['compiler_generated'] ),'true') in let <_268> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_266> when 'true' -> _266-|['compiler_generated'] ) end in (let <_277> = case _268 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_272> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_270> when 'true' -> _270-|['compiler_generated'] ) end in (case _272 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_273> when 'true' -> _273-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_269> when 'true' -> _269-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_265> when 'true' -> _265-|['compiler_generated'] ) end in let <_278> = call 'erlang':'=:=' ((_277-|['compiler_generated'] ),'true') in let <_279> = call 'erlang':'and' (_264,_278) in let <_280> = call 'erlang':'and' (_250,_279) in call 'erlang':'and' (_246,_280)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_281> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_281,Handler,Acc,Stack,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<F>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try (let <_292> = case call 'erlang':'==' (A,56) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,57) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,98) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'==' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (A,66)-|['compiler_generated'] )
(<_286> when 'true' -> _286-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_285> when 'true' -> _285-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_284> when 'true' -> _284-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_283> when 'true' -> _283-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_282> when 'true' -> _282-|['compiler_generated'] ) end in let <_293> = call 'erlang':'=:=' ((_292-|['compiler_generated'] ),'true') in (let <_296> = case call 'erlang':'==' (F,100) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'==' (F,68)-|['compiler_generated'] )
(<_294> when 'true' -> _294-|['compiler_generated'] ) end in let <_297> = call 'erlang':'=:=' ((_296-|['compiler_generated'] ),'true') in let <_301> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_299> when 'true' -> _299-|['compiler_generated'] ) end in (let <_310> = case _301 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_305> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_303> when 'true' -> _303-|['compiler_generated'] ) end in (case _305 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_306> when 'true' -> _306-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_302> when 'true' -> _302-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_298> when 'true' -> _298-|['compiler_generated'] ) end in let <_311> = call 'erlang':'=:=' ((_310-|['compiler_generated'] ),'true') in let <_315> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_313> when 'true' -> _313-|['compiler_generated'] ) end in (let <_324> = case _315 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_319> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_317> when 'true' -> _317-|['compiler_generated'] ) end in (case _319 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_320> when 'true' -> _320-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_316> when 'true' -> _316-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_312> when 'true' -> _312-|['compiler_generated'] ) end in let <_325> = call 'erlang':'=:=' ((_324-|['compiler_generated'] ),'true') in let <_326> = call 'erlang':'and' (_311,_325) in let <_327> = call 'erlang':'and' (_297,_326) in call 'erlang':'and' (_293,_327)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_328> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_328,Handler,Acc,Stack,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<D>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,Stack,Config> when try let <_332> = case call 'erlang':'>=' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_330> when 'true' -> _330-|['compiler_generated'] ) end in (let <_341> = case _332 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_336> = case call 'erlang':'>=' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_334> when 'true' -> _334-|['compiler_generated'] ) end in (case _336 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (A,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_337> when 'true' -> _337-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_333> when 'true' -> _333-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_329> when 'true' -> _329-|['compiler_generated'] ) end in let <_342> = call 'erlang':'=:=' ((_341-|['compiler_generated'] ),'true') in let <_346> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_344> when 'true' -> _344-|['compiler_generated'] ) end in (let <_355> = case _346 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_350> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_348> when 'true' -> _348-|['compiler_generated'] ) end in (case _350 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_351> when 'true' -> _351-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_347> when 'true' -> _347-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_343> when 'true' -> _343-|['compiler_generated'] ) end in let <_356> = call 'erlang':'=:=' ((_355-|['compiler_generated'] ),'true') in let <_360> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_358> when 'true' -> _358-|['compiler_generated'] ) end in (let <_369> = case _360 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_364> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_362> when 'true' -> _362-|['compiler_generated'] ) end in (case _364 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_365> when 'true' -> _365-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_361> when 'true' -> _361-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_357> when 'true' -> _357-|['compiler_generated'] ) end in let <_370> = call 'erlang':'=:=' ((_369-|['compiler_generated'] ),'true') in let <_374> = case call 'erlang':'>=' (D,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (D,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_372> when 'true' -> _372-|['compiler_generated'] ) end in (let <_383> = case _374 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_378> = case call 'erlang':'>=' (D,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (D,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_376> when 'true' -> _376-|['compiler_generated'] ) end in (case _378 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (D,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (D,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_379> when 'true' -> _379-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_375> when 'true' -> _375-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_371> when 'true' -> _371-|['compiler_generated'] ) end in let <_384> = call 'erlang':'=:=' ((_383-|['compiler_generated'] ),'true') in let <_385> = call 'erlang':'and' (_370,_384) in let <_386> = call 'erlang':'and' (_356,_385) in call 'erlang':'and' (_342,_386)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> case call 'erlang':'list_to_integer' ([A|[B|[C|[D|[]]]]],16) of <Codepoint> when let <_387> = call 'erlang':'<' (Codepoint,55296) in let <_388> = call 'erlang':'>' (Codepoint,57343) in call 'erlang':'or' (_387,_388) -> let <_389> = case <Codepoint,Config> of (<_602,({('config'-|['compiler_generated'] ),('true'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{(#<_602>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(8-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_27,_28,('true'-|['compiler_generated'] ),_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(9-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_42,_43,('true'-|['compiler_generated'] ),_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(10-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_57,_58,('true'-|['compiler_generated'] ),_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(12-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_72,_73,('true'-|['compiler_generated'] ),_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(13-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_87,_88,('true'-|['compiler_generated'] ),_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(34-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_102,_103,('true'-|['compiler_generated'] ),_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<34>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<(47-|['compiler_generated'] ),(_603 = ({('config'-|['compiler_generated'] ),_117,_118,('true'-|['compiler_generated'] ),_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _603 of (<({('config'-|['compiler_generated'] ),_132,_rec18,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec18 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<47>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<_605> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_605}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_147> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<(92-|['compiler_generated'] ),({('config'-|['compiler_generated'] ),_148,_149,('true'-|['compiler_generated'] ),_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{#<92>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']])}#-|['compiler_generated'] )-|['compiler_generated'] )
(<X,(_607 = ({('config'-|['compiler_generated'] ),_163,_164,('true'-|['compiler_generated'] ),_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}-|['compiler_generated'] )-|['compiler_generated'] )> when (let <_5> = call ('erlang'-|['compiler_generated'] ):('=='-|['compiler_generated'] ) (X,(8232-|['compiler_generated'] )) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('=='-|['compiler_generated'] ) (X,(8233-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('or'-|['compiler_generated'] ) (_5,_6)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) -> (case _607 of (<({('config'-|['compiler_generated'] ),_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_rec19,_191,_192}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec19 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (#{(#<X>(('undefined'-|['compiler_generated'] ),('undefined'-|['compiler_generated'] ),('utf8'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 (X)-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_193> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<X,({('config'-|['compiler_generated'] ),_194,_195,('true'-|['compiler_generated'] ),_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (X,(32-|['compiler_generated'] ))-|['compiler_generated'] ) -> (apply 'json_escape_sequence'/1 (X)-|['compiler_generated'] )-|['compiler_generated'] )
(<X,_X_Config> when ('true'-|['compiler_generated'] ) -> (#{(#<X>(('undefined'-|['compiler_generated'] ),('undefined'-|['compiler_generated'] ),('utf8'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'string'/5 (Rest,Handler,[Acc|[_389|[]]],Stack,Config)
<_494> when (try (let <_392> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Config,('config'-|['compiler_generated'] ),(17-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_390-|['compiler_generated'] )> when 'true' -> (_390-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_393> = call 'erlang':'=:=' ((_392-|['compiler_generated'] ),'true') in let <_394> = call 'erlang':'element' (8,Config) in let <_395> = call 'erlang':'=:=' (_394,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_393,_395)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Config of (<({'config',_495,_496,_497,_498,_499,_500,_501,_502,_503,_504,_505,_506,_507,_508,_rec15,_509}-|['compiler_generated'] )> when 'true' -> case _rec15 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_399> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']]),#<D>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_398> = call 'jsx_config':'config_to_list' (Config) in apply F (_399,{'decoder','string',Handler,Acc,Stack},_398) end-|['compiler_generated'] )
(<_510> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_511> when 'true' -> apply 'string'/5 (Rest,Handler,[Acc|[#{#<239>(8,1,'integer',['unsigned'|['big']]),#<191>(8,1,'integer',['unsigned'|['big']]),#<189>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config) end
<Bin,Handler,Acc,Stack,Config> when 'true' -> case apply 'is_partial_escape'/1 (Bin) of <'true'> when 'true' -> let <_402> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}# in apply 'incomplete'/6 ('string',_402,Handler,Acc,Stack,Config)
<'false'> when 'true' -> (case Config of (<({'config',_512,_513,_514,_515,_516,_517,_518,_519,_rec16,_520,_521,_522,_523,_524,_525,_526}-|['compiler_generated'] )> when 'true' -> case _rec16 of <'true'> when 'true' -> (case Config of (<({'config',_528,_529,_530,_531,_532,_533,_534,_535,_536,_537,_538,_539,_540,_541,_rec17,_542}-|['compiler_generated'] )> when 'true' -> case _rec17 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_408> = #{#<92>(8,1,'integer',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}# in let <_407> = call 'jsx_config':'config_to_list' (Config) in apply F (_408,{'decoder','string',Handler,Acc,Stack},_407) end-|['compiler_generated'] )
(<_543> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> apply 'string'/5 (Bin,Handler,[Acc|[#{#<92>(8,1,'integer',['unsigned'|['big']])}#]],Stack,Config)
(<_410> when 'true' -> primop 'match_fail' ({'case_clause',_410})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_527> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_411> when 'true' -> primop 'match_fail' ({'case_clause',_411})-|['compiler_generated'] ) end end
'is_partial_escape'/1 = fun (_0) -> case _0 of <#{#<117>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}#> when try let <_4> = case call 'erlang':'>=' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> _2-|['compiler_generated'] ) end in (let <_13> = case _4 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_8> = case call 'erlang':'>=' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_6> when 'true' -> _6-|['compiler_generated'] ) end in (case _8 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (A,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_5> when 'true' -> _5-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_1> when 'true' -> _1-|['compiler_generated'] ) end in let <_14> = call 'erlang':'=:=' ((_13-|['compiler_generated'] ),'true') in let <_18> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end in (let <_27> = case _18 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_22> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_20> when 'true' -> _20-|['compiler_generated'] ) end in (case _22 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_23> when 'true' -> _23-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> _15-|['compiler_generated'] ) end in let <_28> = call 'erlang':'=:=' ((_27-|['compiler_generated'] ),'true') in let <_32> = case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_30> when 'true' -> _30-|['compiler_generated'] ) end in (let <_41> = case _32 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_36> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_34> when 'true' -> _34-|['compiler_generated'] ) end in (case _36 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_37> when 'true' -> _37-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_33> when 'true' -> _33-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when 'true' -> _29-|['compiler_generated'] ) end in let <_42> = call 'erlang':'=:=' ((_41-|['compiler_generated'] ),'true') in let <_43> = call 'erlang':'and' (_28,_42) in call 'erlang':'and' (_14,_43)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']]),#<B>(8,1,'integer',['unsigned'|['big']])}#> when try let <_47> = case call 'erlang':'>=' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_45> when 'true' -> _45-|['compiler_generated'] ) end in (let <_56> = case _47 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_51> = case call 'erlang':'>=' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_49> when 'true' -> _49-|['compiler_generated'] ) end in (case _51 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (A,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_52> when 'true' -> _52-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_48> when 'true' -> _48-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> _44-|['compiler_generated'] ) end in let <_57> = call 'erlang':'=:=' ((_56-|['compiler_generated'] ),'true') in let <_61> = case call 'erlang':'>=' (B,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_59> when 'true' -> _59-|['compiler_generated'] ) end in (let <_70> = case _61 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_65> = case call 'erlang':'>=' (B,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_63> when 'true' -> _63-|['compiler_generated'] ) end in (case _65 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (B,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (B,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_66> when 'true' -> _66-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_62> when 'true' -> _62-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> _58-|['compiler_generated'] ) end in let <_71> = call 'erlang':'=:=' ((_70-|['compiler_generated'] ),'true') in call 'erlang':'and' (_57,_71)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<A>(8,1,'integer',['unsigned'|['big']])}#> when try let <_75> = case call 'erlang':'>=' (A,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_73> when 'true' -> _73-|['compiler_generated'] ) end in (let <_84> = case _75 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_79> = case call 'erlang':'>=' (A,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_77> when 'true' -> _77-|['compiler_generated'] ) end in (case _79 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (A,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (A,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_80> when 'true' -> _80-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_76> when 'true' -> _76-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_72> when 'true' -> _72-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_84-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<#{#<117>(8,1,'integer',['unsigned'|['big']])}#> when 'true' -> 'true'
<#{}#> when 'true' -> 'true'
<_86> when 'true' -> 'false' end
'maybe_replace'/2 = fun (_0,_1) -> case <_0,_1> of <C,{'config','true',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' -> #{#<C>(8,1,'integer',['unsigned'|['big']])}#
<8,{'config',_27,_28,'true',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']])}#
<9,{'config',_42,_43,'true',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#
<10,{'config',_57,_58,'true',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#
<12,{'config',_72,_73,'true',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']])}#
<13,{'config',_87,_88,'true',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']])}#
<34,{'config',_102,_103,'true',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<34>(8,1,'integer',['unsigned'|['big']])}#
<47,Config = {'config',_117,_118,'true',_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}> when 'true' -> (case Config of (<({'config',_132,_rec18,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}-|['compiler_generated'] )> when 'true' -> case _rec18 of <'true'> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']])}#
<'false'> when 'true' -> #{#<47>(8,1,'integer',['unsigned'|['big']])}#
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_147> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<92,{'config',_148,_149,'true',_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when 'true' -> #{#<92>(8,1,'integer',['unsigned'|['big']]),#<92>(8,1,'integer',['unsigned'|['big']])}#
<X,Config = {'config',_163,_164,'true',_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}> when let <_5> = call 'erlang':'==' (X,8232) in let <_6> = call 'erlang':'==' (X,8233) in call 'erlang':'or' (_5,_6) -> (case Config of (<({'config',_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_rec19,_191,_192}-|['compiler_generated'] )> when 'true' -> case _rec19 of <'true'> when 'true' -> #{#<X>('undefined','undefined','utf8',['unsigned'|['big']])}#
<'false'> when 'true' -> apply 'json_escape_sequence'/1 (X)
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_193> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<X,{'config',_194,_195,'true',_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208}> when call 'erlang':'<' (X,32) -> apply 'json_escape_sequence'/1 (X)
<X,_X_Config> when 'true' -> #{#<X>('undefined','undefined','utf8',['unsigned'|['big']])}# end
'json_escape_sequence'/1 = fun (_0) -> case _0 of <X> when call 'erlang':'<' (_0,65536) -> case #{#<X>(16,1,'integer',['unsigned'|['big']])}# of <#{#<A>(4,1,'integer',['unsigned'|['big']]),#<B>(4,1,'integer',['unsigned'|['big']]),#<C>(4,1,'integer',['unsigned'|['big']]),#<D>(4,1,'integer',['unsigned'|['big']])}#> when 'true' -> let <_5> = apply 'to_hex'/1 (A) in let <_4> = apply 'to_hex'/1 (B) in let <_3> = apply 'to_hex'/1 (C) in let <_2> = apply 'to_hex'/1 (D) in #{#<92>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<_5>(8,1,'integer',['unsigned'|['big']]),#<_4>(8,1,'integer',['unsigned'|['big']]),#<_3>(8,1,'integer',['unsigned'|['big']]),#<_2>(8,1,'integer',['unsigned'|['big']])}#
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<X> when 'true' -> let <Adjusted> = call 'erlang':'-' (X,65536) in case #{#<Adjusted>(20,1,'integer',['unsigned'|['big']])}# of <#{#<A>(10,1,'integer',['unsigned'|['big']]),#<B>(10,1,'integer',['unsigned'|['big']])}#> when 'true' -> let <_8> = call 'erlang':'+' (A,55296) in let <_9> = apply 'json_escape_sequence'/1 (_8) in let <_10> = call 'erlang':'+' (B,56320) in let <_11> = apply 'json_escape_sequence'/1 (_10) in [_9|[_11|[]]]
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'to_hex'/1 = fun (_0) -> case _0 of <10> when 'true' -> 97
<11> when 'true' -> 98
<12> when 'true' -> 99
<13> when 'true' -> 100
<14> when 'true' -> 101
<15> when 'true' -> 102
<X> when 'true' -> call 'erlang':'+' (X,48) end
'number'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <#{#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,['integer'|Stack],Config> when 'true' -> apply 'number'/5 (Rest,Handler,[Acc|[46|[48|[101]]]],['e'|Stack],Config)
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,['integer'|Stack],Config> when 'true' -> apply 'number'/5 (Rest,Handler,[Acc|[46|[48|[101]]]],['e'|Stack],Config)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,['zero'|Stack],Config> when 'true' -> apply 'number'/5 (Rest,Handler,[Acc|[46|[48|[101]]]],['e'|Stack],Config)
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Acc,['zero'|Stack],Config> when 'true' -> apply 'number'/5 (Rest,Handler,[Acc|[46|[48|[101]]]],['e'|Stack],Config)
<#{}#,Handler,Acc,[State|Stack],Config = {'config',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,'false',_38,_39,_40,_41,_42}> when 'true' -> let <_6> = case State of <'zero'> when 'true' -> 'integer'
<'integer'> when 'true' -> 'integer'
<'decimal'> when 'true' -> 'float'
<'exp'> when 'true' -> 'float'
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in let <_8> = call 'erlang':'iolist_to_binary' (Acc) in apply 'finish_number'/5 (#{}#,Handler,{_6,_8},Stack,Config)
<#{}#,Handler,Acc,Stack,Config> when 'true' -> apply 'incomplete'/6 ('number',#{}#,Handler,Acc,Stack,Config)
<Bin,Handler,Acc,[State|Stack],Config> when 'true' -> let <_10> = case State of <'zero'> when 'true' -> apply 'zero'/2 (Bin,0)
<'integer'> when 'true' -> apply 'integer'/2 (Bin,0)
<'negative'> when 'true' -> apply 'negative'/2 (Bin,0)
<'initialdecimal'> when 'true' -> apply 'initialdecimal'/2 (Bin,0)
<'decimal'> when 'true' -> apply 'decimal'/2 (Bin,0)
<'e'> when 'true' -> apply 'e'/2 (Bin,0)
<'ex'> when 'true' -> apply 'ex'/2 (Bin,0)
<'exp'> when 'true' -> apply 'exp'/2 (Bin,0)
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in case _10 of <{'finish_integer',Size}> when 'true' -> case Bin of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_13> = call 'erlang':'iolist_to_binary' ([Acc|[Clean|[]]]) in apply 'finish_number'/5 (Rest,Handler,{'integer',_13},Stack,Config)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<{'finish_float',Size}> when 'true' -> case Bin of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_15> = call 'erlang':'iolist_to_binary' ([Acc|[Clean|[]]]) in apply 'finish_number'/5 (Rest,Handler,{'float',_15},Stack,Config)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<{'error',Size}> when 'true' -> case Bin of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> (case Config of (<({'config',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec20,_57}-|['compiler_generated'] )> when 'true' -> case _rec20 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_19> = call 'jsx_config':'config_to_list' (Config) in apply F (Rest,{'decoder','number',Handler,[Acc|[Clean|[]]],Stack},_19) end-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
<{NewState,Size}> when 'true' -> case Bin of <#{#<Clean>(Size,8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'number'/5 (Rest,Handler,[Acc|[Clean|[]]],[NewState|Stack],Config)
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end
(<_27,_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26,_25,_24,_23})-|[{'function_name',{'number',5}}] )-|['compiler_generated'] ) end
'zero'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<46>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'initialdecimal'/2 (Rest,_2)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<_5>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> {'integer',N}
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<_6>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> {'integer',N}
<#{}#,N> when 'true' -> {'zero',N}
<_7,N> when 'true' -> {'finish_integer',N} end
'integer'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_11)
<#{#<46>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_12> = call 'erlang':'+' (N,1) in apply 'initialdecimal'/2 (Rest,_12)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<_15>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> {'integer',N}
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<_16>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> {'integer',N}
<#{}#,N> when 'true' -> {'integer',N}
<_17,N> when 'true' -> {'finish_integer',N} end
'negative'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'zero'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'integer'/2 (Rest,_11)
<#{}#,N> when 'true' -> {'negative',N}
<_14,N> when 'true' -> {'error',N} end
'initialdecimal'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_11)
<#{}#,N> when 'true' -> {'initialdecimal',N}
<_14,N> when 'true' -> {'error',N} end
'decimal'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'decimal'/2 (Rest,_11)
<#{#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_12> = call 'erlang':'+' (N,1) in apply 'e'/2 (Rest,_12)
<#{#<69>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_13> = call 'erlang':'+' (N,1) in apply 'e'/2 (Rest,_13)
<#{}#,N> when 'true' -> {'decimal',N}
<_16,N> when 'true' -> {'finish_float',N} end
'e'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_11)
<#{#<43>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_12> = call 'erlang':'+' (N,1) in apply 'ex'/2 (Rest,_12)
<#{#<45>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_13> = call 'erlang':'+' (N,1) in apply 'ex'/2 (Rest,_13)
<#{}#,N> when 'true' -> {'e',N}
<_16,N> when 'true' -> {'error',N} end
'ex'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_11)
<#{}#,N> when 'true' -> {'ex',N}
<_14,N> when 'true' -> {'error',N} end
'exp'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<48>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_2)
<#{#<49>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_3> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_3)
<#{#<50>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_4> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_4)
<#{#<51>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_5> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_5)
<#{#<52>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_6> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_6)
<#{#<53>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_7> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_7)
<#{#<54>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_8> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_8)
<#{#<55>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_9> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_9)
<#{#<56>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_10> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_10)
<#{#<57>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_11> = call 'erlang':'+' (N,1) in apply 'exp'/2 (Rest,_11)
<#{}#,N> when 'true' -> {'exp',N}
<_14,N> when 'true' -> {'finish_float',N} end
'finish_number'/5 = fun (_0,_1,_2,_3,_4) -> let <_5> = case _2 of (<({('integer'-|['compiler_generated'] ),_13}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_14> = call ('erlang'-|['compiler_generated'] ):('binary_to_integer'-|['compiler_generated'] ) (_13) in ({('integer'-|['compiler_generated'] ),_14}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<({('float'-|['compiler_generated'] ),_15}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_16> = call ('erlang'-|['compiler_generated'] ):('binary_to_float'-|['compiler_generated'] ) (_15) in ({('float'-|['compiler_generated'] ),_16}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_17}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case <_5,_1,_4> of (<Event,({_21,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_22> = call _21:('handle_event'-|['compiler_generated'] ) (Event,State) in let <_6> = {_21,_22} in apply 'maybe_done'/4 (_0,_6,_3,_4)-|['compiler_generated'] )-|['compiler_generated'] )
(<_6,_23,_24> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_6,_23,_24}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'format_number'/1 = fun (_0) -> case _0 of <{'integer',Acc}> when 'true' -> let <_1> = call 'erlang':'binary_to_integer' (Acc) in {'integer',_1}
<{'float',Acc}> when 'true' -> let <_2> = call 'erlang':'binary_to_float' (Acc) in {'float',_2}
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'format_number',1}}] )-|['compiler_generated'] ) end
'true'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<114>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_32,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_33> = call _32:('handle_event'-|['compiler_generated'] ) (({'literal','true'}-|['compiler_generated'] ),State) in let <_4> = {_32,_33} in apply 'maybe_done'/4 (Rest,_4,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','true'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<114>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('true',#{#<114>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{#<114>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('true',#{#<114>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('true',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec21,_27}-|['compiler_generated'] )> when 'true' -> case _rec21 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','true',Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'false'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_32,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_33> = call _32:('handle_event'-|['compiler_generated'] ) (({'literal','false'}-|['compiler_generated'] ),State) in let <_4> = {_32,_33} in apply 'maybe_done'/4 (Rest,_4,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','false'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('false',#{#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('false',#{#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{#<97>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('false',#{#<97>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('false',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec22,_27}-|['compiler_generated'] )> when 'true' -> case _rec22 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','false',Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'null'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> (case <Handler,Config> of (<({_32,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_33> = call _32:('handle_event'-|['compiler_generated'] ) (({'literal','null'}-|['compiler_generated'] ),State) in let <_4> = {_32,_33} in apply 'maybe_done'/4 (Rest,_4,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),({'literal','null'}-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('null',#{#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{#<117>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('null',#{#<117>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('null',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec23,_27}-|['compiler_generated'] )> when 'true' -> case _rec23 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','null',Handler,'null',Stack},_7) end-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'comment'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Resume,['comment'|Stack],Config> when 'true' -> apply 'resume'/6 (Rest,Resume,Handler,'unused',Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Resume,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,Resume,['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Resume,Stack = ['multicomment'|_17],Config> when 'true' -> apply 'incomplete'/6 ('comment',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Resume,Stack,Config)
<#{#<42>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Resume,['multicomment'|Stack],Config> when 'true' -> case Stack of <['multicomment'|_18]> when 'true' -> apply 'comment'/5 (Rest,Handler,Resume,Stack,Config)
<_19> when 'true' -> apply 'resume'/6 (Rest,Resume,Handler,'unused',Stack,Config) end
<#{#<42>(8,1,'integer',['unsigned'|['big']])}#,Handler,Resume,Stack = ['multicomment'|_20],Config> when 'true' -> apply 'incomplete'/6 ('comment',#{#<42>(8,1,'integer',['unsigned'|['big']])}#,Handler,Resume,Stack,Config)
<#{#<_21>('undefined','undefined','utf8',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Resume,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,Resume,Stack,Config)
<#{#<_22>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Resume,Stack,Config = {'config',_23,_24,_25,_26,_27,_28,'false',_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> apply 'comment'/5 (Rest,Handler,Resume,Stack,Config)
<#{}#,Handler,'done',[Comment|[]],Config = {'config',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,'false',_48,_49,_50,_51,_52}> when let <_6> = call 'erlang':'=:=' (Comment,'comment') in let <_7> = call 'erlang':'=:=' (Comment,'multicomment') in call 'erlang':'or' (_6,_7) -> apply 'resume'/6 (#{}#,'done',Handler,'unused',[],Config)
<#{}#,Handler,Resume,Stack,Config> when 'true' -> apply 'incomplete'/6 ('comment',#{}#,Handler,Resume,Stack,Config)
<Bin,Handler,Resume,Stack,Config> when 'true' -> (case Config of (<({'config',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_rec24,_67}-|['compiler_generated'] )> when 'true' -> case _rec24 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_10> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','comment',Handler,Resume,Stack},_10) end-|['compiler_generated'] )
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'maybe_done'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,[],Config> when 'true' -> (case <Handler,Config> of (<({_72,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_73> = call _72:('handle_event'-|['compiler_generated'] ) (('end_json'-|['compiler_generated'] ),State) in let <_4> = {_72,_73} in apply 'done'/4 (Rest,_4,[],Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('end_json'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'maybe_done'/4 (Rest,Handler,Stack,Config)
<#{#<125>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['object'|Stack],Config> when 'true' -> (case <Handler,Config> of (<({_77,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_78> = call _77:('handle_event'-|['compiler_generated'] ) (('end_object'-|['compiler_generated'] ),State) in let <_5> = {_77,_78} in apply 'maybe_done'/4 (Rest,_5,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('end_object'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<93>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['array'|Stack],Config> when 'true' -> (case <Handler,Config> of (<({_82,State}-|['compiler_generated'] ),_X_Config> when ('true'-|['compiler_generated'] ) -> (let <_83> = call _82:('handle_event'-|['compiler_generated'] ) (('end_array'-|['compiler_generated'] ),State) in let <_6> = {_82,_83} in apply 'maybe_done'/4 (Rest,_6,Stack,Config)-|['compiler_generated'] )-|['compiler_generated'] )
(<_5,_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),('end_array'-|['compiler_generated'] ),_5,_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<44>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,['object'|Stack],Config> when 'true' -> apply 'key'/4 (Rest,Handler,['key'|Stack],Config)
<#{#<44>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack = ['array'|_21],Config> when 'true' -> apply 'value'/4 (Rest,Handler,Stack,Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'maybe_done'/4 (Rest,Handler,Stack,Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'maybe_done'/4 (Rest,Handler,Stack,Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'maybe_done'/4 (Rest,Handler,Stack,Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_22,_23,_24,_25,'true',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}> when 'true' -> (case Config of (<({'config',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_rec25,_51}-|['compiler_generated'] )> when 'true' -> case _rec25 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_10> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_9> = call 'jsx_config':'config_to_list' (Config) in apply F (_10,{'decoder','maybe_done',Handler,'null',Stack},_9) end-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'maybe_done',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'maybe_done',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('maybe_done',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<#{}#,Handler,Stack,Config> when try let <_12> = call 'erlang':'length' (Stack) in call 'erlang':'>' (_12,0) of <Try> -> Try catch <T,R> -> 'false' -> apply 'incomplete'/5 ('maybe_done',#{}#,Handler,Stack,Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_rec26,_67}-|['compiler_generated'] )> when 'true' -> case _rec26 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_15> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','maybe_done',Handler,'null',Stack},_15) end-|['compiler_generated'] )
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'done'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,[],Config> when 'true' -> apply 'done'/4 (Rest,Handler,[],Config)
<#{#<10>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,[],Config> when 'true' -> apply 'done'/4 (Rest,Handler,[],Config)
<#{#<9>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,[],Config> when 'true' -> apply 'done'/4 (Rest,Handler,[],Config)
<#{#<13>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,[],Config> when 'true' -> apply 'done'/4 (Rest,Handler,[],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config = {'config',_18,_19,_20,_21,'true',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> (case Config of (<({'config',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_rec27,_47}-|['compiler_generated'] )> when 'true' -> case _rec27 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_7> = #{#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}# in let <_6> = call 'jsx_config':'config_to_list' (Config) in apply F (_7,{'decoder','done',Handler,'null',Stack},_6) end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'done',['comment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']]),#<42>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'comment'/5 (Rest,Handler,'done',['multicomment'|Stack],Config)
<#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config> when 'true' -> apply 'incomplete'/5 ('done',#{#<47>(8,1,'integer',['unsigned'|['big']])}#,Handler,Stack,Config)
<Bin,{_X_Handler,State},_X_Stack,{'config',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,'true',_60,_61,_62,_63}> when 'true' -> {'with_tail',State,Bin}
<#{}#,_@r0 = {Handler,State},[],Config = {'config',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,'true',_74,_75,_76,_77,_78}> when 'true' -> apply 'incomplete'/5 ('done',#{}#,_@r0,[],Config)
<#{}#,{_X_Handler,State},[],_X_Config> when 'true' -> State
<Bin,{Handler,State},_X_Stack,Config = {'config',_79,_80,_81,'true',_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_9> = call Handler:'reset' (State) in apply 'value'/4 (Bin,{Handler,_9},[],Config)
<Bin,Handler,Stack,Config> when 'true' -> (case Config of (<({'config',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_rec28,_108}-|['compiler_generated'] )> when 'true' -> case _rec28 of <'false'> when 'true' -> call 'erlang':'error' ('badarg')
<F> when 'true' -> let <_12> = call 'jsx_config':'config_to_list' (Config) in apply F (Bin,{'decoder','done',Handler,'null',Stack},_12) end-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('jsx_decoder')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('jsx_decoder',_0) end