module 'jsx_to_json' ['finish'/1,'format'/2,'get_key'/1,'get_value'/1,'handle_event'/2,'init'/1,'insert'/2,'module_info'/0,'module_info'/1,'start_array'/1,'start_json'/0,'start_json'/1,'start_object'/1,'to_json'/2] attributes [ 'file' = [{[106|[115|[120|[95|[116|[111|[95|[106|[115|[111|[110|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'record' = [{'config',[{'record_field',33,{'atom',33,'space'},{'integer',33,0}}|[{'record_field',34,{'atom',34,'indent'},{'integer',34,0}}|[{'record_field',35,{'atom',35,'depth'},{'integer',35,0}}|[{'record_field',36,{'atom',36,'newline'},{'bin',36,[{'bin_element',36,{'char',36,10},'default','default'}]}}]]]]}]
, 'type' = [{'config',{'type',39,'list',[]},[]}]
, 'export_type' = [{'config',0}]
, 'spec' = [{{'to_json',2},[{'type',43,'fun',[{'type',43,'product',[{'ann_type',43,[{'var',43,'Source'}|[{'type',43,'any',[]}]]}|[{'ann_type',43,[{'var',43,'Config'}|[{'user_type',43,'config',[]}]]}]]}|[{'type',43,'binary',[]}]]}]}]
, 'spec' = [{{'format',2},[{'type',49,'fun',[{'type',49,'product',[{'ann_type',49,[{'var',49,'Source'}|[{'type',49,'binary',[]}]]}|[{'ann_type',49,[{'var',49,'Config'}|[{'user_type',49,'config',[]}]]}]]}|[{'type',49,'binary',[]}]]}]}]
, 'type' = [{'state',{'type',93,'tuple',[{'remote_type',93,[{'atom',93,'unicode'}|[{'atom',93,'charlist'}|[[]]]]}|[{'type',93,'record',[{'atom',93,'config'}]}]]},[]}]
, 'spec' = [{{'init',1},[{'type',94,'fun',[{'type',94,'product',[{'ann_type',94,[{'var',94,'Config'}|[{'remote_type',94,[{'atom',94,'proplists'}|[{'atom',94,'proplist'}|[[]]]]}]]}]}|[{'user_type',94,'state',[]}]]}]}]
, 'spec' = [{{'handle_event',2},[{'type',99,'fun',[{'type',99,'product',[{'ann_type',99,[{'var',99,'Event'}|[{'type',99,'any',[]}]]}|[{'ann_type',99,[{'var',99,'State'}|[{'user_type',99,'state',[]}]]}]]}|[{'user_type',99,'state',[]}]]}]}] ] 'to_json'/2 = fun (_0,_1) -> case <_0,_1> of <Source,Config> when call 'erlang':'is_list' (Config) -> let <_2> = call 'erlang':'++' (Config,['escaped_strings']) in let <_3> = call 'jsx_config':'extract_config' (_2) in let <_4> = call 'jsx':'encoder' ('jsx_to_json',Config,_3) in apply _4 (Source)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'to_json',2}}] )-|['compiler_generated'] ) end
'format'/2 = fun (_0,_1) -> case <_0,_1> of <Source,Config> when try (let <_4> = case call 'erlang':'is_binary' (Source) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'is_list' (Config)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> _2-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_5> = call 'erlang':'++' (Config,['escaped_strings']) in let <_6> = call 'jsx_config':'extract_config' (_5) in let <_7> = call 'jsx':'decoder' ('jsx_to_json',Config,_6) in apply _7 (Source)
<_10,_11> when 'true' -> call 'erlang':'error' ('badarg') end
'parse_config'/1 = fun (_0) -> apply 'parse_config'/2 (_0,{'config',0,0,0,#{#<10>(8,1,'integer',['unsigned'|['big']])}#})
'parse_config'/2 = fun (_0,_1) -> case <_0,_1> of <[{'space',Val}|Rest],Config> when let <_2> = call 'erlang':'is_integer' (Val) in let <_3> = call 'erlang':'>' (Val,0) in call 'erlang':'and' (_2,_3) -> case Config of <{'config',_27,_28,_29,_30}> when 'true' -> let <_6> = call 'erlang':'setelement' (2,Config,Val) in apply 'parse_config'/2 (Rest,_6)
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['space'|Rest],Config> when 'true' -> case Config of <{'config',_32,_33,_34,_35}> when 'true' -> let <_9> = call 'erlang':'setelement' (2,Config,1) in apply 'parse_config'/2 (Rest,_9)
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'indent',Val}|Rest],Config> when let <_10> = call 'erlang':'is_integer' (Val) in let <_11> = call 'erlang':'>' (Val,0) in call 'erlang':'and' (_10,_11) -> case Config of <{'config',_37,_38,_39,_40}> when 'true' -> let <_14> = call 'erlang':'setelement' (3,Config,Val) in apply 'parse_config'/2 (Rest,_14)
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['indent'|Rest],Config> when 'true' -> case Config of <{'config',_42,_43,_44,_45}> when 'true' -> let <_17> = call 'erlang':'setelement' (3,Config,1) in apply 'parse_config'/2 (Rest,_17)
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'newline',Val}|Rest],Config> when call 'erlang':'is_binary' (Val) -> case Config of <{'config',_47,_48,_49,_50}> when 'true' -> let <_20> = call 'erlang':'setelement' (5,Config,Val) in apply 'parse_config'/2 (Rest,_20)
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Options = [{K,_52}|Rest],Config> when 'true' -> let <_21> = call 'jsx_config':'valid_flags' () in case call 'lists':'member' (K,_21) of <'true'> when 'true' -> apply 'parse_config'/2 (Rest,Config)
<'false'> when 'true' -> call 'erlang':'error' ('badarg',[Options|[Config|[]]])
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end
<Options = [K|Rest],Config> when 'true' -> let <_23> = call 'jsx_config':'valid_flags' () in case call 'lists':'member' (K,_23) of <'true'> when 'true' -> apply 'parse_config'/2 (Rest,Config)
<'false'> when 'true' -> call 'erlang':'error' ('badarg',[Options|[Config|[]]])
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<[],Config> when 'true' -> Config
(<_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25})-|[{'function_name',{'parse_config',2}}] )-|['compiler_generated'] ) end
'init'/1 = fun (_0) -> let <_1> = apply 'parse_config'/1 (_0) in {[],_1}
'handle_event'/2 = fun (_0,_1) -> case <_0,_1> of <'end_json',State> when 'true' -> apply 'get_value'/1 (State)
<'start_object',State> when 'true' -> apply 'start_object'/1 (State)
<'end_object',State> when 'true' -> apply 'finish'/1 (State)
<'start_array',State> when 'true' -> apply 'start_array'/1 (State)
<'end_array',State> when 'true' -> apply 'finish'/1 (State)
<{Type,Event},State = {_5,Config}> when 'true' -> let <_2> = apply 'encode'/3 (Type,Event,Config) in apply 'insert'/2 (_2,State)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'handle_event',2}}] )-|['compiler_generated'] ) end
'encode'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'string',String,_X_Config> when 'true' -> [#{#<34>(8,1,'integer',['unsigned'|['big']])}#|[String|[#{#<34>(8,1,'integer',['unsigned'|['big']])}#]]]
<'key',Key,_X_Config> when 'true' -> [#{#<34>(8,1,'integer',['unsigned'|['big']])}#|[Key|[#{#<34>(8,1,'integer',['unsigned'|['big']])}#]]]
<'literal',Literal,_X_Config> when 'true' -> call 'erlang':'atom_to_list' (Literal)
<'integer',Integer,_X_Config> when 'true' -> call 'erlang':'integer_to_list' (Integer)
<'float',Float,_X_Config> when 'true' -> call 'io_lib':'format' ([126|[112]],[Float|[]])
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'encode',3}}] )-|['compiler_generated'] ) end
'space'/1 = fun (_0) -> (case _0 of (<({'config',_rec5,_5,_6,_7}-|['compiler_generated'] )> when 'true' -> case _rec5 of <0> when 'true' -> #{}#
<X> when call 'erlang':'>' (_rec5,0) -> call 'binary':'copy' (#{#<32>(8,1,'integer',['unsigned'|['big']])}#,X)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'indent'/1 = fun (_0) -> (case _0 of (<({'config',_11,_rec6,_12,_13}-|['compiler_generated'] )> when 'true' -> case _rec6 of <0> when 'true' -> #{}#
<X> when call 'erlang':'>' (_rec6,0) -> (case _0 of (<({'config',_15,_16,_17,_rec8}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'config',_19,_20,_rec7,_21}-|['compiler_generated'] )> when 'true' -> let <_5> = call 'erlang':'*' (X,_rec7) in let <_6> = call 'binary':'copy' (#{#<32>(8,1,'integer',['unsigned'|['big']])}#,_5) in #{#<_rec8>('all',8,'binary',['unsigned'|['big']]),#<_6>('all',8,'binary',['unsigned'|['big']])}#-|['compiler_generated'] )
(<_22> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'indent_or_space'/1 = fun (_0) -> (case _0 of (<({'config',_5,_rec9,_6,_7}-|['compiler_generated'] )> when 'true' -> case <> of <> when call 'erlang':'>' (_rec9,0) -> apply 'indent'/1 (_0)
<> when 'true' -> apply 'space'/1 (_0) end-|['compiler_generated'] )
(<_8> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'start_json'/0 = fun () -> {[],{'config',0,0,0,#{#<10>(8,1,'integer',['unsigned'|['big']])}#}}
'start_json'/1 = fun (_0) -> case _0 of <Config> when call 'erlang':'is_list' (_0) -> let <_1> = apply 'parse_config'/1 (Config) in {[],_1}
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'start_json',1}}] )-|['compiler_generated'] ) end
'start_object'/1 = fun (_0) -> case _0 of <{Stack,Config = {'config',_7,_8,Depth,_9}}> when 'true' -> let <_5> = [{'object',#{#<123>(8,1,'integer',['unsigned'|['big']])}#}|Stack] in let <_rec10> = call 'erlang':'+' (Depth,1) in case Config of <{'config',_10,_11,_12,_13}> when 'true' -> let <_4> = call 'erlang':'setelement' (4,Config,_rec10) in {_5,_4}
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'start_object',1}}] )-|['compiler_generated'] ) end
'start_array'/1 = fun (_0) -> case _0 of <{Stack,Config = {'config',_7,_8,Depth,_9}}> when 'true' -> let <_5> = [{'array',#{#<91>(8,1,'integer',['unsigned'|['big']])}#}|Stack] in let <_rec12> = call 'erlang':'+' (Depth,1) in case Config of <{'config',_10,_11,_12,_13}> when 'true' -> let <_4> = call 'erlang':'setelement' (4,Config,_rec12) in {_5,_4}
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'start_array',1}}] )-|['compiler_generated'] ) end
'finish'/1 = fun (_0) -> case _0 of <{Stack,Config = {'config',_7,_8,Depth,_9}}> when 'true' -> let <_rec14> = call 'erlang':'-' (Depth,1) in case Config of <{'config',_10,_11,_12,_13}> when 'true' -> let <_4> = call 'erlang':'setelement' (4,Config,_rec14) in apply 'finish_'/1 ({Stack,_4})
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','config'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'finish',1}}] )-|['compiler_generated'] ) end
'finish_'/1 = fun (_0) -> case _0 of <{[{'object',#{#<123>(8,1,'integer',['unsigned'|['big']])}#}|[]],Config}> when 'true' -> {#{#<123>(8,1,'integer',['unsigned'|['big']]),#<125>(8,1,'integer',['unsigned'|['big']])}#,Config}
<{[{'array',#{#<91>(8,1,'integer',['unsigned'|['big']])}#}|[]],Config}> when 'true' -> {#{#<91>(8,1,'integer',['unsigned'|['big']]),#<93>(8,1,'integer',['unsigned'|['big']])}#,Config}
<{[{'object',#{#<123>(8,1,'integer',['unsigned'|['big']])}#}|Rest],Config}> when 'true' -> apply 'insert'/2 (#{#<123>(8,1,'integer',['unsigned'|['big']]),#<125>(8,1,'integer',['unsigned'|['big']])}#,{Rest,Config})
<{[{'array',#{#<91>(8,1,'integer',['unsigned'|['big']])}#}|Rest],Config}> when 'true' -> apply 'insert'/2 (#{#<91>(8,1,'integer',['unsigned'|['big']]),#<93>(8,1,'integer',['unsigned'|['big']])}#,{Rest,Config})
<{[{'object',Object}|[]],Config}> when 'true' -> let <_1> = apply 'indent'/1 (Config) in {[Object|[_1|[#{#<125>(8,1,'integer',['unsigned'|['big']])}#]]],Config}
<{[{'object',Object}|Rest],Config}> when 'true' -> let <_2> = apply 'indent'/1 (Config) in apply 'insert'/2 ([Object|[_2|[#{#<125>(8,1,'integer',['unsigned'|['big']])}#]]],{Rest,Config})
<{[{'array',Array}|[]],Config}> when 'true' -> let <_3> = apply 'indent'/1 (Config) in {[Array|[_3|[#{#<93>(8,1,'integer',['unsigned'|['big']])}#]]],Config}
<{[{'array',Array}|Rest],Config}> when 'true' -> let <_4> = apply 'indent'/1 (Config) in apply 'insert'/2 ([Array|[_4|[#{#<93>(8,1,'integer',['unsigned'|['big']])}#]]],{Rest,Config})
<_6> when 'true' -> call 'erlang':'error' ('badarg') end
'insert'/2 = fun (_0,_1) -> case <_0,_1> of <Value,{[],Config}> when 'true' -> {Value,Config}
<Key,{[{'object',Object}|Rest],Config}> when 'true' -> let <_2> = [{'object',Key,Object}|Rest] in {_2,Config}
<Value,{[{'object',Key,#{#<123>(8,1,'integer',['unsigned'|['big']])}#}|Rest],Config}> when 'true' -> let <_3> = apply 'indent'/1 (Config) in let <_4> = apply 'space'/1 (Config) in let <_5> = [{'object',[#{#<123>(8,1,'integer',['unsigned'|['big']])}#|[_3|[Key|[#{#<58>(8,1,'integer',['unsigned'|['big']])}#|[_4|[Value|[]]]]]]]}|Rest] in {_5,Config}
<Value,{[{'object',Key,Object}|Rest],Config}> when 'true' -> let <_6> = apply 'indent_or_space'/1 (Config) in let <_7> = apply 'space'/1 (Config) in let <_8> = [{'object',[Object|[#{#<44>(8,1,'integer',['unsigned'|['big']])}#|[_6|[Key|[#{#<58>(8,1,'integer',['unsigned'|['big']])}#|[_7|[Value|[]]]]]]]]}|Rest] in {_8,Config}
<Value,{[{'array',#{#<91>(8,1,'integer',['unsigned'|['big']])}#}|Rest],Config}> when 'true' -> let <_9> = apply 'indent'/1 (Config) in let <_10> = [{'array',[#{#<91>(8,1,'integer',['unsigned'|['big']])}#|[_9|[Value|[]]]]}|Rest] in {_10,Config}
<Value,{[{'array',Array}|Rest],Config}> when 'true' -> let <_11> = apply 'indent_or_space'/1 (Config) in let <_12> = [{'array',[Array|[#{#<44>(8,1,'integer',['unsigned'|['big']])}#|[_11|[Value|[]]]]]}|Rest] in {_12,Config}
<_15,_16> when 'true' -> call 'erlang':'error' ('badarg') end
'get_key'/1 = fun (_0) -> case _0 of <{[{'object',Key,_2}|_3],_4}> when 'true' -> Key
<_5> when 'true' -> call 'erlang':'error' ('badarg') end
'get_value'/1 = fun (_0) -> case _0 of <{Value,_X_Config}> when 'true' -> try call 'unicode':'characters_to_binary' (Value) of <_1> -> _1 catch <_4,_3,_2> -> case <_4,_3,_2> of <('error'-|['compiler_generated'] ),_6,_7> when 'true' -> call 'erlang':'error' ('badarg')
(<_9,_10,_11> when 'true' -> primop 'raise' (_11,_10)-|['compiler_generated'] ) end
<_8> when 'true' -> call 'erlang':'error' ('badarg') end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('jsx_to_json')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('jsx_to_json',_0) end