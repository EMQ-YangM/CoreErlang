module 'sys' ['change_code'/4,'change_code'/5,'debug_options'/1,'get_debug'/3,'get_log'/1,'get_state'/1,'get_state'/2,'get_status'/1,'get_status'/2,'handle_debug'/4,'handle_system_msg'/6,'handle_system_msg'/7,'install'/2,'install'/3,'log'/2,'log'/3,'log_to_file'/2,'log_to_file'/3,'module_info'/0,'module_info'/1,'no_debug'/1,'no_debug'/2,'print_log'/1,'remove'/2,'remove'/3,'replace_state'/2,'replace_state'/3,'resume'/1,'resume'/2,'statistics'/2,'statistics'/3,'suspend'/1,'suspend'/2,'suspend_loop_hib'/6,'terminate'/2,'terminate'/3,'trace'/2,'trace'/3] attributes [ 'file' = [{[115|[114|[99|[47|[115|[121|[115|[46|[101|[114|[108]]]]]]]]]]],1}]
, 'export_type' = [{'dbg_opt',0}|[{'dbg_fun',0}|[{'debug_option',0}]]]
, 'type' = [{'name',{'type',41,'union',[{'type',41,'pid',[]}|[{'type',41,'atom',[]}|[{'type',42,'tuple',[{'atom',42,'global'}|[{'type',42,'term',[]}]]}|[{'type',43,'tuple',[{'atom',43,'via'}|[{'type',43,'module',[]}|[{'type',43,'term',[]}]]]}]]]]},[]}]
, 'type' = [{'system_event',{'type',44,'union',[{'type',44,'tuple',[{'atom',44,'in'}|[{'ann_type',44,[{'var',44,'Msg'}|[{'var',44,'_'}]]}]]}|[{'type',45,'tuple',[{'atom',45,'in'}|[{'ann_type',45,[{'var',45,'Msg'}|[{'var',45,'_'}]]}|[{'ann_type',45,[{'var',45,'State'}|[{'var',45,'_'}]]}]]]}|[{'type',46,'tuple',[{'atom',46,'out'}|[{'ann_type',46,[{'var',46,'Msg'}|[{'var',46,'_'}]]}|[{'ann_type',46,[{'var',46,'To'}|[{'var',46,'_'}]]}]]]}|[{'type',47,'tuple',[{'atom',47,'out'}|[{'ann_type',47,[{'var',47,'Msg'}|[{'var',47,'_'}]]}|[{'ann_type',47,[{'var',47,'To'}|[{'var',47,'_'}]]}|[{'ann_type',47,[{'var',47,'State'}|[{'var',47,'_'}]]}]]]]}|[{'type',48,'tuple',[{'atom',48,'noreply'}|[{'ann_type',48,[{'var',48,'State'}|[{'var',48,'_'}]]}]]}|[{'type',49,'tuple',[{'atom',49,'continue'}|[{'ann_type',49,[{'var',49,'Continuation'}|[{'var',49,'_'}]]}]]}|[{'type',50,'tuple',[{'atom',50,'code_change'}|[{'ann_type',50,[{'var',50,'Event'}|[{'var',50,'_'}]]}|[{'ann_type',50,[{'var',50,'State'}|[{'var',50,'_'}]]}]]]}|[{'type',51,'tuple',[{'atom',51,'postpone'}|[{'ann_type',51,[{'var',51,'Event'}|[{'var',51,'_'}]]}|[{'ann_type',51,[{'var',51,'State'}|[{'var',51,'_'}]]}|[{'ann_type',51,[{'var',51,'NextState'}|[{'var',51,'_'}]]}]]]]}|[{'type',52,'tuple',[{'atom',52,'consume'}|[{'ann_type',52,[{'var',52,'Event'}|[{'var',52,'_'}]]}|[{'ann_type',52,[{'var',52,'State'}|[{'var',52,'_'}]]}|[{'ann_type',52,[{'var',52,'NextState'}|[{'var',52,'_'}]]}]]]]}|[{'type',53,'tuple',[{'atom',53,'start_timer'}|[{'ann_type',53,[{'var',53,'Action'}|[{'var',53,'_'}]]}|[{'ann_type',53,[{'var',53,'State'}|[{'var',53,'_'}]]}]]]}|[{'type',54,'tuple',[{'atom',54,'insert_timeout'}|[{'ann_type',54,[{'var',54,'Event'}|[{'var',54,'_'}]]}|[{'ann_type',54,[{'var',54,'State'}|[{'var',54,'_'}]]}]]]}|[{'type',55,'tuple',[{'atom',55,'enter'}|[{'ann_type',55,[{'var',55,'State'}|[{'var',55,'_'}]]}]]}|[{'type',56,'tuple',[{'atom',56,'terminate'}|[{'ann_type',56,[{'var',56,'Reason'}|[{'var',56,'_'}]]}|[{'ann_type',56,[{'var',56,'State'}|[{'var',56,'_'}]]}]]]}|[{'type',57,'term',[]}]]]]]]]]]]]]]]},[]}]
, 'opaque' = [{'dbg_opt',{'type',58,'union',[{'type',58,'tuple',[{'atom',58,'trace'}|[{'atom',58,'true'}]]}|[{'type',59,'tuple',[{'atom',59,'log'}|[{'type',60,'tuple',[{'ann_type',60,[{'var',60,'N'}|[{'type',60,'non_neg_integer',[]}]]}|[{'type',61,'list',[{'type',61,'tuple',[{'ann_type',61,[{'var',61,'Event'}|[{'user_type',61,'system_event',[]}]]}|[{'ann_type',62,[{'var',62,'FuncState'}|[{'var',62,'_'}]]}|[{'ann_type',63,[{'var',63,'FormFunc'}|[{'user_type',63,'format_fun',[]}]]}]]]}]}]]}]]}|[{'type',64,'tuple',[{'atom',64,'statistics'}|[{'type',64,'tuple',[{'remote_type',64,[{'atom',64,'file'}|[{'atom',64,'date_time'}|[[]]]]}|[{'type',65,'tuple',[{'atom',65,'reductions'}|[{'type',65,'non_neg_integer',[]}]]}|[{'ann_type',66,[{'var',66,'MessagesIn'}|[{'type',66,'non_neg_integer',[]}]]}|[{'ann_type',67,[{'var',67,'MessagesOut'}|[{'type',67,'non_neg_integer',[]}]]}]]]]}]]}|[{'type',68,'tuple',[{'atom',68,'log_to_file'}|[{'remote_type',68,[{'atom',68,'file'}|[{'atom',68,'io_device'}|[[]]]]}]]}|[{'type',69,'tuple',[{'ann_type',69,[{'var',69,'Func'}|[{'user_type',69,'dbg_fun',[]}]]}|[{'ann_type',69,[{'var',69,'FuncState'}|[{'type',69,'term',[]}]]}]]}|[{'type',70,'tuple',[{'ann_type',70,[{'var',70,'FuncId'}|[{'type',70,'term',[]}]]}|[{'ann_type',70,[{'var',70,'Func'}|[{'user_type',70,'dbg_fun',[]}]]}|[{'ann_type',70,[{'var',70,'FuncState'}|[{'type',70,'term',[]}]]}]]]}]]]]]]},[]}]
, 'type' = [{'dbg_fun',{'type',71,'fun',[{'type',71,'product',[{'ann_type',71,[{'var',71,'FuncState'}|[{'var',71,'_'}]]}|[{'ann_type',72,[{'var',72,'Event'}|[{'user_type',72,'system_event',[]}]]}|[{'ann_type',73,[{'var',73,'ProcState'}|[{'var',73,'_'}]]}]]]}|[{'type',73,'union',[{'atom',73,'done'}|[{'ann_type',73,[{'var',73,'NewFuncState'}|[{'var',73,'_'}]]}]]}]]},[]}]
, 'type' = [{'format_fun',{'type',75,'fun',[{'type',75,'product',[{'ann_type',75,[{'var',75,'Device'}|[{'type',75,'union',[{'remote_type',75,[{'atom',75,'io'}|[{'atom',75,'device'}|[[]]]]}|[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'io_device'}|[[]]]]}]]}]]}|[{'ann_type',76,[{'var',76,'Event'}|[{'user_type',76,'system_event',[]}]]}|[{'ann_type',77,[{'var',77,'Extra'}|[{'type',77,'term',[]}]]}]]]}|[{'type',77,'any',[]}]]},[]}]
, 'type' = [{'debug_option',{'type',80,'union',[{'atom',80,'trace'}|[{'atom',81,'log'}|[{'type',82,'tuple',[{'atom',82,'log'}|[{'ann_type',82,[{'var',82,'N'}|[{'type',82,'pos_integer',[]}]]}]]}|[{'atom',83,'statistics'}|[{'type',84,'tuple',[{'atom',84,'log_to_file'}|[{'ann_type',84,[{'var',84,'FileName'}|[{'remote_type',84,[{'atom',84,'file'}|[{'atom',84,'name'}|[[]]]]}]]}]]}|[{'type',85,'tuple',[{'atom',85,'install'}|[{'type',86,'union',[{'type',86,'tuple',[{'ann_type',86,[{'var',86,'Func'}|[{'user_type',86,'dbg_fun',[]}]]}|[{'ann_type',86,[{'var',86,'FuncState'}|[{'type',86,'term',[]}]]}]]}|[{'type',87,'tuple',[{'ann_type',87,[{'var',87,'FuncId'}|[{'type',87,'term',[]}]]}|[{'ann_type',87,[{'var',87,'Func'}|[{'user_type',87,'dbg_fun',[]}]]}|[{'ann_type',87,[{'var',87,'FuncState'}|[{'type',87,'term',[]}]]}]]]}]]}]]}]]]]]]},[]}]
, 'spec' = [{{'suspend',1},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Name'}]}|[{'atom',92,'ok'}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Name'}|[{'user_type',93,'name',[]}]]]]}]]]}]}]
, 'spec' = [{{'suspend',2},[{'type',96,'bounded_fun',[{'type',96,'fun',[{'type',96,'product',[{'var',96,'Name'}|[{'var',96,'Timeout'}]]}|[{'atom',96,'ok'}]]}|[[{'type',97,'constraint',[{'atom',97,'is_subtype'}|[[{'var',97,'Name'}|[{'user_type',97,'name',[]}]]]]}|[{'type',98,'constraint',[{'atom',98,'is_subtype'}|[[{'var',98,'Timeout'}|[{'type',98,'timeout',[]}]]]]}]]]]}]}]
, 'spec' = [{{'resume',1},[{'type',101,'bounded_fun',[{'type',101,'fun',[{'type',101,'product',[{'var',101,'Name'}]}|[{'atom',101,'ok'}]]}|[[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Name'}|[{'user_type',102,'name',[]}]]]]}]]]}]}]
, 'spec' = [{{'resume',2},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Name'}|[{'var',105,'Timeout'}]]}|[{'atom',105,'ok'}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Name'}|[{'user_type',106,'name',[]}]]]]}|[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Timeout'}|[{'type',107,'timeout',[]}]]]]}]]]]}]}]
, 'spec' = [{{'get_status',1},[{'type',110,'bounded_fun',[{'type',110,'fun',[{'type',110,'product',[{'var',110,'Name'}]}|[{'var',110,'Status'}]]}|[[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Name'}|[{'user_type',111,'name',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Status'}|[{'type',112,'tuple',[{'atom',112,'status'}|[{'ann_type',112,[{'var',112,'Pid'}|[{'type',112,'pid',[]}]]}|[{'type',112,'tuple',[{'atom',112,'module'}|[{'ann_type',112,[{'var',112,'Module'}|[{'type',112,'module',[]}]]}]]}|[{'type',112,'list',[{'var',112,'SItem'}]}]]]]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'SItem'}|[{'type',113,'union',[{'ann_type',113,[{'var',113,'PDict'}|[{'type',113,'list',[{'type',113,'tuple',[{'ann_type',113,[{'var',113,'Key'}|[{'type',113,'term',[]}]]}|[{'ann_type',113,[{'var',113,'Value'}|[{'type',113,'term',[]}]]}]]}]}]]}|[{'ann_type',114,[{'var',114,'SysState'}|[{'type',114,'union',[{'atom',114,'running'}|[{'atom',114,'suspended'}]]}]]}|[{'ann_type',115,[{'var',115,'Parent'}|[{'type',115,'pid',[]}]]}|[{'ann_type',116,[{'var',116,'Dbg'}|[{'type',116,'list',[{'user_type',116,'dbg_opt',[]}]}]]}|[{'ann_type',117,[{'var',117,'Misc'}|[{'type',117,'term',[]}]]}]]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'get_status',2},[{'type',120,'bounded_fun',[{'type',120,'fun',[{'type',120,'product',[{'var',120,'Name'}|[{'var',120,'Timeout'}]]}|[{'var',120,'Status'}]]}|[[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'Name'}|[{'user_type',121,'name',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Timeout'}|[{'type',122,'timeout',[]}]]]]}|[{'type',123,'constraint',[{'atom',123,'is_subtype'}|[[{'var',123,'Status'}|[{'type',123,'tuple',[{'atom',123,'status'}|[{'ann_type',123,[{'var',123,'Pid'}|[{'type',123,'pid',[]}]]}|[{'type',123,'tuple',[{'atom',123,'module'}|[{'ann_type',123,[{'var',123,'Module'}|[{'type',123,'module',[]}]]}]]}|[{'type',123,'list',[{'var',123,'SItem'}]}]]]]}]]]]}|[{'type',124,'constraint',[{'atom',124,'is_subtype'}|[[{'var',124,'SItem'}|[{'type',124,'union',[{'ann_type',124,[{'var',124,'PDict'}|[{'type',124,'list',[{'type',124,'tuple',[{'ann_type',124,[{'var',124,'Key'}|[{'type',124,'term',[]}]]}|[{'ann_type',124,[{'var',124,'Value'}|[{'type',124,'term',[]}]]}]]}]}]]}|[{'ann_type',125,[{'var',125,'SysState'}|[{'type',125,'union',[{'atom',125,'running'}|[{'atom',125,'suspended'}]]}]]}|[{'ann_type',126,[{'var',126,'Parent'}|[{'type',126,'pid',[]}]]}|[{'ann_type',127,[{'var',127,'Dbg'}|[{'type',127,'list',[{'user_type',127,'dbg_opt',[]}]}]]}|[{'ann_type',128,[{'var',128,'Misc'}|[{'type',128,'term',[]}]]}]]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'get_state',1},[{'type',131,'bounded_fun',[{'type',131,'fun',[{'type',131,'product',[{'var',131,'Name'}]}|[{'var',131,'State'}]]}|[[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Name'}|[{'user_type',132,'name',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'State'}|[{'type',133,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'get_state',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Name'}|[{'var',140,'Timeout'}]]}|[{'var',140,'State'}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Name'}|[{'user_type',141,'name',[]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Timeout'}|[{'type',142,'timeout',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'State'}|[{'type',143,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'replace_state',2},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'Name'}|[{'var',150,'StateFun'}]]}|[{'var',150,'NewState'}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Name'}|[{'user_type',151,'name',[]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'StateFun'}|[{'type',152,'fun',[{'type',152,'product',[{'ann_type',152,[{'var',152,'State'}|[{'type',152,'term',[]}]]}]}|[{'ann_type',152,[{'var',152,'NewState'}|[{'type',152,'term',[]}]]}]]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'NewState'}|[{'type',153,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'replace_state',3},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Name'}|[{'var',160,'StateFun'}|[{'var',160,'Timeout'}]]]}|[{'var',160,'NewState'}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Name'}|[{'user_type',161,'name',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'StateFun'}|[{'type',162,'fun',[{'type',162,'product',[{'ann_type',162,[{'var',162,'State'}|[{'type',162,'term',[]}]]}]}|[{'ann_type',162,[{'var',162,'NewState'}|[{'type',162,'term',[]}]]}]]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Timeout'}|[{'type',163,'timeout',[]}]]]]}|[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'NewState'}|[{'type',164,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'change_code',4},[{'type',171,'bounded_fun',[{'type',171,'fun',[{'type',171,'product',[{'var',171,'Name'}|[{'var',171,'Module'}|[{'var',171,'OldVsn'}|[{'var',171,'Extra'}]]]]}|[{'type',171,'union',[{'atom',171,'ok'}|[{'type',171,'tuple',[{'atom',171,'error'}|[{'var',171,'Reason'}]]}]]}]]}|[[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Name'}|[{'user_type',172,'name',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Module'}|[{'type',173,'module',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'OldVsn'}|[{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'term',[]}]]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Extra'}|[{'type',175,'term',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Reason'}|[{'type',176,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'change_code',5},[{'type',180,'bounded_fun',[{'type',180,'fun',[{'type',180,'product',[{'var',180,'Name'}|[{'var',180,'Module'}|[{'var',180,'OldVsn'}|[{'var',180,'Extra'}|[{'var',180,'Timeout'}]]]]]}|[{'type',181,'union',[{'atom',181,'ok'}|[{'type',181,'tuple',[{'atom',181,'error'}|[{'var',181,'Reason'}]]}]]}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Name'}|[{'user_type',182,'name',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Module'}|[{'type',183,'module',[]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'OldVsn'}|[{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'term',[]}]]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Extra'}|[{'type',185,'term',[]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Timeout'}|[{'type',186,'timeout',[]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Reason'}|[{'type',187,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'terminate',2},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'Name'}|[{'var',191,'Reason'}]]}|[{'atom',191,'ok'}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Name'}|[{'user_type',192,'name',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Reason'}|[{'type',193,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'terminate',3},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Name'}|[{'var',197,'Reason'}|[{'var',197,'Timeout'}]]]}|[{'atom',197,'ok'}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Name'}|[{'user_type',198,'name',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Reason'}|[{'type',199,'term',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Timeout'}|[{'type',200,'timeout',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'log',2},[{'type',208,'bounded_fun',[{'type',208,'fun',[{'type',208,'product',[{'var',208,'Name'}|[{'var',208,'Flag'}]]}|[{'type',208,'union',[{'atom',208,'ok'}|[{'type',208,'tuple',[{'atom',208,'ok'}|[{'type',208,'list',[{'user_type',208,'system_event',[]}]}]]}]]}]]}|[[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Name'}|[{'user_type',209,'name',[]}]]]]}|[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Flag'}|[{'type',210,'union',[{'atom',210,'true'}|[{'type',211,'tuple',[{'atom',211,'true'}|[{'ann_type',211,[{'var',211,'N'}|[{'type',211,'pos_integer',[]}]]}]]}|[{'atom',212,'false'}|[{'atom',212,'get'}|[{'atom',212,'print'}]]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'log',3},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'Name'}|[{'var',216,'Flag'}|[{'var',216,'Timeout'}]]]}|[{'type',216,'union',[{'atom',216,'ok'}|[{'type',216,'tuple',[{'atom',216,'ok'}|[{'type',216,'list',[{'user_type',216,'system_event',[]}]}]]}]]}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Name'}|[{'user_type',217,'name',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Flag'}|[{'type',218,'union',[{'atom',218,'true'}|[{'type',219,'tuple',[{'atom',219,'true'}|[{'ann_type',219,[{'var',219,'N'}|[{'type',219,'pos_integer',[]}]]}]]}|[{'atom',220,'false'}|[{'atom',220,'get'}|[{'atom',220,'print'}]]]]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Timeout'}|[{'type',221,'timeout',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'trace',2},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'Name'}|[{'var',225,'Flag'}]]}|[{'atom',225,'ok'}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Name'}|[{'user_type',226,'name',[]}]]]]}|[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Flag'}|[{'type',227,'boolean',[]}]]]]}]]]]}]}]
, 'spec' = [{{'trace',3},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Name'}|[{'var',231,'Flag'}|[{'var',231,'Timeout'}]]]}|[{'atom',231,'ok'}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Name'}|[{'user_type',232,'name',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Flag'}|[{'type',233,'boolean',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Timeout'}|[{'type',234,'timeout',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'log_to_file',2},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'Name'}|[{'var',238,'Flag'}]]}|[{'type',238,'union',[{'atom',238,'ok'}|[{'type',238,'tuple',[{'atom',238,'error'}|[{'atom',238,'open_file'}]]}]]}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Name'}|[{'user_type',239,'name',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Flag'}|[{'type',240,'union',[{'ann_type',240,[{'var',240,'FileName'}|[{'type',240,'string',[]}]]}|[{'atom',240,'false'}]]}]]]]}]]]]}]}]
, 'spec' = [{{'log_to_file',3},[{'type',244,'bounded_fun',[{'type',244,'fun',[{'type',244,'product',[{'var',244,'Name'}|[{'var',244,'Flag'}|[{'var',244,'Timeout'}]]]}|[{'type',244,'union',[{'atom',244,'ok'}|[{'type',244,'tuple',[{'atom',244,'error'}|[{'atom',244,'open_file'}]]}]]}]]}|[[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Name'}|[{'user_type',245,'name',[]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Flag'}|[{'type',246,'union',[{'ann_type',246,[{'var',246,'FileName'}|[{'type',246,'string',[]}]]}|[{'atom',246,'false'}]]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Timeout'}|[{'type',247,'timeout',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'statistics',2},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'Name'}|[{'var',251,'Flag'}]]}|[{'type',251,'union',[{'atom',251,'ok'}|[{'type',251,'tuple',[{'atom',251,'ok'}|[{'var',251,'Statistics'}]]}]]}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Name'}|[{'user_type',252,'name',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Flag'}|[{'type',253,'union',[{'atom',253,'true'}|[{'atom',253,'false'}|[{'atom',253,'get'}]]]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Statistics'}|[{'type',254,'union',[{'type',254,'list',[{'var',254,'StatisticsTuple'}]}|[{'atom',254,'no_statistics'}]]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'StatisticsTuple'}|[{'type',255,'union',[{'type',255,'tuple',[{'atom',255,'start_time'}|[{'var',255,'DateTime1'}]]}|[{'type',256,'tuple',[{'atom',256,'current_time'}|[{'var',256,'DateTime2'}]]}|[{'type',257,'tuple',[{'atom',257,'reductions'}|[{'type',257,'non_neg_integer',[]}]]}|[{'type',258,'tuple',[{'atom',258,'messages_in'}|[{'type',258,'non_neg_integer',[]}]]}|[{'type',259,'tuple',[{'atom',259,'messages_out'}|[{'type',259,'non_neg_integer',[]}]]}]]]]]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'DateTime1'}|[{'remote_type',260,[{'atom',260,'file'}|[{'atom',260,'date_time'}|[[]]]]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'DateTime2'}|[{'remote_type',261,[{'atom',261,'file'}|[{'atom',261,'date_time'}|[[]]]]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'statistics',3},[{'type',265,'bounded_fun',[{'type',265,'fun',[{'type',265,'product',[{'var',265,'Name'}|[{'var',265,'Flag'}|[{'var',265,'Timeout'}]]]}|[{'type',265,'union',[{'atom',265,'ok'}|[{'type',265,'tuple',[{'atom',265,'ok'}|[{'var',265,'Statistics'}]]}]]}]]}|[[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Name'}|[{'user_type',266,'name',[]}]]]]}|[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Flag'}|[{'type',267,'union',[{'atom',267,'true'}|[{'atom',267,'false'}|[{'atom',267,'get'}]]]}]]]]}|[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Statistics'}|[{'type',268,'union',[{'type',268,'list',[{'var',268,'StatisticsTuple'}]}|[{'atom',268,'no_statistics'}]]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'StatisticsTuple'}|[{'type',269,'union',[{'type',269,'tuple',[{'atom',269,'start_time'}|[{'var',269,'DateTime1'}]]}|[{'type',270,'tuple',[{'atom',270,'current_time'}|[{'var',270,'DateTime2'}]]}|[{'type',271,'tuple',[{'atom',271,'reductions'}|[{'type',271,'non_neg_integer',[]}]]}|[{'type',272,'tuple',[{'atom',272,'messages_in'}|[{'type',272,'non_neg_integer',[]}]]}|[{'type',273,'tuple',[{'atom',273,'messages_out'}|[{'type',273,'non_neg_integer',[]}]]}]]]]]}]]]]}|[{'type',274,'constraint',[{'atom',274,'is_subtype'}|[[{'var',274,'DateTime1'}|[{'remote_type',274,[{'atom',274,'file'}|[{'atom',274,'date_time'}|[[]]]]}]]]]}|[{'type',275,'constraint',[{'atom',275,'is_subtype'}|[[{'var',275,'DateTime2'}|[{'remote_type',275,[{'atom',275,'file'}|[{'atom',275,'date_time'}|[[]]]]}]]]]}|[{'type',276,'constraint',[{'atom',276,'is_subtype'}|[[{'var',276,'Timeout'}|[{'type',276,'timeout',[]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'no_debug',1},[{'type',280,'bounded_fun',[{'type',280,'fun',[{'type',280,'product',[{'var',280,'Name'}]}|[{'atom',280,'ok'}]]}|[[{'type',281,'constraint',[{'atom',281,'is_subtype'}|[[{'var',281,'Name'}|[{'user_type',281,'name',[]}]]]]}]]]}]}]
, 'spec' = [{{'no_debug',2},[{'type',284,'bounded_fun',[{'type',284,'fun',[{'type',284,'product',[{'var',284,'Name'}|[{'var',284,'Timeout'}]]}|[{'atom',284,'ok'}]]}|[[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'Name'}|[{'user_type',285,'name',[]}]]]]}|[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Timeout'}|[{'type',286,'timeout',[]}]]]]}]]]]}]}]
, 'spec' = [{{'install',2},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'Name'}|[{'var',289,'FuncSpec'}]]}|[{'atom',289,'ok'}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Name'}|[{'user_type',290,'name',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'FuncSpec'}|[{'type',291,'union',[{'type',291,'tuple',[{'var',291,'Func'}|[{'var',291,'FuncState'}]]}|[{'type',291,'tuple',[{'var',291,'FuncId'}|[{'var',291,'Func'}|[{'var',291,'FuncState'}]]]}]]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'FuncId'}|[{'type',292,'term',[]}]]]]}|[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Func'}|[{'user_type',293,'dbg_fun',[]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'FuncState'}|[{'type',294,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'install',3},[{'type',300,'bounded_fun',[{'type',300,'fun',[{'type',300,'product',[{'var',300,'Name'}|[{'var',300,'FuncSpec'}|[{'var',300,'Timeout'}]]]}|[{'atom',300,'ok'}]]}|[[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Name'}|[{'user_type',301,'name',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'FuncSpec'}|[{'type',302,'union',[{'type',302,'tuple',[{'var',302,'Func'}|[{'var',302,'FuncState'}]]}|[{'type',302,'tuple',[{'var',302,'FuncId'}|[{'var',302,'Func'}|[{'var',302,'FuncState'}]]]}]]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'FuncId'}|[{'type',303,'term',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Func'}|[{'user_type',304,'dbg_fun',[]}]]]]}|[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'FuncState'}|[{'type',305,'term',[]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Timeout'}|[{'type',306,'timeout',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'remove',2},[{'type',312,'bounded_fun',[{'type',312,'fun',[{'type',312,'product',[{'var',312,'Name'}|[{'type',312,'union',[{'var',312,'Func'}|[{'var',312,'FuncId'}]]}]]}|[{'atom',312,'ok'}]]}|[[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Name'}|[{'user_type',313,'name',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Func'}|[{'user_type',314,'dbg_fun',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'FuncId'}|[{'type',315,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'remove',3},[{'type',319,'bounded_fun',[{'type',319,'fun',[{'type',319,'product',[{'var',319,'Name'}|[{'type',319,'union',[{'var',319,'Func'}|[{'var',319,'FuncId'}]]}|[{'var',319,'Timeout'}]]]}|[{'atom',319,'ok'}]]}|[[{'type',320,'constraint',[{'atom',320,'is_subtype'}|[[{'var',320,'Name'}|[{'user_type',320,'name',[]}]]]]}|[{'type',321,'constraint',[{'atom',321,'is_subtype'}|[[{'var',321,'Func'}|[{'user_type',321,'dbg_fun',[]}]]]]}|[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'FuncId'}|[{'type',322,'term',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Timeout'}|[{'type',323,'timeout',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'handle_system_msg',6},[{'type',369,'bounded_fun',[{'type',369,'fun',[{'type',369,'product',[{'var',369,'Msg'}|[{'var',369,'From'}|[{'var',369,'Parent'}|[{'var',369,'Module'}|[{'var',369,'Debug'}|[{'var',369,'Misc'}]]]]]]}|[{'type',370,'no_return',[]}]]}|[[{'type',371,'constraint',[{'atom',371,'is_subtype'}|[[{'var',371,'Msg'}|[{'type',371,'term',[]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'From'}|[{'type',372,'tuple',[{'type',372,'pid',[]}|[{'ann_type',372,[{'var',372,'Tag'}|[{'var',372,'_'}]]}]]}]]]]}|[{'type',373,'constraint',[{'atom',373,'is_subtype'}|[[{'var',373,'Parent'}|[{'type',373,'pid',[]}]]]]}|[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Module'}|[{'type',374,'module',[]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'Debug'}|[{'type',375,'list',[{'user_type',375,'dbg_opt',[]}]}]]]]}|[{'type',376,'constraint',[{'atom',376,'is_subtype'}|[[{'var',376,'Misc'}|[{'type',376,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'handle_debug',4},[{'type',402,'bounded_fun',[{'type',402,'fun',[{'type',402,'product',[{'var',402,'Debug'}|[{'var',402,'FormFunc'}|[{'var',402,'Extra'}|[{'var',402,'Event'}]]]]}|[{'type',402,'list',[{'user_type',402,'dbg_opt',[]}]}]]}|[[{'type',403,'constraint',[{'atom',403,'is_subtype'}|[[{'var',403,'Debug'}|[{'type',403,'list',[{'user_type',403,'dbg_opt',[]}]}]]]]}|[{'type',404,'constraint',[{'atom',404,'is_subtype'}|[[{'var',404,'FormFunc'}|[{'user_type',404,'format_fun',[]}]]]]}|[{'type',405,'constraint',[{'atom',405,'is_subtype'}|[[{'var',405,'Extra'}|[{'type',405,'term',[]}]]]]}|[{'type',406,'constraint',[{'atom',406,'is_subtype'}|[[{'var',406,'Event'}|[{'user_type',406,'system_event',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'get_debug',3},[{'type',637,'bounded_fun',[{'type',637,'fun',[{'type',637,'product',[{'var',637,'Item'}|[{'var',637,'Debug'}|[{'var',637,'Default'}]]]}|[{'type',637,'term',[]}]]}|[[{'type',638,'constraint',[{'atom',638,'is_subtype'}|[[{'var',638,'Item'}|[{'type',638,'union',[{'atom',638,'log'}|[{'atom',638,'statistics'}]]}]]]]}|[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'Debug'}|[{'type',639,'list',[{'user_type',639,'dbg_opt',[]}]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Default'}|[{'type',640,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'print_log',1},[{'type',651,'bounded_fun',[{'type',651,'fun',[{'type',651,'product',[{'var',651,'Debug'}]}|[{'atom',651,'ok'}]]}|[[{'type',652,'constraint',[{'atom',652,'is_subtype'}|[[{'var',652,'Debug'}|[{'type',652,'list',[{'user_type',652,'dbg_opt',[]}]}]]]]}]]]}]}]
, 'spec' = [{{'get_log',1},[{'type',657,'bounded_fun',[{'type',657,'fun',[{'type',657,'product',[{'var',657,'Debug'}]}|[{'type',657,'list',[{'user_type',657,'system_event',[]}]}]]}|[[{'type',658,'constraint',[{'atom',658,'is_subtype'}|[[{'var',658,'Debug'}|[{'type',658,'list',[{'user_type',658,'dbg_opt',[]}]}]]]]}]]]}]}]
, 'spec' = [{{'debug_options',1},[{'type',748,'fun',[{'type',748,'product',[{'type',748,'list',[{'ann_type',748,[{'var',748,'Opt'}|[{'user_type',748,'debug_option',[]}]]}]}]}|[{'type',748,'list',[{'user_type',748,'dbg_opt',[]}]}]]}]}] ] 'suspend'/1 = fun (_0) -> apply 'send_system_msg'/2 (_0,'suspend')
'suspend'/2 = fun (_0,_1) -> apply 'send_system_msg'/3 (_0,'suspend',_1)
'resume'/1 = fun (_0) -> apply 'send_system_msg'/2 (_0,'resume')
'resume'/2 = fun (_0,_1) -> apply 'send_system_msg'/3 (_0,'resume',_1)
'get_status'/1 = fun (_0) -> apply 'send_system_msg'/2 (_0,'get_status')
'get_status'/2 = fun (_0,_1) -> apply 'send_system_msg'/3 (_0,'get_status',_1)
'get_state'/1 = fun (_0) -> case apply 'send_system_msg'/2 (_0,'get_state') of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason)
<State> when 'true' -> State end
'get_state'/2 = fun (_0,_1) -> case apply 'send_system_msg'/3 (_0,'get_state',_1) of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason)
<State> when 'true' -> State end
'replace_state'/2 = fun (_0,_1) -> case apply 'send_system_msg'/2 (_0,{'replace_state',_1}) of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason)
<State> when 'true' -> State end
'replace_state'/3 = fun (_0,_1,_2) -> case apply 'send_system_msg'/3 (_0,{'replace_state',_1},_2) of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason)
<State> when 'true' -> State end
'change_code'/4 = fun (_0,_1,_2,_3) -> apply 'send_system_msg'/2 (_0,{'change_code',_1,_2,_3})
'change_code'/5 = fun (_0,_1,_2,_3,_4) -> apply 'send_system_msg'/3 (_0,{'change_code',_1,_2,_3},_4)
'terminate'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'terminate',_1})
'terminate'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'terminate',_1},_2)
'log'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'debug',{'log',_1}})
'log'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'debug',{'log',_1}},_2)
'trace'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'debug',{'trace',_1}})
'trace'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'debug',{'trace',_1}},_2)
'log_to_file'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'debug',{'log_to_file',_1}})
'log_to_file'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'debug',{'log_to_file',_1}},_2)
'statistics'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'debug',{'statistics',_1}})
'statistics'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'debug',{'statistics',_1}},_2)
'no_debug'/1 = fun (_0) -> apply 'send_system_msg'/2 (_0,{'debug','no_debug'})
'no_debug'/2 = fun (_0,_1) -> apply 'send_system_msg'/3 (_0,{'debug','no_debug'},_1)
'install'/2 = fun (_0,_1) -> case <_0,_1> of <Name,_@r0 = {Func,FuncState}> when 'true' -> apply 'send_system_msg'/2 (Name,{'debug',{'install',_@r0}})
<Name,_@r1 = {FuncId,Func,FuncState}> when 'true' -> apply 'send_system_msg'/2 (Name,{'debug',{'install',_@r1}})
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'install',2}}] )-|['compiler_generated'] ) end
'install'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Name,_@r0 = {Func,FuncState},Timeout> when 'true' -> apply 'send_system_msg'/3 (Name,{'debug',{'install',_@r0}},Timeout)
<Name,_@r1 = {FuncId,Func,FuncState},Timeout> when 'true' -> apply 'send_system_msg'/3 (Name,{'debug',{'install',_@r1}},Timeout)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'install',3}}] )-|['compiler_generated'] ) end
'remove'/2 = fun (_0,_1) -> apply 'send_system_msg'/2 (_0,{'debug',{'remove',_1}})
'remove'/3 = fun (_0,_1,_2) -> apply 'send_system_msg'/3 (_0,{'debug',{'remove',_1}},_2)
'send_system_msg'/2 = fun (_0,_1) -> let <_2> = catch call 'gen':'call' (_0,'system',_1) in case _2 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> let <_3> = apply 'mfa'/2 (_0,_1) in call 'erlang':'exit' ({Reason,_3})
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'send_system_msg'/3 = fun (_0,_1,_2) -> let <_3> = catch call 'gen':'call' (_0,'system',_1,_2) in case _3 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> let <_4> = apply 'mfa'/3 (_0,_1,_2) in call 'erlang':'exit' ({Reason,_4})
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'mfa'/2 = fun (_0,_1) -> case <_0,_1> of <Name,{'debug',{Func,Arg2}}> when 'true' -> {'sys',Func,[Name|[Arg2|[]]]}
<Name,{'change_code',Mod,Vsn,Extra}> when 'true' -> {'sys','change_code',[Name|[Mod|[Vsn|[Extra|[]]]]]}
<Name,{'terminate',Reason}> when 'true' -> {'sys','terminate',[Name|[Reason|[]]]}
<Name,Atom> when 'true' -> {'sys',Atom,[Name|[]]} end
'mfa'/3 = fun (_0,_1,_2) -> case apply 'mfa'/2 (_0,_1) of <{M,F,A}> when 'true' -> let <_4> = call 'erlang':'++' (A,[_2|[]]) in {M,F,_4}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'handle_system_msg'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'handle_system_msg'/8 ('running',_0,_1,_2,_3,_4,_5,'false')
'handle_system_msg'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> apply 'handle_system_msg'/8 ('running',_0,_1,_2,_3,_4,_5,_6)
'handle_system_msg'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case apply 'do_cmd'/6 (_0,_1,_3,_4,_5,_6) of <{'suspended',Reply,NDebug,NMisc}> when 'true' -> do (call ('gen'-|['result_not_wanted'] ):('reply'-|['result_not_wanted'] ) (_2,Reply)-|['result_not_wanted'] ) apply 'suspend_loop'/6 ('suspended',_3,_4,NDebug,NMisc,_7)
<{'running',Reply,NDebug,NMisc}> when 'true' -> do (call ('gen'-|['result_not_wanted'] ):('reply'-|['result_not_wanted'] ) (_2,Reply)-|['result_not_wanted'] ) call _4:'system_continue' (_3,NDebug,NMisc)
<{{'terminating',Reason},Reply,NDebug,NMisc}> when 'true' -> do (call ('gen'-|['result_not_wanted'] ):('reply'-|['result_not_wanted'] ) (_2,Reply)-|['result_not_wanted'] ) call _4:'system_terminate' (Reason,_3,NDebug,NMisc)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'handle_debug'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[DbgOpt = {'trace','true'}|T],FormFunc,State,Event> when 'true' -> do apply 'print_event'/1 ({Event,State,FormFunc}) let <_4> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [DbgOpt|_4]
<[{'log',NLog}|T],FormFunc,State,Event> when 'true' -> let <Item> = {Event,State,FormFunc} in let <_6> = apply 'nlog_put'/2 (Item,NLog) in let <_7> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{'log',_6}|_7]
<[DbgOpt = {'log_to_file',Fd}|T],FormFunc,State,Event> when 'true' -> do apply 'print_event'/2 (Fd,{Event,State,FormFunc}) let <_8> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [DbgOpt|_8]
<[{'statistics',StatData}|T],FormFunc,State,Event> when 'true' -> let <NStatData> = apply 'stat'/2 (Event,StatData) in let <_10> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{'statistics',NStatData}|_10]
<[{FuncId,{Func,FuncState}}|T],FormFunc,State,Event> when 'true' -> try apply Func (FuncState,Event,State) of <_11> -> case _11 of <'done'> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event)
<NFuncState> when 'true' -> let <_12> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{FuncId,{Func,NFuncState}}|_12] end catch <_16,_15,_14> -> case <_16,_15,_14> of <('throw'-|['compiler_generated'] ),('done'-|['compiler_generated'] ),_29> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event)
<('throw'-|['compiler_generated'] ),NFuncState,_30> when 'true' -> let <_17> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{FuncId,{Func,NFuncState}}|_17]
<_31,_32,_33> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event) end
<[{Func,FuncState}|T],FormFunc,State,Event> when 'true' -> try apply Func (FuncState,Event,State) of <_18> -> case _18 of <'done'> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event)
<NFuncState> when 'true' -> let <_19> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{Func,NFuncState}|_19] end catch <_23,_22,_21> -> case <_23,_22,_21> of <('throw'-|['compiler_generated'] ),('done'-|['compiler_generated'] ),_34> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event)
<('throw'-|['compiler_generated'] ),NFuncState,_35> when 'true' -> let <_24> = apply 'handle_debug'/4 (T,FormFunc,State,Event) in [{Func,NFuncState}|_24]
<_36,_37,_38> when 'true' -> apply 'handle_debug'/4 (T,FormFunc,State,Event) end
<[],_X_FormFunc,_X_State,_X_Event> when 'true' -> []
(<_28,_27,_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25})-|[{'function_name',{'handle_debug',4}}] )-|['compiler_generated'] ) end
'suspend_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _5 of <'true'> when 'true' -> apply 'suspend_loop_hib'/6 (_0,_1,_2,_3,_4,_5)
<_13> when 'true' -> receive <{'system',From,Msg}> when 'true' -> apply 'handle_system_msg'/8 (_0,Msg,From,_1,_2,_3,_4,_5)
<{'EXIT',_14,Reason}> when call 'erlang':'=:=' (_14,_1) -> call _2:'system_terminate' (Reason,_1,_3,_4) after 'infinity' -> 'true' end
'suspend_loop_hib'/6 = fun (_0,_1,_2,_3,_4,_5) -> receive <{'system',From,Msg}> when 'true' -> apply 'handle_system_msg'/8 (_0,Msg,From,_1,_2,_3,_4,_5)
<{'EXIT',_12,Reason}> when call 'erlang':'=:=' (_12,_1) -> call _2:'system_terminate' (Reason,_1,_3,_4) after 0 -> call 'proc_lib':'hibernate' ('sys','suspend_loop_hib',[_0|[_1|[_2|[_3|[_4|[_5|[]]]]]]])
'do_cmd'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_17,'suspend',_X_Parent,_X_Mod,Debug,Misc> when 'true' -> {'suspended','ok',Debug,Misc}
<_18,'resume',_X_Parent,_X_Mod,Debug,Misc> when 'true' -> {'running','ok',Debug,Misc}
<SysState,'get_state',_X_Parent,Mod,Debug,Misc> when 'true' -> let <_6> = apply 'do_get_state'/2 (Mod,Misc) in {SysState,_6,Debug,Misc}
<SysState,{'replace_state',StateFun},_X_Parent,Mod,Debug,Misc> when 'true' -> case apply 'do_replace_state'/3 (StateFun,Mod,Misc) of <{Res,NMisc}> when 'true' -> {SysState,Res,Debug,NMisc}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<SysState,'get_status',Parent,Mod,Debug,Misc> when 'true' -> let <Res> = apply 'get_status'/5 (SysState,Parent,Mod,Debug,Misc) in {SysState,Res,Debug,Misc}
<SysState,{'debug',What},_X_Parent,_X_Mod,Debug,Misc> when 'true' -> case apply 'debug_cmd'/2 (What,Debug) of <{Res,NDebug}> when 'true' -> {SysState,Res,NDebug,Misc}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<_19,{'terminate',Reason},_X_Parent,_X_Mod,Debug,Misc> when 'true' -> {{'terminating',Reason},'ok',Debug,Misc}
<'suspended',{'change_code',Module,Vsn,Extra},_X_Parent,Mod,Debug,Misc> when 'true' -> case apply 'do_change_code'/5 (Mod,Module,Vsn,Extra,Misc) of <{Res,NMisc}> when 'true' -> {'suspended',Res,Debug,NMisc}
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<SysState,Other,_X_Parent,_X_Mod,Debug,Misc> when 'true' -> {SysState,{'error',{'unknown_system_msg',Other}},Debug,Misc} end
'do_get_state'/2 = fun (_0,_1) -> case call 'erlang':'function_exported' (_0,'system_get_state',1) of <'true'> when 'true' -> try case call _0:'system_get_state' (_1) of <{'ok',State}> when 'true' -> State
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end of <_3> -> _3 catch <_6,_5,_4> -> {'error',{'callback_failed',{_0,'system_get_state'},{_6,_5}}}
<'false'> when 'true' -> _1
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'do_replace_state'/3 = fun (_0,_1,_2) -> case call 'erlang':'function_exported' (_1,'system_replace_state',2) of <'true'> when 'true' -> try case call _1:'system_replace_state' (_0,_2) of <{'ok',State,NMisc}> when 'true' -> {State,NMisc}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end of <_4> -> _4 catch <_7,_6,_5> -> {{'error',{'callback_failed',{_1,'system_replace_state'},{_7,_6}}},_2}
<'false'> when 'true' -> try let <NMisc> = apply _0 (_2) in {NMisc,NMisc} of <_9> -> _9 catch <_12,_11,_10> -> {{'error',{'callback_failed',_0,{_12,_11}}},_2}
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
'get_status'/5 = fun (_0,_1,_2,_3,_4) -> let <PDict> = call 'erlang':'get' () in let <_8> = case call 'erlang':'function_exported' (_2,'format_status',2) of <'true'> when 'true' -> let <FmtArgs> = [PDict|[_0|[_1|[_3|[_4|[]]]]]] in call _2:'format_status' ('normal',FmtArgs)
<_16> when 'true' -> _4 end in let <_10> = call 'erlang':'self' () in {'status',_10,{'module',_2},[PDict|[_0|[_1|[_3|[_8|[]]]]]]}
'debug_cmd'/2 = fun (_0,_1) -> case <_0,_1> of <{'trace','true'},Debug> when 'true' -> let <_2> = apply 'install_debug'/3 ('trace','true',Debug) in {'ok',_2}
<{'trace','false'},Debug> when 'true' -> let <_3> = apply 'remove_debug'/2 ('trace',Debug) in {'ok',_3}
<{'log','true'},Debug> when 'true' -> let <_4> = apply 'nlog_new'/0 () in let <NLog> = apply 'get_debug'/3 ('log',Debug,_4) in let <_6> = apply 'nlog_new'/1 (NLog) in let <_7> = apply 'install_debug'/3 ('log',_6,Debug) in {'ok',_7}
<{'log',{'true',N}},Debug> when let <_8> = call 'erlang':'is_integer' (N) in let <_9> = call 'erlang':'=<' (1,N) in call 'erlang':'and' (_8,_9) -> let <_10> = apply 'nlog_new'/1 (N) in let <NLog> = apply 'get_debug'/3 ('log',Debug,_10) in let <_12> = apply 'nlog_new'/2 (N,NLog) in let <_13> = apply 'install_debug'/3 ('log',_12,Debug) in {'ok',_13}
<{'log','false'},Debug> when 'true' -> let <_14> = apply 'remove_debug'/2 ('log',Debug) in {'ok',_14}
<{'log','print'},Debug> when 'true' -> do apply 'print_log'/1 (Debug) {'ok',Debug}
<{'log','get'},Debug> when 'true' -> let <_15> = apply 'nlog_new'/0 () in let <NLog> = apply 'get_debug'/3 ('log',Debug,_15) in let <_22> = letrec 'lc$^0'/1 = fun (_20) -> case _20 of <[{Event,_X_State,_X_FormFunc}|_18]> when 'true' -> let <_21> = apply 'lc$^0'/1 (_18) in ([Event|_21]-|['compiler_generated'] )
(<[_17|_18]> when 'true' -> apply 'lc$^0'/1 (_18)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_37> when 'true' -> (primop 'match_fail' ({'function_clause',_37})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in let <_19> = apply 'nlog_get'/1 (NLog) in apply 'lc$^0'/1 (_19) in {{'ok',_22},Debug}
<{'log_to_file','false'},Debug> when 'true' -> let <NDebug> = apply 'close_log_file'/1 (Debug) in {'ok',NDebug}
<{'log_to_file',FileName},Debug> when 'true' -> let <NDebug> = apply 'close_log_file'/1 (Debug) in case call 'file':'open' (FileName,['write'|[{'encoding','utf8'}]]) of <{'ok',Fd}> when 'true' -> let <_25> = apply 'install_debug'/3 ('log_to_file',Fd,NDebug) in {'ok',_25}
<_X_Error> when 'true' -> {{'error','open_file'},NDebug} end
<{'statistics','true'},Debug> when 'true' -> let <_27> = apply 'init_stat'/0 () in let <_28> = apply 'install_debug'/3 ('statistics',_27,Debug) in {'ok',_28}
<{'statistics','false'},Debug> when 'true' -> let <_29> = apply 'remove_debug'/2 ('statistics',Debug) in {'ok',_29}
<{'statistics','get'},Debug> when 'true' -> let <_30> = apply 'get_debug'/3 ('statistics',Debug,[]) in let <_31> = apply 'get_stat'/1 (_30) in {{'ok',_31},Debug}
<'no_debug',Debug> when 'true' -> do apply 'close_log_file'/1 (Debug) {'ok',[]}
<{'install',{Func,FuncState}},Debug> when 'true' -> let <_32> = apply 'install_debug'/3 (Func,FuncState,Debug) in {'ok',_32}
<{'install',{FuncId,Func,FuncState}},Debug> when 'true' -> let <_33> = apply 'install_debug'/3 (FuncId,{Func,FuncState},Debug) in {'ok',_33}
<{'remove',FuncOrFuncId},Debug> when 'true' -> let <_34> = apply 'remove_debug'/2 (FuncOrFuncId,Debug) in {'ok',_34}
<_X_Unknown,Debug> when 'true' -> {'unknown_debug',Debug} end
'do_change_code'/5 = fun (_0,_1,_2,_3,_4) -> let <_5> = catch call _0:'system_code_change' (_4,_1,_2,_3) in case _5 of <_@r0 = {'ok',NMisc}> when 'true' -> _@r0
<Else> when 'true' -> {{'error',Else},_4} end
'print_event'/1 = fun (_0) -> apply 'print_event'/2 ('standard_io',_0)
'print_event'/2 = fun (_0,_1) -> case <_0,_1> of <Dev,{Event,State,FormFunc}> when 'true' -> apply FormFunc (Dev,Event,State)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'print_event',2}}] )-|['compiler_generated'] ) end
'init_stat'/0 = fun () -> let <_2> = call 'erlang':'localtime' () in let <_0> = call 'erlang':'self' () in let <_1> = call 'erlang':'process_info' (_0,'reductions') in {_2,_1,0,0}
'get_stat'/1 = fun (_0) -> case _0 of <{Time,{'reductions',Reds},In,Out}> when 'true' -> let <_1> = call 'erlang':'self' () in case call 'erlang':'process_info' (_1,'reductions') of <{'reductions',Reds2}> when 'true' -> let <_3> = call 'erlang':'localtime' () in let <_4> = call 'erlang':'-' (Reds2,Reds) in [{'start_time',Time}|[{'current_time',_3}|[{'reductions',_4}|[{'messages_in',In}|[{'messages_out',Out}|[]]]]]]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<_6> when 'true' -> 'no_statistics' end
'stat'/2 = fun (_0,_1) -> case <_0,_1> of <{'in',_X_Msg},{Time,Reds,In,Out}> when 'true' -> let <_2> = call 'erlang':'+' (In,1) in {Time,Reds,_2,Out}
<{'in',_X_Msg,_X_From},{Time,Reds,In,Out}> when 'true' -> let <_3> = call 'erlang':'+' (In,1) in {Time,Reds,_3,Out}
<{'out',_X_Msg,_X_To},{Time,Reds,In,Out}> when 'true' -> let <_4> = call 'erlang':'+' (Out,1) in {Time,Reds,In,_4}
<{'out',_X_Msg,_X_To,_X_State},{Time,Reds,In,Out}> when 'true' -> let <_5> = call 'erlang':'+' (Out,1) in {Time,Reds,In,_5}
<_8,StatData> when 'true' -> StatData end
'install_debug'/3 = fun (_0,_1,_2) -> case call 'lists':'keysearch' (_0,1,_2) of <'false'> when 'true' -> [{_0,_1}|_2]
<_7> when 'true' -> _2 end
'remove_debug'/2 = fun (_0,_1) -> call 'lists':'keydelete' (_0,1,_1)
'get_debug'/3 = fun (_0,_1,_2) -> apply 'get_debug2'/3 (_0,_1,_2)
'get_debug2'/3 = fun (_0,_1,_2) -> case call 'lists':'keysearch' (_0,1,_1) of <{'value',{_7,Data}}> when call 'erlang':'=:=' (_7,_0) -> Data
<_8> when 'true' -> _2 end
'print_log'/1 = fun (_0) -> let <_1> = apply 'nlog_new'/0 () in let <NLog> = apply 'get_debug'/3 ('log',_0,_1) in let <_4> = 'print_event'/1 in let <_3> = apply 'nlog_get'/1 (NLog) in call 'lists':'foreach' (_4,_3)
'get_log'/1 = fun (_0) -> let <_1> = apply 'nlog_new'/0 () in let <NLog> = apply 'get_debug'/3 ('log',_0,_1) in (letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[{Event,_X_State,_X_FormFunc}|_4]> when 'true' -> let <_7> = apply 'lc$^0'/1 (_4) in ([Event|_7]-|['compiler_generated'] )
(<[_3|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in let <_5> = apply 'nlog_get'/1 (NLog) in apply 'lc$^0'/1 (_5)-|['list_comprehension'] )
'close_log_file'/1 = fun (_0) -> case apply 'get_debug2'/3 ('log_to_file',_0,[]) of <[]> when 'true' -> _0
<Fd> when 'true' -> case call 'file':'close' (Fd) of <'ok'> when 'true' -> apply 'remove_debug'/2 ('log_to_file',_0)
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end end
'nlog_new'/0 = fun () -> apply 'nlog_new'/1 (10)
'nlog_new'/1 = fun (_0) -> case _0 of <NLog = [_2|_3]> when 'true' -> apply 'nlog_new'/2 (10,NLog)
<N> when 'true' -> [N|[]] end
'nlog_new'/2 = fun (_0,_1) -> let <_8> = fun (_5,_4) -> apply 'nlog_put'/2 (_5,_4) in let <_3> = apply 'nlog_new'/1 (_0) in let <_2> = apply 'nlog_get'/1 (_1) in call 'lists':'foldl' (_8,_3,_2)
'nlog_put'/2 = fun (_0,_1) -> case _1 of <[R|FF]> when call 'erlang':'is_list' (R) -> case FF of <[_8|F]> when 'true' -> [[_0|R]|F]
<[]> when 'true' -> case call 'lists':'reverse' (R,[_0|[]]) of <[_9|F]> when 'true' -> [[]|F]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<[1|R]> when 'true' -> [[_0|R]|[]]
<[J|R]> when 'true' -> let <_4> = call 'erlang':'-' (J,1) in [_4|[_0|R]]
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'nlog_get'/1 = fun (_0) -> case _0 of <[[]|F]> when 'true' -> F
<[R = [_3|_4]|F]> when 'true' -> let <_1> = call 'lists':'reverse' (R) in call 'erlang':'++' (F,_1)
<[_X_J|R]> when 'true' -> call 'lists':'reverse' (R)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'nlog_get',1}}] )-|['compiler_generated'] ) end
'debug_options'/1 = fun (_0) -> apply 'debug_options'/2 (_0,[])
'debug_options'/2 = fun (_0,_1) -> case <_0,_1> of <['trace'|T],Debug> when 'true' -> let <_2> = apply 'install_debug'/3 ('trace','true',Debug) in apply 'debug_options'/2 (T,_2)
<['log'|T],Debug> when 'true' -> let <_3> = apply 'nlog_new'/0 () in let <_4> = apply 'install_debug'/3 ('log',_3,Debug) in apply 'debug_options'/2 (T,_4)
<[{'log',N}|T],Debug> when let <_5> = call 'erlang':'is_integer' (N) in let <_6> = call 'erlang':'>' (N,0) in call 'erlang':'and' (_5,_6) -> let <_7> = apply 'nlog_new'/1 (N) in let <_8> = apply 'install_debug'/3 ('log',_7,Debug) in apply 'debug_options'/2 (T,_8)
<['statistics'|T],Debug> when 'true' -> let <_9> = apply 'init_stat'/0 () in let <_10> = apply 'install_debug'/3 ('statistics',_9,Debug) in apply 'debug_options'/2 (T,_10)
<[{'log_to_file',FileName}|T],Debug> when 'true' -> case call 'file':'open' (FileName,['write'|[{'encoding','utf8'}]]) of <{'ok',Fd}> when 'true' -> let <_11> = apply 'install_debug'/3 ('log_to_file',Fd,Debug) in apply 'debug_options'/2 (T,_11)
<_X_Error> when 'true' -> apply 'debug_options'/2 (T,Debug) end
<[{'install',{Func,FuncState}}|T],Debug> when 'true' -> let <_13> = apply 'install_debug'/3 (Func,FuncState,Debug) in apply 'debug_options'/2 (T,_13)
<[{'install',{FuncId,Func,FuncState}}|T],Debug> when 'true' -> let <_14> = apply 'install_debug'/3 (FuncId,{Func,FuncState},Debug) in apply 'debug_options'/2 (T,_14)
<[_17|T],Debug> when 'true' -> apply 'debug_options'/2 (T,Debug)
<[],Debug> when 'true' -> Debug
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'debug_options',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('sys')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('sys',_0) end