module 'supervisor_bridge' ['behaviour_info'/1,'code_change'/3,'format_log'/1,'format_log'/2,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'start_link'/2,'start_link'/3,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_server']
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],25}]
, 'callback' = [{{'init',1},[{'type',34,'fun',[{'type',34,'product',[{'ann_type',34,[{'var',34,'Args'}|[{'type',34,'term',[]}]]}]}|[{'type',35,'union',[{'type',35,'tuple',[{'atom',35,'ok'}|[{'ann_type',35,[{'var',35,'Pid'}|[{'type',35,'pid',[]}]]}|[{'ann_type',35,[{'var',35,'State'}|[{'type',35,'term',[]}]]}]]]}|[{'atom',35,'ignore'}|[{'type',35,'tuple',[{'atom',35,'error'}|[{'ann_type',35,[{'var',35,'Error'}|[{'type',35,'term',[]}]]}]]}]]]}]]}]}]
, 'callback' = [{{'terminate',2},[{'type',36,'fun',[{'type',36,'product',[{'ann_type',36,[{'var',36,'Reason'}|[{'type',36,'union',[{'atom',36,'shutdown'}|[{'type',36,'term',[]}]]}]]}|[{'ann_type',36,[{'var',36,'State'}|[{'type',36,'term',[]}]]}]]}|[{'ann_type',37,[{'var',37,'Ignored'}|[{'type',37,'term',[]}]]}]]}]}]
, 'record' = [{'state',[{'record_field',54,{'atom',54,'mod'}}|[{'record_field',54,{'atom',54,'pid'}}|[{'record_field',54,{'atom',54,'child_state'}}|[{'record_field',54,{'atom',54,'name'}}]]]]}]
, 'spec' = [{{'start_link',2},[{'type',56,'bounded_fun',[{'type',56,'fun',[{'type',56,'product',[{'var',56,'Module'}|[{'var',56,'Args'}]]}|[{'var',56,'Result'}]]}|[[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Module'}|[{'type',57,'module',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Args'}|[{'type',58,'term',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Result'}|[{'type',59,'union',[{'type',59,'tuple',[{'atom',59,'ok'}|[{'var',59,'Pid'}]]}|[{'atom',59,'ignore'}|[{'type',59,'tuple',[{'atom',59,'error'}|[{'var',59,'Error'}]]}]]]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'Error'}|[{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'already_started'}|[{'var',60,'Pid'}]]}|[{'type',60,'term',[]}]]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Pid'}|[{'type',61,'pid',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'start_link',3},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'SupBridgeName'}|[{'var',66,'Module'}|[{'var',66,'Args'}]]]}|[{'var',66,'Result'}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'SupBridgeName'}|[{'type',67,'union',[{'type',67,'tuple',[{'atom',67,'local'}|[{'var',67,'Name'}]]}|[{'type',67,'tuple',[{'atom',67,'global'}|[{'var',67,'Name'}]]}]]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Name'}|[{'type',68,'atom',[]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Module'}|[{'type',69,'module',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'Args'}|[{'type',70,'term',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Result'}|[{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'ok'}|[{'var',71,'Pid'}]]}|[{'atom',71,'ignore'}|[{'type',71,'tuple',[{'atom',71,'error'}|[{'var',71,'Error'}]]}]]]}]]]]}|[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Error'}|[{'type',72,'union',[{'type',72,'tuple',[{'atom',72,'already_started'}|[{'var',72,'Pid'}]]}|[{'type',72,'term',[]}]]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Pid'}|[{'type',73,'pid',[]}]]]]}]]]]]]]]]}]}] ] 'start_link'/2 = fun (_0,_1) -> call 'gen_server':'start_link' ('supervisor_bridge',[_0|[_1|['self']]],[])
'start_link'/3 = fun (_0,_1,_2) -> call 'gen_server':'start_link' (_0,'supervisor_bridge',[_1|[_2|[_0|[]]]],[])
'init'/1 = fun (_0) -> case _0 of <[Mod|[StartArgs|[Name0|[]]]]> when 'true' -> do call 'erlang':'process_flag' ('trap_exit','true') let <Name> = apply 'supname'/2 (Name0,Mod) in case call Mod:'init' (StartArgs) of <{'ok',Pid,ChildState}> when call 'erlang':'is_pid' (Pid) -> do call 'erlang':'link' (Pid) do apply 'report_progress'/4 (Pid,Mod,StartArgs,Name) {'ok',{'state',Mod,Pid,ChildState,Name}}
<'ignore'> when 'true' -> 'ignore'
<{'error',Reason}> when 'true' -> {'stop',Reason}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'supname'/2 = fun (_0,_1) -> case <_0,_1> of <'self',Mod> when 'true' -> let <_2> = call 'erlang':'self' () in {_2,Mod}
<N,_5> when 'true' -> N end
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'which_children',_X_From,State> when 'true' -> {'reply',[],State}
<_X_Req,_X_From,State> when 'true' -> {'reply',{'error','badcall'},State} end
'handle_cast'/2 = fun (_0,_1) -> {'noreply',_1}
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <{'EXIT',Pid,Reason},State = {'state',_14,_15,_16,_17}> when (try let <_6> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_6,Pid) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do case Reason of <'normal'> when 'true' -> 'ok'
<'shutdown'> when 'true' -> 'ok'
<{'shutdown',_X_Term}> when 'true' -> 'ok'
<_18> when 'true' -> apply 'report_error'/3 ('child_terminated',Reason,State) end case State of <{'state',_19,_20,_21,_22}> when 'true' -> let <_11> = call 'erlang':'setelement' (3,State,'undefined') in {'stop',Reason,_11}
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_24,State> when 'true' -> {'noreply',State} end
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Reason,{'state',_4,'undefined',_5,_6}> when 'true' -> 'ok'
<Reason,State> when 'true' -> apply 'terminate_pid'/2 (Reason,State) end
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'terminate_pid'/2 = fun (_0,_1) -> case <_0,_1> of <Reason,{'state',Mod,_4,ChildState,_5}> when 'true' -> call Mod:'terminate' (Reason,ChildState)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'terminate_pid',2}}] )-|['compiler_generated'] ) end
'report_progress'/4 = fun (_0,_1,_2,_3) -> case call 'logger':'allow' ('info','supervisor_bridge') of <'true'> when 'true' -> let <_4> = ~{'report'=>[{'supervisor',_3}|[{'started',[{'pid',_0}|[{'mfa',{_1,'init',[_2|[]]}}|[]]]}|[]]]|~{'label'=>{'supervisor','progress'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],'line'=>136,'mfa'=>{'supervisor_bridge','report_progress',4}}~,'info',_4,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor_bridge':'format_log'/1,'tag'=>'info_report','type'=>'progress'}~,'logger_formatter'=>~{'title'=>[80|[82|[79|[71|[82|[69|[83|[83|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor_bridge':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'report_error'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Error,Reason,{'state',Mod,Pid,_12,Name}> when 'true' -> case call 'logger':'allow' ('error','supervisor_bridge') of <'true'> when 'true' -> let <_3> = ~{'report'=>[{'supervisor',Name}|[{'errorContext',Error}|[{'reason',Reason}|[{'offender',[{'pid',Pid}|[{'mod',Mod}|[]]]}|[]]]]]|~{'label'=>{'supervisor','error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[98|[114|[105|[100|[103|[101|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]],'line'=>149,'mfa'=>{'supervisor_bridge','report_error',3}}~,'error',_3,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor_bridge':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor_bridge':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'report_error',3}}] )-|['compiler_generated'] ) end
'format_log'/1 = fun (_0) -> let <Depth> = call 'error_logger':'get_format_depth' () in let <FormatOpts> = ~{'depth'=>Depth,'single_line'=>'false','encoding'=>'utf8'|~{'chars_limit'=>'unlimited'}~}~ in let <_3> = apply 'limit_report'/2 (_0,Depth) in apply 'format_log_multi'/2 (_3,FormatOpts)
'limit_report'/2 = fun (_0,_1) -> case <_0,_1> of <LogReport,'unlimited'> when 'true' -> LogReport
<LogReport = ~{'report':=[Supervisor = {'supervisor',_8}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,Depth> when 'true' -> let <_2> = apply 'limit_child_report'/2 (Child,Depth) in case <> of (<> when call 'erlang':'is_map' (LogReport) -> ~{'report'=>[Supervisor|[{'started',_2}|[]]]|LogReport}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',LogReport})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<LogReport = ~{'report':=[Supervisor = {'supervisor',_9}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor','error'}}~,Depth> when 'true' -> let <_3> = call 'io_lib':'limit_term' (Ctxt,Depth) in let <_4> = call 'io_lib':'limit_term' (Reason,Depth) in let <_5> = call 'io_lib':'limit_term' (Child,Depth) in case <> of (<> when call 'erlang':'is_map' (LogReport) -> ~{'report'=>[Supervisor|[{'errorContext',_3}|[{'reason',_4}|[{'offender',_5}|[]]]]]|LogReport}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',LogReport})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'limit_report',2}}] )-|['compiler_generated'] ) end
'limit_child_report'/2 = fun (_0,_1) -> case call 'lists':'keyfind' ('mfa',1,_0) of <{'mfa',{M,F,[As|[]]}}> when 'true' -> let <_3> = call 'io_lib':'limit_term' (As,_1) in let <NewMFAs> = {M,F,[_3|[]]} in call 'lists':'keyreplace' ('mfa',1,_0,{'mfa',NewMFAs})
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'format_log'/2 = fun (_0,_1) -> let <FormatOpts> = call 'maps':'merge' (~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~,_1) in let <_5> = case FormatOpts of <~{'chars_limit':='unlimited'}~> when 'true' -> []
<~{'chars_limit':=Limit}~> when 'true' -> [{'chars_limit',Limit}|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case apply 'format_log_single'/2 (_0,FormatOpts) of <{Format,Args}> when 'true' -> call 'io_lib':'format' (Format,Args,_5)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'format_log_single'/2 = fun (_0,_1) -> case <_0,_1> of <~{'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in case apply 'format_child_log_progress_single'/3 (Child,[83|[116|[97|[114|[116|[101|[100|[58]]]]]]]],FormatOpts) of <{ChildFormat,ChildArgs}> when 'true' -> let <_4> = call 'erlang':'++' (P,[46]) in let <Format> = call 'erlang':'++' ([83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]],_4) in let <_7> = case Depth of <'unlimited'> when 'true' -> [SupName|[]]
<_21> when 'true' -> [SupName|[Depth|[]]] end in let <_10> = call 'erlang':'++' (Format,ChildFormat) in let <_9> = call 'erlang':'++' (_7,ChildArgs) in {_10,_9}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<~{'report':=[{'supervisor',SupName}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]|[P|[[46|[32|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]|[P|[[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]]) in case apply 'format_child_log_error_single'/2 (Child,[79|[102|[102|[101|[110|[100|[101|[114|[58]]]]]]]]]) of <{ChildFormat,ChildArgs}> when 'true' -> let <_15> = case Depth of <'unlimited'> when 'true' -> [SupName|[Ctxt|[Reason|[]]]]
<_22> when 'true' -> [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[]]]]]]] end in let <_18> = call 'erlang':'++' (Format,ChildFormat) in let <_17> = call 'erlang':'++' (_15,ChildArgs) in {_18,_17}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<Report,FormatOpts> when 'true' -> apply 'format_log_multi'/2 (Report,FormatOpts) end
'format_log_multi'/2 = fun (_0,_1) -> case <_0,_1> of <~{'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[115|[116|[97|[114|[116|[101|[100|[58|[32]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]) in let <_5> = case Depth of <'unlimited'> when 'true' -> [SupName|[Child|[]]]
<_14> when 'true' -> [SupName|[Depth|[Child|[Depth|[]]]]] end in {Format,_5}
<~{'report':=[{'supervisor',SupName}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[101|[114|[114|[111|[114|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[114|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[111|[102|[102|[101|[110|[100|[101|[114|[58|[32]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]]]]]]]) in let <_10> = case Depth of <'unlimited'> when 'true' -> [SupName|[Ctxt|[Reason|[Child|[]]]]]
<_15> when 'true' -> [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[Child|[Depth|[]]]]]]]]] end in {Format,_10}
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'format_log_multi',2}}] )-|['compiler_generated'] ) end
'format_child_log_progress_single'/3 = fun (_0,_1,_2) -> case call 'lists':'keyfind' ('pid',1,_0) of <{'pid',Pid}> when 'true' -> case call 'lists':'keyfind' ('mfa',1,_0) of <{'mfa',MFAs}> when 'true' -> let <_6> = case call 'maps':'get' ('depth',_2) of <'unlimited'> when 'true' -> [MFAs|[]]
<Depth> when 'true' -> [MFAs|[Depth|[]]] end in let <_9> = apply 'p'/1 (_2) in let <_10> = call 'erlang':'++' (_9,[46]) in let <_11> = call 'erlang':'++' ([32|[126|[115|[32|[112|[105|[100|[61|[126|[119|[44|[109|[102|[97|[61]]]]]]]]]]]]]]],_10) in let <_8> = [_1|[Pid|_6]] in {_11,_8}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'format_child_log_error_single'/2 = fun (_0,_1) -> case call 'lists':'keyfind' ('pid',1,_0) of <{'pid',Pid}> when 'true' -> case call 'lists':'keyfind' ('mod',1,_0) of <{'mod',Mod}> when 'true' -> {[32|[126|[115|[32|[112|[105|[100|[61|[126|[119|[44|[109|[111|[100|[61|[126|[119|[46]]]]]]]]]]]]]]]]]],[_1|[Pid|[Mod|[]]]]}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'p'/1 = fun (_0) -> case _0 of <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' -> let <_4> = apply 'single'/1 (Single) in let <_2> = apply 'mod'/1 (Enc) in let <_1> = apply 'p'/1 (Depth) in let <_3> = call 'erlang':'++' (_2,_1) in let <_5> = call 'erlang':'++' (_4,_3) in [126|_5]
<'unlimited'> when 'true' -> [112]
<_X_Depth> when 'true' -> [80] end
'single'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> [48]
<'false'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'single',1}}] )-|['compiler_generated'] ) end
'mod'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'behaviour_info'/1 = fun (_0) -> case _0 of <'callbacks'> when 'true' -> [{'init',1}|[{'terminate',2}]]
<'optional_callbacks'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'behaviour_info',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('supervisor_bridge')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('supervisor_bridge',_0) end