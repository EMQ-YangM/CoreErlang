module 'erl_scan' ['category'/1,'column'/1,'continuation_location'/1,'end_location'/1,'format_error'/1,'line'/1,'location'/1,'module_info'/0,'module_info'/1,'reserved_word'/1,'string'/1,'string'/2,'string'/3,'symbol'/1,'text'/1,'tokens'/3,'tokens'/4] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[115|[99|[97|[110|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}]
, 'export_type' = [{'error_info',0}|[{'options',0}|[{'return_cont',0}|[{'token',0}|[{'tokens_result',0}]]]]]
, 'removed' = [{'set_attribute',3,[117|[115|[101|[32|[101|[114|[108|[95|[97|[110|[110|[111|[58|[115|[101|[116|[95|[108|[105|[110|[101|[47|[50|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'attributes_info','_',[101|[114|[108|[95|[97|[110|[110|[111|[58|[123|[99|[111|[108|[117|[109|[110|[44|[108|[105|[110|[101|[44|[108|[111|[99|[97|[116|[105|[111|[110|[44|[116|[101|[120|[116|[125|[47|[49|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'token_info','_',[101|[114|[108|[95|[115|[99|[97|[110|[58|[123|[99|[97|[116|[101|[103|[111|[114|[121|[44|[99|[111|[108|[117|[109|[110|[44|[108|[105|[110|[101|[44|[108|[111|[99|[97|[116|[105|[111|[110|[44|[115|[121|[109|[98|[111|[108|[44|[116|[101|[120|[116|[125|[47|[49|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]
, 'removed_type' = [{'column',0,[117|[115|[101|[32|[101|[114|[108|[95|[97|[110|[110|[111|[58|[99|[111|[108|[117|[109|[110|[40|[41|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'line',0,[117|[115|[101|[32|[101|[114|[108|[95|[97|[110|[110|[111|[58|[108|[105|[110|[101|[40|[41|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'location',0,[117|[115|[101|[32|[101|[114|[108|[95|[97|[110|[110|[111|[58|[108|[111|[99|[97|[116|[105|[111|[110|[40|[41|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]
, 'type' = [{'category',{'type',90,'atom',[]},[]}]
, 'type' = [{'resword_fun',{'type',91,'fun',[{'type',91,'product',[{'type',91,'atom',[]}]}|[{'type',91,'boolean',[]}]]},[]}]
, 'type' = [{'option',{'type',92,'union',[{'atom',92,'return'}|[{'atom',92,'return_white_spaces'}|[{'atom',92,'return_comments'}|[{'atom',93,'text'}|[{'type',93,'tuple',[{'atom',93,'reserved_word_fun'}|[{'user_type',93,'resword_fun',[]}]]}]]]]]},[]}]
, 'type' = [{'options',{'type',94,'union',[{'user_type',94,'option',[]}|[{'type',94,'list',[{'user_type',94,'option',[]}]}]]},[]}]
, 'type' = [{'symbol',{'type',95,'union',[{'type',95,'atom',[]}|[{'type',95,'float',[]}|[{'type',95,'integer',[]}|[{'type',95,'string',[]}]]]]},[]}]
, 'type' = [{'token',{'type',96,'union',[{'type',96,'tuple',[{'user_type',96,'category',[]}|[{'ann_type',96,[{'var',96,'Anno'}|[{'remote_type',96,[{'atom',96,'erl_anno'}|[{'atom',96,'anno'}|[[]]]]}]]}|[{'user_type',96,'symbol',[]}]]]}|[{'type',97,'tuple',[{'user_type',97,'category',[]}|[{'ann_type',97,[{'var',97,'Anno'}|[{'remote_type',97,[{'atom',97,'erl_anno'}|[{'atom',97,'anno'}|[[]]]]}]]}]]}]]},[]}]
, 'type' = [{'tokens',{'type',98,'list',[{'user_type',98,'token',[]}]},[]}]
, 'type' = [{'error_description',{'type',99,'term',[]},[]}]
, 'type' = [{'error_info',{'type',100,'tuple',[{'remote_type',100,[{'atom',100,'erl_anno'}|[{'atom',100,'location'}|[[]]]]}|[{'type',100,'module',[]}|[{'user_type',100,'error_description',[]}]]]},[]}]
, 'record' = [{'erl_scan',[{'typed_record_field',{'record_field',104,{'atom',104,'resword_fun'},{'fun',104,{'function','reserved_word',1}}},{'user_type',104,'resword_fun',[]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'ws'},{'atom',105,'false'}},{'type',105,'boolean',[]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'comment'},{'atom',106,'false'}},{'type',106,'boolean',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'text'},{'atom',107,'false'}},{'type',107,'boolean',[]}}]]]]}]
, 'spec' = [{{'format_error',1},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'ErrorDescriptor'}]}|[{'type',111,'string',[]}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'ErrorDescriptor'}|[{'user_type',112,'error_description',[]}]]]]}]]]}]}]
, 'spec' = [{{'string',1},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'String'}]}|[{'var',125,'Return'}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'String'}|[{'type',126,'string',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'Return'}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'ann_type',127,[{'var',127,'Tokens'}|[{'user_type',127,'tokens',[]}]]}|[{'var',127,'EndLocation'}]]]}|[{'type',128,'tuple',[{'atom',128,'error'}|[{'ann_type',128,[{'var',128,'ErrorInfo'}|[{'user_type',128,'error_info',[]}]]}|[{'var',128,'ErrorLocation'}]]]}]]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'EndLocation'}|[{'remote_type',129,[{'atom',129,'erl_anno'}|[{'atom',129,'location'}|[[]]]]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'ErrorLocation'}|[{'remote_type',130,[{'atom',130,'erl_anno'}|[{'atom',130,'location'}|[[]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'string',2},[{'type',134,'bounded_fun',[{'type',134,'fun',[{'type',134,'product',[{'var',134,'String'}|[{'var',134,'StartLocation'}]]}|[{'var',134,'Return'}]]}|[[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'String'}|[{'type',135,'string',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Return'}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'ok'}|[{'ann_type',136,[{'var',136,'Tokens'}|[{'user_type',136,'tokens',[]}]]}|[{'var',136,'EndLocation'}]]]}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'ann_type',137,[{'var',137,'ErrorInfo'}|[{'user_type',137,'error_info',[]}]]}|[{'var',137,'ErrorLocation'}]]]}]]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'StartLocation'}|[{'remote_type',138,[{'atom',138,'erl_anno'}|[{'atom',138,'location'}|[[]]]]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'EndLocation'}|[{'remote_type',139,[{'atom',139,'erl_anno'}|[{'atom',139,'location'}|[[]]]]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'ErrorLocation'}|[{'remote_type',140,[{'atom',140,'erl_anno'}|[{'atom',140,'location'}|[[]]]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'string',3},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'String'}|[{'var',144,'StartLocation'}|[{'var',144,'Options'}]]]}|[{'var',144,'Return'}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'String'}|[{'type',145,'string',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Options'}|[{'user_type',146,'options',[]}]]]]}|[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Return'}|[{'type',147,'union',[{'type',147,'tuple',[{'atom',147,'ok'}|[{'ann_type',147,[{'var',147,'Tokens'}|[{'user_type',147,'tokens',[]}]]}|[{'var',147,'EndLocation'}]]]}|[{'type',148,'tuple',[{'atom',148,'error'}|[{'ann_type',148,[{'var',148,'ErrorInfo'}|[{'user_type',148,'error_info',[]}]]}|[{'var',148,'ErrorLocation'}]]]}]]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'StartLocation'}|[{'remote_type',149,[{'atom',149,'erl_anno'}|[{'atom',149,'location'}|[[]]]]}]]]]}|[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'EndLocation'}|[{'remote_type',150,[{'atom',150,'erl_anno'}|[{'atom',150,'location'}|[[]]]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'ErrorLocation'}|[{'remote_type',151,[{'atom',151,'erl_anno'}|[{'atom',151,'location'}|[[]]]]}]]]]}]]]]]]]]}]}]
, 'type' = [{'char_spec',{'type',159,'union',[{'type',159,'string',[]}|[{'atom',159,'eof'}]]},[]}]
, 'type' = [{'cont_fun',{'type',160,'fun',[{'type',160,'product',[{'user_type',160,'char_spec',[]}|[{'type',160,'record',[{'atom',160,'erl_scan'}]}|[{'remote_type',161,[{'atom',161,'erl_anno'}|[{'atom',161,'line'}|[[]]]]}|[{'remote_type',161,[{'atom',161,'erl_anno'}|[{'atom',161,'column'}|[[]]]]}|[{'user_type',162,'tokens',[]}|[{'type',162,'any',[]}]]]]]]}|[{'type',162,'any',[]}]]},[]}]
, 'opaque' = [{'return_cont',{'type',163,'tuple',[{'atom',163,'erl_scan_continuation'}|[{'type',164,'string',[]}|[{'remote_type',164,[{'atom',164,'erl_anno'}|[{'atom',164,'column'}|[[]]]]}|[{'user_type',164,'tokens',[]}|[{'remote_type',165,[{'atom',165,'erl_anno'}|[{'atom',165,'line'}|[[]]]]}|[{'type',166,'record',[{'atom',166,'erl_scan'}]}|[{'type',166,'any',[]}|[{'user_type',166,'cont_fun',[]}]]]]]]]]},[]}]
, 'type' = [{'tokens_result',{'type',167,'union',[{'type',167,'tuple',[{'atom',167,'ok'}|[{'ann_type',167,[{'var',167,'Tokens'}|[{'user_type',167,'tokens',[]}]]}|[{'ann_type',168,[{'var',168,'EndLocation'}|[{'remote_type',168,[{'atom',168,'erl_anno'}|[{'atom',168,'location'}|[[]]]]}]]}]]]}|[{'type',169,'tuple',[{'atom',169,'eof'}|[{'ann_type',169,[{'var',169,'EndLocation'}|[{'remote_type',169,[{'atom',169,'erl_anno'}|[{'atom',169,'location'}|[[]]]]}]]}]]}|[{'type',170,'tuple',[{'atom',170,'error'}|[{'ann_type',170,[{'var',170,'ErrorInfo'}|[{'user_type',170,'error_info',[]}]]}|[{'ann_type',171,[{'var',171,'EndLocation'}|[{'remote_type',171,[{'atom',171,'erl_anno'}|[{'atom',171,'location'}|[[]]]]}]]}]]]}]]]},[]}]
, 'spec' = [{{'tokens',3},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'Continuation'}|[{'var',173,'CharSpec'}|[{'var',173,'StartLocation'}]]]}|[{'var',173,'Return'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Continuation'}|[{'type',174,'union',[{'user_type',174,'return_cont',[]}|[{'type',174,'nil',[]}]]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'CharSpec'}|[{'user_type',175,'char_spec',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'StartLocation'}|[{'remote_type',176,[{'atom',176,'erl_anno'}|[{'atom',176,'location'}|[[]]]]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Return'}|[{'type',177,'union',[{'type',177,'tuple',[{'atom',177,'done'}|[{'ann_type',177,[{'var',177,'Result'}|[{'user_type',177,'tokens_result',[]}]]}|[{'ann_type',177,[{'var',177,'LeftOverChars'}|[{'user_type',177,'char_spec',[]}]]}]]]}|[{'type',178,'tuple',[{'atom',178,'more'}|[{'ann_type',178,[{'var',178,'Continuation1'}|[{'user_type',178,'return_cont',[]}]]}]]}]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'tokens',4},[{'type',182,'bounded_fun',[{'type',182,'fun',[{'type',182,'product',[{'var',182,'Continuation'}|[{'var',182,'CharSpec'}|[{'var',182,'StartLocation'}|[{'var',182,'Options'}]]]]}|[{'var',182,'Return'}]]}|[[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Continuation'}|[{'type',183,'union',[{'user_type',183,'return_cont',[]}|[{'type',183,'nil',[]}]]}]]]]}|[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'CharSpec'}|[{'user_type',184,'char_spec',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'StartLocation'}|[{'remote_type',185,[{'atom',185,'erl_anno'}|[{'atom',185,'location'}|[[]]]]}]]]]}|[{'type',186,'constraint',[{'atom',186,'is_subtype'}|[[{'var',186,'Options'}|[{'user_type',186,'options',[]}]]]]}|[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Return'}|[{'type',187,'union',[{'type',187,'tuple',[{'atom',187,'done'}|[{'ann_type',187,[{'var',187,'Result'}|[{'user_type',187,'tokens_result',[]}]]}|[{'ann_type',187,[{'var',187,'LeftOverChars'}|[{'user_type',187,'char_spec',[]}]]}]]]}|[{'type',188,'tuple',[{'atom',188,'more'}|[{'ann_type',188,[{'var',188,'Continuation1'}|[{'user_type',188,'return_cont',[]}]]}]]}]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'column',1},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'Token'}]}|[{'type',203,'union',[{'remote_type',203,[{'atom',203,'erl_anno'}|[{'atom',203,'column'}|[[]]]]}|[{'atom',203,'undefined'}]]}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'Token'}|[{'user_type',204,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'end_location',1},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Token'}]}|[{'type',209,'union',[{'remote_type',209,[{'atom',209,'erl_anno'}|[{'atom',209,'location'}|[[]]]]}|[{'atom',209,'undefined'}]]}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Token'}|[{'user_type',210,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'line',1},[{'type',215,'bounded_fun',[{'type',215,'fun',[{'type',215,'product',[{'var',215,'Token'}]}|[{'remote_type',215,[{'atom',215,'erl_anno'}|[{'atom',215,'line'}|[[]]]]}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Token'}|[{'user_type',216,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'location',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Token'}]}|[{'remote_type',221,[{'atom',221,'erl_anno'}|[{'atom',221,'location'}|[[]]]]}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Token'}|[{'user_type',222,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'text',1},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'Token'}]}|[{'type',227,'union',[{'remote_type',227,[{'atom',227,'erl_anno'}|[{'atom',227,'text'}|[[]]]]}|[{'atom',227,'undefined'}]]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Token'}|[{'user_type',228,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'category',1},[{'type',233,'bounded_fun',[{'type',233,'fun',[{'type',233,'product',[{'var',233,'Token'}]}|[{'user_type',233,'category',[]}]]}|[[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Token'}|[{'user_type',234,'token',[]}]]]]}]]]}]}]
, 'spec' = [{{'symbol',1},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'Token'}]}|[{'user_type',243,'symbol',[]}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Token'}|[{'user_type',244,'token',[]}]]]]}]]]}]}]
, 'compile' = [{'inline',[{'white_space_end',7}]}]
, 'compile' = [{'inline',[{'anno',4}]}]
, 'compile' = [{'inline',[{'anno',1}|[{'incr_column',2}|[{'new_column',2}]]]}]
, 'spec' = [{{'reserved_word',1},[{'type',1225,'fun',[{'type',1225,'product',[{'ann_type',1225,[{'var',1225,'Atom'}|[{'type',1225,'atom',[]}]]}]}|[{'type',1225,'boolean',[]}]]}]}] ] 'format_error'/1 = fun (_0) -> case _0 of <{'string',Quote,Head}> when 'true' -> let <_3> = apply 'string_thing'/1 (Quote) in let <_1> = call 'io_lib':'write_string' (Head,Quote) in let <_2> = call 'erlang':'++' ([32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]],_1) in let <_4> = call 'erlang':'++' (_3,_2) in let <_5> = call 'erlang':'++' ([117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32]]]]]]]]]]]]],_4) in call 'lists':'flatten' ([_5|[]])
<{'illegal',Type}> when 'true' -> let <_6> = call 'io_lib':'fwrite' ([105|[108|[108|[101|[103|[97|[108|[32|[126|[119]]]]]]]]]],[Type|[]]) in call 'lists':'flatten' (_6)
<'char'> when 'true' -> [117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]
<{'base',Base}> when 'true' -> let <_7> = call 'io_lib':'fwrite' ([105|[108|[108|[101|[103|[97|[108|[32|[98|[97|[115|[101|[32|[39|[126|[119|[39]]]]]]]]]]]]]]]]],[Base|[]]) in call 'lists':'flatten' (_7)
<Other> when 'true' -> let <_8> = call 'io_lib':'write' (Other) in call 'lists':'flatten' (_8) end
'string'/1 = fun (_0) -> apply 'string'/3 (_0,1,[])
'string'/2 = fun (_0,_1) -> apply 'string'/3 (_0,_1,[])
'string'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <String,Line,Options> when let <_3> = call 'erlang':'is_list' (String) in let <_4> = call 'erlang':'is_integer' (Line) in call 'erlang':'and' (_3,_4) -> let <_5> = apply 'options'/1 (Options) in apply 'string1'/5 (String,_5,Line,'no_col',[])
<String,{Line,Column},Options> when try let <_6> = call 'erlang':'is_list' (String) in let <_7> = call 'erlang':'is_integer' (Line) in (let <_10> = case call 'erlang':'is_integer' (Column) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'>=' (Column,1)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'and' (_7,_11) in call 'erlang':'and' (_6,_12)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_13> = apply 'options'/1 (Options) in apply 'string1'/5 (String,_13,Line,Column,[])
(<_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14})-|[{'function_name',{'string',3}}] )-|['compiler_generated'] ) end
'tokens'/3 = fun (_0,_1,_2) -> apply 'tokens'/4 (_0,_1,_2,[])
'tokens'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[],CharSpec,Line,Options> when call 'erlang':'is_integer' (Line) -> let <_5> = apply 'options'/1 (Options) in let <_4> = 'scan'/6 in apply 'tokens1'/7 (CharSpec,_5,Line,'no_col',[],_4,[])
<[],CharSpec,{Line,Column},Options> when try let <_6> = call 'erlang':'is_integer' (Line) in (let <_9> = case call 'erlang':'is_integer' (Column) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'>=' (Column,1)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end in let <_10> = call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true') in call 'erlang':'and' (_6,_10)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_12> = apply 'options'/1 (Options) in let <_11> = 'scan'/6 in apply 'tokens1'/7 (CharSpec,_12,Line,Column,[],_11,[])
<{'erl_scan_continuation',Cs,Col,Toks,Line,St,Any,Fun},CharSpec,_X_Loc,_X_Opts> when 'true' -> let <_13> = call 'erlang':'++' (Cs,CharSpec) in apply 'tokens1'/7 (_13,St,Line,Col,Toks,Fun,Any)
(<_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16,_15,_14})-|[{'function_name',{'tokens',4}}] )-|['compiler_generated'] ) end
'continuation_location'/1 = fun (_0) -> case _0 of <{'erl_scan_continuation',_2,'no_col',_3,Line,_4,_5,_6}> when 'true' -> Line
<{'erl_scan_continuation',_7,Col,_8,Line,_9,_10,_11}> when 'true' -> {Line,Col}
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'continuation_location',1}}] )-|['compiler_generated'] ) end
'column'/1 = fun (_0) -> let <_1> = call 'erlang':'element' (2,_0) in call 'erl_anno':'column' (_1)
'end_location'/1 = fun (_0) -> let <_1> = call 'erlang':'element' (2,_0) in call 'erl_anno':'end_location' (_1)
'line'/1 = fun (_0) -> let <_1> = call 'erlang':'element' (2,_0) in call 'erl_anno':'line' (_1)
'location'/1 = fun (_0) -> let <_1> = call 'erlang':'element' (2,_0) in call 'erl_anno':'location' (_1)
'text'/1 = fun (_0) -> let <_1> = call 'erlang':'element' (2,_0) in call 'erl_anno':'text' (_1)
'category'/1 = fun (_0) -> case _0 of <{Category,_X_Anno}> when 'true' -> Category
<{Category,_X_Anno,_X_Symbol}> when 'true' -> Category
<T> when 'true' -> call 'erlang':'error' ('badarg',[T|[]]) end
'symbol'/1 = fun (_0) -> case _0 of <{Category,_X_Anno}> when 'true' -> Category
<{_X_Category,_X_Anno,Symbol}> when 'true' -> Symbol
<T> when 'true' -> call 'erlang':'error' ('badarg',[T|[]]) end
'string_thing'/1 = fun (_0) -> case _0 of <39> when 'true' -> [97|[116|[111|[109]]]]
<_2> when 'true' -> [115|[116|[114|[105|[110|[103]]]]]] end
'options'/1 = fun (_0) -> case _0 of <Opts0> when call 'erlang':'is_list' (_0) -> let <_1> = 'expand_opt'/2 in let <Opts> = call 'lists':'foldr' (_1,[],Opts0) in let <_4> = case apply 'opts'/3 (Opts,['reserved_word_fun'],[]) of <'badarg'> when 'true' -> call 'erlang':'error' ('badarg',[Opts0|[]])
<R> when 'true' -> R end in case _4 of <[RW_fun|[]]> when 'true' -> let <Comment> = call 'proplists':'get_bool' ('return_comments',Opts) in let <WS> = call 'proplists':'get_bool' ('return_white_spaces',Opts) in let <Txt> = call 'proplists':'get_bool' ('text',Opts) in {'erl_scan',RW_fun,WS,Comment,Txt}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<Opt> when 'true' -> apply 'options'/1 ([Opt|[]]) end
'opts'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Options,[Key|Keys],L> when 'true' -> let <_5> = case call 'lists':'keyfind' (Key,1,Options) of <{'reserved_word_fun',F}> when call 'erlang':'is_function' (F,1) -> {'ok',F}
<{_11,_12}> when call 'erlang':'=:=' (_11,Key) -> 'badarg'
<'false'> when 'true' -> let <_3> = apply 'default_option'/1 (Key) in {'ok',_3}
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case _5 of <'badarg'> when 'true' -> 'badarg'
<{'ok',Value}> when 'true' -> apply 'opts'/3 (Options,Keys,[Value|L])
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<_X_Options,[],L> when 'true' -> call 'lists':'reverse' (L)
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'opts',3}}] )-|['compiler_generated'] ) end
'default_option'/1 = fun (_0) -> case _0 of <'reserved_word_fun'> when 'true' -> ('reserved_word'/1-|[{'id',{0,0,'-default_option/1-fun-0-'}}] )
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'default_option',1}}] )-|['compiler_generated'] ) end
'expand_opt'/2 = fun (_0,_1) -> case <_0,_1> of <'return',Os> when 'true' -> ['return_comments'|['return_white_spaces'|Os]]
<O,Os> when 'true' -> [O|Os] end
'tokens1'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Cs,St,Line,Col,Toks,Fun,Any> when let <_7> = call 'erlang':'is_list' (Cs) in let <_8> = call 'erlang':'=:=' (Cs,'eof') in call 'erlang':'or' (_7,_8) -> case apply Fun (Cs,St,Line,Col,Toks,Any) of <{'more',{Cs0,Ncol,Ntoks,Nline,Nany,Nfun}}> when 'true' -> {'more',{'erl_scan_continuation',Cs0,Ncol,Ntoks,Nline,St,Nany,Nfun}}
<{'ok',Toks0,'eof',Nline,Ncol}> when 'true' -> let <_13> = case Toks0 of <[]> when 'true' -> let <_9> = apply 'location'/2 (Nline,Ncol) in {'eof',_9}
<_25> when 'true' -> let <_11> = call 'lists':'reverse' (Toks0) in let <_10> = apply 'location'/2 (Nline,Ncol) in {'ok',_11,_10} end in {'done',_13,'eof'}
<{'ok',Toks0,Rest,Nline,Ncol}> when 'true' -> let <_16> = call 'lists':'reverse' (Toks0) in let <_15> = apply 'location'/2 (Nline,Ncol) in {'done',{'ok',_16,_15},Rest}
<{Error = {'error',_26,_27},Rest}> when 'true' -> {'done',Error,Rest}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_24,_23,_22,_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20,_19,_18})-|[{'function_name',{'tokens1',7}}] )-|['compiler_generated'] ) end
'string1'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'scan1'/5 (_0,_1,_2,_3,_4) of <{'more',{Cs0,Ncol,Ntoks,Nline,Any,Fun}}> when 'true' -> let <_5> = call 'erlang':'++' (Cs0,'eof') in case apply Fun (_5,_1,Nline,Ncol,Ntoks,Any) of <{'ok',Toks1,_X_Rest,Line2,Col2}> when 'true' -> let <_7> = call 'lists':'reverse' (Toks1) in let <_6> = apply 'location'/2 (Line2,Col2) in {'ok',_7,_6}
<{Error = {'error',_17,_18},_X_Rest}> when 'true' -> Error
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
<{'ok',Ntoks,Rest = [_19|_20],Nline,Ncol}> when 'true' -> apply 'string1'/5 (Rest,_1,Nline,Ncol,Ntoks)
<{'ok',Ntoks,_21,Nline,Ncol}> when 'true' -> let <_10> = call 'lists':'reverse' (Ntoks) in let <_9> = apply 'location'/2 (Nline,Ncol) in {'ok',_10,_9}
<{Error = {'error',_22,_23},_X_Rest}> when 'true' -> Error
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'scan'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'scan1'/5 (_0,_1,_2,_3,_4)
'scan1'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[32|Cs],St = {'erl_scan',_99,_100,_101,_102},Line,Col,Toks> when (try let <_9> = call 'erlang':'element' (3,St) in (call 'erlang':'=:=' (_9,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'scan_spcs'/6 (Cs,St,Line,Col,Toks,1)
<[32|Cs],St,Line,Col,Toks> when 'true' -> apply 'skip_white_space'/6 (Cs,St,Line,Col,Toks,1)
<[10|Cs],St = {'erl_scan',_103,_104,_105,_106},Line,Col,Toks> when (try let <_15> = call 'erlang':'element' (3,St) in (call 'erlang':'=:=' (_15,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'scan_newline'/5 (Cs,St,Line,Col,Toks)
<[10|Cs],St,Line,Col,Toks> when 'true' -> let <_18> = call 'erlang':'+' (Line,1) in let <_17> = case Col of (<(_121 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _121-|['compiler_generated'] )
(<_122> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_123> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_123,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'skip_white_space'/6 (Cs,St,_18,_17,Toks,0)
<[C|Cs],St,Line,Col,Toks> when let <_19> = call 'erlang':'>=' (C,65) in let <_20> = call 'erlang':'=<' (C,90) in call 'erlang':'and' (_19,_20) -> apply 'scan_variable'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[C|Cs],St,Line,Col,Toks> when let <_21> = call 'erlang':'>=' (C,97) in let <_22> = call 'erlang':'=<' (C,122) in call 'erlang':'and' (_21,_22) -> apply 'scan_atom'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[44|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[44],',',1)
<[40|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[40],'(',1)
<[41|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[41],')',1)
<[123|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[123],'{',1)
<[125|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[125],'}',1)
<[91|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[91],'[',1)
<[93|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[93],']',1)
<[59|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[59],';',1)
<[C = 95|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_variable'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[37|Cs],St,Line,Col,Toks> when try (let <_25> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_23-|['compiler_generated'] )> when 'true' -> (_23-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_26> = call 'erlang':'=:=' ((_25-|['compiler_generated'] ),'true') in let <_27> = call 'erlang':'element' (4,St) in let <_28> = call 'erlang':'=:=' (_27,'true') in let <_29> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_26,_28) in let <_30> = call 'erlang':'not' (_29) in let <_31> = call 'erlang':'is_boolean' (_27) in let <_32> = call 'erlang':'and' (_30,_31) in let <_33> = call 'erlang':'is_boolean' (_25) in (call 'erlang':'and' (_32,_33)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'skip_comment'/6 (Cs,St,Line,Col,Toks,1)
<[C = 37|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_comment'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[C|Cs],St,Line,Col,Toks> when try (let <_36> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_34> when 'true' -> _34-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_36-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_number'/7 (Cs,St,Line,Col,Toks,[C|[]],'no_underscore')
<[46|[46|[46|Cs]]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[46|[46|[46]]],'...',3)
<Cs = [46|[46]],_X_St,Line,Col,Toks> when 'true' -> let <_37> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_37}}
<[46|[46|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[46|[46]],'..',2)
<Cs = [46],_X_St,Line,Col,Toks> when 'true' -> let <_38> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_38}}
<[C = 46|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_dot'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[34|Cs],St,Line,Col,Toks> when 'true' -> let <State0> = {[],[],Line,Col} in let <_40> = case Col of (<(_127 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _127-|['compiler_generated'] )
(<_128> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_128,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_129> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_129,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_string'/6 (Cs,St,Line,_40,Toks,State0)
<[39|Cs],St,Line,Col,Toks> when 'true' -> let <State0> = {[],[],Line,Col} in let <_42> = case Col of (<(_133 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _133-|['compiler_generated'] )
(<_134> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_134,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_135> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_135,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_qatom'/6 (Cs,St,Line,_42,Toks,State0)
<[36|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_char'/5 (Cs,St,Line,Col,Toks)
<[13|Cs],St = {'erl_scan',_107,_108,_109,_110},Line,Col,Toks> when (try let <_47> = call 'erlang':'element' (3,St) in (call 'erlang':'=:=' (_47,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (apply 'tok3'/9 (Cs,St,Line,Col,Toks,('white_space'-|['compiler_generated'] ),([13]-|['compiler_generated'] ),([13]-|['compiler_generated'] ),(1-|['compiler_generated'] ))-|['compiler_generated'] )
<[C|Cs],St,Line,Col,Toks> when try let <_49> = call 'erlang':'>=' (C,223) in let <_50> = call 'erlang':'=<' (C,255) in let <_51> = call 'erlang':'=/=' (C,247) in let <_52> = call 'erlang':'and' (_50,_51) in call 'erlang':'and' (_49,_52) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_atom'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[C|Cs],St,Line,Col,Toks> when try let <_53> = call 'erlang':'>=' (C,192) in let <_54> = call 'erlang':'=<' (C,222) in let <_55> = call 'erlang':'/=' (C,215) in let <_56> = call 'erlang':'and' (_54,_55) in call 'erlang':'and' (_53,_56) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_variable'/6 (Cs,St,Line,Col,Toks,[C|[]])
<[9|Cs],St = {'erl_scan',_111,_112,_113,_114},Line,Col,Toks> when (try let <_61> = call 'erlang':'element' (3,St) in (call 'erlang':'=:=' (_61,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'scan_tabs'/6 (Cs,St,Line,Col,Toks,1)
<[9|Cs],St,Line,Col,Toks> when 'true' -> apply 'skip_white_space'/6 (Cs,St,Line,Col,Toks,1)
<[C|Cs],St,Line,Col,Toks> when try (let <_72> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_67> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,32)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_65> when 'true' -> _65-|['compiler_generated'] ) end in (case _67 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,128) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,160)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_68> when 'true' -> _68-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_64> when 'true' -> _64-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_63> when 'true' -> _63-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_72-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case St of (<({'erl_scan',_115,_rec0,_116,_117}-|['compiler_generated'] )> when 'true' -> case _rec0 of <'true'> when 'true' -> apply 'scan_white_space'/6 (Cs,St,Line,Col,Toks,[C|[]])
<'false'> when 'true' -> apply 'skip_white_space'/6 (Cs,St,Line,Col,Toks,1)
(<_75> when 'true' -> primop 'match_fail' ({'case_clause',_75})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_118> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','erl_scan'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[60|[60|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[60|[60]],'<<',2)
<[60|[45|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[60|[45]],'<-',2)
<[60|[61|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[60|[61]],'<=',2)
<Cs = [60],_X_St,Line,Col,Toks> when 'true' -> let <_76> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_76}}
<[62|[62|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[62|[62]],'>>',2)
<[62|[61|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[62|[61]],'>=',2)
<Cs = [62],_X_St,Line,Col,Toks> when 'true' -> let <_77> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_77}}
<[45|[62|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[45|[62]],'->',2)
<[45|[45|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[45|[45]],'--',2)
<Cs = [45],_X_St,Line,Col,Toks> when 'true' -> let <_78> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_78}}
<[43|[43|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[43|[43]],'++',2)
<Cs = [43],_X_St,Line,Col,Toks> when 'true' -> let <_79> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_79}}
<[61|[58|[61|Cs]]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61|[58|[61]]],'=:=',3)
<Cs = [61|[58]],_X_St,Line,Col,Toks> when 'true' -> let <_80> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_80}}
<[61|[47|[61|Cs]]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61|[47|[61]]],'=/=',3)
<Cs = [61|[47]],_X_St,Line,Col,Toks> when 'true' -> let <_81> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_81}}
<[61|[60|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61|[60]],'=<',2)
<[61|[62|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61|[62]],'=>',2)
<[61|[61|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61|[61]],'==',2)
<Cs = [61],_X_St,Line,Col,Toks> when 'true' -> let <_82> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_82}}
<[47|[61|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[47|[61]],'/=',2)
<Cs = [47],_X_St,Line,Col,Toks> when 'true' -> let <_83> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_83}}
<[124|[124|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[124|[124]],'||',2)
<Cs = [124],_X_St,Line,Col,Toks> when 'true' -> let <_84> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_84}}
<[58|[61|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[58|[61]],':=',2)
<[58|[58|Cs]],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[58|[58]],'::',2)
<Cs = [58],_X_St,Line,Col,Toks> when 'true' -> let <_85> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_85}}
<[61|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[61],'=',1)
<[58|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[58],':',1)
<[124|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[124],'|',1)
<[35|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[35],'#',1)
<[47|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[47],'/',1)
<[63|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[63],'?',1)
<[45|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[45],'-',1)
<[43|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[43],'+',1)
<[42|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[42],'*',1)
<[60|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[60],'<',1)
<[62|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[62],'>',1)
<[33|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[33],'!',1)
<[64|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[64],'@',1)
<[92|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[92],'\',1)
<[94|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[94],'^',1)
<[96|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[96],'`',1)
<[126|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[126],'~',1)
<[38|Cs],St,Line,Col,Toks> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,[38],'&',1)
<[C|Cs],St,Line,Col,Toks> when let <_86> = call 'erlang':'>=' (C,0) in let <_87> = call 'erlang':'=<' (C,255) in call 'erlang':'and' (_86,_87) -> let <Str> = [C|[]] in let <_89> = call 'erlang':'list_to_atom' (Str) in apply 'tok2'/8 (Cs,St,Line,Col,Toks,Str,_89,1)
<[C|Cs],_X_St,Line,Col,_X_Toks> when let <_90> = call 'erlang':'is_integer' (C) in let <_91> = call 'erlang':'>=' (C,0) in call 'erlang':'and' (_90,_91) -> let <Ncol> = case Col of (<(_154 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _154-|['compiler_generated'] )
(<_155> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_155,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_156> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_156,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','character'},Line,Col,Line,Ncol,Cs)
<Cs = [],_X_St,Line,Col,Toks> when 'true' -> let <_93> = 'scan'/6 in {'more',{Cs,Col,Toks,Line,[],_93}}
<Cs = 'eof',_X_St,Line,Col,Toks> when 'true' -> {'ok',Toks,Cs,Line,Col}
(<_98,_97,_96,_95,_94> when 'true' -> (primop 'match_fail' ({'function_clause',_98,_97,_96,_95,_94})-|[{'function_name',{'scan1',5}}] )-|['compiler_generated'] ) end
'scan_atom'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'scan_name'/2 (_0,_5) of <{'more',Ncs}> when 'true' -> let <_6> = 'scan_atom'/6 in {'more',{[],_3,_4,_2,Ncs,_6}}
<{Wcs,Cs}> when 'true' -> let <_7> = catch call 'erlang':'list_to_atom' (Wcs) in case _7 of <Name> when call 'erlang':'is_atom' (_7) -> (case _1 of (<({'erl_scan',_rec1,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> case apply _rec1 (Name) of <'true'> when 'true' -> apply 'tok2'/7 (Cs,_1,_2,_3,_4,Wcs,Name)
<'false'> when 'true' -> apply 'tok3'/8 (Cs,_1,_2,_3,_4,'atom',Wcs,Name)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','erl_scan'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Error> when 'true' -> let <_11> = call 'erlang':'length' (Wcs) in let <Ncol> = case <_3,_11> of (<(_27 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _27-|['compiler_generated'] )
(<_28,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_28)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_28,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_29,_30> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_29,_30}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','atom'},_2,_3,_2,Ncol,Cs) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
'scan_variable'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'scan_name'/2 (_0,_5) of <{'more',Ncs}> when 'true' -> let <_6> = 'scan_variable'/6 in {'more',{[],_3,_4,_2,Ncs,_6}}
<{Wcs,Cs}> when 'true' -> let <_7> = catch call 'erlang':'list_to_atom' (Wcs) in case _7 of <Name> when call 'erlang':'is_atom' (_7) -> apply 'tok3'/8 (Cs,_1,_2,_3,_4,'var',Wcs,Name)
<_X_Error> when 'true' -> let <_8> = call 'erlang':'length' (Wcs) in let <Ncol> = case <_3,_8> of (<(_20 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _20-|['compiler_generated'] )
(<_21,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_21)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_21,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_22,_23> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_22,_23}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','var'},_2,_3,_2,Ncol,Cs) end
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'scan_name'/2 = fun (_0,_1) -> case <_0,_1> of <[C|Cs],Ncs> when let <_2> = call 'erlang':'>=' (C,97) in let <_3> = call 'erlang':'=<' (C,122) in call 'erlang':'and' (_2,_3) -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C|Cs],Ncs> when let <_4> = call 'erlang':'>=' (C,65) in let <_5> = call 'erlang':'=<' (C,90) in call 'erlang':'and' (_4,_5) -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C = 95|Cs],Ncs> when 'true' -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C|Cs],Ncs> when try (let <_8> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_6> when 'true' -> _6-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_8-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C = 64|Cs],Ncs> when 'true' -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C|Cs],Ncs> when try let <_9> = call 'erlang':'>=' (C,223) in let <_10> = call 'erlang':'=<' (C,255) in let <_11> = call 'erlang':'=/=' (C,247) in let <_12> = call 'erlang':'and' (_10,_11) in call 'erlang':'and' (_9,_12) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[C|Cs],Ncs> when try let <_13> = call 'erlang':'>=' (C,192) in let <_14> = call 'erlang':'=<' (C,222) in let <_15> = call 'erlang':'=/=' (C,215) in let <_16> = call 'erlang':'and' (_14,_15) in call 'erlang':'and' (_13,_16) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_name'/2 (Cs,[C|Ncs])
<[],Ncs> when 'true' -> {'more',Ncs}
<Cs,Ncs> when 'true' -> let <_17> = call 'lists':'reverse' (Ncs) in {_17,Cs} end
'scan_dot'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs = [37|_45],St,Line,Col,Toks,Ncs> when 'true' -> let <Anno> = case <Line,Col,St,Ncs> of (<_50,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_50)-|['compiler_generated'] )-|['compiler_generated'] )
(<_53,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_53) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_56,_57,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_58> = {_56,_57} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_58)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_60,_61,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_62> = {_60,_61} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_62) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_7> = case Col of (<(_66 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _66-|['compiler_generated'] )
(<_67> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_67,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_68> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_68,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'ok',[{'dot',Anno}|Toks],Cs,Line,_7}
<[C = 10|Cs],St,Line,Col,Toks,Ncs> when 'true' -> let <_14> = case <> of <> when (try (let <_10> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_8-|['compiler_generated'] )> when 'true' -> (_8-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'element' (5,St) in let <_13> = call 'erlang':'=:=' (_12,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_13)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'++' (Ncs,[C|[]])
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_14> of (<_74,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_74)-|['compiler_generated'] )-|['compiler_generated'] )
(<_77,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_78,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_77) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_81,_82,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_83> = {_81,_82} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_83)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_85,_86,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_87> = {_85,_86} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_87) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_17> = call 'erlang':'+' (Line,1) in let <_16> = case Col of (<(_91 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _91-|['compiler_generated'] )
(<_92> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_93> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_93,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'ok',[{'dot',Anno}|Toks],Cs,_17,_16}
<[C|Cs],St,Line,Col,Toks,Ncs> when try (let <_27> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_22> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,32)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_20> when 'true' -> _20-|['compiler_generated'] ) end in (case _22 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,128) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,160)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_23> when 'true' -> _23-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_27-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_34> = case <> of <> when (try (let <_30> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_28-|['compiler_generated'] )> when 'true' -> (_28-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_31> = call 'erlang':'=:=' ((_30-|['compiler_generated'] ),'true') in let <_32> = call 'erlang':'element' (5,St) in let <_33> = call 'erlang':'=:=' (_32,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_31,_33)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'++' (Ncs,[C|[]])
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_34> of (<_99,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_99)-|['compiler_generated'] )-|['compiler_generated'] )
(<_102,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_102) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_105,_106,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_107> = {_105,_106} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_107)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_109,_110,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_111> = {_109,_110} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_111) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_36> = case Col of (<(_115 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _115-|['compiler_generated'] )
(<_116> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_116,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_117> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_117,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'ok',[{'dot',Anno}|Toks],Cs,Line,_36}
<Cs = 'eof',St,Line,Col,Toks,Ncs> when 'true' -> let <Anno> = case <Line,Col,St,Ncs> of (<_123,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_123)-|['compiler_generated'] )-|['compiler_generated'] )
(<_126,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_126) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_129,_130,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_131> = {_129,_130} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_131)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_133,_134,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_135> = {_133,_134} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_135) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_38> = case Col of (<(_139 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _139-|['compiler_generated'] )
(<_140> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_140,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_141> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_141,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'ok',[{'dot',Anno}|Toks],Cs,Line,_38}
<Cs,St,Line,Col,Toks,Ncs> when 'true' -> apply 'tok2'/8 (Cs,St,Line,Col,Toks,Ncs,'.',1) end
'scan_newline'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[32|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_nl_spcs'/6 (Cs,St,Line,Col,Toks,2)
<[9|Cs],St,Line,Col,Toks> when 'true' -> apply 'scan_nl_tabs'/6 (Cs,St,Line,Col,Toks,2)
<[13|Cs],St,Line,Col,Toks> when 'true' -> apply 'newline_end'/7 (Cs,St,Line,Col,Toks,2,[10|[13]])
<[12|Cs],St,Line,Col,Toks> when 'true' -> apply 'newline_end'/7 (Cs,St,Line,Col,Toks,2,[10|[12]])
<[],_X_St,Line,Col,Toks> when 'true' -> let <_5> = 'scan'/6 in {'more',{[10],Col,Toks,Line,[],_5}}
<Cs,St,Line,Col,Toks> when 'true' -> apply 'scan_nl_white_space'/6 (Cs,St,Line,Col,Toks,[10]) end
'scan_nl_spcs'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[32|Cs],St,Line,Col,Toks,N> when call 'erlang':'<' (N,17) -> let <_6> = call 'erlang':'+' (N,1) in apply 'scan_nl_spcs'/6 (Cs,St,Line,Col,Toks,_6)
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_7> = 'scan_nl_spcs'/6 in {'more',{Cs,Col,Toks,Line,N,_7}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_8> = apply 'nl_spcs'/1 (N) in apply 'newline_end'/7 (Cs,St,Line,Col,Toks,N,_8) end
'scan_nl_tabs'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[9|Cs],St,Line,Col,Toks,N> when call 'erlang':'<' (N,11) -> let <_6> = call 'erlang':'+' (N,1) in apply 'scan_nl_tabs'/6 (Cs,St,Line,Col,Toks,_6)
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_7> = 'scan_nl_tabs'/6 in {'more',{Cs,Col,Toks,Line,N,_7}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_8> = apply 'nl_tabs'/1 (N) in apply 'newline_end'/7 (Cs,St,Line,Col,Toks,N,_8) end
'scan_nl_white_space'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[10|Cs],St = {'erl_scan',_42,_43,_44,'false'},Line,Col = 'no_col',Toks0,Ncs> when 'true' -> let <_7> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in let <_6> = call 'lists':'reverse' (Ncs) in let <Toks> = [{'white_space',_7,_6}|Toks0] in let <_9> = call 'erlang':'+' (Line,1) in apply 'scan_newline'/5 (Cs,St,_9,Col,Toks)
<[10|Cs],St,Line,Col,Toks,Ncs0> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in let <Anno> = case <Line,Col,St,Ncs> of (<_54,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_54)-|['compiler_generated'] )-|['compiler_generated'] )
(<_57,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_57) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_60,_61,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_62> = {_60,_61} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_62)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_64,_65,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_66> = {_64,_65} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_66) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Token> = {'white_space',Anno,Ncs} in let <_15> = call 'erlang':'+' (Line,1) in let <_13> = call 'erlang':'length' (Ncs) in let <_14> = case <Col,_13> of (<(_70 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_Ncol> when ('true'-|['compiler_generated'] ) -> _70-|['compiler_generated'] )
(<_71,Ncol> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_71)-|['compiler_generated'] ) -> Ncol-|['compiler_generated'] )
(<_72,_73> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_72,_73}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_newline'/5 (Cs,St,_15,_14,[Token|Toks])
<[C|Cs],St,Line,Col,Toks,Ncs> when try (let <_25> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_20> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,32)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end in (case _20 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,128) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,160)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_21> when 'true' -> _21-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_25-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_nl_white_space'/6 (Cs,St,Line,Col,Toks,[C|Ncs])
<Cs = [],_X_St,Line,Col,Toks,Ncs> when 'true' -> let <_26> = 'scan_nl_white_space'/6 in {'more',{Cs,Col,Toks,Line,Ncs,_26}}
<Cs,St = {'erl_scan',_45,_46,_47,'false'},Line,Col = 'no_col',Toks,Ncs> when 'true' -> let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in let <_29> = call 'erlang':'+' (Line,1) in let <_28> = call 'lists':'reverse' (Ncs) in apply 'scan1'/5 (Cs,St,_29,Col,[{'white_space',Anno,_28}|Toks])
<Cs,St,Line,Col,Toks,Ncs0> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in let <Anno> = case <Line,Col,St,Ncs> of (<_80,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_80)-|['compiler_generated'] )-|['compiler_generated'] )
(<_83,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_83) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_86,_87,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_88> = {_86,_87} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_88)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_90,_91,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_92> = {_90,_91} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_92) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Token> = {'white_space',Anno,Ncs} in let <_35> = call 'erlang':'+' (Line,1) in let <_33> = call 'erlang':'length' (Ncs) in let <_34> = case <Col,_33> of (<(_96 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_Ncol> when ('true'-|['compiler_generated'] ) -> _96-|['compiler_generated'] )
(<_97,Ncol> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_97)-|['compiler_generated'] ) -> Ncol-|['compiler_generated'] )
(<_98,_99> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_98,_99}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,_35,_34,[Token|Toks]) end
'newline_end'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Cs,St = {'erl_scan',_19,_20,_21,'false'},Line,Col = 'no_col',Toks,_X_N,Ncs> when 'true' -> let <_8> = call 'erlang':'+' (Line,1) in let <_7> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in apply 'scan1'/5 (Cs,St,_8,Col,[{'white_space',_7,Ncs}|Toks])
<Cs,St,Line,Col,Toks,N,Ncs> when 'true' -> let <Anno> = case <Line,Col,St,Ncs> of (<_28,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_28)-|['compiler_generated'] )-|['compiler_generated'] )
(<_31,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_31) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_34,_35,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_36> = {_34,_35} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_36)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38,_39,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_40> = {_38,_39} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_40) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_42> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_42}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'+' (Line,1) in let <_10> = case <Col,N> of (<(_45 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_Ncol> when ('true'-|['compiler_generated'] ) -> _45-|['compiler_generated'] )
(<_46,Ncol> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_46)-|['compiler_generated'] ) -> Ncol-|['compiler_generated'] )
(<_47,_48> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_47,_48}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,_11,_10,[{'white_space',Anno,Ncs}|Toks]) end
'scan_spcs'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[32|Cs],St,Line,Col,Toks,N> when call 'erlang':'<' (N,16) -> let <_6> = call 'erlang':'+' (N,1) in apply 'scan_spcs'/6 (Cs,St,Line,Col,Toks,_6)
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_7> = 'scan_spcs'/6 in {'more',{Cs,Col,Toks,Line,N,_7}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_8> = apply 'spcs'/1 (N) in (apply 'tok3'/9 (Cs,St,Line,Col,Toks,('white_space'-|['compiler_generated'] ),_8,_8,N)-|['compiler_generated'] ) end
'scan_tabs'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[9|Cs],St,Line,Col,Toks,N> when call 'erlang':'<' (N,10) -> let <_6> = call 'erlang':'+' (N,1) in apply 'scan_tabs'/6 (Cs,St,Line,Col,Toks,_6)
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_7> = 'scan_tabs'/6 in {'more',{Cs,Col,Toks,Line,N,_7}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_8> = apply 'tabs'/1 (N) in (apply 'tok3'/9 (Cs,St,Line,Col,Toks,('white_space'-|['compiler_generated'] ),_8,_8,N)-|['compiler_generated'] ) end
'skip_white_space'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[10|Cs],St,Line,Col,Toks,_X_N> when 'true' -> let <_7> = call 'erlang':'+' (Line,1) in let <_6> = case Col of (<(_29 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _29-|['compiler_generated'] )
(<_30> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_31> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_31,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'skip_white_space'/6 (Cs,St,_7,_6,Toks,0)
<[C|Cs],St,Line,Col,Toks,N> when try (let <_17> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_12> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,32)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (case _12 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,128) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,160)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_13> when 'true' -> _13-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_17-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_18> = call 'erlang':'+' (N,1) in apply 'skip_white_space'/6 (Cs,St,Line,Col,Toks,_18)
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_19> = 'skip_white_space'/6 in {'more',{Cs,Col,Toks,Line,N,_19}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_20> = case <Col,N> of (<(_35 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _35-|['compiler_generated'] )
(<_36,_37> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_36)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_36,_37)-|['compiler_generated'] )-|['compiler_generated'] )
(<_38,_39> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_38,_39}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_20,Toks) end
'scan_white_space'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs = [10|_27],St,Line,Col,Toks,Ncs> when 'true' -> let <_7> = call 'erlang':'length' (Ncs) in let <_6> = call 'lists':'reverse' (Ncs) in (apply 'tok3'/9 (Cs,St,Line,Col,Toks,('white_space'-|['compiler_generated'] ),_6,_6,_7)-|['compiler_generated'] )
<[C|Cs],St,Line,Col,Toks,Ncs> when try (let <_17> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_12> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,32)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (case _12 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,128) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,160)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_13> when 'true' -> _13-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_17-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_white_space'/6 (Cs,St,Line,Col,Toks,[C|Ncs])
<Cs = [],_X_St,Line,Col,Toks,Ncs> when 'true' -> let <_18> = 'scan_white_space'/6 in {'more',{Cs,Col,Toks,Line,Ncs,_18}}
<Cs,St,Line,Col,Toks,Ncs> when 'true' -> let <_20> = call 'erlang':'length' (Ncs) in let <_19> = call 'lists':'reverse' (Ncs) in (apply 'tok3'/9 (Cs,St,Line,Col,Toks,('white_space'-|['compiler_generated'] ),_19,_19,_20)-|['compiler_generated'] ) end
'white_space_end'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> apply 'tok3'/9 (_0,_1,_2,_3,_4,'white_space',_6,_6,_5)
'scan_char'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Cs0 = [92|Cs],St,Line,Col,Toks> when 'true' -> let <_5> = case Col of (<(_73 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _73-|['compiler_generated'] )
(<_74> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_74,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_75> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_75,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case apply 'scan_escape'/2 (Cs,_5) of <'more'> when 'true' -> let <_6> = 'scan'/6 in {'more',{[36|Cs0],Col,Toks,Line,[],_6}}
<{'error',Ncs,Error,Ncol}> when 'true' -> apply 'scan_error'/6 (Error,Line,Col,Line,Ncol,Ncs)
<{'eof',Ncol}> when 'true' -> apply 'scan_error'/6 ('char',Line,Col,Line,Ncol,'eof')
<{'nl',Val,Str,Ncs,Ncol}> when 'true' -> let <_13> = case <> of <> when (try (let <_9> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_7-|['compiler_generated'] )> when 'true' -> (_7-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_10> = call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true') in let <_11> = call 'erlang':'element' (5,St) in let <_12> = call 'erlang':'=:=' (_11,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_10,_12)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [36|[92|Str]]
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_13> of (<_81,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_81)-|['compiler_generated'] )-|['compiler_generated'] )
(<_84,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_85,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_84) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_88,_89,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_90> = {_88,_89} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_90)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_92,_93,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_94> = {_92,_93} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_94) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Ntoks> = [{'char',Anno,Val}|Toks] in let <_16> = call 'erlang':'+' (Line,1) in apply 'scan1'/5 (Ncs,St,_16,Ncol,Ntoks)
<{Val,Str,Ncs,Ncol}> when 'true' -> let <_23> = case <> of <> when (try (let <_19> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_17-|['compiler_generated'] )> when 'true' -> (_17-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_20> = call 'erlang':'=:=' ((_19-|['compiler_generated'] ),'true') in let <_21> = call 'erlang':'element' (5,St) in let <_22> = call 'erlang':'=:=' (_21,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_20,_22)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [36|[92|Str]]
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_23> of (<_100,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_100)-|['compiler_generated'] )-|['compiler_generated'] )
(<_103,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_103) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_106,_107,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_108> = {_106,_107} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_108)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_110,_111,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_112> = {_110,_111} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_112) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Ntoks> = [{'char',Anno,Val}|Toks] in apply 'scan1'/5 (Ncs,St,Line,Ncol,Ntoks)
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end
<[C = 10|Cs],St,Line,Col,Toks> when 'true' -> let <_33> = case <> of <> when (try (let <_29> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_27-|['compiler_generated'] )> when 'true' -> (_27-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_30> = call 'erlang':'=:=' ((_29-|['compiler_generated'] ),'true') in let <_31> = call 'erlang':'element' (5,St) in let <_32> = call 'erlang':'=:=' (_31,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_30,_32)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [36|[C|[]]]
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_33> of (<_118,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_118)-|['compiler_generated'] )-|['compiler_generated'] )
(<_121,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_121) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_124,_125,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_126> = {_124,_125} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_126)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_128,_129,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_130> = {_128,_129} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_130) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_36> = call 'erlang':'+' (Line,1) in let <_35> = case Col of (<(_134 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _134-|['compiler_generated'] )
(<_135> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_136> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_136,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,_36,_35,[{'char',Anno,C}|Toks])
<[C|Cs],St,Line,Col,Toks> when try (let <_51> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_41> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_39> when 'true' -> _39-|['compiler_generated'] ) end in (case _41 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_45> = case call 'erlang':'>' (C,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_43> when 'true' -> _43-|['compiler_generated'] ) end in (case _45 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_46> when 'true' -> _46-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_42> when 'true' -> _42-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_38> when 'true' -> _38-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_37> when 'true' -> _37-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_51-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_58> = case <> of <> when (try (let <_54> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_52-|['compiler_generated'] )> when 'true' -> (_52-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_55> = call 'erlang':'=:=' ((_54-|['compiler_generated'] ),'true') in let <_56> = call 'erlang':'element' (5,St) in let <_57> = call 'erlang':'=:=' (_56,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_55,_57)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [36|[C|[]]]
<> when 'true' -> [] end in let <Anno> = case <Line,Col,St,_58> of (<_142,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_142)-|['compiler_generated'] )-|['compiler_generated'] )
(<_145,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_145) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_148,_149,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_150> = {_148,_149} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_150)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_152,_153,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_154> = {_152,_153} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_154) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_60> = case Col of (<(_158 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _158-|['compiler_generated'] )
(<_159> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_159,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_160> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_160,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_60,[{'char',Anno,C}|Toks])
<[C|_X_Cs],_X_St,Line,Col,_X_Toks> when let <_61> = call 'erlang':'is_integer' (C) in let <_62> = call 'erlang':'>=' (C,0) in call 'erlang':'and' (_61,_62) -> let <_63> = case Col of (<(_164 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _164-|['compiler_generated'] )
(<_165> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_165,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_166> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_166,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','character'},Line,Col,Line,_63,'eof')
<[],_X_St,Line,Col,Toks> when 'true' -> let <_64> = 'scan'/6 in {'more',{[36],Col,Toks,Line,[],_64}}
<'eof',_X_St,Line,Col,_X_Toks> when 'true' -> let <_65> = case Col of (<(_170 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _170-|['compiler_generated'] )
(<_171> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_171,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_172> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_172,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ('char',Line,Col,Line,_65,'eof')
(<_70,_69,_68,_67,_66> when 'true' -> (primop 'match_fail' ({'function_clause',_70,_69,_68,_67,_66})-|[{'function_name',{'scan_char',5}}] )-|['compiler_generated'] ) end
'scan_string'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Wcs,Str,Line0,Col0}> when 'true' -> case apply 'scan_string0'/7 (Cs,St,Line,Col,34,Str,Wcs) of <{'more',Ncs,Nline,Ncol,Nstr,Nwcs}> when 'true' -> let <State> = {Nwcs,Nstr,Line0,Col0} in let <_7> = 'scan_string'/6 in {'more',{Ncs,Ncol,Toks,Nline,State,_7}}
<{'char_error',Ncs,Error,Nline,Ncol,EndCol}> when 'true' -> apply 'scan_error'/6 (Error,Nline,Ncol,Nline,EndCol,Ncs)
<{'error',Nline,Ncol,Nwcs,Ncs}> when 'true' -> let <Estr> = call 'string':'slice' (Nwcs,0,16) in apply 'scan_error'/6 ({'string',34,Estr},Line0,Col0,Nline,Ncol,Ncs)
<{Ncs,Nline,Ncol,Nstr,Nwcs}> when 'true' -> let <Anno> = case <Line0,Col0,St,Nstr> of (<_26,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_26)-|['compiler_generated'] )-|['compiler_generated'] )
(<_29,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_29) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_32,_33,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_34> = {_32,_33} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_34)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_36,_37,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_38> = {_36,_37} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_38) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Ncs,St,Nline,Ncol,[{'string',Anno,Nwcs}|Toks])
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11})-|[{'function_name',{'scan_string',6}}] )-|['compiler_generated'] ) end
'scan_qatom'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Wcs,Str,Line0,Col0}> when 'true' -> case apply 'scan_string0'/7 (Cs,St,Line,Col,39,Str,Wcs) of <{'more',Ncs,Nline,Ncol,Nstr,Nwcs}> when 'true' -> let <State> = {Nwcs,Nstr,Line0,Col0} in let <_7> = 'scan_qatom'/6 in {'more',{Ncs,Ncol,Toks,Nline,State,_7}}
<{'char_error',Ncs,Error,Nline,Ncol,EndCol}> when 'true' -> apply 'scan_error'/6 (Error,Nline,Ncol,Nline,EndCol,Ncs)
<{'error',Nline,Ncol,Nwcs,Ncs}> when 'true' -> let <Estr> = call 'string':'slice' (Nwcs,0,16) in apply 'scan_error'/6 ({'string',39,Estr},Line0,Col0,Nline,Ncol,Ncs)
<{Ncs,Nline,Ncol,Nstr,Nwcs}> when 'true' -> let <_9> = catch call 'erlang':'list_to_atom' (Nwcs) in case _9 of <A> when call 'erlang':'is_atom' (_9) -> let <Anno> = case <Line0,Col0,St,Nstr> of (<_26,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_26)-|['compiler_generated'] )-|['compiler_generated'] )
(<_29,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_29) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_32,_33,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_34> = {_32,_33} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_34)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_36,_37,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_38> = {_36,_37} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_38) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_40,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_40,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Ncs,St,Nline,Ncol,[{'atom',Anno,A}|Toks])
<_19> when 'true' -> apply 'scan_error'/6 ({'illegal','atom'},Line0,Col0,Nline,Ncol,Ncs) end
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_18,_17,_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15,_14,_13})-|[{'function_name',{'scan_qatom',6}}] )-|['compiler_generated'] ) end
'scan_string0'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Cs,{'erl_scan',_14,_15,_16,'false'},Line,Col = 'no_col',Q,[],Wcs> when 'true' -> apply 'scan_string_no_col'/5 (Cs,Line,Col,Q,Wcs)
<Cs,{'erl_scan',_17,_18,_19,'true'},Line,Col = 'no_col',Q,Str,Wcs> when 'true' -> apply 'scan_string1'/6 (Cs,Line,Col,Q,Str,Wcs)
<Cs,St,Line,Col,Q,[],Wcs> when 'true' -> apply 'scan_string_col'/6 (Cs,St,Line,Col,Q,Wcs)
<Cs,_X_St,Line,Col,Q,Str,Wcs> when 'true' -> apply 'scan_string1'/6 (Cs,Line,Col,Q,Str,Wcs) end
'scan_string_no_col'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[Q|Cs],Line,Col,_31,Wcs> when call 'erlang':'=:=' (_31,Q) -> let <_5> = call 'lists':'reverse' (Wcs) in {Cs,Line,Col,([]-|['compiler_generated'] ),_5}
<[C = 10|Cs],Line,Col,Q,Wcs> when 'true' -> let <_8> = call 'erlang':'+' (Line,1) in apply 'scan_string_no_col'/5 (Cs,_8,Col,Q,[C|Wcs])
<[C|Cs],Line,Col,Q,Wcs> when try let <_9> = call 'erlang':'=/=' (C,92) in (let <_24> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_14> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_12> when 'true' -> _12-|['compiler_generated'] ) end in (case _14 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_18> = case call 'erlang':'>' (C,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end in (case _18 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> _15-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in let <_25> = call 'erlang':'=:=' ((_24-|['compiler_generated'] ),'true') in call 'erlang':'and' (_9,_25)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_string_no_col'/5 (Cs,Line,Col,Q,[C|Wcs])
<Cs,Line,Col,Q,Wcs> when 'true' -> apply 'scan_string1'/6 (Cs,Line,Col,Q,Wcs,Wcs) end
'scan_string_col'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[Q|Cs],St,Line,Col,_42,Wcs0> when call 'erlang':'=:=' (_42,Q) -> let <Wcs> = call 'lists':'reverse' (Wcs0) in let <_14> = case <> of <> when (try (let <_9> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (St,('erl_scan'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_7-|['compiler_generated'] )> when 'true' -> (_7-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_10> = call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true') in let <_11> = call 'erlang':'element' (5,St) in let <_12> = call 'erlang':'=:=' (_11,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_10,_12)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_13> = call 'erlang':'++' (Wcs,[Q|[]]) in [Q|_13]
<> when 'true' -> [] end in let <_16> = call 'erlang':'+' (Col,1) in {Cs,Line,_16,_14,Wcs}
<[C = 10|Cs],St,Line,_X_xCol,Q,Wcs> when 'true' -> let <_17> = call 'erlang':'+' (Line,1) in apply 'scan_string_col'/6 (Cs,St,_17,1,Q,[C|Wcs])
<[C|Cs],St,Line,Col,Q,Wcs> when try let <_18> = call 'erlang':'=/=' (C,92) in (let <_33> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_23> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_21> when 'true' -> _21-|['compiler_generated'] ) end in (case _23 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_27> = case call 'erlang':'>' (C,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_25> when 'true' -> _25-|['compiler_generated'] ) end in (case _27 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_28> when 'true' -> _28-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_24> when 'true' -> _24-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_20> when 'true' -> _20-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end in let <_34> = call 'erlang':'=:=' ((_33-|['compiler_generated'] ),'true') in call 'erlang':'and' (_18,_34)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_35> = call 'erlang':'+' (Col,1) in apply 'scan_string_col'/6 (Cs,St,Line,_35,Q,[C|Wcs])
<Cs,_X_St,Line,Col,Q,Wcs> when 'true' -> apply 'scan_string1'/6 (Cs,Line,Col,Q,Wcs,Wcs) end
'scan_string1'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[Q|Cs],Line,Col,_63,Str0,Wcs0> when call 'erlang':'=:=' (_63,Q) -> let <Wcs> = call 'lists':'reverse' (Wcs0) in let <_7> = call 'lists':'reverse' (Str0,[Q|[]]) in let <Str> = [Q|_7] in let <_9> = case Col of (<(_66 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _66-|['compiler_generated'] )
(<_67> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_67,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_68> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_68,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Cs,Line,_9,Str,Wcs}
<[C = 10|Cs],Line,Col,Q,Str,Wcs> when 'true' -> let <Ncol> = case Col of (<(_72 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _72-|['compiler_generated'] )
(<_73> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_74> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_74,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'+' (Line,1) in apply 'scan_string1'/6 (Cs,_11,Ncol,Q,[C|Str],[C|Wcs])
<Cs0 = [92|Cs],Line,Col,Q,Str,Wcs> when 'true' -> case apply 'scan_escape'/2 (Cs,Col) of <'more'> when 'true' -> {'more',Cs0,Line,Col,Str,Wcs}
<{'error',Ncs,Error,Ncol}> when 'true' -> let <_12> = case Ncol of (<(_78 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _78-|['compiler_generated'] )
(<_79> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Ncol)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_79,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_80> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_80,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'char_error',Ncs,Error,Line,Col,_12}
<{'eof',Ncol}> when 'true' -> let <_14> = case Ncol of (<(_84 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _84-|['compiler_generated'] )
(<_85> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Ncol)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_85,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_86> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_86,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_13> = call 'lists':'reverse' (Wcs) in {'error',Line,_14,_13,'eof'}
<{'nl',Val,ValStr,Ncs,Ncol}> when 'true' -> let <Nstr> = call 'lists':'reverse' (ValStr,[92|Str]) in let <Nwcs> = [Val|Wcs] in let <_17> = call 'erlang':'+' (Line,1) in apply 'scan_string1'/6 (Ncs,_17,Ncol,Q,Nstr,Nwcs)
<{Val,ValStr,Ncs,Ncol}> when 'true' -> let <Nstr> = call 'lists':'reverse' (ValStr,[92|Str]) in let <Nwcs> = [Val|Wcs] in let <_20> = case Ncol of (<(_90 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _90-|['compiler_generated'] )
(<_91> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Ncol)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_91,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_92> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_92,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_string1'/6 (Ncs,Line,_20,Q,Nstr,Nwcs)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<[C|Cs],Line,Col = 'no_col',Q,Str,Wcs> when try (let <_36> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_26> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_24> when 'true' -> _24-|['compiler_generated'] ) end in (case _26 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_30> = case call 'erlang':'>' (C,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_28> when 'true' -> _28-|['compiler_generated'] ) end in (case _30 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_31> when 'true' -> _31-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_27> when 'true' -> _27-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_23> when 'true' -> _23-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_22> when 'true' -> _22-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_36-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_string1'/6 (Cs,Line,Col,Q,[C|Str],[C|Wcs])
<[C|Cs],Line,Col,Q,Str,Wcs> when try (let <_51> = case call 'erlang':'is_integer' (C) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_41> = case call 'erlang':'>=' (C,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_39> when 'true' -> _39-|['compiler_generated'] ) end in (case _41 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_45> = case call 'erlang':'>' (C,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_43> when 'true' -> _43-|['compiler_generated'] ) end in (case _45 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_46> when 'true' -> _46-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_42> when 'true' -> _42-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_38> when 'true' -> _38-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_37> when 'true' -> _37-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_51-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_52> = call 'erlang':'+' (Col,1) in apply 'scan_string1'/6 (Cs,Line,_52,Q,[C|Str],[C|Wcs])
<[C|Cs],Line,Col,_X_Q,_X_Str,_X_Wcs> when let <_53> = call 'erlang':'is_integer' (C) in let <_54> = call 'erlang':'>=' (C,0) in call 'erlang':'and' (_53,_54) -> let <_55> = case Col of (<(_96 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _96-|['compiler_generated'] )
(<_97> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_97,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_98> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_98,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'char_error',Cs,{'illegal','character'},Line,Col,_55}
<Cs = [],Line,Col,_X_Q,Str,Wcs> when 'true' -> {'more',Cs,Line,Col,Str,Wcs}
<'eof',Line,Col,_X_Q,_X_Str,Wcs> when 'true' -> let <_56> = call 'lists':'reverse' (Wcs) in {'error',Line,Col,_56,'eof'}
(<_62,_61,_60,_59,_58,_57> when 'true' -> (primop 'match_fail' ({'function_clause',_62,_61,_60,_59,_58,_57})-|[{'function_name',{'scan_string1',6}}] )-|['compiler_generated'] ) end
'scan_escape'/2 = fun (_0,_1) -> case <_0,_1> of <[O1|[O2|[O3|Cs]]],Col> when try let <_2> = call 'erlang':'>=' (O1,48) in let <_3> = call 'erlang':'=<' (O1,55) in let <_4> = call 'erlang':'>=' (O2,48) in let <_5> = call 'erlang':'=<' (O2,55) in let <_6> = call 'erlang':'>=' (O3,48) in let <_7> = call 'erlang':'=<' (O3,55) in let <_8> = call 'erlang':'and' (_6,_7) in let <_9> = call 'erlang':'and' (_5,_8) in let <_10> = call 'erlang':'and' (_4,_9) in let <_11> = call 'erlang':'and' (_3,_10) in call 'erlang':'and' (_2,_11) of <Try> -> Try catch <T,R> -> 'false' -> let <_13> = call 'erlang':'*' (O1,8) in let <_14> = call 'erlang':'+' (_13,O2) in let <_15> = call 'erlang':'*' (_14,8) in let <_16> = call 'erlang':'+' (_15,O3) in let <Val> = call 'erlang':'-' (_16,3504) in let <_18> = case Col of (<(_119 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _119-|['compiler_generated'] )
(<_120> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_120,(3-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(3-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Val,[O1|[O2|[O3|[]]]],Cs,_18}
<[O1|[O2|[]]],_X_Col> when try let <_19> = call 'erlang':'>=' (O1,48) in let <_20> = call 'erlang':'=<' (O1,55) in let <_21> = call 'erlang':'>=' (O2,48) in let <_22> = call 'erlang':'=<' (O2,55) in let <_23> = call 'erlang':'and' (_21,_22) in let <_24> = call 'erlang':'and' (_20,_23) in call 'erlang':'and' (_19,_24) of <Try> -> Try catch <T,R> -> 'false' -> 'more'
<[O1|[O2|Cs]],Col> when try let <_25> = call 'erlang':'>=' (O1,48) in let <_26> = call 'erlang':'=<' (O1,55) in let <_27> = call 'erlang':'>=' (O2,48) in let <_28> = call 'erlang':'=<' (O2,55) in let <_29> = call 'erlang':'and' (_27,_28) in let <_30> = call 'erlang':'and' (_26,_29) in call 'erlang':'and' (_25,_30) of <Try> -> Try catch <T,R> -> 'false' -> let <_32> = call 'erlang':'*' (O1,8) in let <_33> = call 'erlang':'+' (_32,O2) in let <Val> = call 'erlang':'-' (_33,432) in let <_35> = case Col of (<(_123 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _123-|['compiler_generated'] )
(<_124> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_124,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Val,[O1|[O2|[]]],Cs,_35}
<[O1|[]],_X_Col> when let <_36> = call 'erlang':'>=' (O1,48) in let <_37> = call 'erlang':'=<' (O1,55) in call 'erlang':'and' (_36,_37) -> 'more'
<[O1|Cs],Col> when let <_38> = call 'erlang':'>=' (O1,48) in let <_39> = call 'erlang':'=<' (O1,55) in call 'erlang':'and' (_38,_39) -> let <_41> = call 'erlang':'-' (O1,48) in let <_40> = case Col of (<(_127 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _127-|['compiler_generated'] )
(<_128> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_128,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {_41,[O1|[]],Cs,_40}
<[120|[123|Cs]],Col> when 'true' -> let <_42> = case Col of (<(_131 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _131-|['compiler_generated'] )
(<_132> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_132,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_hex'/3 (Cs,_42,[])
<[120],_X_Col> when 'true' -> 'more'
<[120|'eof'],Col> when 'true' -> let <_43> = case Col of (<(_135 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _135-|['compiler_generated'] )
(<_136> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_136,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'eof',_43}
<[120|[H1|[H2|Cs]]],Col> when try let <_47> = case call 'erlang':'>=' (H1,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_45> when 'true' -> _45-|['compiler_generated'] ) end in (let <_56> = case _47 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_51> = case call 'erlang':'>=' (H1,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_49> when 'true' -> _49-|['compiler_generated'] ) end in (case _51 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (H1,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_52> when 'true' -> _52-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_48> when 'true' -> _48-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> _44-|['compiler_generated'] ) end in let <_57> = call 'erlang':'=:=' ((_56-|['compiler_generated'] ),'true') in let <_61> = case call 'erlang':'>=' (H2,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H2,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_59> when 'true' -> _59-|['compiler_generated'] ) end in (let <_70> = case _61 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_65> = case call 'erlang':'>=' (H2,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H2,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_63> when 'true' -> _63-|['compiler_generated'] ) end in (case _65 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (H2,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H2,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_66> when 'true' -> _66-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_62> when 'true' -> _62-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> _58-|['compiler_generated'] ) end in let <_71> = call 'erlang':'=:=' ((_70-|['compiler_generated'] ),'true') in call 'erlang':'and' (_57,_71)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <Val> = call 'erlang':'list_to_integer' ([H1|[H2|[]]],16) in let <_73> = case Col of (<(_139 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _139-|['compiler_generated'] )
(<_140> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_140,(3-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(3-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Val,[120|[H1|[H2|[]]]],Cs,_73}
<[120|[H1|[]]],_X_Col> when try let <_77> = case call 'erlang':'>=' (H1,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_75> when 'true' -> _75-|['compiler_generated'] ) end in (let <_86> = case _77 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_81> = case call 'erlang':'>=' (H1,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_79> when 'true' -> _79-|['compiler_generated'] ) end in (case _81 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (H1,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (H1,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_82> when 'true' -> _82-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_78> when 'true' -> _78-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_74> when 'true' -> _74-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_86-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'more'
<[120|Cs],Col> when 'true' -> let <_87> = case Col of (<(_143 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _143-|['compiler_generated'] )
(<_144> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_144,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'error',Cs,{'illegal','character'},_87}
<[C0 = 94|[C = 10|Cs]],Col> when 'true' -> let <_88> = case Col of (<(_147 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _147-|['compiler_generated'] )
(<_148> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'nl',C,[C0|[C|[]]],Cs,_88}
<[C0 = 94|[C|Cs]],Col> when let <_89> = call 'erlang':'is_integer' (C) in let <_90> = call 'erlang':'>=' (C,0) in call 'erlang':'and' (_89,_90) -> let <Val> = call 'erlang':'band' (C,31) in let <_92> = case Col of (<(_151 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _151-|['compiler_generated'] )
(<_152> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_152,(2-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(2-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Val,[C0|[C|[]]],Cs,_92}
<[94],_X_Col> when 'true' -> 'more'
<[94|'eof'],Col> when 'true' -> let <_93> = case Col of (<(_155 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _155-|['compiler_generated'] )
(<_156> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_156,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'eof',_93}
<[C = 10|Cs],Col> when 'true' -> let <_94> = case Col of (<(_159 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _159-|['compiler_generated'] )
(<_160> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (1-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'nl',C,[C|[]],Cs,_94}
<[C0|Cs],Col> when try (let <_109> = case call 'erlang':'is_integer' (C0) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_99> = case call 'erlang':'>=' (C0,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C0,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_97> when 'true' -> _97-|['compiler_generated'] ) end in (case _99 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_103> = case call 'erlang':'>' (C0,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (C0,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_101> when 'true' -> _101-|['compiler_generated'] ) end in (case _103 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (C0,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C0,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_104> when 'true' -> _104-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_100> when 'true' -> _100-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_96> when 'true' -> _96-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_95> when 'true' -> _95-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_109-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <C> = apply 'escape_char'/1 (C0) in let <_111> = case Col of (<(_163 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _163-|['compiler_generated'] )
(<_164> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_164,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {C,[C0|[]],Cs,_111}
<[C|Cs],Col> when let <_112> = call 'erlang':'is_integer' (C) in let <_113> = call 'erlang':'>=' (C,0) in call 'erlang':'and' (_112,_113) -> let <_114> = case Col of (<(_167 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _167-|['compiler_generated'] )
(<_168> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_168,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_3,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'error',Cs,{'illegal','character'},_114}
<[],_X_Col> when 'true' -> 'more'
<'eof',Col> when 'true' -> {'eof',Col}
(<_116,_115> when 'true' -> (primop 'match_fail' ({'function_clause',_116,_115})-|[{'function_name',{'scan_escape',2}}] )-|['compiler_generated'] ) end
'scan_hex'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[C|Cs],Col = 'no_col',Wcs> when try let <_6> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_4> when 'true' -> _4-|['compiler_generated'] ) end in (let <_15> = case _6 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_10> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in (case _10 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when 'true' -> _3-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_15-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_hex'/3 (Cs,Col,[C|Wcs])
<[C|Cs],Col,Wcs> when try let <_19> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end in (let <_28> = case _19 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_23> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_21> when 'true' -> _21-|['compiler_generated'] ) end in (case _23 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,102)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_24> when 'true' -> _24-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_20> when 'true' -> _20-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_28-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_29> = call 'erlang':'+' (Col,1) in apply 'scan_hex'/3 (Cs,_29,[C|Wcs])
<Cs,Col,Wcs> when 'true' -> apply 'scan_esc_end'/5 (Cs,Col,Wcs,16,[120|[123]]) end
'scan_esc_end'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[125|Cs],Col,Wcs0,B,Str0> when 'true' -> let <Wcs> = call 'lists':'reverse' (Wcs0) in let <_6> = catch call 'erlang':'list_to_integer' (Wcs,B) in case _6 of <Val> when try (let <_21> = case call 'erlang':'is_integer' (_6) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_11> = case call 'erlang':'>=' (_6,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (_6,55296)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end in (case _11 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_15> = case call 'erlang':'>' (_6,57343) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (_6,65534)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_13> when 'true' -> _13-|['compiler_generated'] ) end in (case _15 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (_6,65535) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (_6,1114111)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_12> when 'true' -> _12-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_21-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_23> = call 'erlang':'++' (Wcs,[125]) in let <_24> = call 'erlang':'++' (Str0,_23) in let <_22> = case Col of (<(_35 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _35-|['compiler_generated'] )
(<_36> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_36,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_37> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_37,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {Val,_24,Cs,_22}
<_32> when 'true' -> let <_25> = case Col of (<(_41 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _41-|['compiler_generated'] )
(<_42> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Col)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_42,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )
(<_43> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_43,(1-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in {'error',Cs,{'illegal','character'},_25} end
<[],_X_Col,_X_Wcs,_X_B,_X_Str0> when 'true' -> 'more'
<'eof',Col,_X_Wcs,_X_B,_X_Str0> when 'true' -> {'eof',Col}
<Cs,Col,_X_Wcs,_X_B,_X_Str0> when 'true' -> {'error',Cs,{'illegal','character'},Col} end
'escape_char'/1 = fun (_0) -> case _0 of <110> when 'true' -> 10
<114> when 'true' -> 13
<116> when 'true' -> 9
<118> when 'true' -> 11
<98> when 'true' -> 8
<102> when 'true' -> 12
<101> when 'true' -> 27
<115> when 'true' -> 32
<100> when 'true' -> 127
<C> when 'true' -> C end
'scan_number'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Ncs,Us}> when 'true' -> apply 'scan_number'/7 (Cs,St,Line,Col,Toks,Ncs,Us)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'scan_number',6}}] )-|['compiler_generated'] ) end
'scan_number'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[C|Cs],St,Line,Col,Toks,Ncs,Us> when try (let <_9> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_number'/7 (Cs,St,Line,Col,Toks,[C|Ncs],Us)
<[95|[Next|Cs]],St,Line,Col,Toks,Ncs = [Prev|_48],_X_Us> when try (let <_16> = case call 'erlang':'>=' (Next,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (Next,57) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Prev,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Prev,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_12> when 'true' -> _12-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_16-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_number'/7 (Cs,St,Line,Col,Toks,[Next|[95|Ncs]],'with_underscore')
<Cs = [95],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_17> = 'scan_number'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_17}}
<[46|[C|Cs]],St,Line,Col,Toks,Ncs,Us> when try (let <_20> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_20-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_fraction'/7 (Cs,St,Line,Col,Toks,[C|[46|Ncs]],Us)
<Cs = [46],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_21> = 'scan_number'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_21}}
<Cs0 = [35|Cs],St,Line,Col,Toks,Ncs0,Us> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in let <_24> = catch let <_23> = apply 'remove_digit_separators'/2 (Ncs,Us) in call 'erlang':'list_to_integer' (_23) in case _24 of <B> when let <_25> = call 'erlang':'>=' (_24,2) in let <_29> = call 'erlang':'=<' (_24,36) in call 'erlang':'and' (_25,_29) -> let <Bcs> = call 'erlang':'++' (Ncs,[35]) in apply 'scan_based_int'/9 (Cs,St,Line,Col,Toks,B,[],Bcs,'no_underscore')
<B> when 'true' -> let <Len> = call 'erlang':'length' (Ncs) in let <_32> = case <Col,Len> of (<(_52 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _52-|['compiler_generated'] )
(<_53,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_53)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_53,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_54,_55> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_54,_55}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'base',B},Line,Col,Line,_32,Cs0) end
<Cs = [],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_34> = 'scan_number'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_34}}
<Cs,St,Line,Col,Toks,Ncs0,Us> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in let <_37> = catch let <_36> = apply 'remove_digit_separators'/2 (Ncs,Us) in call 'erlang':'list_to_integer' (_36) in case _37 of <N> when call 'erlang':'is_integer' (_37) -> apply 'tok3'/8 (Cs,St,Line,Col,Toks,'integer',Ncs,N)
<_49> when 'true' -> let <_38> = call 'erlang':'length' (Ncs) in let <Ncol> = case <Col,_38> of (<(_58 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _58-|['compiler_generated'] )
(<_59,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_59)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_59,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_60,_61> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_60,_61}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','integer'},Line,Col,Line,Ncol,Cs) end end
'remove_digit_separators'/2 = fun (_0,_1) -> case <_0,_1> of <Number,'no_underscore'> when 'true' -> Number
<Number,'with_underscore'> when 'true' -> (letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[C|_3]> when call 'erlang':'=/=' (C,95) -> let <_5> = apply 'lc$^0'/1 (_3) in ([C|_5]-|['compiler_generated'] )
(<[C|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Number)-|['list_comprehension'] )
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'remove_digit_separators',2}}] )-|['compiler_generated'] ) end
'scan_based_int'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{B,NCs,BCs,Us}> when 'true' -> apply 'scan_based_int'/9 (Cs,St,Line,Col,Toks,B,NCs,BCs,Us)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'scan_based_int',6}}] )-|['compiler_generated'] ) end
'scan_based_int'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <[C|Cs],St,Line,Col,Toks,B,Ncs,Bcs,Us> when try let <_15> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (C,57) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_12> = call 'erlang':'+' (48,B) in call 'erlang':'<' (C,_12)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (let <_32> = case _15 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_23> = case call 'erlang':'>=' (C,65) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_19> = call 'erlang':'+' (65,B) in let <_20> = call 'erlang':'-' (_19,10) in call 'erlang':'<' (C,_20)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end in (case _23 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (C,97) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_26> = call 'erlang':'+' (97,B) in let <_27> = call 'erlang':'-' (_26,10) in call 'erlang':'<' (C,_27)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_25> when 'true' -> _25-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_24> when 'true' -> _24-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_32-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_based_int'/9 (Cs,St,Line,Col,Toks,B,[C|Ncs],Bcs,Us)
<[95|[Next|Cs]],St,Line,Col,Toks,B,Ncs = [Prev|_103],Bcs,_X_Us> when try let <_40> = case call 'erlang':'>=' (Next,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (Next,57) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_37> = call 'erlang':'+' (48,B) in call 'erlang':'<' (Next,_37)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_36> when 'true' -> _36-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_35> when 'true' -> _35-|['compiler_generated'] ) end in let <_57> = case _40 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_48> = case call 'erlang':'>=' (Next,65) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_44> = call 'erlang':'+' (65,B) in let <_45> = call 'erlang':'-' (_44,10) in call 'erlang':'<' (Next,_45)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_43> when 'true' -> _43-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_42> when 'true' -> _42-|['compiler_generated'] ) end in (case _48 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Next,97) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_51> = call 'erlang':'+' (97,B) in let <_52> = call 'erlang':'-' (_51,10) in call 'erlang':'<' (Next,_52)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_50> when 'true' -> _50-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_49> when 'true' -> _49-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_41> when 'true' -> _41-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_34> when 'true' -> _34-|['compiler_generated'] ) end in (let <_82> = case _57 of (<('true'-|['compiler_generated'] )> when 'true' -> let <_64> = case call 'erlang':'>=' (Prev,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (Prev,57) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_61> = call 'erlang':'+' (48,B) in call 'erlang':'<' (Prev,_61)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_60> when 'true' -> _60-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_59> when 'true' -> _59-|['compiler_generated'] ) end in (case _64 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_72> = case call 'erlang':'>=' (Prev,65) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_68> = call 'erlang':'+' (65,B) in let <_69> = call 'erlang':'-' (_68,10) in call 'erlang':'<' (Prev,_69)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_67> when 'true' -> _67-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_66> when 'true' -> _66-|['compiler_generated'] ) end in (case _72 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Prev,97) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>' (B,10) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_75> = call 'erlang':'+' (97,B) in let <_76> = call 'erlang':'-' (_75,10) in call 'erlang':'<' (Prev,_76)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_74> when 'true' -> _74-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_73> when 'true' -> _73-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> _65-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> _58-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_33> when 'true' -> _33-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_82-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_based_int'/9 (Cs,St,Line,Col,Toks,B,[Next|[95|Ncs]],Bcs,'with_underscore')
<Cs = [95],_X_St,Line,Col,Toks,B,NCs,BCs,Us> when 'true' -> let <_83> = 'scan_based_int'/6 in {'more',{Cs,Col,Toks,Line,{B,NCs,BCs,Us},_83}}
<Cs = [],_X_St,Line,Col,Toks,B,NCs,BCs,Us> when 'true' -> let <_84> = 'scan_based_int'/6 in {'more',{Cs,Col,Toks,Line,{B,NCs,BCs,Us},_84}}
<Cs,St,Line,Col,Toks,B,Ncs0,Bcs,Us> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in let <_87> = catch let <_86> = apply 'remove_digit_separators'/2 (Ncs,Us) in call 'erlang':'list_to_integer' (_86,B) in case _87 of <N> when call 'erlang':'is_integer' (_87) -> let <_88> = call 'erlang':'++' (Bcs,Ncs) in apply 'tok3'/8 (Cs,St,Line,Col,Toks,'integer',_88,N)
<_104> when 'true' -> let <_90> = call 'erlang':'length' (Bcs) in let <_89> = call 'erlang':'length' (Ncs) in let <Len> = call 'erlang':'+' (_90,_89) in let <Ncol> = case <Col,Len> of (<(_107 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _107-|['compiler_generated'] )
(<_108,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_108)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_108,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_109,_110> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_109,_110}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','integer'},Line,Col,Line,Ncol,Cs) end end
'scan_fraction'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Ncs,Us}> when 'true' -> apply 'scan_fraction'/7 (Cs,St,Line,Col,Toks,Ncs,Us)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'scan_fraction',6}}] )-|['compiler_generated'] ) end
'scan_fraction'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[C|Cs],St,Line,Col,Toks,Ncs,Us> when try (let <_9> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_fraction'/7 (Cs,St,Line,Col,Toks,[C|Ncs],Us)
<[95|[Next|Cs]],St,Line,Col,Toks,Ncs = [Prev|_28],_X_Us> when try (let <_16> = case call 'erlang':'>=' (Next,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (Next,57) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Prev,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Prev,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_12> when 'true' -> _12-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_16-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_fraction'/7 (Cs,St,Line,Col,Toks,[Next|[95|Ncs]],'with_underscore')
<Cs = [95],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_17> = 'scan_fraction'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_17}}
<[E|Cs],St,Line,Col,Toks,Ncs,Us> when let <_18> = call 'erlang':'=:=' (E,101) in let <_19> = call 'erlang':'=:=' (E,69) in call 'erlang':'or' (_18,_19) -> apply 'scan_exponent_sign'/7 (Cs,St,Line,Col,Toks,[E|Ncs],Us)
<Cs = [],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_20> = 'scan_fraction'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_20}}
<Cs,St,Line,Col,Toks,Ncs,Us> when 'true' -> apply 'float_end'/7 (Cs,St,Line,Col,Toks,Ncs,Us) end
'scan_exponent_sign'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Ncs,Us}> when 'true' -> apply 'scan_exponent_sign'/7 (Cs,St,Line,Col,Toks,Ncs,Us)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'scan_exponent_sign',6}}] )-|['compiler_generated'] ) end
'scan_exponent_sign'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[C|Cs],St,Line,Col,Toks,Ncs,Us> when let <_7> = call 'erlang':'=:=' (C,43) in let <_8> = call 'erlang':'=:=' (C,45) in call 'erlang':'or' (_7,_8) -> apply 'scan_exponent'/7 (Cs,St,Line,Col,Toks,[C|Ncs],Us)
<Cs = [],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_9> = 'scan_exponent_sign'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_9}}
<Cs,St,Line,Col,Toks,Ncs,Us> when 'true' -> apply 'scan_exponent'/7 (Cs,St,Line,Col,Toks,Ncs,Us) end
'scan_exponent'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Cs,St,Line,Col,Toks,{Ncs,Us}> when 'true' -> apply 'scan_exponent'/7 (Cs,St,Line,Col,Toks,Ncs,Us)
(<_11,_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7,_6})-|[{'function_name',{'scan_exponent',6}}] )-|['compiler_generated'] ) end
'scan_exponent'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[C|Cs],St,Line,Col,Toks,Ncs,Us> when try (let <_9> = case call 'erlang':'>=' (C,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (C,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_7> when 'true' -> _7-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_9-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_exponent'/7 (Cs,St,Line,Col,Toks,[C|Ncs],Us)
<[95|[Next|Cs]],St,Line,Col,Toks,Ncs = [Prev|_26],_27> when try (let <_16> = case call 'erlang':'>=' (Next,48) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'=<' (Next,57) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'erlang':'>=' (Prev,48) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (Prev,57)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_12> when 'true' -> _12-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_11> when 'true' -> _11-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_16-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'scan_exponent'/7 (Cs,St,Line,Col,Toks,[Next|[95|Ncs]],'with_underscore')
<Cs = [95],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_17> = 'scan_exponent'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_17}}
<Cs = [],_X_St,Line,Col,Toks,Ncs,Us> when 'true' -> let <_18> = 'scan_exponent'/6 in {'more',{Cs,Col,Toks,Line,{Ncs,Us},_18}}
<Cs,St,Line,Col,Toks,Ncs,Us> when 'true' -> apply 'float_end'/7 (Cs,St,Line,Col,Toks,Ncs,Us) end
'float_end'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <Ncs> = call 'lists':'reverse' (_5) in let <_9> = catch let <_8> = apply 'remove_digit_separators'/2 (Ncs,_6) in call 'erlang':'list_to_float' (_8) in case _9 of <F> when call 'erlang':'is_float' (_9) -> apply 'tok3'/8 (_0,_1,_2,_3,_4,'float',Ncs,F)
<_20> when 'true' -> let <_10> = call 'erlang':'length' (Ncs) in let <Ncol> = case <_3,_10> of (<(_23 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _23-|['compiler_generated'] )
(<_24,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_24)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_24,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_25,_26> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_25,_26}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','float'},_2,_3,_2,Ncol,_0) end
'skip_comment'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[C|Cs],St,Line,Col,Toks,N> when try let <_6> = call 'erlang':'=/=' (C,10) in let <_7> = call 'erlang':'is_integer' (C) in let <_8> = call 'erlang':'>=' (C,0) in let <_9> = call 'erlang':'and' (_7,_8) in call 'erlang':'and' (_6,_9) of <Try> -> Try catch <T,R> -> 'false' -> let <_24> = case <> of (<> when call 'erlang':'is_integer' (C) -> let <_14> = case <> of (<> when call 'erlang':'>=' (C,0) -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _14 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_18> = case <> of (<> when call 'erlang':'>' (C,57343) -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _18 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case <> of (<> when call 'erlang':'>' (C,65535) -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_15}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_11> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_11}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in case _24 of <'true'> when 'true' -> let <_25> = call 'erlang':'+' (N,1) in apply 'skip_comment'/6 (Cs,St,Line,Col,Toks,_25)
<'false'> when 'true' -> let <_26> = call 'erlang':'+' (N,1) in let <Ncol> = case <Col,_26> of (<(_39 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _39-|['compiler_generated'] )
(<_40,_41> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_40)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_40,_41)-|['compiler_generated'] )-|['compiler_generated'] )
(<_42,_43> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_42,_43}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','character'},Line,Col,Line,Ncol,Cs)
(<_28> when 'true' -> primop 'match_fail' ({'case_clause',_28})-|['compiler_generated'] ) end
<Cs = [],_X_St,Line,Col,Toks,N> when 'true' -> let <_29> = 'skip_comment'/6 in {'more',{Cs,Col,Toks,Line,N,_29}}
<Cs,St,Line,Col,Toks,N> when 'true' -> let <_30> = case <Col,N> of (<(_46 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _46-|['compiler_generated'] )
(<_47,_48> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_47)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_47,_48)-|['compiler_generated'] )-|['compiler_generated'] )
(<_49,_50> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_49,_50}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_30,Toks) end
'scan_comment'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[C|Cs],St,Line,Col,Toks,Ncs> when try let <_6> = call 'erlang':'=/=' (C,10) in let <_7> = call 'erlang':'is_integer' (C) in let <_8> = call 'erlang':'>=' (C,0) in let <_9> = call 'erlang':'and' (_7,_8) in call 'erlang':'and' (_6,_9) of <Try> -> Try catch <T,R> -> 'false' -> let <_24> = case <> of (<> when call 'erlang':'is_integer' (C) -> let <_14> = case <> of (<> when call 'erlang':'>=' (C,0) -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _14 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_18> = case <> of (<> when call 'erlang':'>' (C,57343) -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _18 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case <> of (<> when call 'erlang':'>' (C,65535) -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_15}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_11> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_11}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in case _24 of <'true'> when 'true' -> apply 'scan_comment'/6 (Cs,St,Line,Col,Toks,[C|Ncs])
<'false'> when 'true' -> let <_25> = call 'erlang':'length' (Ncs) in let <_26> = call 'erlang':'+' (_25,1) in let <Ncol> = case <Col,_26> of (<(_39 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _39-|['compiler_generated'] )
(<_40,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_40)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_40,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_41,_42> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_41,_42}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan_error'/6 ({'illegal','character'},Line,Col,Line,Ncol,Cs)
(<_28> when 'true' -> primop 'match_fail' ({'case_clause',_28})-|['compiler_generated'] ) end
<Cs = [],_X_St,Line,Col,Toks,Ncs> when 'true' -> let <_29> = 'scan_comment'/6 in {'more',{Cs,Col,Toks,Line,Ncs,_29}}
<Cs,St,Line,Col,Toks,Ncs0> when 'true' -> let <Ncs> = call 'lists':'reverse' (Ncs0) in apply 'tok3'/8 (Cs,St,Line,Col,Toks,'comment',Ncs,Ncs) end
'tok2'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Cs,St = {'erl_scan',_18,_19,_20,'false'},Line,Col = 'no_col',Toks,_X_Wcs,P> when 'true' -> let <_7> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in apply 'scan1'/5 (Cs,St,Line,Col,[{P,_7}|Toks])
<Cs,St,Line,Col,Toks,Wcs,P> when 'true' -> let <Anno> = case <Line,Col,St,Wcs> of (<_28,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_28)-|['compiler_generated'] )-|['compiler_generated'] )
(<_31,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_31) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_34,_35,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_36> = {_34,_35} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_36)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38,_39,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_40> = {_38,_39} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_40) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_7,_42> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_7,_42}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_9> = call 'erlang':'length' (Wcs) in let <_10> = case <Col,_9> of (<(_45 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _45-|['compiler_generated'] )
(<_46,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_46)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_46,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_47,_48> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_47,_48}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_10,[{P,Anno}|Toks]) end
'tok2'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Cs,St = {'erl_scan',_19,_20,_21,'false'},Line,Col = 'no_col',Toks,_X_Wcs,P,_X_N> when 'true' -> let <_8> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in apply 'scan1'/5 (Cs,St,Line,Col,[{P,_8}|Toks])
<Cs,St,Line,Col,Toks,Wcs,P,N> when 'true' -> let <Anno> = case <Line,Col,St,Wcs> of (<_28,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_28)-|['compiler_generated'] )-|['compiler_generated'] )
(<_31,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_31) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_34,_35,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_36> = {_34,_35} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_36)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38,_39,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),String> when ('true'-|['compiler_generated'] ) -> (let <_40> = {_38,_39} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_40) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (String,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_42,_43> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_42,_43}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_10> = case <Col,N> of (<(_46 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _46-|['compiler_generated'] )
(<_47,_48> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_47)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_47,_48)-|['compiler_generated'] )-|['compiler_generated'] )
(<_49,_50> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_49,_50}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_10,[{P,Anno}|Toks]) end
'tok3'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Cs,St = {'erl_scan',_21,_22,_23,'false'},Line,Col = 'no_col',Toks,Item,_X_S,Sym> when 'true' -> let <_8> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in apply 'scan1'/5 (Cs,St,Line,Col,[{Item,_8,Sym}|Toks])
<Cs,St,Line,Col,Toks,Item,String,Sym> when 'true' -> let <_9> = case <Line,Col,St,String> of (<_30,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_30)-|['compiler_generated'] )-|['compiler_generated'] )
(<_33,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),_34> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_33) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (_34,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_37,_38,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_39> = {_37,_38} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_39)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_41,_42,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),_43> when ('true'-|['compiler_generated'] ) -> (let <_44> = {_41,_42} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_44) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (_43,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8,_46,_47> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8,_46,_47}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Token> = {Item,_9,Sym} in let <_11> = call 'erlang':'length' (String) in let <_12> = case <Col,_11> of (<(_50 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _50-|['compiler_generated'] )
(<_51,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_51)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_51,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_52,_53> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_52,_53}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_12,[Token|Toks]) end
'tok3'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <Cs,St = {'erl_scan',_22,_23,_24,'false'},Line,Col = 'no_col',Toks,Item,_X_String,Sym,_X_Length> when 'true' -> let <_9> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in apply 'scan1'/5 (Cs,St,Line,Col,[{Item,_9,Sym}|Toks])
<Cs,St,Line,Col,Toks,Item,String,Sym,Length> when 'true' -> let <_10> = case <Line,Col,St,String> of (<_31,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_10,_11,_12,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_31)-|['compiler_generated'] )-|['compiler_generated'] )
(<_34,('no_col'-|['compiler_generated'] ),({('erl_scan'-|['compiler_generated'] ),_13,_14,_15,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),_35> when ('true'-|['compiler_generated'] ) -> (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_34) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (_35,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38,_39,({('erl_scan'-|['compiler_generated'] ),_16,_17,_18,('false'-|['compiler_generated'] )}-|['compiler_generated'] ),_X_String> when ('true'-|['compiler_generated'] ) -> (let <_40> = {_38,_39} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_40)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_42,_43,({('erl_scan'-|['compiler_generated'] ),_19,_20,_21,('true'-|['compiler_generated'] )}-|['compiler_generated'] ),_44> when ('true'-|['compiler_generated'] ) -> (let <_45> = {_42,_43} in (let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_45) in (call ('erl_anno'-|['compiler_generated'] ):('set_text'-|['compiler_generated'] ) (_44,Anno)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_47,_48,_49> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_47,_48,_49}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Token> = {Item,_10,Sym} in let <_12> = case <Col,Length> of (<(_52 = ('no_col'-|['compiler_generated'] )-|['compiler_generated'] ),_X_N> when ('true'-|['compiler_generated'] ) -> _52-|['compiler_generated'] )
(<_53,N> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_53)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_53,N)-|['compiler_generated'] )-|['compiler_generated'] )
(<_54,_55> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_54,_55}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'scan1'/5 (Cs,St,Line,_12,[Token|Toks]) end
'scan_error'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <Loc> = apply 'location'/2 (_1,_2) in let <EndLoc> = apply 'location'/2 (_3,_4) in apply 'scan_error'/4 (_0,Loc,EndLoc,_5)
'scan_error'/4 = fun (_0,_1,_2,_3) -> {{'error',{_1,'erl_scan',_0},_2},_3}
'anno'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,'no_col',{'erl_scan',_10,_11,_12,'false'},_X_String> when 'true' -> (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line)-|['compiler_generated'] )
<Line,'no_col',{'erl_scan',_13,_14,_15,'true'},String> when 'true' -> let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (Line) in call 'erl_anno':'set_text' (String,Anno)
<Line,Col,{'erl_scan',_16,_17,_18,'false'},_X_String> when 'true' -> let <_26> = {Line,Col} in (call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_26)-|['compiler_generated'] )
<Line,Col,{'erl_scan',_19,_20,_21,'true'},String> when 'true' -> let <_28> = {Line,Col} in let <Anno> = call ('erl_anno'-|['compiler_generated'] ):('new'-|['compiler_generated'] ) (_28) in call 'erl_anno':'set_text' (String,Anno)
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'anno',4}}] )-|['compiler_generated'] ) end
'location'/2 = fun (_0,_1) -> case <_0,_1> of <Line,'no_col'> when 'true' -> Line
<Line,Col> when call 'erlang':'is_integer' (Col) -> {Line,Col}
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'location',2}}] )-|['compiler_generated'] ) end
'anno'/1 = fun (_0) -> call 'erl_anno':'new' (_0)
'incr_column'/2 = fun (_0,_1) -> case <_0,_1> of <Col = 'no_col',_X_N> when 'true' -> Col
<Col,N> when call 'erlang':'is_integer' (Col) -> call 'erlang':'+' (Col,N)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'incr_column',2}}] )-|['compiler_generated'] ) end
'new_column'/2 = fun (_0,_1) -> case <_0,_1> of <Col = 'no_col',_X_Ncol> when 'true' -> Col
<Col,Ncol> when call 'erlang':'is_integer' (Col) -> Ncol
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'new_column',2}}] )-|['compiler_generated'] ) end
'nl_spcs'/1 = fun (_0) -> case _0 of <2> when 'true' -> [10|[32]]
<3> when 'true' -> [10|[32|[32]]]
<4> when 'true' -> [10|[32|[32|[32]]]]
<5> when 'true' -> [10|[32|[32|[32|[32]]]]]
<6> when 'true' -> [10|[32|[32|[32|[32|[32]]]]]]
<7> when 'true' -> [10|[32|[32|[32|[32|[32|[32]]]]]]]
<8> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32]]]]]]]]
<9> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]
<10> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]
<11> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]
<12> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]
<13> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]
<14> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]
<15> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]
<16> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]]
<17> when 'true' -> [10|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'nl_spcs',1}}] )-|['compiler_generated'] ) end
'spcs'/1 = fun (_0) -> case _0 of <1> when 'true' -> [32]
<2> when 'true' -> [32|[32]]
<3> when 'true' -> [32|[32|[32]]]
<4> when 'true' -> [32|[32|[32|[32]]]]
<5> when 'true' -> [32|[32|[32|[32|[32]]]]]
<6> when 'true' -> [32|[32|[32|[32|[32|[32]]]]]]
<7> when 'true' -> [32|[32|[32|[32|[32|[32|[32]]]]]]]
<8> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]
<9> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]
<10> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]
<11> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]
<12> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]
<13> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]
<14> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]
<15> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]
<16> when 'true' -> [32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'spcs',1}}] )-|['compiler_generated'] ) end
'nl_tabs'/1 = fun (_0) -> case _0 of <2> when 'true' -> [10|[9]]
<3> when 'true' -> [10|[9|[9]]]
<4> when 'true' -> [10|[9|[9|[9]]]]
<5> when 'true' -> [10|[9|[9|[9|[9]]]]]
<6> when 'true' -> [10|[9|[9|[9|[9|[9]]]]]]
<7> when 'true' -> [10|[9|[9|[9|[9|[9|[9]]]]]]]
<8> when 'true' -> [10|[9|[9|[9|[9|[9|[9|[9]]]]]]]]
<9> when 'true' -> [10|[9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]]
<10> when 'true' -> [10|[9|[9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]]]
<11> when 'true' -> [10|[9|[9|[9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'nl_tabs',1}}] )-|['compiler_generated'] ) end
'tabs'/1 = fun (_0) -> case _0 of <1> when 'true' -> [9]
<2> when 'true' -> [9|[9]]
<3> when 'true' -> [9|[9|[9]]]
<4> when 'true' -> [9|[9|[9|[9]]]]
<5> when 'true' -> [9|[9|[9|[9|[9]]]]]
<6> when 'true' -> [9|[9|[9|[9|[9|[9]]]]]]
<7> when 'true' -> [9|[9|[9|[9|[9|[9|[9]]]]]]]
<8> when 'true' -> [9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]
<9> when 'true' -> [9|[9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]]
<10> when 'true' -> [9|[9|[9|[9|[9|[9|[9|[9|[9|[9]]]]]]]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'tabs',1}}] )-|['compiler_generated'] ) end
'reserved_word'/1 = fun (_0) -> case _0 of <'after'> when 'true' -> 'true'
<'begin'> when 'true' -> 'true'
<'case'> when 'true' -> 'true'
<'try'> when 'true' -> 'true'
<'cond'> when 'true' -> 'true'
<'catch'> when 'true' -> 'true'
<'andalso'> when 'true' -> 'true'
<'orelse'> when 'true' -> 'true'
<'end'> when 'true' -> 'true'
<'fun'> when 'true' -> 'true'
<'if'> when 'true' -> 'true'
<'let'> when 'true' -> 'true'
<'of'> when 'true' -> 'true'
<'receive'> when 'true' -> 'true'
<'when'> when 'true' -> 'true'
<'bnot'> when 'true' -> 'true'
<'not'> when 'true' -> 'true'
<'div'> when 'true' -> 'true'
<'rem'> when 'true' -> 'true'
<'band'> when 'true' -> 'true'
<'and'> when 'true' -> 'true'
<'bor'> when 'true' -> 'true'
<'bxor'> when 'true' -> 'true'
<'bsl'> when 'true' -> 'true'
<'bsr'> when 'true' -> 'true'
<'or'> when 'true' -> 'true'
<'xor'> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('erl_scan')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('erl_scan',_0) end