module 'dets' ['add_user'/3,'all'/0,'bchunk'/2,'close'/1,'delete'/2,'delete_all_objects'/1,'delete_object'/2,'file_info'/1,'first'/1,'foldl'/3,'foldr'/3,'from_ets'/2,'fsck'/1,'fsck'/2,'get_head_field'/2,'info'/1,'info'/2,'init'/2,'init_table'/2,'init_table'/3,'insert'/2,'insert_new'/2,'internal_close'/1,'internal_open'/3,'is_compatible_bchunk_format'/2,'is_dets_file'/1,'istart_link'/1,'lookup'/2,'lookup_keys'/2,'match'/1,'match'/2,'match'/3,'match_delete'/2,'match_object'/1,'match_object'/2,'match_object'/3,'member'/2,'module_info'/0,'module_info'/1,'next'/2,'open_file'/1,'open_file'/2,'pid2name'/1,'remove_user'/2,'repair_continuation'/2,'safe_fixtable'/2,'select'/1,'select'/2,'select'/3,'select_delete'/2,'slot'/2,'start'/0,'stop'/0,'sync'/1,'system_code_change'/4,'system_continue'/3,'system_terminate'/4,'table'/1,'table'/2,'to_ets'/2,'traverse'/2,'update_counter'/3,'verbose'/0,'verbose'/1,'view'/1,'where'/2] attributes [ 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],1}]
, 'export_type' = [{'bindings_cont',0}|[{'cont',0}|[{'object_cont',0}|[{'select_cont',0}|[{'tab_name',0}]]]]]
, 'compile' = [{'inline',[{'einval',2}|[{'badarg',2}|[{'undefined',1}|[{'badarg_exit',2}|[{'lookup_reply',2}]]]]]}]
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}]
, 'record' = [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],99}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}]
, 'type' = [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}]
, 'type' = [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}]
, 'type' = [{'keypos',{'type',52,'pos_integer',[]},[]}]
, 'type' = [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}]
, 'type' = [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'tab_name',{'type',56,'term',[]},[]}]
, 'type' = [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}]
, 'type' = [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}]
, 'record' = [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'record' = [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}]
, 'type' = [{'delay',{'type',136,'non_neg_integer',[]},[]}]
, 'type' = [{'threshold',{'type',137,'non_neg_integer',[]},[]}]
, 'type' = [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}]
, 'record' = [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}]
, 'type' = [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]]],101}]
, 'record' = [{'dets_cont',[{'typed_record_field',{'record_field',140,{'atom',140,'what'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'atom',140,'bchunk'}|[{'atom',140,'bindings'}|[{'atom',140,'object'}|[{'atom',140,'select'}]]]]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'no_objs'}},{'type',141,'union',[{'atom',141,'default'}|[{'type',141,'pos_integer',[]}]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'bin'}},{'type',142,'union',[{'atom',142,'eof'}|[{'type',142,'binary',[]}]]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'alloc'}},{'type',144,'union',[{'type',144,'binary',[]}|[{'type',145,'tuple',[{'ann_type',145,[{'var',145,'From'}|[{'type',145,'non_neg_integer',[]}]]}|[{'ann_type',146,[{'var',146,'To'}|[{'atom',146,'non_neg_integer'}]]}|[{'type',147,'binary',[]}]]]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'tab'}},{'user_type',148,'tab_name',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'proc'}},{'type',149,'union',[{'atom',149,'undefined'}|[{'type',149,'pid',[]}]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'match_program'}},{'type',150,'union',[{'atom',150,'true'}|[{'atom',151,'undefined'}|[{'type',152,'tuple',[{'atom',152,'match_spec'}|[{'remote_type',152,[{'atom',152,'ets'}|[{'atom',152,'comp_match_spec'}|[[]]]]}]]}]]]}}]]]]]]]}]
, 'record' = [{'open_args',[{'typed_record_field',{'record_field',156,{'atom',156,'file'}},{'type',156,'list',[]}}|[{'typed_record_field',{'record_field',157,{'atom',157,'type'}},{'user_type',157,'type',[]}}|[{'typed_record_field',{'record_field',158,{'atom',158,'keypos'}},{'user_type',158,'keypos',[]}}|[{'typed_record_field',{'record_field',159,{'atom',159,'repair'}},{'type',159,'union',[{'atom',159,'force'}|[{'type',159,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'min_no_slots'}},{'user_type',160,'no_slots',[]}}|[{'typed_record_field',{'record_field',161,{'atom',161,'max_no_slots'}},{'user_type',161,'no_slots',[]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'ram_file'}},{'type',162,'boolean',[]}}|[{'typed_record_field',{'record_field',163,{'atom',163,'delayed_write'}},{'user_type',163,'cache_parms',[]}}|[{'typed_record_field',{'record_field',164,{'atom',164,'auto_save'}},{'user_type',164,'auto_save',[]}}|[{'typed_record_field',{'record_field',165,{'atom',165,'access'}},{'user_type',165,'access',[]}}|[{'typed_record_field',{'record_field',166,{'atom',166,'debug'}},{'type',166,'boolean',[]}}]]]]]]]]]]]}]
, 'opaque' = [{'bindings_cont',{'type',182,'record',[{'atom',182,'dets_cont'}]},[]}]
, 'opaque' = [{'cont',{'type',183,'record',[{'atom',183,'dets_cont'}]},[]}]
, 'type' = [{'match_spec',{'remote_type',184,[{'atom',184,'ets'}|[{'atom',184,'match_spec'}|[[]]]]},[]}]
, 'type' = [{'object',{'type',185,'tuple','any'},[]}]
, 'opaque' = [{'object_cont',{'type',186,'record',[{'atom',186,'dets_cont'}]},[]}]
, 'type' = [{'pattern',{'type',187,'union',[{'type',187,'atom',[]}|[{'type',187,'tuple','any'}]]},[]}]
, 'opaque' = [{'select_cont',{'type',188,'record',[{'atom',188,'dets_cont'}]},[]}]
, 'spec' = [{{'all',0},[{'type',209,'fun',[{'type',209,'product',[]}|[{'type',209,'list',[{'user_type',209,'tab_name',[]}]}]]}]}]
, 'spec' = [{{'bchunk',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Name'}|[{'var',214,'Continuation'}]]}|[{'type',215,'union',[{'type',215,'tuple',[{'var',215,'Continuation2'}|[{'var',215,'Data'}]]}|[{'atom',215,'$end_of_table'}|[{'type',215,'tuple',[{'atom',215,'error'}|[{'var',215,'Reason'}]]}]]]}]]}|[[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Name'}|[{'user_type',216,'tab_name',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Continuation'}|[{'type',217,'union',[{'atom',217,'start'}|[{'user_type',217,'cont',[]}]]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'Continuation2'}|[{'user_type',218,'cont',[]}]]]]}|[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'Data'}|[{'type',219,'union',[{'type',219,'binary',[]}|[{'type',219,'tuple','any'}]]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Reason'}|[{'type',220,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'close',1},[{'type',229,'bounded_fun',[{'type',229,'fun',[{'type',229,'product',[{'var',229,'Name'}]}|[{'type',229,'union',[{'atom',229,'ok'}|[{'type',229,'tuple',[{'atom',229,'error'}|[{'var',229,'Reason'}]]}]]}]]}|[[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Name'}|[{'user_type',230,'tab_name',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Reason'}|[{'type',231,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'delete',2},[{'type',241,'bounded_fun',[{'type',241,'fun',[{'type',241,'product',[{'var',241,'Name'}|[{'var',241,'Key'}]]}|[{'type',241,'union',[{'atom',241,'ok'}|[{'type',241,'tuple',[{'atom',241,'error'}|[{'var',241,'Reason'}]]}]]}]]}|[[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Name'}|[{'user_type',242,'tab_name',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Key'}|[{'type',243,'term',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Reason'}|[{'type',244,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'delete_all_objects',1},[{'type',249,'bounded_fun',[{'type',249,'fun',[{'type',249,'product',[{'var',249,'Name'}]}|[{'type',249,'union',[{'atom',249,'ok'}|[{'type',249,'tuple',[{'atom',249,'error'}|[{'var',249,'Reason'}]]}]]}]]}|[[{'type',250,'constraint',[{'atom',250,'is_subtype'}|[[{'var',250,'Name'}|[{'user_type',250,'tab_name',[]}]]]]}|[{'type',251,'constraint',[{'atom',251,'is_subtype'}|[[{'var',251,'Reason'}|[{'type',251,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'delete_object',2},[{'type',263,'bounded_fun',[{'type',263,'fun',[{'type',263,'product',[{'var',263,'Name'}|[{'var',263,'Object'}]]}|[{'type',263,'union',[{'atom',263,'ok'}|[{'type',263,'tuple',[{'atom',263,'error'}|[{'var',263,'Reason'}]]}]]}]]}|[[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Name'}|[{'user_type',264,'tab_name',[]}]]]]}|[{'type',265,'constraint',[{'atom',265,'is_subtype'}|[[{'var',265,'Object'}|[{'user_type',265,'object',[]}]]]]}|[{'type',266,'constraint',[{'atom',266,'is_subtype'}|[[{'var',266,'Reason'}|[{'type',266,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'first',1},[{'type',290,'bounded_fun',[{'type',290,'fun',[{'type',290,'product',[{'var',290,'Name'}]}|[{'type',290,'union',[{'var',290,'Key'}|[{'atom',290,'$end_of_table'}]]}]]}|[[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Name'}|[{'user_type',291,'tab_name',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'Key'}|[{'type',292,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'foldr',3},[{'type',297,'bounded_fun',[{'type',297,'fun',[{'type',297,'product',[{'var',297,'Function'}|[{'var',297,'Acc0'}|[{'var',297,'Name'}]]]}|[{'type',297,'union',[{'var',297,'Acc'}|[{'type',297,'tuple',[{'atom',297,'error'}|[{'var',297,'Reason'}]]}]]}]]}|[[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'Name'}|[{'user_type',298,'tab_name',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Function'}|[{'type',299,'fun',[{'type',299,'product',[{'ann_type',299,[{'var',299,'Object'}|[{'user_type',299,'object',[]}]]}|[{'var',299,'AccIn'}]]}|[{'var',299,'AccOut'}]]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Acc0'}|[{'type',300,'term',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Acc'}|[{'type',301,'term',[]}]]]]}|[{'type',302,'constraint',[{'atom',302,'is_subtype'}|[[{'var',302,'AccIn'}|[{'type',302,'term',[]}]]]]}|[{'type',303,'constraint',[{'atom',303,'is_subtype'}|[[{'var',303,'AccOut'}|[{'type',303,'term',[]}]]]]}|[{'type',304,'constraint',[{'atom',304,'is_subtype'}|[[{'var',304,'Reason'}|[{'type',304,'term',[]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'foldl',3},[{'type',309,'bounded_fun',[{'type',309,'fun',[{'type',309,'product',[{'var',309,'Function'}|[{'var',309,'Acc0'}|[{'var',309,'Name'}]]]}|[{'type',309,'union',[{'var',309,'Acc'}|[{'type',309,'tuple',[{'atom',309,'error'}|[{'var',309,'Reason'}]]}]]}]]}|[[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Name'}|[{'user_type',310,'tab_name',[]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Function'}|[{'type',311,'fun',[{'type',311,'product',[{'ann_type',311,[{'var',311,'Object'}|[{'user_type',311,'object',[]}]]}|[{'var',311,'AccIn'}]]}|[{'var',311,'AccOut'}]]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Acc0'}|[{'type',312,'term',[]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Acc'}|[{'type',313,'term',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'AccIn'}|[{'type',314,'term',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'AccOut'}|[{'type',315,'term',[]}]]]]}|[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Reason'}|[{'type',316,'term',[]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'from_ets',2},[{'type',322,'bounded_fun',[{'type',322,'fun',[{'type',322,'product',[{'var',322,'Name'}|[{'var',322,'EtsTab'}]]}|[{'type',322,'union',[{'atom',322,'ok'}|[{'type',322,'tuple',[{'atom',322,'error'}|[{'var',322,'Reason'}]]}]]}]]}|[[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Name'}|[{'user_type',323,'tab_name',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'EtsTab'}|[{'remote_type',324,[{'atom',324,'ets'}|[{'atom',324,'tab'}|[[]]]]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Reason'}|[{'type',325,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'info',1},[{'type',349,'bounded_fun',[{'type',349,'fun',[{'type',349,'product',[{'var',349,'Name'}]}|[{'type',349,'union',[{'var',349,'InfoList'}|[{'atom',349,'undefined'}]]}]]}|[[{'type',350,'constraint',[{'atom',350,'is_subtype'}|[[{'var',350,'Name'}|[{'user_type',350,'tab_name',[]}]]]]}|[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'InfoList'}|[{'type',351,'list',[{'var',351,'InfoTuple'}]}]]]]}|[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'InfoTuple'}|[{'type',352,'union',[{'type',352,'tuple',[{'atom',352,'file_size'}|[{'type',352,'non_neg_integer',[]}]]}|[{'type',353,'tuple',[{'atom',353,'filename'}|[{'remote_type',353,[{'atom',353,'file'}|[{'atom',353,'name'}|[[]]]]}]]}|[{'type',354,'tuple',[{'atom',354,'keypos'}|[{'user_type',354,'keypos',[]}]]}|[{'type',355,'tuple',[{'atom',355,'size'}|[{'type',355,'non_neg_integer',[]}]]}|[{'type',356,'tuple',[{'atom',356,'type'}|[{'user_type',356,'type',[]}]]}]]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'info',2},[{'type',366,'bounded_fun',[{'type',366,'fun',[{'type',366,'product',[{'var',366,'Name'}|[{'var',366,'Item'}]]}|[{'type',366,'union',[{'var',366,'Value'}|[{'atom',366,'undefined'}]]}]]}|[[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Name'}|[{'user_type',367,'tab_name',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Item'}|[{'type',368,'union',[{'atom',368,'access'}|[{'atom',368,'auto_save'}|[{'atom',368,'bchunk_format'}|[{'atom',369,'hash'}|[{'atom',369,'file_size'}|[{'atom',369,'filename'}|[{'atom',369,'keypos'}|[{'atom',369,'memory'}|[{'atom',370,'no_keys'}|[{'atom',370,'no_objects'}|[{'atom',370,'no_slots'}|[{'atom',370,'owner'}|[{'atom',370,'ram_file'}|[{'atom',371,'safe_fixed'}|[{'atom',371,'safe_fixed_monotonic_time'}|[{'atom',371,'size'}|[{'atom',371,'type'}]]]]]]]]]]]]]]]]]}]]]]}|[{'type',372,'constraint',[{'atom',372,'is_subtype'}|[[{'var',372,'Value'}|[{'type',372,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'init_table',2},[{'type',396,'bounded_fun',[{'type',396,'fun',[{'type',396,'product',[{'var',396,'Name'}|[{'var',396,'InitFun'}]]}|[{'type',396,'union',[{'atom',396,'ok'}|[{'type',396,'tuple',[{'atom',396,'error'}|[{'var',396,'Reason'}]]}]]}]]}|[[{'type',397,'constraint',[{'atom',397,'is_subtype'}|[[{'var',397,'Name'}|[{'user_type',397,'tab_name',[]}]]]]}|[{'type',398,'constraint',[{'atom',398,'is_subtype'}|[[{'var',398,'InitFun'}|[{'type',398,'fun',[{'type',398,'product',[{'var',398,'Arg'}]}|[{'var',398,'Res'}]]}]]]]}|[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Arg'}|[{'type',399,'union',[{'atom',399,'read'}|[{'atom',399,'close'}]]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'Res'}|[{'type',400,'union',[{'atom',400,'end_of_input'}|[{'type',400,'tuple',[{'type',400,'list',[{'user_type',400,'object',[]}]}|[{'var',400,'InitFun'}]]}|[{'type',400,'tuple',[{'var',400,'Data'}|[{'var',400,'InitFun'}]]}|[{'type',400,'term',[]}]]]]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'Reason'}|[{'type',401,'term',[]}]]]]}|[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Data'}|[{'type',402,'union',[{'type',402,'binary',[]}|[{'type',402,'tuple','any'}]]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'init_table',3},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'Name'}|[{'var',407,'InitFun'}|[{'var',407,'Options'}]]]}|[{'type',407,'union',[{'atom',407,'ok'}|[{'type',407,'tuple',[{'atom',407,'error'}|[{'var',407,'Reason'}]]}]]}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Name'}|[{'user_type',408,'tab_name',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'InitFun'}|[{'type',409,'fun',[{'type',409,'product',[{'var',409,'Arg'}]}|[{'var',409,'Res'}]]}]]]]}|[{'type',410,'constraint',[{'atom',410,'is_subtype'}|[[{'var',410,'Arg'}|[{'type',410,'union',[{'atom',410,'read'}|[{'atom',410,'close'}]]}]]]]}|[{'type',411,'constraint',[{'atom',411,'is_subtype'}|[[{'var',411,'Res'}|[{'type',411,'union',[{'atom',411,'end_of_input'}|[{'type',411,'tuple',[{'type',411,'list',[{'user_type',411,'object',[]}]}|[{'var',411,'InitFun'}]]}|[{'type',411,'tuple',[{'var',411,'Data'}|[{'var',411,'InitFun'}]]}|[{'type',411,'term',[]}]]]]}]]]]}|[{'type',412,'constraint',[{'atom',412,'is_subtype'}|[[{'var',412,'Options'}|[{'type',412,'union',[{'var',412,'Option'}|[{'type',412,'list',[{'var',412,'Option'}]}]]}]]]]}|[{'type',413,'constraint',[{'atom',413,'is_subtype'}|[[{'var',413,'Option'}|[{'type',413,'union',[{'type',413,'tuple',[{'atom',413,'min_no_slots'}|[{'user_type',413,'no_slots',[]}]]}|[{'type',413,'tuple',[{'atom',413,'format'}|[{'type',413,'union',[{'atom',413,'term'}|[{'atom',413,'bchunk'}]]}]]}]]}]]]]}|[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'Reason'}|[{'type',414,'term',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Data'}|[{'type',415,'union',[{'type',415,'binary',[]}|[{'type',415,'tuple','any'}]]}]]]]}]]]]]]]]]]}]}]
, 'spec' = [{{'insert',2},[{'type',430,'bounded_fun',[{'type',430,'fun',[{'type',430,'product',[{'var',430,'Name'}|[{'var',430,'Objects'}]]}|[{'type',430,'union',[{'atom',430,'ok'}|[{'type',430,'tuple',[{'atom',430,'error'}|[{'var',430,'Reason'}]]}]]}]]}|[[{'type',431,'constraint',[{'atom',431,'is_subtype'}|[[{'var',431,'Name'}|[{'user_type',431,'tab_name',[]}]]]]}|[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Objects'}|[{'type',432,'union',[{'user_type',432,'object',[]}|[{'type',432,'list',[{'user_type',432,'object',[]}]}]]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Reason'}|[{'type',433,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'insert_new',2},[{'type',440,'bounded_fun',[{'type',440,'fun',[{'type',440,'product',[{'var',440,'Name'}|[{'var',440,'Objects'}]]}|[{'type',440,'union',[{'type',440,'boolean',[]}|[{'type',440,'tuple',[{'atom',440,'error'}|[{'var',440,'Reason'}]]}]]}]]}|[[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'Name'}|[{'user_type',441,'tab_name',[]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'Objects'}|[{'type',442,'union',[{'user_type',442,'object',[]}|[{'type',442,'list',[{'user_type',442,'object',[]}]}]]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'Reason'}|[{'type',443,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'is_compatible_bchunk_format',2},[{'type',456,'bounded_fun',[{'type',456,'fun',[{'type',456,'product',[{'var',456,'Name'}|[{'var',456,'BchunkFormat'}]]}|[{'type',456,'boolean',[]}]]}|[[{'type',457,'constraint',[{'atom',457,'is_subtype'}|[[{'var',457,'Name'}|[{'user_type',457,'tab_name',[]}]]]]}|[{'type',458,'constraint',[{'atom',458,'is_subtype'}|[[{'var',458,'BchunkFormat'}|[{'type',458,'binary',[]}]]]]}]]]]}]}]
, 'spec' = [{{'is_dets_file',1},[{'type',463,'bounded_fun',[{'type',463,'fun',[{'type',463,'product',[{'var',463,'Filename'}]}|[{'type',463,'union',[{'type',463,'boolean',[]}|[{'type',463,'tuple',[{'atom',463,'error'}|[{'var',463,'Reason'}]]}]]}]]}|[[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Filename'}|[{'remote_type',464,[{'atom',464,'file'}|[{'atom',464,'name'}|[[]]]]}]]]]}|[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Reason'}|[{'type',465,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'lookup',2},[{'type',480,'bounded_fun',[{'type',480,'fun',[{'type',480,'product',[{'var',480,'Name'}|[{'var',480,'Key'}]]}|[{'type',480,'union',[{'var',480,'Objects'}|[{'type',480,'tuple',[{'atom',480,'error'}|[{'var',480,'Reason'}]]}]]}]]}|[[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Name'}|[{'user_type',481,'tab_name',[]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'Key'}|[{'type',482,'term',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Objects'}|[{'type',483,'list',[{'user_type',483,'object',[]}]}]]]]}|[{'type',484,'constraint',[{'atom',484,'is_subtype'}|[[{'var',484,'Reason'}|[{'type',484,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match',2},[{'type',498,'bounded_fun',[{'type',498,'fun',[{'type',498,'product',[{'var',498,'Name'}|[{'var',498,'Pattern'}]]}|[{'type',498,'union',[{'type',498,'list',[{'var',498,'Match'}]}|[{'type',498,'tuple',[{'atom',498,'error'}|[{'var',498,'Reason'}]]}]]}]]}|[[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'Name'}|[{'user_type',499,'tab_name',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Pattern'}|[{'user_type',500,'pattern',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Match'}|[{'type',501,'list',[{'type',501,'term',[]}]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Reason'}|[{'type',502,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match',3},[{'type',507,'bounded_fun',[{'type',507,'fun',[{'type',507,'product',[{'var',507,'Name'}|[{'var',507,'Pattern'}|[{'var',507,'N'}]]]}|[{'type',508,'union',[{'type',508,'tuple',[{'type',508,'list',[{'var',508,'Match'}]}|[{'var',508,'Continuation'}]]}|[{'atom',508,'$end_of_table'}|[{'type',508,'tuple',[{'atom',508,'error'}|[{'var',508,'Reason'}]]}]]]}]]}|[[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Name'}|[{'user_type',509,'tab_name',[]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Pattern'}|[{'user_type',510,'pattern',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'N'}|[{'type',511,'union',[{'atom',511,'default'}|[{'type',511,'non_neg_integer',[]}]]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'Continuation'}|[{'user_type',512,'bindings_cont',[]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Match'}|[{'type',513,'list',[{'type',513,'term',[]}]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Reason'}|[{'type',514,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'match',1},[{'type',519,'bounded_fun',[{'type',519,'fun',[{'type',519,'product',[{'var',519,'Continuation'}]}|[{'type',520,'union',[{'type',520,'tuple',[{'type',520,'list',[{'var',520,'Match'}]}|[{'var',520,'Continuation2'}]]}|[{'atom',520,'$end_of_table'}|[{'type',520,'tuple',[{'atom',520,'error'}|[{'var',520,'Reason'}]]}]]]}]]}|[[{'type',521,'constraint',[{'atom',521,'is_subtype'}|[[{'var',521,'Continuation'}|[{'user_type',521,'bindings_cont',[]}]]]]}|[{'type',522,'constraint',[{'atom',522,'is_subtype'}|[[{'var',522,'Continuation2'}|[{'user_type',522,'bindings_cont',[]}]]]]}|[{'type',523,'constraint',[{'atom',523,'is_subtype'}|[[{'var',523,'Match'}|[{'type',523,'list',[{'type',523,'term',[]}]}]]]]}|[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'Reason'}|[{'type',524,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match_delete',2},[{'type',531,'bounded_fun',[{'type',531,'fun',[{'type',531,'product',[{'var',531,'Name'}|[{'var',531,'Pattern'}]]}|[{'type',531,'union',[{'atom',531,'ok'}|[{'type',531,'tuple',[{'atom',531,'error'}|[{'var',531,'Reason'}]]}]]}]]}|[[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Name'}|[{'user_type',532,'tab_name',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Pattern'}|[{'user_type',533,'pattern',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Reason'}|[{'type',534,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'match_object',2},[{'type',562,'bounded_fun',[{'type',562,'fun',[{'type',562,'product',[{'var',562,'Name'}|[{'var',562,'Pattern'}]]}|[{'type',562,'union',[{'var',562,'Objects'}|[{'type',562,'tuple',[{'atom',562,'error'}|[{'var',562,'Reason'}]]}]]}]]}|[[{'type',563,'constraint',[{'atom',563,'is_subtype'}|[[{'var',563,'Name'}|[{'user_type',563,'tab_name',[]}]]]]}|[{'type',564,'constraint',[{'atom',564,'is_subtype'}|[[{'var',564,'Pattern'}|[{'user_type',564,'pattern',[]}]]]]}|[{'type',565,'constraint',[{'atom',565,'is_subtype'}|[[{'var',565,'Objects'}|[{'type',565,'list',[{'user_type',565,'object',[]}]}]]]]}|[{'type',566,'constraint',[{'atom',566,'is_subtype'}|[[{'var',566,'Reason'}|[{'type',566,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match_object',3},[{'type',571,'bounded_fun',[{'type',571,'fun',[{'type',571,'product',[{'var',571,'Name'}|[{'var',571,'Pattern'}|[{'var',571,'N'}]]]}|[{'type',572,'union',[{'type',572,'tuple',[{'var',572,'Objects'}|[{'var',572,'Continuation'}]]}|[{'atom',572,'$end_of_table'}|[{'type',572,'tuple',[{'atom',572,'error'}|[{'var',572,'Reason'}]]}]]]}]]}|[[{'type',573,'constraint',[{'atom',573,'is_subtype'}|[[{'var',573,'Name'}|[{'user_type',573,'tab_name',[]}]]]]}|[{'type',574,'constraint',[{'atom',574,'is_subtype'}|[[{'var',574,'Pattern'}|[{'user_type',574,'pattern',[]}]]]]}|[{'type',575,'constraint',[{'atom',575,'is_subtype'}|[[{'var',575,'N'}|[{'type',575,'union',[{'atom',575,'default'}|[{'type',575,'non_neg_integer',[]}]]}]]]]}|[{'type',576,'constraint',[{'atom',576,'is_subtype'}|[[{'var',576,'Continuation'}|[{'user_type',576,'object_cont',[]}]]]]}|[{'type',577,'constraint',[{'atom',577,'is_subtype'}|[[{'var',577,'Objects'}|[{'type',577,'list',[{'user_type',577,'object',[]}]}]]]]}|[{'type',578,'constraint',[{'atom',578,'is_subtype'}|[[{'var',578,'Reason'}|[{'type',578,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'match_object',1},[{'type',583,'bounded_fun',[{'type',583,'fun',[{'type',583,'product',[{'var',583,'Continuation'}]}|[{'type',584,'union',[{'type',584,'tuple',[{'var',584,'Objects'}|[{'var',584,'Continuation2'}]]}|[{'atom',584,'$end_of_table'}|[{'type',584,'tuple',[{'atom',584,'error'}|[{'var',584,'Reason'}]]}]]]}]]}|[[{'type',585,'constraint',[{'atom',585,'is_subtype'}|[[{'var',585,'Continuation'}|[{'user_type',585,'object_cont',[]}]]]]}|[{'type',586,'constraint',[{'atom',586,'is_subtype'}|[[{'var',586,'Continuation2'}|[{'user_type',586,'object_cont',[]}]]]]}|[{'type',587,'constraint',[{'atom',587,'is_subtype'}|[[{'var',587,'Objects'}|[{'type',587,'list',[{'user_type',587,'object',[]}]}]]]]}|[{'type',588,'constraint',[{'atom',588,'is_subtype'}|[[{'var',588,'Reason'}|[{'type',588,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'member',2},[{'type',595,'bounded_fun',[{'type',595,'fun',[{'type',595,'product',[{'var',595,'Name'}|[{'var',595,'Key'}]]}|[{'type',595,'union',[{'type',595,'boolean',[]}|[{'type',595,'tuple',[{'atom',595,'error'}|[{'var',595,'Reason'}]]}]]}]]}|[[{'type',596,'constraint',[{'atom',596,'is_subtype'}|[[{'var',596,'Name'}|[{'user_type',596,'tab_name',[]}]]]]}|[{'type',597,'constraint',[{'atom',597,'is_subtype'}|[[{'var',597,'Key'}|[{'type',597,'term',[]}]]]]}|[{'type',598,'constraint',[{'atom',598,'is_subtype'}|[[{'var',598,'Reason'}|[{'type',598,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'next',2},[{'type',603,'bounded_fun',[{'type',603,'fun',[{'type',603,'product',[{'var',603,'Name'}|[{'var',603,'Key1'}]]}|[{'type',603,'union',[{'var',603,'Key2'}|[{'atom',603,'$end_of_table'}]]}]]}|[[{'type',604,'constraint',[{'atom',604,'is_subtype'}|[[{'var',604,'Name'}|[{'user_type',604,'tab_name',[]}]]]]}|[{'type',605,'constraint',[{'atom',605,'is_subtype'}|[[{'var',605,'Key1'}|[{'type',605,'term',[]}]]]]}|[{'type',606,'constraint',[{'atom',606,'is_subtype'}|[[{'var',606,'Key2'}|[{'type',606,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'open_file',1},[{'type',611,'bounded_fun',[{'type',611,'fun',[{'type',611,'product',[{'var',611,'Filename'}]}|[{'type',611,'union',[{'type',611,'tuple',[{'atom',611,'ok'}|[{'var',611,'Reference'}]]}|[{'type',611,'tuple',[{'atom',611,'error'}|[{'var',611,'Reason'}]]}]]}]]}|[[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'Filename'}|[{'remote_type',612,[{'atom',612,'file'}|[{'atom',612,'name'}|[[]]]]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Reference'}|[{'type',613,'reference',[]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'Reason'}|[{'type',614,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'open_file',2},[{'type',633,'bounded_fun',[{'type',633,'fun',[{'type',633,'product',[{'var',633,'Name'}|[{'var',633,'Args'}]]}|[{'type',633,'union',[{'type',633,'tuple',[{'atom',633,'ok'}|[{'var',633,'Name'}]]}|[{'type',633,'tuple',[{'atom',633,'error'}|[{'var',633,'Reason'}]]}]]}]]}|[[{'type',634,'constraint',[{'atom',634,'is_subtype'}|[[{'var',634,'Name'}|[{'user_type',634,'tab_name',[]}]]]]}|[{'type',635,'constraint',[{'atom',635,'is_subtype'}|[[{'var',635,'Args'}|[{'type',635,'list',[{'var',635,'OpenArg'}]}]]]]}|[{'type',636,'constraint',[{'atom',636,'is_subtype'}|[[{'var',636,'OpenArg'}|[{'type',636,'union',[{'type',636,'tuple',[{'atom',636,'access'}|[{'user_type',636,'access',[]}]]}|[{'type',637,'tuple',[{'atom',637,'auto_save'}|[{'user_type',637,'auto_save',[]}]]}|[{'type',638,'tuple',[{'atom',638,'estimated_no_objects'}|[{'type',638,'non_neg_integer',[]}]]}|[{'type',639,'tuple',[{'atom',639,'file'}|[{'remote_type',639,[{'atom',639,'file'}|[{'atom',639,'name'}|[[]]]]}]]}|[{'type',640,'tuple',[{'atom',640,'max_no_slots'}|[{'user_type',640,'no_slots',[]}]]}|[{'type',641,'tuple',[{'atom',641,'min_no_slots'}|[{'user_type',641,'no_slots',[]}]]}|[{'type',642,'tuple',[{'atom',642,'keypos'}|[{'user_type',642,'keypos',[]}]]}|[{'type',643,'tuple',[{'atom',643,'ram_file'}|[{'type',643,'boolean',[]}]]}|[{'type',644,'tuple',[{'atom',644,'repair'}|[{'type',644,'union',[{'type',644,'boolean',[]}|[{'atom',644,'force'}]]}]]}|[{'type',645,'tuple',[{'atom',645,'type'}|[{'user_type',645,'type',[]}]]}]]]]]]]]]]}]]]]}|[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'Reason'}|[{'type',646,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'pid2name',1},[{'type',663,'bounded_fun',[{'type',663,'fun',[{'type',663,'product',[{'var',663,'Pid'}]}|[{'type',663,'union',[{'type',663,'tuple',[{'atom',663,'ok'}|[{'var',663,'Name'}]]}|[{'atom',663,'undefined'}]]}]]}|[[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'Pid'}|[{'type',664,'pid',[]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'Name'}|[{'user_type',665,'tab_name',[]}]]]]}]]]]}]}]
, 'spec' = [{{'repair_continuation',2},[{'type',673,'bounded_fun',[{'type',673,'fun',[{'type',673,'product',[{'var',673,'Continuation'}|[{'var',673,'MatchSpec'}]]}|[{'var',673,'Continuation2'}]]}|[[{'type',674,'constraint',[{'atom',674,'is_subtype'}|[[{'var',674,'Continuation'}|[{'user_type',674,'select_cont',[]}]]]]}|[{'type',675,'constraint',[{'atom',675,'is_subtype'}|[[{'var',675,'Continuation2'}|[{'user_type',675,'select_cont',[]}]]]]}|[{'type',676,'constraint',[{'atom',676,'is_subtype'}|[[{'var',676,'MatchSpec'}|[{'user_type',676,'match_spec',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'safe_fixtable',2},[{'type',691,'bounded_fun',[{'type',691,'fun',[{'type',691,'product',[{'var',691,'Name'}|[{'var',691,'Fix'}]]}|[{'atom',691,'ok'}]]}|[[{'type',692,'constraint',[{'atom',692,'is_subtype'}|[[{'var',692,'Name'}|[{'user_type',692,'tab_name',[]}]]]]}|[{'type',693,'constraint',[{'atom',693,'is_subtype'}|[[{'var',693,'Fix'}|[{'type',693,'boolean',[]}]]]]}]]]]}]}]
, 'spec' = [{{'select',2},[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'Name'}|[{'var',700,'MatchSpec'}]]}|[{'type',700,'union',[{'var',700,'Selection'}|[{'type',700,'tuple',[{'atom',700,'error'}|[{'var',700,'Reason'}]]}]]}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'Name'}|[{'user_type',701,'tab_name',[]}]]]]}|[{'type',702,'constraint',[{'atom',702,'is_subtype'}|[[{'var',702,'MatchSpec'}|[{'user_type',702,'match_spec',[]}]]]]}|[{'type',703,'constraint',[{'atom',703,'is_subtype'}|[[{'var',703,'Selection'}|[{'type',703,'list',[{'type',703,'term',[]}]}]]]]}|[{'type',704,'constraint',[{'atom',704,'is_subtype'}|[[{'var',704,'Reason'}|[{'type',704,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'select',3},[{'type',709,'bounded_fun',[{'type',709,'fun',[{'type',709,'product',[{'var',709,'Name'}|[{'var',709,'MatchSpec'}|[{'var',709,'N'}]]]}|[{'type',710,'union',[{'type',710,'tuple',[{'var',710,'Selection'}|[{'var',710,'Continuation'}]]}|[{'atom',710,'$end_of_table'}|[{'type',710,'tuple',[{'atom',710,'error'}|[{'var',710,'Reason'}]]}]]]}]]}|[[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Name'}|[{'user_type',711,'tab_name',[]}]]]]}|[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'MatchSpec'}|[{'user_type',712,'match_spec',[]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'N'}|[{'type',713,'union',[{'atom',713,'default'}|[{'type',713,'non_neg_integer',[]}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Continuation'}|[{'user_type',714,'select_cont',[]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Selection'}|[{'type',715,'list',[{'type',715,'term',[]}]}]]]]}|[{'type',716,'constraint',[{'atom',716,'is_subtype'}|[[{'var',716,'Reason'}|[{'type',716,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'select',1},[{'type',721,'bounded_fun',[{'type',721,'fun',[{'type',721,'product',[{'var',721,'Continuation'}]}|[{'type',722,'union',[{'type',722,'tuple',[{'var',722,'Selection'}|[{'var',722,'Continuation2'}]]}|[{'atom',722,'$end_of_table'}|[{'type',722,'tuple',[{'atom',722,'error'}|[{'var',722,'Reason'}]]}]]]}]]}|[[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'Continuation'}|[{'user_type',723,'select_cont',[]}]]]]}|[{'type',724,'constraint',[{'atom',724,'is_subtype'}|[[{'var',724,'Continuation2'}|[{'user_type',724,'select_cont',[]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Selection'}|[{'type',725,'list',[{'type',725,'term',[]}]}]]]]}|[{'type',726,'constraint',[{'atom',726,'is_subtype'}|[[{'var',726,'Reason'}|[{'type',726,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'select_delete',2},[{'type',733,'bounded_fun',[{'type',733,'fun',[{'type',733,'product',[{'var',733,'Name'}|[{'var',733,'MatchSpec'}]]}|[{'type',733,'union',[{'var',733,'N'}|[{'type',733,'tuple',[{'atom',733,'error'}|[{'var',733,'Reason'}]]}]]}]]}|[[{'type',734,'constraint',[{'atom',734,'is_subtype'}|[[{'var',734,'Name'}|[{'user_type',734,'tab_name',[]}]]]]}|[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'MatchSpec'}|[{'user_type',735,'match_spec',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'N'}|[{'type',736,'non_neg_integer',[]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Reason'}|[{'type',737,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'slot',2},[{'type',742,'bounded_fun',[{'type',742,'fun',[{'type',742,'product',[{'var',742,'Name'}|[{'var',742,'I'}]]}|[{'type',742,'union',[{'atom',742,'$end_of_table'}|[{'var',742,'Objects'}|[{'type',742,'tuple',[{'atom',742,'error'}|[{'var',742,'Reason'}]]}]]]}]]}|[[{'type',743,'constraint',[{'atom',743,'is_subtype'}|[[{'var',743,'Name'}|[{'user_type',743,'tab_name',[]}]]]]}|[{'type',744,'constraint',[{'atom',744,'is_subtype'}|[[{'var',744,'I'}|[{'type',744,'non_neg_integer',[]}]]]]}|[{'type',745,'constraint',[{'atom',745,'is_subtype'}|[[{'var',745,'Objects'}|[{'type',745,'list',[{'user_type',745,'object',[]}]}]]]]}|[{'type',746,'constraint',[{'atom',746,'is_subtype'}|[[{'var',746,'Reason'}|[{'type',746,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'sync',1},[{'type',762,'bounded_fun',[{'type',762,'fun',[{'type',762,'product',[{'var',762,'Name'}]}|[{'type',762,'union',[{'atom',762,'ok'}|[{'type',762,'tuple',[{'atom',762,'error'}|[{'var',762,'Reason'}]]}]]}]]}|[[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'Name'}|[{'user_type',763,'tab_name',[]}]]]]}|[{'type',764,'constraint',[{'atom',764,'is_subtype'}|[[{'var',764,'Reason'}|[{'type',764,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'table',1},[{'type',769,'bounded_fun',[{'type',769,'fun',[{'type',769,'product',[{'var',769,'Name'}]}|[{'var',769,'QueryHandle'}]]}|[[{'type',770,'constraint',[{'atom',770,'is_subtype'}|[[{'var',770,'Name'}|[{'user_type',770,'tab_name',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'QueryHandle'}|[{'remote_type',771,[{'atom',771,'qlc'}|[{'atom',771,'query_handle'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'table',2},[{'type',776,'bounded_fun',[{'type',776,'fun',[{'type',776,'product',[{'var',776,'Name'}|[{'var',776,'Options'}]]}|[{'var',776,'QueryHandle'}]]}|[[{'type',777,'constraint',[{'atom',777,'is_subtype'}|[[{'var',777,'Name'}|[{'user_type',777,'tab_name',[]}]]]]}|[{'type',778,'constraint',[{'atom',778,'is_subtype'}|[[{'var',778,'Options'}|[{'type',778,'union',[{'var',778,'Option'}|[{'type',778,'list',[{'var',778,'Option'}]}]]}]]]]}|[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'Option'}|[{'type',779,'union',[{'type',779,'tuple',[{'atom',779,'n_objects'}|[{'var',779,'Limit'}]]}|[{'type',780,'tuple',[{'atom',780,'traverse'}|[{'var',780,'TraverseMethod'}]]}]]}]]]]}|[{'type',781,'constraint',[{'atom',781,'is_subtype'}|[[{'var',781,'Limit'}|[{'type',781,'union',[{'atom',781,'default'}|[{'type',781,'pos_integer',[]}]]}]]]]}|[{'type',782,'constraint',[{'atom',782,'is_subtype'}|[[{'var',782,'TraverseMethod'}|[{'type',782,'union',[{'atom',782,'first_next'}|[{'atom',782,'select'}|[{'type',782,'tuple',[{'atom',782,'select'}|[{'user_type',782,'match_spec',[]}]]}]]]}]]]]}|[{'type',783,'constraint',[{'atom',783,'is_subtype'}|[[{'var',783,'QueryHandle'}|[{'remote_type',783,[{'atom',783,'qlc'}|[{'atom',783,'query_handle'}|[[]]]]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'to_ets',2},[{'type',862,'bounded_fun',[{'type',862,'fun',[{'type',862,'product',[{'var',862,'Name'}|[{'var',862,'EtsTab'}]]}|[{'type',862,'union',[{'var',862,'EtsTab'}|[{'type',862,'tuple',[{'atom',862,'error'}|[{'var',862,'Reason'}]]}]]}]]}|[[{'type',863,'constraint',[{'atom',863,'is_subtype'}|[[{'var',863,'Name'}|[{'user_type',863,'tab_name',[]}]]]]}|[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'EtsTab'}|[{'remote_type',864,[{'atom',864,'ets'}|[{'atom',864,'tab'}|[[]]]]}]]]]}|[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'Reason'}|[{'type',865,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'traverse',2},[{'type',876,'bounded_fun',[{'type',876,'fun',[{'type',876,'product',[{'var',876,'Name'}|[{'var',876,'Fun'}]]}|[{'type',876,'union',[{'var',876,'Return'}|[{'type',876,'tuple',[{'atom',876,'error'}|[{'var',876,'Reason'}]]}]]}]]}|[[{'type',877,'constraint',[{'atom',877,'is_subtype'}|[[{'var',877,'Name'}|[{'user_type',877,'tab_name',[]}]]]]}|[{'type',878,'constraint',[{'atom',878,'is_subtype'}|[[{'var',878,'Fun'}|[{'type',878,'fun',[{'type',878,'product',[{'var',878,'Object'}]}|[{'var',878,'FunReturn'}]]}]]]]}|[{'type',879,'constraint',[{'atom',879,'is_subtype'}|[[{'var',879,'Object'}|[{'user_type',879,'object',[]}]]]]}|[{'type',880,'constraint',[{'atom',880,'is_subtype'}|[[{'var',880,'FunReturn'}|[{'type',880,'union',[{'atom',880,'continue'}|[{'type',881,'tuple',[{'atom',881,'continue'}|[{'var',881,'Val'}]]}|[{'type',882,'tuple',[{'atom',882,'done'}|[{'var',882,'Value'}]]}|[{'var',883,'OtherValue'}]]]]}]]]]}|[{'type',884,'constraint',[{'atom',884,'is_subtype'}|[[{'var',884,'Return'}|[{'type',884,'union',[{'type',884,'list',[{'type',884,'term',[]}]}|[{'var',884,'OtherValue'}]]}]]]]}|[{'type',885,'constraint',[{'atom',885,'is_subtype'}|[[{'var',885,'Val'}|[{'type',885,'term',[]}]]]]}|[{'type',886,'constraint',[{'atom',886,'is_subtype'}|[[{'var',886,'Value'}|[{'type',886,'term',[]}]]]]}|[{'type',887,'constraint',[{'atom',887,'is_subtype'}|[[{'var',887,'OtherValue'}|[{'type',887,'term',[]}]]]]}|[{'type',888,'constraint',[{'atom',888,'is_subtype'}|[[{'var',888,'Reason'}|[{'type',888,'term',[]}]]]]}]]]]]]]]]]]}]}]
, 'spec' = [{{'update_counter',3},[{'type',907,'bounded_fun',[{'type',907,'fun',[{'type',907,'product',[{'var',907,'Name'}|[{'var',907,'Key'}|[{'var',907,'Increment'}]]]}|[{'var',907,'Result'}]]}|[[{'type',908,'constraint',[{'atom',908,'is_subtype'}|[[{'var',908,'Name'}|[{'user_type',908,'tab_name',[]}]]]]}|[{'type',909,'constraint',[{'atom',909,'is_subtype'}|[[{'var',909,'Key'}|[{'type',909,'term',[]}]]]]}|[{'type',910,'constraint',[{'atom',910,'is_subtype'}|[[{'var',910,'Increment'}|[{'type',910,'union',[{'type',910,'tuple',[{'var',910,'Pos'}|[{'var',910,'Incr'}]]}|[{'var',910,'Incr'}]]}]]]]}|[{'type',911,'constraint',[{'atom',911,'is_subtype'}|[[{'var',911,'Pos'}|[{'type',911,'integer',[]}]]]]}|[{'type',912,'constraint',[{'atom',912,'is_subtype'}|[[{'var',912,'Incr'}|[{'type',912,'integer',[]}]]]]}|[{'type',913,'constraint',[{'atom',913,'is_subtype'}|[[{'var',913,'Result'}|[{'type',913,'integer',[]}]]]]}]]]]]]]]}]}]
, 'compile' = [{'inline',[{'time_now',0}]}] ] 'add_user'/3 = fun (_0,_1,_2) -> apply 'req'/2 (_0,{'add_user',_1,_2})
'all'/0 = fun () -> call 'dets_server':'all' ()
'bchunk'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,'start'> when 'true' -> let <_2> = apply 'treq'/2 (Tab,{'bchunk_init',Tab}) in let <_13> = [Tab|(['start']-|['compiler_generated'] )] in (case <_2,_13> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,State = {'dets_cont','bchunk',_6,_7,_8,_9,_10,_11}> when call 'erlang':'=:=' (_9,Tab) -> let <_3> = apply 'treq'/2 (Tab,{'bchunk',State}) in let <_15> = [Tab|([State|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_15> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,Term> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[Term|[]]]) end
'close'/1 = fun (_0) -> case call 'dets_server':'close' (_0) of <'badarg'> when 'true' -> {'error','not_owner'}
<Reply> when 'true' -> Reply end
'delete'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'delete_key',[_1|[]]}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'delete_all_objects'/1 = fun (_0) -> case apply 'treq'/2 (_0,'delete_all_objects') of <'badarg'> when 'true' -> call 'erlang':'error' ('badarg',[_0|[]])
<'fixed'> when 'true' -> apply 'match_delete'/2 (_0,'_')
<Reply> when 'true' -> Reply end
'delete_object'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'delete_object',[_1|[]]}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'fsck'/2 = fun (_0,_1) -> apply 'fsck'/1 (_0)
'fsck'/1 = fun (_0) -> catch case apply 'read_file_header'/3 (_0,'read','false') of <{'ok',Fd,FH}> when 'true' -> case call 'dets_v9':'check_file_header' (FH,Fd) of <{'error','not_closed'}> when 'true' -> let <_2> = call 'erlang':'make_ref' () in apply 'fsck'/6 (Fd,_2,_0,FH,'default','default')
<{'ok',_X_Head}> when 'true' -> let <_3> = call 'erlang':'make_ref' () in apply 'fsck'/6 (Fd,_3,_0,FH,'default','default')
<Error> when 'true' -> Error end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'first'/1 = fun (_0) -> let <_1> = apply 'treq'/2 (_0,'first') in let <_5> = [_0|([]-|['compiler_generated'] )] in (case <_1,_5> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<({('ok'-|['compiler_generated'] ),Reply}-|['compiler_generated'] ),_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('exit'-|['compiler_generated'] ) (Reply)-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'foldr'/3 = fun (_0,_1,_2) -> apply 'foldl'/3 (_0,_1,_2)
'foldl'/3 = fun (_0,_1,_2) -> let <Ref> = call 'erlang':'make_ref' () in let <_4> = apply 'do_traverse'/4 (_0,_1,_2,Ref) in let <_9> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_4,_9> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'from_ets'/2 = fun (_0,_1) -> do call 'ets':'safe_fixtable' (_1,'true') let <LC> = call 'ets':'select' (_1,[{'_',[],['$_']}],100) in let <InitFun> = apply 'from_ets_fun'/2 (LC,_1) in let <Reply> = apply 'treq'/2 (_0,{'initialize',InitFun,'term','default'}) in do call 'ets':'safe_fixtable' (_1,'false') case Reply of <{'thrown',Thrown}> when 'true' -> call 'erlang':'throw' (Thrown)
<Else> when 'true' -> let <_10> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <Else,_10> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<_11,_X_A> when ('true'-|['compiler_generated'] ) -> _11-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'from_ets_fun'/2 = fun (_0,_1) -> (fun (_5) -> case _5 of <'close'> when 'true' -> 'ok'
<'read'> when call 'erlang':'=:=' (_0,'$end_of_table') -> 'end_of_input'
<'read'> when 'true' -> case _0 of <{L,C}> when 'true' -> let <_3> = call 'ets':'select' (C) in let <_4> = apply 'from_ets_fun'/2 (_3,_1) in {L,_4}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-from_ets_fun/2-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-from_ets_fun/2-fun-0-'}}] )
'info'/1 = fun (_0) -> let <_1> = catch call 'dets_server':'get_pid' (_0) in case _1 of <{'EXIT',_X_Reason}> when 'true' -> 'undefined'
<Pid> when 'true' -> (case apply 'req'/2 (Pid,'info') of (<('badarg'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'info'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,'owner'> when 'true' -> let <_2> = catch call 'dets_server':'get_pid' (Tab) in case _2 of <Pid> when call 'erlang':'is_pid' (_2) -> Pid
<_10> when 'true' -> 'undefined' end
<Tab,'users'> when 'true' -> case call 'dets_server':'users' (Tab) of <[]> when 'true' -> 'undefined'
<Users> when 'true' -> Users end
<Tab,Tag> when 'true' -> let <_5> = catch call 'dets_server':'get_pid' (Tab) in case _5 of <{'EXIT',_X_Reason}> when 'true' -> 'undefined'
<Pid> when 'true' -> (case apply 'req'/2 (Pid,{'info',Tag}) of (<('badarg'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] ) end end
'init_table'/2 = fun (_0,_1) -> apply 'init_table'/3 (_0,_1,[])
'init_table'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Tab,InitFun,Options> when call 'erlang':'is_function' (InitFun) -> case apply 'options'/2 (Options,['format'|['min_no_slots']]) of <{'badarg',_8}> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[InitFun|[Options|[]]]])
<[Format|[MinNoSlots|[]]]> when 'true' -> case apply 'treq'/2 (Tab,{'initialize',InitFun,Format,MinNoSlots}) of <{'thrown',Thrown}> when 'true' -> call 'erlang':'throw' (Thrown)
<Else> when 'true' -> let <_10> = [Tab|([InitFun|([Options|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <Else,_10> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<Tab,InitFun,Options> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[InitFun|[Options|[]]]]) end
'insert'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,Objs> when call 'erlang':'is_list' (Objs) -> let <_2> = apply 'treq'/2 (Tab,{'insert',Objs}) in let <_7> = [Tab|([Objs|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_7> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,Obj> when 'true' -> let <_3> = apply 'treq'/2 (Tab,{'insert',[Obj|[]]}) in let <_9> = [Tab|([Obj|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_9> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'insert_new'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,Objs> when call 'erlang':'is_list' (Objs) -> let <_2> = apply 'treq'/2 (Tab,{'insert_new',Objs}) in let <_7> = [Tab|([Objs|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_7> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,Obj> when 'true' -> let <_3> = apply 'treq'/2 (Tab,{'insert_new',[Obj|[]]}) in let <_9> = [Tab|([Obj|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_9> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'internal_close'/1 = fun (_0) -> apply 'req'/2 (_0,'close')
'internal_open'/3 = fun (_0,_1,_2) -> apply 'req'/2 (_0,{'internal_open',_1,_2})
'is_compatible_bchunk_format'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'is_compatible_bchunk_format',_1}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'is_dets_file'/1 = fun (_0) -> let <_1> = catch apply 'read_file_header'/3 (_0,'read','false') in case _1 of <{'ok',Fd,FH}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) (case FH of (<({'fileheader',_7,_8,_rec0,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (_rec0,11259375)-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'error',{'tooshort',_28}}> when 'true' -> 'false'
<{'error',{'not_a_dets_file',_29}}> when 'true' -> 'false'
<Other> when 'true' -> Other end
'lookup'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'lookup_keys',[_1|[]]}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'lookup_keys'/2 = fun (_0,_1) -> let <_2> = catch call 'lists':'usort' (_1) in case _2 of <UKeys> when let <_3> = call 'erlang':'is_list' (_2) in let <_4> = call 'erlang':'=/=' (_2,[]) in call 'erlang':'and' (_3,_4) -> let <_5> = apply 'treq'/2 (_0,{'lookup_keys',UKeys}) in let <_10> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_5,_10> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Else> when 'true' -> call 'erlang':'error' ('badarg',[_0|[_1|[]]]) end
'match'/2 = fun (_0,_1) -> let <_2> = apply 'safe_match'/3 (_0,_1,'bindings') in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'match'/3 = fun (_0,_1,_2) -> let <_3> = apply 'init_chunk_match'/5 (_0,_1,'bindings',_2,'no_safe') in let <_8> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_8> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'match'/1 = fun (_0) -> case _0 of <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}> when (try let <_5> = call 'erlang':'element' (2,State) in call 'erlang':'=:=' (_5,'bindings') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_7> = apply 'chunk_match'/2 (State,'no_safe') in let <_1> = [State|([]-|['compiler_generated'] )] in (case <_7,_1> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Term> when 'true' -> call 'erlang':'error' ('badarg',[Term|[]]) end
'match_delete'/2 = fun (_0,_1) -> let <_2> = apply 'match_delete'/3 (_0,_1,'delete') in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'match_delete'/3 = fun (_0,_1,_2) -> case apply 'compile_match_spec'/2 (_2,_1) of <{Spec,MP}> when 'true' -> let <_3> = catch call 'dets_server':'get_pid' (_0) in case _3 of <{'EXIT',_X_Reason}> when 'true' -> 'badarg'
<Proc> when 'true' -> let <R> = apply 'req'/2 (Proc,{'match_delete_init',MP,Spec}) in apply 'do_match_delete'/4 (Proc,R,_2,0) end
<'badarg'> when 'true' -> 'badarg'
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'do_match_delete'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_Proc,{'done',N1},'select',N> when 'true' -> call 'erlang':'+' (N,N1)
<_X_Proc,{'done',_X_N1},_X_What,_X_N> when 'true' -> 'ok'
<Proc,{'cont',State,N1},What,N> when 'true' -> let <_5> = apply 'req'/2 (Proc,{'match_delete',State}) in let <_4> = call 'erlang':'+' (N,N1) in apply 'do_match_delete'/4 (Proc,_5,What,_4)
<_X_Proc,Error,_X_What,_X_N> when 'true' -> Error end
'match_object'/2 = fun (_0,_1) -> let <_2> = apply 'safe_match'/3 (_0,_1,'object') in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'match_object'/3 = fun (_0,_1,_2) -> let <_3> = apply 'init_chunk_match'/5 (_0,_1,'object',_2,'no_safe') in let <_8> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_8> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'match_object'/1 = fun (_0) -> case _0 of <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}> when (try let <_5> = call 'erlang':'element' (2,State) in call 'erlang':'=:=' (_5,'object') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_7> = apply 'chunk_match'/2 (State,'no_safe') in let <_1> = [State|([]-|['compiler_generated'] )] in (case <_7,_1> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Term> when 'true' -> call 'erlang':'error' ('badarg',[Term|[]]) end
'member'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'member',_1}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'next'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'next',_1}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<({('ok'-|['compiler_generated'] ),Reply}-|['compiler_generated'] ),_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('exit'-|['compiler_generated'] ) (Reply)-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'open_file'/1 = fun (_0) -> let <File> = apply 'to_list'/1 (_0) in case <> of <> when call 'erlang':'is_list' (File) -> case call 'dets_server':'open_file' (File) of <'badarg'> when 'true' -> call 'erlang':'error' ('dets_process_died',[File|[]])
<Reply> when 'true' -> let <_1> = [File|([]-|['compiler_generated'] )] in (case <Reply,_1> of (<({('error'-|['compiler_generated'] ),({('file_error'-|['compiler_generated'] ),_4,('einval'-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<({('error'-|['compiler_generated'] ),({('file_error'-|['compiler_generated'] ),_5,('badarg'-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<_7,_X_A> when ('true'-|['compiler_generated'] ) -> _7-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<> when 'true' -> call 'erlang':'error' ('badarg',[_0|[]]) end
'open_file'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,Args> when call 'erlang':'is_list' (Args) -> let <_2> = catch apply 'defaults'/2 (Tab,Args) in case _2 of <OpenArgs = {'open_args',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17}> when ('true'-|['compiler_generated'] ) -> case call 'dets_server':'open_file' (Tab,OpenArgs) of <'badarg'> when 'true' -> call 'erlang':'error' ('dets_process_died',[Tab|[Args|[]]])
<Reply> when 'true' -> let <_20> = [Tab|([Args|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <Reply,_20> of (<({('error'-|['compiler_generated'] ),({('file_error'-|['compiler_generated'] ),_4,('einval'-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<({('error'-|['compiler_generated'] ),({('file_error'-|['compiler_generated'] ),_5,('badarg'-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<_21,_X_A> when ('true'-|['compiler_generated'] ) -> _21-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<_18> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[Args|[]]]) end
<Tab,Arg> when 'true' -> apply 'open_file'/2 (Tab,[Arg|[]]) end
'pid2name'/1 = fun (_0) -> call 'dets_server':'pid2name' (_0)
'remove_user'/2 = fun (_0,_1) -> apply 'req'/2 (_0,{'close',_1})
'repair_continuation'/2 = fun (_0,_1) -> case <_0,_1> of <Cont = {'dets_cont',_9,_10,_11,_12,_13,_14,{'match_spec',B}},MS> when 'true' -> case call 'ets':'is_compiled_ms' (B) of <'true'> when 'true' -> Cont
<'false'> when 'true' -> let <_2> = call 'ets':'match_spec_compile' (MS) in let <_rec1> = {'match_spec',_2} in case Cont of <{'dets_cont',_15,_16,_17,_18,_19,_20,_21}> when 'true' -> call 'erlang':'setelement' (8,Cont,_rec1)
(<_22> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<Cont = {'dets_cont',_23,_24,_25,_26,_27,_28,_29},_X_MS> when 'true' -> Cont
<T,MS> when 'true' -> call 'erlang':'error' ('badarg',[T|[MS|[]]]) end
'safe_fixtable'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,Bool> when let <_2> = call 'erlang':'=:=' (Bool,'true') in let <_4> = call 'erlang':'=:=' (Bool,'false') in call 'erlang':'or' (_2,_4) -> let <_5> = apply 'treq'/2 (Tab,{'safe_fixtable',Bool}) in let <_9> = [Tab|([Bool|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_5,_9> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,Term> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[Term|[]]]) end
'select'/2 = fun (_0,_1) -> let <_2> = apply 'safe_match'/3 (_0,_1,'select') in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'select'/3 = fun (_0,_1,_2) -> let <_3> = apply 'init_chunk_match'/5 (_0,_1,'select',_2,'no_safe') in let <_8> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_8> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'select'/1 = fun (_0) -> case _0 of <State = {'dets_cont',_9,_10,_11,_12,_13,_14,_15}> when (try let <_5> = call 'erlang':'element' (2,State) in call 'erlang':'=:=' (_5,'select') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_7> = apply 'chunk_match'/2 (State,'no_safe') in let <_1> = [State|([]-|['compiler_generated'] )] in (case <_7,_1> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Term> when 'true' -> call 'erlang':'error' ('badarg',[Term|[]]) end
'select_delete'/2 = fun (_0,_1) -> let <_2> = apply 'match_delete'/3 (_0,_1,'select') in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'slot'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,Slot> when let <_2> = call 'erlang':'is_integer' (Slot) in let <_3> = call 'erlang':'>=' (Slot,0) in call 'erlang':'and' (_2,_3) -> let <_4> = apply 'treq'/2 (Tab,{'slot',Slot}) in let <_8> = [Tab|([Slot|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_4,_8> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
<Tab,Term> when 'true' -> call 'erlang':'error' ('badarg',[Tab|[Term|[]]]) end
'start'/0 = fun () -> call 'dets_server':'start' ()
'stop'/0 = fun () -> call 'dets_server':'stop' ()
'istart_link'/1 = fun (_0) -> let <_1> = call 'erlang':'self' () in let <_2> = call 'proc_lib':'spawn_link' ('dets','init',[_1|[_0|[]]]) in {'ok',_2}
'sync'/1 = fun (_0) -> let <_1> = apply 'treq'/2 (_0,'sync') in let <_5> = [_0|([]-|['compiler_generated'] )] in (case <_1,_5> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'table'/1 = fun (_0) -> apply 'table'/2 (_0,[])
'table'/2 = fun (_0,_1) -> case apply 'options'/2 (_1,['traverse'|['n_objects']]) of <{'badarg',_45}> when 'true' -> call 'erlang':'error' ('badarg',[_0|[_1|[]]])
<[Traverse|[NObjs|[]]]> when 'true' -> let <_8> = case Traverse of <'first_next'> when 'true' -> (fun () -> let <_2> = apply 'first'/1 (_0) in apply 'qlc_next'/2 (_0,_2)-|[{'id',{0,0,'-table/2-fun-0-'}}] )
<'select'> when 'true' -> (fun (_4) -> let <_3> = apply 'select'/3 (_0,_4,NObjs) in apply 'qlc_select'/1 (_3)-|[{'id',{0,0,'-table/2-fun-1-'}}] )
<{'select',MS}> when 'true' -> (fun () -> let <_6> = apply 'select'/3 (_0,MS,NObjs) in apply 'qlc_select'/1 (_6)-|[{'id',{0,0,'-table/2-fun-2-'}}] )
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end in let <PreFun> = fun (_10) -> apply 'safe_fixtable'/2 (_0,'true') in let <PostFun> = fun () -> apply 'safe_fixtable'/2 (_0,'false') in let <InfoFun> = fun (_14) -> apply 'table_info'/2 (_0,_14) in let <_22> = case Traverse of <{'select',_X_MS}> when 'true' -> 'undefined'
<_47> when 'true' -> (fun (_18,_17) -> case <_18,_17> of <_X_KeyPos,[K|[]]> when 'true' -> apply 'lookup'/2 (_0,K)
<_X_KeyPos,Ks> when 'true' -> apply 'lookup_keys'/2 (_0,Ks) end-|[{'id',{0,0,'-table/2-fun-6-'}}] ) end in let <FormatFun> = fun (_39) -> case _39 of <{'all',_X_NElements,_X_ElementFun}> when 'true' -> let <_28> = letrec 'lc$^7'/1 = fun (_26) -> case _26 of <[_48|_25]> when call 'erlang':'=/=' (_1,[]) -> let <_27> = apply 'lc$^7'/1 (_25) in ([_1|_27]-|['compiler_generated'] )
(<[_49|_25]> when 'true' -> apply 'lc$^7'/1 (_25)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_53> when 'true' -> (primop 'match_fail' ({'function_clause',_53})-|[{'function_name',{'lc$^7',1}}] )-|['compiler_generated'] ) end in apply 'lc$^7'/1 ([[]]) in let <As> = [_0|_28] in {'dets','table',As}
<{'match_spec',MS}> when 'true' -> let <_30> = apply 'listify'/1 (_1) in {'dets','table',[_0|[[{'traverse',{'select',MS}}|_30]|[]]]}
<{'lookup',_X_KeyPos,[Value|[]],_X_NElements,ElementFun}> when 'true' -> let <_31> = apply ElementFun (Value) in call 'io_lib':'format' ([126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]],['dets'|[_0|[_31|[]]]])
<{'lookup',_X_KeyPos,Values,_X_NElements,ElementFun}> when 'true' -> let <_37> = letrec 'lc$^8'/1 = fun (_34) -> case _34 of <[V|_33]> when 'true' -> let <_35> = apply ElementFun (V) in let <_36> = apply 'lc$^8'/1 (_33) in ([_35|_36]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_54> when 'true' -> (primop 'match_fail' ({'function_clause',_54})-|[{'function_name',{'lc$^8',1}}] )-|['compiler_generated'] ) end in apply 'lc$^8'/1 (Values) in call 'io_lib':'format' ([108|[105|[115|[116|[115|[58|[102|[108|[97|[116|[109|[97|[112|[40|[102|[117|[110|[40|[86|[41|[32|[45|[62|[32|[126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[86|[41|[32|[101|[110|[100|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],['dets'|[_0|[_37|[]]]])
(<_40> when 'true' -> (primop 'match_fail' ({'function_clause',_40})-|[{'function_name',{'-table/2-fun-9-',1}}] )-|['compiler_generated'] ) end in call 'qlc':'table' (_8,[{'pre_fun',PreFun}|[{'post_fun',PostFun}|[{'info_fun',InfoFun}|[{'format_fun',FormatFun}|[{'key_equality','=:='}|[{'lookup_fun',_22}|[]]]]]]])
(<_42> when 'true' -> primop 'match_fail' ({'case_clause',_42})-|['compiler_generated'] ) end
'qlc_next'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Tab,'$end_of_table'> when 'true' -> []
<Tab,Key> when 'true' -> case apply 'lookup'/2 (Tab,Key) of <Objects> when call 'erlang':'is_list' (Objects) -> let <_3> = fun () -> let <_2> = apply 'next'/2 (Tab,Key) in apply 'qlc_next'/2 (Tab,_2) in call 'erlang':'++' (Objects,_3)
<Error> when 'true' -> call 'erlang':'exit' (Error) end end
'qlc_select'/1 = fun (_0) -> case _0 of <'$end_of_table'> when 'true' -> []
<{Objects,Cont}> when call 'erlang':'is_list' (Objects) -> let <_2> = fun () -> let <_1> = apply 'select'/1 (Cont) in apply 'qlc_select'/1 (_1) in call 'erlang':'++' (Objects,_2)
<Error> when 'true' -> Error end
'table_info'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,'num_of_objects'> when 'true' -> apply 'info'/2 (Tab,'size')
<Tab,'keypos'> when 'true' -> apply 'info'/2 (Tab,'keypos')
<Tab,'is_unique_objects'> when 'true' -> let <_2> = apply 'info'/2 (Tab,'type') in call 'erlang':'=/=' (_2,'duplicate_bag')
<_X_Tab,_5> when 'true' -> 'undefined' end
'to_ets'/2 = fun (_0,_1) -> case call 'ets':'info' (_1,'protection') of <'undefined'> when 'true' -> call 'erlang':'error' ('badarg',[_0|[_1|[]]])
<_11> when 'true' -> let <Fun> = fun (_4,_3) -> case call 'ets':'insert' (_3,_4) of <'true'> when 'true' -> _3
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end in apply 'foldl'/3 (Fun,_1,_0) end
'traverse'/2 = fun (_0,_1) -> let <Ref> = call 'erlang':'make_ref' () in let <TFun> = fun (_5,_4) -> case apply _1 (_5) of <'continue'> when 'true' -> _4
<{'continue',Val}> when 'true' -> [Val|_4]
<{'done',Value}> when 'true' -> call 'erlang':'throw' ({Ref,[Value|_4]})
<Other> when 'true' -> call 'erlang':'throw' ({Ref,Other}) end in let <_9> = apply 'do_traverse'/4 (TFun,[],_0,Ref) in let <_15> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_9,_15> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'update_counter'/3 = fun (_0,_1,_2) -> let <_3> = apply 'treq'/2 (_0,{'update_counter',_1,_2}) in let <_8> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_3,_8> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'verbose'/0 = fun () -> apply 'verbose'/1 ('true')
'verbose'/1 = fun (_0) -> case call 'dets_server':'verbose' (_0) of <'ok'> when 'true' -> let <All> = call 'dets_server':'all' () in let <Fun> = fun (_3) -> apply 'treq'/2 (_3,{'set_verbose',_0}) in do call 'lists':'foreach' (Fun,All) All
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'where'/2 = fun (_0,_1) -> let <_2> = apply 'treq'/2 (_0,{'where',_1}) in let <_6> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_2,_6> of (<('badarg'-|['compiler_generated'] ),A> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (('badarg'-|['compiler_generated'] ),A)-|['compiler_generated'] )-|['compiler_generated'] )
(<Reply,_X_A> when ('true'-|['compiler_generated'] ) -> Reply-|['compiler_generated'] ) end-|['compiler_generated'] )
'do_traverse'/4 = fun (_0,_1,_2,_3) -> let <_4> = catch call 'dets_server':'get_pid' (_2) in case _4 of <{'EXIT',_X_Reason}> when 'true' -> 'badarg'
<Proc> when 'true' -> try apply 'do_trav'/3 (Proc,_1,_0) of <_5> -> _5 catch <_8,_7,_6> -> case <_8,_7,_6> of <('throw'-|['compiler_generated'] ),({_14,Result}-|['compiler_generated'] ),_15> when call 'erlang':'=:=' (_14,_3) -> Result
(<_16,_17,_18> when 'true' -> primop 'raise' (_18,_17)-|['compiler_generated'] ) end end
'do_trav'/3 = fun (_0,_1,_2) -> case apply 'compile_match_spec'/2 ('object','_') of <{Spec,MP}> when 'true' -> case apply 'req'/2 (_0,{'match',MP,Spec,'default','safe'}) of <{'cont',State}> when 'true' -> apply 'do_trav'/4 (State,_0,_1,_2)
<Error> when 'true' -> Error end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'do_trav'/4 = fun (_0,_1,_2,_3) -> case apply 'req'/2 (_1,{'match_init',_0,'safe'}) of <'$end_of_table'> when 'true' -> _2
<{'cont',{Bins,NewState}}> when 'true' -> let <_4> = call 'lists':'reverse' (Bins) in apply 'do_trav_bins'/5 (NewState,_1,_2,_3,_4)
<Error> when 'true' -> Error end
'do_trav_bins'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <State,Proc,Acc,Fun,[]> when 'true' -> apply 'do_trav'/4 (State,Proc,Acc,Fun)
<State,Proc,Acc,Fun,[Bin|Bins]> when 'true' -> let <_5> = catch call 'erlang':'binary_to_term' (Bin) in case _5 of <{'EXIT',_14}> when 'true' -> let <_6> = call 'dets_utils':'bad_object' ('do_trav_bins',Bin) in apply 'req'/2 (Proc,{'corrupt',_6})
<Term> when 'true' -> let <NewAcc> = apply Fun (Term,Acc) in apply 'do_trav_bins'/5 (State,Proc,NewAcc,Fun,Bins) end
(<_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10,_9})-|[{'function_name',{'do_trav_bins',5}}] )-|['compiler_generated'] ) end
'safe_match'/3 = fun (_0,_1,_2) -> let <_3> = apply 'init_chunk_match'/5 (_0,_1,_2,'default','safe') in apply 'do_safe_match'/2 (_3,[])
'do_safe_match'/2 = fun (_0,_1) -> case <_0,_1> of <_@r0 = {'error',Error},_X_L> when 'true' -> _@r0
<{L,C},LL> when 'true' -> let <_3> = apply 'chunk_match'/2 (C,'safe') in let <_2> = call 'erlang':'++' (L,LL) in apply 'do_safe_match'/2 (_3,_2)
<'$end_of_table',L> when 'true' -> L
<'badarg',_X_L> when 'true' -> 'badarg'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'do_safe_match',2}}] )-|['compiler_generated'] ) end
'init_chunk_match'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Tab,Pat,What,N,Safe> when let <_5> = call 'erlang':'is_integer' (N) in let <_6> = call 'erlang':'>=' (N,0) in let <_7> = call 'erlang':'and' (_5,_6) in let <_8> = call 'erlang':'=:=' (N,'default') in call 'erlang':'or' (_7,_8) -> case apply 'compile_match_spec'/2 (What,Pat) of <{Spec,MP}> when 'true' -> let <_9> = catch call 'dets_server':'get_pid' (Tab) in case _9 of <{'EXIT',_X_Reason}> when 'true' -> 'badarg'
<Proc> when 'true' -> case apply 'req'/2 (Proc,{'match',MP,Spec,N,Safe}) of <{'done',L}> when 'true' -> {L,{'dets_cont',What,'default','eof',#{}#,Tab,Proc,'undefined'}}
<{'cont',State}> when 'true' -> case State of <{'dets_cont',_23,_24,_25,_26,_27,_28,_29}> when 'true' -> let <_11> = call 'erlang':'setelement' (7,State,Proc) in let <_12> = call 'erlang':'setelement' (6,_11,Tab) in let <_14> = call 'erlang':'setelement' (2,_12,What) in apply 'chunk_match'/2 (_14,Safe)
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> Error end end
<'badarg'> when 'true' -> 'badarg'
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
<_X_Tab,_X_Pat,_X_What,_X_N,_X_Safe> when 'true' -> 'badarg' end
'chunk_match'/2 = fun (_0,_1) -> case <_0,_1> of <State = {'dets_cont',_12,_13,_14,_15,_16,Proc,_17},Safe> when 'true' -> case apply 'req'/2 (Proc,{'match_init',State,Safe}) of <Reply = '$end_of_table'> when 'true' -> Reply
<{'cont',{Bins,NewState}}> when 'true' -> (case NewState of (<({'dets_cont',_18,_19,_20,_21,_22,_23,_rec4}-|['compiler_generated'] )> when 'true' -> let <_5> = catch apply 'do_foldl_bins'/2 (Bins,_rec4) in case _5 of <{'EXIT',_25}> when 'true' -> case call 'ets':'is_compiled_ms' (_rec4) of <'true'> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('chunk_match',Bins) in apply 'req'/2 (Proc,{'corrupt',Bad})
<'false'> when 'true' -> 'badarg'
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<[]> when 'true' -> apply 'chunk_match'/2 (NewState,Safe)
<Terms> when 'true' -> {Terms,NewState} end-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> Error end
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'chunk_match',2}}] )-|['compiler_generated'] ) end
'do_foldl_bins'/2 = fun (_0,_1) -> case <_0,_1> of <Bins,'true'> when 'true' -> apply 'foldl_bins'/2 (Bins,[])
<Bins,{'match_spec',MP}> when 'true' -> apply 'foldl_bins'/3 (Bins,MP,[])
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'do_foldl_bins',2}}] )-|['compiler_generated'] ) end
'foldl_bins'/2 = fun (_0,_1) -> case <_0,_1> of <[],Terms> when 'true' -> Terms
<[Bin|Bins],Terms> when 'true' -> let <_2> = call 'erlang':'binary_to_term' (Bin) in apply 'foldl_bins'/2 (Bins,[_2|Terms])
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'foldl_bins',2}}] )-|['compiler_generated'] ) end
'foldl_bins'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_X_MP,Terms> when 'true' -> Terms
<[Bin|Bins],MP,Terms> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (Bin) in case call 'ets':'match_spec_run' ([Term|[]],MP) of <[]> when 'true' -> apply 'foldl_bins'/3 (Bins,MP,Terms)
<[Result|[]]> when 'true' -> apply 'foldl_bins'/3 (Bins,MP,[Result|Terms])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'foldl_bins',3}}] )-|['compiler_generated'] ) end
'compile_match_spec'/2 = fun (_0,_1) -> case <_0,_1> of <'select',Spec = [{'_',[],['$_']}]> when 'true' -> {Spec,'true'}
<'select',Spec> when 'true' -> try let <_2> = call 'ets':'match_spec_compile' (Spec) in {Spec,{'match_spec',_2}} of <_3> -> _3 catch <_6,_5,_4> -> case <_6,_5,_4> of <('error'-|['compiler_generated'] ),_9,_10> when 'true' -> 'badarg'
(<_11,_12,_13> when 'true' -> primop 'raise' (_13,_12)-|['compiler_generated'] ) end
<'object',Pat> when 'true' -> apply 'compile_match_spec'/2 ('select',[{Pat,[],['$_']}|[]])
<'bindings',Pat> when 'true' -> apply 'compile_match_spec'/2 ('select',[{Pat,[],['$$']}|[]])
<'delete',Pat> when 'true' -> apply 'compile_match_spec'/2 ('select',[{Pat,[],['true']}|[]])
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'compile_match_spec',2}}] )-|['compiler_generated'] ) end
'defaults'/2 = fun (_0,_1) -> let <_3> = apply 'to_list'/1 (_0) in let <_2> = call 'timer':'minutes' (3) in let <Defaults0> = {'open_args',_3,'set',1,'true','default','default','false',{3000,14000},_2,'read_write','false'} in let <_5> = 'repl'/2 in let <Defaults> = call 'lists':'foldl' (_5,Defaults0,_1) in (case Defaults of (<({'open_args',_rec5,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}-|['compiler_generated'] )> when 'true' -> case call 'erlang':'is_list' (_rec5) of <'true'> when 'true' -> apply 'is_comp_min_max'/1 (Defaults)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'to_list'/1 = fun (_0) -> case _0 of <T> when call 'erlang':'is_atom' (_0) -> call 'erlang':'atom_to_list' (T)
<T> when 'true' -> T end
'repl'/2 = fun (_0,_1) -> case <_0,_1> of <{'access',A},Defs> when 'true' -> do apply 'mem'/2 (A,['read'|['read_write']]) case Defs of <{'open_args',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55}> when 'true' -> call 'erlang':'setelement' (11,Defs,A)
(<_56> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'auto_save',Int},Defs> when let <_4> = call 'erlang':'is_integer' (Int) in let <_5> = call 'erlang':'>=' (Int,0) in call 'erlang':'and' (_4,_5) -> case Defs of <{'open_args',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' -> call 'erlang':'setelement' (10,Defs,Int)
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'auto_save','infinity'},Defs> when 'true' -> case Defs of <{'open_args',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' -> call 'erlang':'setelement' (10,Defs,'infinity')
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'cache_size',Int},Defs> when let <_10> = call 'erlang':'is_integer' (Int) in let <_11> = call 'erlang':'>=' (Int,0) in call 'erlang':'and' (_10,_11) -> Defs
<{'cache_size','infinity'},Defs> when 'true' -> Defs
<{'delayed_write','default'},Defs> when 'true' -> case Defs of <{'open_args',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' -> call 'erlang':'setelement' (9,Defs,{3000,14000})
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'delayed_write',C = {Delay,Size}},Defs> when try let <_14> = call 'erlang':'is_integer' (Delay) in let <_15> = call 'erlang':'>=' (Delay,0) in let <_16> = call 'erlang':'is_integer' (Size) in let <_17> = call 'erlang':'>=' (Size,0) in let <_18> = call 'erlang':'and' (_16,_17) in let <_19> = call 'erlang':'and' (_15,_18) in call 'erlang':'and' (_14,_19) of <Try> -> Try catch <T,R> -> 'false' -> case Defs of <{'open_args',_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' -> call 'erlang':'setelement' (9,Defs,C)
(<_104> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'estimated_no_objects',I},Defs> when 'true' -> apply 'repl'/2 ({'min_no_slots',I},Defs)
<{'file',File},Defs> when 'true' -> let <_rec11> = apply 'to_list'/1 (File) in case Defs of <{'open_args',_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115}> when 'true' -> call 'erlang':'setelement' (2,Defs,_rec11)
(<_116> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'keypos',P},Defs> when let <_25> = call 'erlang':'is_integer' (P) in let <_26> = call 'erlang':'>' (P,0) in call 'erlang':'and' (_25,_26) -> case Defs of <{'open_args',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127}> when 'true' -> call 'erlang':'setelement' (4,Defs,P)
(<_128> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'max_no_slots',I},Defs> when 'true' -> let <MaxSlots> = apply 'is_max_no_slots'/1 (I) in case Defs of <{'open_args',_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139}> when 'true' -> call 'erlang':'setelement' (7,Defs,MaxSlots)
(<_140> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'min_no_slots',I},Defs> when 'true' -> let <MinSlots> = apply 'is_min_no_slots'/1 (I) in case Defs of <{'open_args',_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' -> call 'erlang':'setelement' (6,Defs,MinSlots)
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ram_file',Bool},Defs> when 'true' -> do apply 'mem'/2 (Bool,['true'|['false']]) case Defs of <{'open_args',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163}> when 'true' -> call 'erlang':'setelement' (8,Defs,Bool)
(<_164> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'repair',T},Defs> when 'true' -> do apply 'mem'/2 (T,['true'|['false'|['force']]]) case Defs of <{'open_args',_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175}> when 'true' -> call 'erlang':'setelement' (5,Defs,T)
(<_176> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'type',T},Defs> when 'true' -> do apply 'mem'/2 (T,['set'|['bag'|['duplicate_bag']]]) case Defs of <{'open_args',_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187}> when 'true' -> call 'erlang':'setelement' (3,Defs,T)
(<_188> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'version',Version},Defs> when 'true' -> do apply 'is_version'/1 (Version) Defs
<{'debug',Bool},Defs> when 'true' -> do apply 'mem'/2 (Bool,['true'|['false']]) case Defs of <{'open_args',_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199}> when 'true' -> call 'erlang':'setelement' (12,Defs,Bool)
(<_200> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{_201,_202},_203> when 'true' -> call 'erlang':'exit' ('badarg')
(<_44,_43> when 'true' -> (primop 'match_fail' ({'function_clause',_44,_43})-|[{'function_name',{'repl',2}}] )-|['compiler_generated'] ) end
'is_min_no_slots'/1 = fun (_0) -> case _0 of <'default'> when 'true' -> 'default'
<I> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>=' (_0,256) in call 'erlang':'and' (_1,_2) -> I
<I> when let <_3> = call 'erlang':'is_integer' (_0) in let <_4> = call 'erlang':'>=' (_0,0) in call 'erlang':'and' (_3,_4) -> 256
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'is_min_no_slots',1}}] )-|['compiler_generated'] ) end
'is_max_no_slots'/1 = fun (_0) -> case _0 of <'default'> when 'true' -> 'default'
<I> when try let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in let <_4> = call 'erlang':'<' (_0,2147483648) in let <_5> = call 'erlang':'and' (_2,_4) in call 'erlang':'and' (_1,_5) of <Try> -> Try catch <T,R> -> 'false' -> I
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'is_max_no_slots',1}}] )-|['compiler_generated'] ) end
'is_comp_min_max'/1 = fun (_0) -> case _0 of <{'open_args',_4,_5,_6,_7,Min,Max,_8,_9,_10,_11,_12}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Min,'default') -> _0
<> when call 'erlang':'=:=' (Max,'default') -> _0
<> when 'true' -> case call 'erlang':'=<' (Min,Max) of <'true'> when 'true' -> _0
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'is_version'/1 = fun (_0) -> case _0 of <'default'> when 'true' -> 'true'
<9> when 'true' -> 'true'
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'is_version',1}}] )-|['compiler_generated'] ) end
'mem'/2 = fun (_0,_1) -> case call 'lists':'member' (_0,_1) of <'true'> when 'true' -> 'true'
<'false'> when 'true' -> call 'erlang':'exit' ('badarg')
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'options'/2 = fun (_0,_1) -> case <_0,_1> of <Options,Keys> when call 'erlang':'is_list' (Options) -> apply 'options'/3 (Options,Keys,[])
<Option,Keys> when 'true' -> apply 'options'/3 ([Option|[]],Keys,[]) end
'options'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Options,[Key|Keys],L> when call 'erlang':'is_list' (Options) -> let <_12> = case call 'lists':'keysearch' (Key,1,Options) of <{'value',{'format',Format}}> when let <_3> = call 'erlang':'=:=' (Format,'term') in let <_4> = call 'erlang':'=:=' (Format,'bchunk') in call 'erlang':'or' (_3,_4) -> {'ok',Format}
<{'value',{'min_no_slots',I}}> when 'true' -> let <_5> = catch apply 'is_min_no_slots'/1 (I) in case _5 of <{'EXIT',_19}> when 'true' -> 'badarg'
<MinNoSlots> when 'true' -> {'ok',MinNoSlots} end
<{'value',{'n_objects','default'}}> when 'true' -> let <_7> = apply 'default_option'/1 (Key) in {'ok',_7}
<{'value',{'n_objects',NObjs}}> when let <_8> = call 'erlang':'is_integer' (NObjs) in let <_9> = call 'erlang':'>=' (NObjs,1) in call 'erlang':'and' (_8,_9) -> {'ok',NObjs}
<{'value',{'traverse','select'}}> when 'true' -> {'ok','select'}
<{'value',{'traverse',_@r0 = {'select',MS}}}> when 'true' -> {'ok',_@r0}
<{'value',{'traverse','first_next'}}> when 'true' -> {'ok','first_next'}
<{'value',{_20,_21}}> when call 'erlang':'=:=' (_20,Key) -> 'badarg'
<'false'> when 'true' -> let <Default> = apply 'default_option'/1 (Key) in {'ok',Default}
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end in case _12 of <'badarg'> when 'true' -> {'badarg',Key}
<{'ok',Value}> when 'true' -> let <NewOptions> = call 'lists':'keydelete' (Key,1,Options) in apply 'options'/3 (NewOptions,Keys,[Value|L])
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<[],[],L> when 'true' -> call 'lists':'reverse' (L)
<Options,_22,_X_L> when 'true' -> {'badarg',Options} end
'default_option'/1 = fun (_0) -> case _0 of <'format'> when 'true' -> 'term'
<'min_no_slots'> when 'true' -> 'default'
<'traverse'> when 'true' -> 'select'
<'n_objects'> when 'true' -> 'default'
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'default_option',1}}] )-|['compiler_generated'] ) end
'listify'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> L
<T> when 'true' -> [T|[]] end
'treq'/2 = fun (_0,_1) -> let <_2> = catch call 'dets_server':'get_pid' (_0) in case _2 of <Pid> when call 'erlang':'is_pid' (_2) -> apply 'req'/2 (Pid,_1)
<_6> when 'true' -> 'badarg' end
'req'/2 = fun (_0,_1) -> let <Ref> = call 'erlang':'monitor' ('process',_0) in let <_3> = call 'erlang':'self' () in do call 'erlang':'!' (_0,{'$dets_call',_3,_1}) receive <{'DOWN',_6,'process',_7,_X_Info}> when let <_8> = call 'erlang':'=:=' (_6,Ref) in let <_9> = call 'erlang':'=:=' (_7,_0) in call 'erlang':'and' (_8,_9) -> 'badarg'
<{_10,Reply}> when call 'erlang':'=:=' (_10,_0) -> do call 'erlang':'demonitor' (Ref,['flush']) Reply after 'infinity' -> 'true'
'einval'/2 = fun (_0,_1) -> case <_0,_1> of <{'error',{'file_error',_4,'einval'}},A> when 'true' -> call 'erlang':'error' ('badarg',A)
<{'error',{'file_error',_5,'badarg'}},A> when 'true' -> call 'erlang':'error' ('badarg',A)
<Reply,_X_A> when 'true' -> Reply end
'badarg'/2 = fun (_0,_1) -> case <_0,_1> of <'badarg',A> when 'true' -> call 'erlang':'error' ('badarg',A)
<Reply,_X_A> when 'true' -> Reply end
'undefined'/1 = fun (_0) -> case _0 of <'badarg'> when 'true' -> 'undefined'
<Reply> when 'true' -> Reply end
'badarg_exit'/2 = fun (_0,_1) -> case <_0,_1> of <'badarg',A> when 'true' -> call 'erlang':'error' ('badarg',A)
<{'ok',Reply},_X_A> when 'true' -> Reply
<Reply,_X_A> when 'true' -> call 'erlang':'exit' (Reply) end
'init'/2 = fun (_0,_1) -> do call 'erlang':'process_flag' ('trap_exit','true') receive <{'$dets_call',From,Op = {'internal_open',Ref,Args}}> when 'true' -> try apply 'do_internal_open'/5 (_0,_1,From,Ref,Args) of <_2> -> apply 'open_file_loop'/2 (_2,0) catch <_6,_5,_4> -> case <_6,_5,_4> of <('exit'-|['compiler_generated'] ),('normal'-|['compiler_generated'] ),_9> when 'true' -> call 'erlang':'exit' ('normal')
<_10,Bad,_12> when 'true' -> let <Stacktrace> = primop 'build_stacktrace' (_12) in do apply 'bug_found'/5 ('no_name',Op,Bad,Stacktrace,From) call 'erlang':'exit' (Bad) end after 'infinity' -> 'true'
'open_file_loop'/2 = fun (_0,_1) -> case <_0,_1> of <Head = {'head',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56},N> when (try let <_6> = call 'erlang':'element' (16,Head) in let <_7> = call 'erlang':'element' (1,_6) in call 'erlang':'=:=' (_7,'error') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'open_file_loop2'/2 (Head,N)
<Head,N> when 'true' -> receive <{'$dets_call',From,Op = {'match_init',_X_State,_X_Safe}}> when 'true' -> apply 'do_apply_op'/4 (Op,From,Head,N)
<{'$dets_call',From,Op = {'bchunk',_X_State}}> when 'true' -> apply 'do_apply_op'/4 (Op,From,Head,N)
<{'$dets_call',From,Op = {'next',_X_Key}}> when 'true' -> apply 'do_apply_op'/4 (Op,From,Head,N)
<{'$dets_call',From,Op = {'match_delete_init',_X_MP,_X_Spec}}> when 'true' -> apply 'do_apply_op'/4 (Op,From,Head,N)
<{'EXIT',Pid,Reason}> when (try (let <_11> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_9-|['compiler_generated'] )> when 'true' -> (_9-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_12> = call 'erlang':'=:=' ((_11-|['compiler_generated'] ),'true') in let <_13> = call 'erlang':'element' (27,Head) in let <_14> = call 'erlang':'=:=' (Pid,_13) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_12,_14)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do apply 'do_stop'/1 (Head) call 'erlang':'exit' (Reason)
<{'EXIT',Pid,Reason}> when (try (let <_18> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_16-|['compiler_generated'] )> when 'true' -> (_16-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_19> = call 'erlang':'=:=' ((_18-|['compiler_generated'] ),'true') in let <_20> = call 'erlang':'element' (28,Head) in let <_21> = call 'erlang':'=:=' (Pid,_20) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_19,_21)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do apply 'do_stop'/1 (Head) call 'erlang':'exit' (Reason)
<{'EXIT',Pid,_X_Reason}> when 'true' -> let <H2> = apply 'remove_fix'/3 (Head,Pid,'close') in apply 'open_file_loop'/2 (H2,N)
<{'system',From,Req}> when 'true' -> (case Head of (<({'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_rec20,_82,_83,_84}-|['compiler_generated'] )> when 'true' -> call 'sys':'handle_system_msg' (Req,From,_rec20,'dets',[],Head)-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) after 0 -> apply 'open_file_loop2'/2 (Head,N) end
'open_file_loop2'/2 = fun (_0,_1) -> receive <{'$dets_call',From,Op}> when 'true' -> apply 'do_apply_op'/4 (Op,From,_0,_1)
<{'EXIT',Pid,Reason}> when (try (let <_4> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_2-|['compiler_generated'] )> when 'true' -> (_2-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_5> = call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true') in let <_6> = call 'erlang':'element' (27,_0) in let <_7> = call 'erlang':'=:=' (Pid,_6) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_5,_7)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do apply 'do_stop'/1 (_0) call 'erlang':'exit' (Reason)
<{'EXIT',Pid,Reason}> when (try (let <_11> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_9-|['compiler_generated'] )> when 'true' -> (_9-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_12> = call 'erlang':'=:=' ((_11-|['compiler_generated'] ),'true') in let <_13> = call 'erlang':'element' (28,_0) in let <_14> = call 'erlang':'=:=' (Pid,_13) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_12,_14)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do apply 'do_stop'/1 (_0) call 'erlang':'exit' (Reason)
<{'EXIT',Pid,_X_Reason}> when 'true' -> let <H2> = apply 'remove_fix'/3 (_0,Pid,'close') in apply 'open_file_loop'/2 (H2,_1)
<{'system',From,Req}> when 'true' -> (case _0 of (<({'head',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_rec21,_46,_47,_48}-|['compiler_generated'] )> when 'true' -> call 'sys':'handle_system_msg' (Req,From,_rec21,'dets',[],_0)-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Message> when 'true' -> do call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[40|[105|[103|[110|[111|[114|[101|[100|[41|[58|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Message|[]]) apply 'open_file_loop'/2 (_0,_1) after 'infinity' -> 'true'
'do_apply_op'/4 = fun (_0,_1,_2,_3) -> try apply 'apply_op'/4 (_0,_1,_2,_3) of <_4> -> case _4 of <'ok'> when 'true' -> apply 'open_file_loop'/2 (_2,_3)
<{N2,H2 = {'head',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}}> when call 'erlang':'is_integer' (N2) -> apply 'open_file_loop'/2 (H2,N2)
<H2 = {'head',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when ('true'-|['compiler_generated'] ) -> apply 'open_file_loop'/2 (H2,_3)
<{{'more',From1,Op1,N1},NewHead}> when 'true' -> apply 'do_apply_op'/4 (Op1,From1,NewHead,N1)
(<_6> when 'true' -> primop 'match_fail' ({'try_clause',_6})-|['compiler_generated'] ) end catch <_9,_8,_7> -> case <_9,_8,_7> of <('exit'-|['compiler_generated'] ),('normal'-|['compiler_generated'] ),_74> when 'true' -> call 'erlang':'exit' ('normal')
<_75,Bad,_105> when 'true' -> (case _2 of (<({'head',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec22,_100,_101,_102,_103}-|['compiler_generated'] )> when 'true' -> let <Stacktrace> = primop 'build_stacktrace' (_105) in do apply 'bug_found'/5 (_rec22,_0,Bad,Stacktrace,_1) apply 'open_file_loop'/2 (_2,_3)-|['compiler_generated'] )
(<_104> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'apply_op'/4 = fun (_0,_1,_2,_3) -> case _0 of <{'add_user',Tab,OpenArgs}> when 'true' -> case OpenArgs of <{'open_args',Fname,Type,Keypos,_213,_214,_215,Ram,_216,_217,Access,_218}> when 'true' -> let <_26> = case <> of <> when (try (let <_7> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_5-|['compiler_generated'] )> when 'true' -> (_5-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_8> = call 'erlang':'=:=' ((_7-|['compiler_generated'] ),'true') in let <_9> = call 'erlang':'element' (26,_2) in let <_10> = call 'erlang':'=:=' (Tab,_9) in let <_11> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_10) in let <_12> = call 'erlang':'element' (11,_2) in let <_13> = call 'erlang':'=:=' (_12,Keypos) in let <_14> = call 'erlang':'element' (10,_2) in let <_15> = call 'erlang':'=:=' (_14,Type) in let <_16> = call 'erlang':'element' (25,_2) in let <_17> = call 'erlang':'=:=' (_16,Ram) in let <_18> = call 'erlang':'element' (24,_2) in let <_19> = call 'erlang':'=:=' (_18,Access) in let <_20> = call 'erlang':'element' (23,_2) in let <_21> = call 'erlang':'=:=' (Fname,_20) in let <_22> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_19,_21) in let <_23> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_17,_22) in let <_24> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_15,_23) in let <_25> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_13,_24) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_25)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<> when 'true' -> apply 'err'/1 ({'error','incompatible_arguments'}) end in let <_28> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_28,_26}) 'ok'
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<'auto_save'> when 'true' -> (case _2 of (<({'head',_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_rec23,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246}-|['compiler_generated'] )> when 'true' -> case _rec23 of <'saved'> when 'true' -> _2
<{'error',_X_Reason}> when 'true' -> _2
<_X_Dirty> when call 'erlang':'=:=' (_3,0) -> (case _2 of (<({'head',_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_rec24,_272,_273,_274,_275}-|['compiler_generated'] )> when 'true' -> do call 'dets_utils':'vformat' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[65|[117|[116|[111|[32|[115|[97|[118|[101|[32|[111|[102|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]],[_rec24|[]]) case apply 'perform_save'/2 (_2,'true') of <{NewHead,_X_Res}> when 'true' -> do call 'erlang':'garbage_collect' () {0,NewHead}
(<_33> when 'true' -> primop 'match_fail' ({'badmatch',_33})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_276> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'dirty'> when 'true' -> do apply 'start_auto_save_timer'/1 (_2) {0,_2}
(<_34> when 'true' -> primop 'match_fail' ({'case_clause',_34})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_247> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'close'> when 'true' -> let <_36> = call 'erlang':'self' () in let <_35> = apply 'fclose'/1 (_2) in do call 'erlang':'!' (_1,{_36,_35}) do apply 'unlink_fixing_procs'/1 (_2) call 'erlang':'exit' ('normal')
<{'close',Pid}> when 'true' -> let <NewHead> = apply 'remove_fix'/3 (_2,Pid,'close') in let <_40> = call 'erlang':'self' () in let <_39> = apply 'status'/1 (NewHead) in do call 'erlang':'!' (_1,{_40,_39}) NewHead
<{'corrupt',Reason}> when 'true' -> case call 'dets_utils':'corrupt_reason' (_2,Reason) of <{H2,Error}> when 'true' -> let <_42> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_42,Error}) H2
(<_41> when 'true' -> primop 'match_fail' ({'badmatch',_41})-|['compiler_generated'] ) end
<{'delayed_write',WrTime}> when 'true' -> apply 'delayed_write'/2 (_2,WrTime)
<'info'> when 'true' -> case apply 'finfo'/1 (_2) of <{H2,Res}> when 'true' -> let <_44> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_44,Res}) H2
(<_43> when 'true' -> primop 'match_fail' ({'badmatch',_43})-|['compiler_generated'] ) end
<{'info',Tag}> when 'true' -> case apply 'finfo'/2 (_2,Tag) of <{H2,Res}> when 'true' -> let <_46> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_46,Res}) H2
(<_45> when 'true' -> primop 'match_fail' ({'badmatch',_45})-|['compiler_generated'] ) end
<{'is_compatible_bchunk_format',Term}> when 'true' -> let <Res> = apply 'test_bchunk_format'/2 (_2,Term) in let <_48> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_48,Res}) 'ok'
<{'internal_open',Ref,Args}> when 'true' -> (case _2 of (<({'head',_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_rec25,_302,_303,_304}-|['compiler_generated'] )> when 'true' -> (case _2 of (<({'head',_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_rec26,_332,_333}-|['compiler_generated'] )> when 'true' -> apply 'do_internal_open'/5 (_rec25,_rec26,_1,Ref,Args)-|['compiler_generated'] )
(<_334> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_305> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'may_grow'> when (try (let <_55> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_53-|['compiler_generated'] )> when 'true' -> (_53-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_56> = call 'erlang':'=:=' ((_55-|['compiler_generated'] ),'true') in let <_57> = call 'erlang':'element' (16,_2) in let <_58> = call 'erlang':'=/=' (_57,'saved') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_56,_58)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case <> of <> when (try (let <_61> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_59-|['compiler_generated'] )> when 'true' -> (_59-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_62> = call 'erlang':'=:=' ((_61-|['compiler_generated'] ),'true') in let <_63> = call 'erlang':'element' (16,_2) in let <_64> = call 'erlang':'=:=' (_63,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_62,_64)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case call 'dets_v9':'may_grow' (_2,0,'many_times') of <{H2,_X_Res}> when 'true' -> let <_66> = call 'erlang':'+' (_3,1) in {_66,H2}
(<_65> when 'true' -> primop 'match_fail' ({'badmatch',_65})-|['compiler_generated'] ) end
<> when 'true' -> 'ok' end
<{'set_verbose',What}> when 'true' -> do apply 'set_verbose'/1 (What) let <_67> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_67,'ok'}) 'ok'
<{'where',Object}> when 'true' -> case apply 'where_is_object'/2 (_2,Object) of <{H2,Res}> when 'true' -> let <_69> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_69,Res}) H2
(<_68> when 'true' -> primop 'match_fail' ({'badmatch',_68})-|['compiler_generated'] ) end
<_X_Message> when (try (let <_72> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_70-|['compiler_generated'] )> when 'true' -> (_70-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_73> = call 'erlang':'=:=' ((_72-|['compiler_generated'] ),'true') in let <_74> = call 'erlang':'element' (16,_2) in let <_75> = call 'erlang':'element' (1,_74) in let <_76> = call 'erlang':'=:=' (_75,'error') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_73,_76)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_78> = call 'erlang':'self' () in let <_77> = apply 'status'/1 (_2) in do call 'erlang':'!' (_1,{_78,_77}) 'ok'
<{'bchunk_init',Tab}> when 'true' -> case apply 'do_bchunk_init'/2 (_2,Tab) of <{H2,Res}> when 'true' -> let <_80> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_80,Res}) H2
(<_79> when 'true' -> primop 'match_fail' ({'badmatch',_79})-|['compiler_generated'] ) end
<{'bchunk',State}> when 'true' -> case apply 'do_bchunk'/2 (_2,State) of <{H2,Res}> when 'true' -> let <_82> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_82,Res}) H2
(<_81> when 'true' -> primop 'match_fail' ({'badmatch',_81})-|['compiler_generated'] ) end
<'delete_all_objects'> when 'true' -> case apply 'fdelete_all_objects'/1 (_2) of <{H2,Res}> when 'true' -> let <_84> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_84,Res}) do call 'erlang':'garbage_collect' () {0,H2}
(<_83> when 'true' -> primop 'match_fail' ({'badmatch',_83})-|['compiler_generated'] ) end
<{'delete_key',_X_Keys}> when (try (let <_87> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_85-|['compiler_generated'] )> when 'true' -> (_85-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_88> = call 'erlang':'=:=' ((_87-|['compiler_generated'] ),'true') in let <_89> = call 'erlang':'element' (16,_2) in let <_90> = call 'erlang':'=:=' (_89,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_88,_90)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'stream_op'/5 (_0,_1,[],_2,_3)
<{'delete_object',Objs}> when (try (let <_93> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_91-|['compiler_generated'] )> when 'true' -> (_91-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_94> = call 'erlang':'=:=' ((_93-|['compiler_generated'] ),'true') in let <_95> = call 'erlang':'element' (16,_2) in let <_96> = call 'erlang':'=:=' (_95,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_94,_96)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case _2 of (<({'head',_335,_336,_337,_338,_339,_340,_341,_342,_343,_rec27,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354,_355,_356,_357,_358,_359,_360,_361,_362}-|['compiler_generated'] )> when 'true' -> case apply 'check_objects'/2 (Objs,_rec27) of <'true'> when 'true' -> apply 'stream_op'/5 (_0,_1,[],_2,_3)
<'false'> when 'true' -> let <_99> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_99,'badarg'}) 'ok'
(<_100> when 'true' -> primop 'match_fail' ({'case_clause',_100})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_363> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'first'> when 'true' -> case apply 'ffirst'/1 (_2) of <{H2,Res}> when 'true' -> let <_102> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_102,Res}) H2
(<_101> when 'true' -> primop 'match_fail' ({'badmatch',_101})-|['compiler_generated'] ) end
<{'initialize',InitFun,Format,MinNoSlots}> when 'true' -> case apply 'finit'/4 (_2,InitFun,Format,MinNoSlots) of <{H2,Res}> when 'true' -> let <_104> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_104,Res}) do call 'erlang':'garbage_collect' () H2
(<_103> when 'true' -> primop 'match_fail' ({'badmatch',_103})-|['compiler_generated'] ) end
<{'insert',Objs}> when (try (let <_107> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_105-|['compiler_generated'] )> when 'true' -> (_105-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_108> = call 'erlang':'=:=' ((_107-|['compiler_generated'] ),'true') in let <_109> = call 'erlang':'element' (16,_2) in let <_110> = call 'erlang':'=:=' (_109,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_108,_110)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case _2 of (<({'head',_364,_365,_366,_367,_368,_369,_370,_371,_372,_rec28,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391}-|['compiler_generated'] )> when 'true' -> case apply 'check_objects'/2 (Objs,_rec28) of <'true'> when 'true' -> apply 'stream_op'/5 (_0,_1,[],_2,_3)
<'false'> when 'true' -> let <_113> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_113,'badarg'}) 'ok'
(<_114> when 'true' -> primop 'match_fail' ({'case_clause',_114})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_392> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'insert_new',Objs}> when (try (let <_117> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_115-|['compiler_generated'] )> when 'true' -> (_115-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_118> = call 'erlang':'=:=' ((_117-|['compiler_generated'] ),'true') in let <_119> = call 'erlang':'element' (16,_2) in let <_120> = call 'erlang':'=:=' (_119,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_118,_120)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'finsert_new'/2 (_2,Objs) of <{H2,Res}> when 'true' -> let <_122> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_122,Res}) let <_123> = call 'erlang':'+' (_3,1) in {_123,H2}
(<_121> when 'true' -> primop 'match_fail' ({'badmatch',_121})-|['compiler_generated'] ) end
<{'lookup_keys',_X_Keys}> when 'true' -> apply 'stream_op'/5 (_0,_1,[],_2,_3)
<{'match_init',State,Safe}> when 'true' -> case apply 'fmatch_init'/2 (_2,State) of <{H1,Res}> when 'true' -> let <_126> = case Res of <{'cont',_393}> when 'true' -> H1
<_394> when call 'erlang':'=:=' (Safe,'no_safe') -> H1
<_395> when call 'erlang':'=:=' (Safe,'safe') -> apply 'do_safe_fixtable'/3 (H1,_1,'false')
(<_125> when 'true' -> primop 'match_fail' ({'case_clause',_125})-|['compiler_generated'] ) end in let <_128> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_128,Res}) _126
(<_124> when 'true' -> primop 'match_fail' ({'badmatch',_124})-|['compiler_generated'] ) end
<{'match',MP,Spec,NObjs,Safe}> when 'true' -> case apply 'fmatch'/6 (_2,MP,Spec,NObjs,Safe,_1) of <{H2,Res}> when 'true' -> let <_130> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_130,Res}) H2
(<_129> when 'true' -> primop 'match_fail' ({'badmatch',_129})-|['compiler_generated'] ) end
<_396 = {'member',_X_Key}> when call 'erlang':'=:=' (_396,_0) -> apply 'stream_op'/5 (_0,_1,[],_2,_3)
<{'next',Key}> when 'true' -> case apply 'fnext'/2 (_2,Key) of <{H2,Res}> when 'true' -> let <_132> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_132,Res}) H2
(<_131> when 'true' -> primop 'match_fail' ({'badmatch',_131})-|['compiler_generated'] ) end
<{'match_delete',State}> when (try (let <_135> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_133-|['compiler_generated'] )> when 'true' -> (_133-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_136> = call 'erlang':'=:=' ((_135-|['compiler_generated'] ),'true') in let <_137> = call 'erlang':'element' (16,_2) in let <_138> = call 'erlang':'=:=' (_137,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_136,_138)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'fmatch_delete'/2 (_2,State) of <{H1,Res}> when 'true' -> let <_141> = case Res of <{'cont',_X_S,_X_N}> when 'true' -> H1
<_397> when 'true' -> apply 'do_safe_fixtable'/3 (H1,_1,'false') end in let <_143> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_143,Res}) let <_144> = call 'erlang':'+' (_3,1) in {_144,_141}
(<_139> when 'true' -> primop 'match_fail' ({'badmatch',_139})-|['compiler_generated'] ) end
<{'match_delete_init',MP,Spec}> when (try (let <_147> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_145-|['compiler_generated'] )> when 'true' -> (_145-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_148> = call 'erlang':'=:=' ((_147-|['compiler_generated'] ),'true') in let <_149> = call 'erlang':'element' (16,_2) in let <_150> = call 'erlang':'=:=' (_149,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_148,_150)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'fmatch_delete_init'/4 (_2,MP,Spec,_1) of <{H2,Res}> when 'true' -> let <_152> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_152,Res}) let <_153> = call 'erlang':'+' (_3,1) in {_153,H2}
(<_151> when 'true' -> primop 'match_fail' ({'badmatch',_151})-|['compiler_generated'] ) end
<{'safe_fixtable',Bool}> when 'true' -> let <NewHead> = apply 'do_safe_fixtable'/3 (_2,_1,Bool) in let <_155> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_155,'ok'}) NewHead
<{'slot',Slot}> when 'true' -> case apply 'fslot'/2 (_2,Slot) of <{H2,Res}> when 'true' -> let <_157> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_157,Res}) H2
(<_156> when 'true' -> primop 'match_fail' ({'badmatch',_156})-|['compiler_generated'] ) end
<'sync'> when 'true' -> case apply 'perform_save'/2 (_2,'true') of <{NewHead,Res}> when 'true' -> let <_159> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_159,Res}) do call 'erlang':'garbage_collect' () {0,NewHead}
(<_158> when 'true' -> primop 'match_fail' ({'badmatch',_158})-|['compiler_generated'] ) end
<{'update_counter',Key,Incr}> when (try (let <_162> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_160-|['compiler_generated'] )> when 'true' -> (_160-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_163> = call 'erlang':'=:=' ((_162-|['compiler_generated'] ),'true') in let <_164> = call 'erlang':'element' (16,_2) in let <_165> = call 'erlang':'=:=' (_164,'dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_163,_165)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'do_update_counter'/3 (_2,Key,Incr) of <{NewHead,Res}> when 'true' -> let <_167> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_167,Res}) let <_168> = call 'erlang':'+' (_3,1) in {_168,NewHead}
(<_166> when 'true' -> primop 'match_fail' ({'badmatch',_166})-|['compiler_generated'] ) end
<WriteOp> when (try (let <_171> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_169-|['compiler_generated'] )> when 'true' -> (_169-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_172> = call 'erlang':'=:=' ((_171-|['compiler_generated'] ),'true') in let <_173> = call 'erlang':'element' (16,_2) in let <_174> = call 'erlang':'=:=' (_173,'new_dirty') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_172,_174)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case _2 of <{'head',_398,_399,_400,_401,_402,_403,_404,_405,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424,_425,_426}> when 'true' -> let <_177> = call 'erlang':'setelement' (16,_2,'dirty') in apply 'apply_op'/4 (WriteOp,_1,_177,0)
(<_427> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<WriteOp> when (try (let <_181> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_179-|['compiler_generated'] )> when 'true' -> (_179-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_182> = call 'erlang':'=:=' ((_181-|['compiler_generated'] ),'true') in let <_183> = call 'erlang':'element' (24,_2) in let <_184> = call 'erlang':'=:=' (_183,'read_write') in let <_185> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_182,_184) in let <_186> = call 'erlang':'element' (16,_2) in let <_187> = call 'erlang':'=:=' (_186,'saved') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_185,_187)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_188> = catch call 'dets_v9':'mark_dirty' (_2) in case _188 of <'ok'> when 'true' -> do apply 'start_auto_save_timer'/1 (_2) case _2 of <{'head',_428,_429,_430,_431,_432,_433,_434,_435,_436,_437,_438,_439,_440,_441,_442,_443,_444,_445,_446,_447,_448,_449,_450,_451,_452,_453,_454,_455,_456}> when 'true' -> let <_191> = call 'erlang':'setelement' (16,_2,'dirty') in apply 'apply_op'/4 (WriteOp,_1,_191,0)
(<_457> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{NewHead = {'head',_458,_459,_460,_461,_462,_463,_464,_465,_466,_467,_468,_469,_470,_471,_472,_473,_474,_475,_476,_477,_478,_479,_480,_481,_482,_483,_484,_485,_486},Error}> when ('true'-|['compiler_generated'] ) -> let <_193> = call 'erlang':'self' () in do call 'erlang':'!' (_1,{_193,Error}) NewHead
(<_194> when 'true' -> primop 'match_fail' ({'case_clause',_194})-|['compiler_generated'] ) end
<WriteOp> when try let <_195> = call 'erlang':'is_tuple' (_0) in (let <_198> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_2,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_196-|['compiler_generated'] )> when 'true' -> (_196-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_199> = call 'erlang':'=:=' ((_198-|['compiler_generated'] ),'true') in let <_200> = call 'erlang':'element' (24,_2) in let <_201> = call 'erlang':'=:=' (_200,'read') in let <_202> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_199,_201) in call 'erlang':'and' (_195,_202)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case _2 of (<({'head',_487,_488,_489,_490,_491,_492,_493,_494,_495,_496,_497,_498,_499,_500,_501,_502,_503,_504,_505,_506,_507,_rec31,_508,_509,_510,_511,_512,_513,_514}-|['compiler_generated'] )> when 'true' -> let <Reason> = {'access_mode',_rec31} in let <_207> = call 'erlang':'self' () in let <_206> = apply 'err'/1 ({'error',Reason}) in do call 'erlang':'!' (_1,{_207,_206}) 'ok'-|['compiler_generated'] )
(<_515> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_208> when 'true' -> primop 'match_fail' ({'case_clause',_208})-|['compiler_generated'] ) end
'bug_found'/5 = fun (_0,_1,_2,_3,_4) -> do case call 'dets_utils':'debug_mode' () of <'true'> when 'true' -> call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[119|[104|[101|[110|[32|[97|[99|[99|[101|[115|[115|[105|[110|[103|[32|[116|[97|[98|[108|[101|[32|[126|[116|[119|[44|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[119|[97|[115|[32|[126|[116|[112|[32|[97|[110|[100|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[83|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[_1|[_2|[_3|[]]]]])
<'false'> when 'true' -> call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[119|[104|[101|[110|[32|[97|[99|[99|[101|[115|[115|[105|[110|[103|[32|[116|[97|[98|[108|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[]])
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end case <> of <> when try let <_6> = call 'erlang':'self' () in call 'erlang':'=/=' (_4,_6) of <Try> -> Try catch <T,R> -> 'false' -> let <_7> = call 'erlang':'self' () in do call 'erlang':'!' (_4,{_7,{'error',{'dets_bug',_0,_1,_2}}}) 'ok'
<> when 'true' -> 'ok' end
'do_internal_open'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'do_open_file'/4 (_4,_0,_1,_3) of <{'ok',Head}> when 'true' -> let <_5> = call 'erlang':'self' () in do call 'erlang':'!' (_2,{_5,'ok'}) Head
<Error> when 'true' -> let <_6> = call 'erlang':'self' () in do call 'erlang':'!' (_2,{_6,Error}) call 'erlang':'exit' ('normal') end
'start_auto_save_timer'/1 = fun (_0) -> case _0 of <Head = {'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}> when (try let <_5> = call 'erlang':'element' (15,Head) in call 'erlang':'=:=' (_5,'infinity') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<Head> when 'true' -> (case Head of (<({'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec32,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}-|['compiler_generated'] )> when 'true' -> let <_11> = call 'erlang':'self' () in let <_10> = call 'erlang':'self' () in do call 'erlang':'send_after' (_rec32,_11,{'$dets_call',_10,'auto_save'}) 'ok'-|['compiler_generated'] )
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'stream_op'/5 = fun (_0,_1,_2,_3,_4) -> case _3 of <{'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,M,Fxd,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> apply 'stream_op'/8 (_3,_2,[],_4,_1,_0,Fxd,M)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'stream_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Head,Pids,C,N,Fxd = 'false',M> when 'true' -> receive <{'$dets_call',From,Message}> when 'true' -> apply 'stream_op'/8 (Head,Pids,C,N,From,Message,Fxd,M) after 0 -> apply 'stream_end'/5 (Head,Pids,C,N,'no_more')
<Head,Pids,C,N,_X_Fxd,_X_M> when 'true' -> apply 'stream_end'/5 (Head,Pids,C,N,'no_more') end
'stream_op'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Head,Pids,C,N,Pid,{'lookup_keys',Keys},Fxd,M> when 'true' -> let <NC> = [{{'lookup',Pid},Keys}|C] in apply 'stream_loop'/6 (Head,Pids,NC,N,Fxd,M)
<Head,Pids,C,N,Pid,Op = {'insert',_X_Objects},Fxd,M = 'dirty'> when 'true' -> let <NC> = [Op|C] in apply 'stream_loop'/6 (Head,[Pid|Pids],NC,N,Fxd,M)
<Head,Pids,C,N,Pid,Op = {'delete_key',_X_Keys},Fxd,M = 'dirty'> when 'true' -> let <NC> = [Op|C] in apply 'stream_loop'/6 (Head,[Pid|Pids],NC,N,Fxd,M)
<Head,Pids,C,N,Pid,Op = {'delete_object',_X_Os},Fxd,M = 'dirty'> when 'true' -> let <NC> = [Op|C] in apply 'stream_loop'/6 (Head,[Pid|Pids],NC,N,Fxd,M)
<Head,Pids,C,N,Pid,{'member',Key},Fxd,M> when 'true' -> let <NC> = [{{'lookup',[Pid|[]]},[Key|[]]}|C] in apply 'stream_loop'/6 (Head,Pids,NC,N,Fxd,M)
<Head,Pids,C,N,Pid,Op,_X_Fxd,_X_M> when 'true' -> apply 'stream_end'/5 (Head,Pids,C,N,{Pid,Op}) end
'stream_end'/5 = fun (_0,_1,_2,_3,_4) -> let <_6> = catch let <_5> = call 'lists':'reverse' (_2) in apply 'update_cache'/2 (_0,_5) in case _6 of <{Head1,[],PwriteList}> when 'true' -> apply 'stream_end1'/6 (_1,_4,_3,_2,Head1,PwriteList)
<{Head1,Found,PwriteList}> when 'true' -> do apply 'lookup_replies'/1 (Found) apply 'stream_end1'/6 (_1,_4,_3,_2,Head1,PwriteList)
<Head1 = {'head',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when ('true'-|['compiler_generated'] ) -> apply 'stream_end2'/7 (_1,_1,_4,_3,_2,Head1,'ok')
<{Head1 = {'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80},Error}> when ('true'-|['compiler_generated'] ) -> let <Fun> = fun (_9,_8) -> case <_9,_8> of <{{'lookup',[Pid|[]]},_X_Keys},L> when 'true' -> [Pid|L]
<{{'lookup',Pid},_X_Keys},L> when 'true' -> [Pid|L]
<_81,L> when 'true' -> L end in let <LPs0> = call 'lists':'foldl' (Fun,[],_2) in let <_14> = call 'lists':'flatten' (LPs0) in let <LPs> = call 'lists':'usort' (_14) in let <_16> = call 'erlang':'++' (_1,LPs) in apply 'stream_end2'/7 (_16,_1,_4,_3,_2,Head1,Error)
<DetsError> when 'true' -> call 'erlang':'throw' (DetsError) end
'stream_end1'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Pids,Next,N,C,Head,[]> when 'true' -> apply 'stream_end2'/7 (Pids,Pids,Next,N,C,Head,'ok')
<Pids,Next,N,C,Head,PwriteList> when 'true' -> let <_6> = catch call 'dets_utils':'pwrite' (Head,PwriteList) in case _6 of <{Head1,PR}> when 'true' -> apply 'stream_end2'/7 (Pids,Pids,Next,N,C,Head1,PR)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'stream_end2'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[Pid|Pids],Ps,Next,N,C,Head,Reply> when 'true' -> let <_7> = call 'erlang':'self' () in do call 'erlang':'!' (Pid,{_7,Reply}) let <_8> = call 'erlang':'+' (N,1) in apply 'stream_end2'/7 (Pids,Ps,Next,_8,C,Head,Reply)
<[],Ps,'no_more',N,C,Head,_X_Reply> when 'true' -> do apply 'penalty'/3 (Head,Ps,C) {N,Head}
<[],_X_Ps,{From,Op},N,_X_C,Head,_X_Reply> when 'true' -> {{'more',From,Op,N},Head}
(<_15,_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11,_10,_9})-|[{'function_name',{'stream_end2',7}}] )-|['compiler_generated'] ) end
'penalty'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <H = {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40},_X_Ps,_X_C> when (try let <_7> = call 'erlang':'element' (17,H) in call 'erlang':'=:=' (_7,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<_X_H,_X_Ps,[{{'lookup',_X_Pids},_X_Keys}|[]]> when 'true' -> 'ok'
<{'head',_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,{_56,[{Pid,_57}|[]]},_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70},[_71|[]],_X_C> when call 'erlang':'=:=' (_71,Pid) -> 'ok'
<_X_H,_X_Ps,_X_C> when 'true' -> call 'timer':'sleep' (1) end
'lookup_replies'/1 = fun (_0) -> case _0 of <[{P,O}|[]]> when 'true' -> (case <P,O> of (<([_8|([]-|['compiler_generated'] )]-|['compiler_generated'] ),_9> when ('true'-|['compiler_generated'] ) -> (let <_3> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (let <_2> = call ('erlang'-|['compiler_generated'] ):('=/='-|['compiler_generated'] ) (_9,([]-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_8,({_3,_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_10,_11> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_10,({_4,_11}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Q> when 'true' -> case call 'dets_utils':'family' (Q) of <[{P,O}|L]> when 'true' -> let <_2> = call 'lists':'append' (O) in apply 'lookup_replies'/3 (P,_2,L)
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end end
'lookup_replies'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <P,O,[]> when 'true' -> (case <P,O> of (<([_10|([]-|['compiler_generated'] )]-|['compiler_generated'] ),_11> when ('true'-|['compiler_generated'] ) -> (let <_3> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (let <_12> = call ('erlang'-|['compiler_generated'] ):('=/='-|['compiler_generated'] ) (_11,([]-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_10,({_3,_12}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_13,_14> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_13,({_4,_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<P,O,[{P2,O2}|L]> when 'true' -> do (case <P,O> of (<([_17|([]-|['compiler_generated'] )]-|['compiler_generated'] ),_18> when ('true'-|['compiler_generated'] ) -> (let <_3> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (let <_19> = call ('erlang'-|['compiler_generated'] ):('=/='-|['compiler_generated'] ) (_18,([]-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_17,({_3,_19}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_20,_21> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('self'-|['compiler_generated'] ) () in (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (_20,({_4,_21}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_4> = call 'lists':'append' (O2) in apply 'lookup_replies'/3 (P2,_4,L)
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'lookup_replies',3}}] )-|['compiler_generated'] ) end
'lookup_reply'/2 = fun (_0,_1) -> case <_0,_1> of <[P|[]],O> when 'true' -> let <_3> = call 'erlang':'self' () in let <_2> = call 'erlang':'=/=' (O,[]) in call 'erlang':'!' (P,{_3,_2})
<P,O> when 'true' -> let <_4> = call 'erlang':'self' () in call 'erlang':'!' (P,{_4,O}) end
'system_continue'/3 = fun (_0,_1,_2) -> apply 'open_file_loop'/2 (_2,0)
'system_terminate'/4 = fun (_0,_1,_2,_3) -> do apply 'do_stop'/1 (_3) call 'erlang':'exit' (_0)
'system_code_change'/4 = fun (_0,_1,_2,_3) -> {'ok',_0}
'read_file_header'/3 = fun (_0,_1,_2) -> let <_4> = case <> of <> when (call 'erlang':'=:=' (_2,'true')-|['compiler_generated'] ) -> case call 'file':'read_file' (_0) of <{'ok',B}> when 'true' -> B
<Err> when 'true' -> call 'dets_utils':'file_error' (_0,Err) end
<> when 'true' -> _0 end in let <_6> = apply 'open_args'/2 (_1,_2) in case call 'dets_utils':'open' (_4,_6) of <{'ok',Fd}> when 'true' -> case call 'dets_utils':'pread_close' (Fd,_0,16,4) of <{'ok',#{#<Version>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' -> case <> of <> when call 'erlang':'=<' (Version,8) -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) call 'erlang':'throw' ({'error',{'format_8_no_longer_supported',_0}})
<> when call 'erlang':'=:=' (Version,9) -> call 'dets_v9':'read_file_header' (Fd,_0)
<> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) call 'erlang':'throw' ({'error',{'not_a_dets_file',_0}}) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'fclose'/1 = fun (_0) -> case apply 'perform_save'/2 (_0,'false') of <{Head1,Res}> when 'true' -> (case Head1 of (<({'head',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_rec33,_32,_33,_34,_35,_36}-|['compiler_generated'] )> when 'true' -> case _rec33 of <'true'> when 'true' -> Res
<'false'> when 'true' -> do call 'dets_utils':'stop_disk_map' () (case Head1 of (<({'head',_38,_39,_40,_rec34,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}-|['compiler_generated'] )> when 'true' -> let <Res2> = call 'file':'close' (_rec34) in case <> of <> when call 'erlang':'=:=' (Res2,'ok') -> Res
<> when 'true' -> Res2 end-|['compiler_generated'] )
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'perform_save'/2 = fun (_0,_1) -> case <_0,_1> of <Head = {'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55},DoSync> when let <_8> = try let <_6> = call 'erlang':'element' (16,Head) in call 'erlang':'=:=' (_6,'dirty') of <Try> -> Try catch <T,R> -> 'false' in let <_15> = try let <_13> = call 'erlang':'element' (16,Head) in call 'erlang':'=:=' (_13,'new_dirty') of <Try> -> Try catch <T,R> -> 'false' in (call ('erlang'-|['compiler_generated'] ):('or'-|['compiler_generated'] ) (_8,_15)-|['compiler_generated'] ) -> let <_22> = catch case apply 'write_cache'/1 (Head) of <{Head1,[]}> when 'true' -> case call 'dets_v9':'do_perform_save' (Head1) of <{Head2,'ok'}> when 'true' -> case apply 'ensure_written'/2 (Head2,DoSync) of <'ok'> when 'true' -> case Head2 of <{'head',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' -> let <_21> = call 'erlang':'setelement' (16,Head2,'saved') in {_21,'ok'}
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end in case _22 of <Reply = {NewHead = {'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_115}> when ('true'-|['compiler_generated'] ) -> Reply
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
<Head,_X_DoSync> when 'true' -> let <_24> = apply 'status'/1 (Head) in {Head,_24} end
'ensure_written'/2 = fun (_0,_1) -> case <_0,_1> of <Head = {'head',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66},DoSync> when (try let <_6> = call 'erlang':'element' (25,Head) in (call 'erlang':'=:=' (_6,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case call 'dets_utils':'position' (Head,'eof') of <{'ok',EOF}> when 'true' -> case call 'dets_utils':'pread' (Head,0,EOF,0) of <{'ok',Bin}> when 'true' -> case <> of <> when (call 'erlang':'=:=' (DoSync,'true')-|['compiler_generated'] ) -> call 'dets_utils':'write_file' (Head,Bin)
<> when (call 'erlang':'=:=' (DoSync,'false')-|['compiler_generated'] ) -> (case Head of (<({'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_rec36,_88,_89,_90,_91,_92,_93,_94}-|['compiler_generated'] )> when 'true' -> case call 'file':'write_file' (_rec36,Bin) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> call 'dets_utils':'corrupt_file' (Head,Error) end-|['compiler_generated'] )
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<Head,'true'> when try (let <_16> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_14-|['compiler_generated'] )> when 'true' -> (_14-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_17> = call 'erlang':'=:=' ((_16-|['compiler_generated'] ),'true') in let <_18> = call 'erlang':'element' (25,Head) in let <_19> = call 'erlang':'=:=' (_18,'true') in let <_20> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_17,_19) in let <_21> = call 'erlang':'not' (_20) in let <_22> = call 'erlang':'is_boolean' (_18) in let <_23> = call 'erlang':'and' (_21,_22) in let <_24> = call 'erlang':'is_boolean' (_16) in (call 'erlang':'and' (_23,_24)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> call 'dets_utils':'sync' (Head)
<Head,'false'> when try (let <_27> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_25-|['compiler_generated'] )> when 'true' -> (_25-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_28> = call 'erlang':'=:=' ((_27-|['compiler_generated'] ),'true') in let <_29> = call 'erlang':'element' (25,Head) in let <_30> = call 'erlang':'=:=' (_29,'true') in let <_31> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_28,_30) in let <_32> = call 'erlang':'not' (_31) in let <_33> = call 'erlang':'is_boolean' (_29) in let <_34> = call 'erlang':'and' (_32,_33) in let <_35> = call 'erlang':'is_boolean' (_27) in (call 'erlang':'and' (_34,_35)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'ok'
(<_37,_36> when 'true' -> (primop 'match_fail' ({'function_clause',_37,_36})-|[{'function_name',{'ensure_written',2}}] )-|['compiler_generated'] ) end
'do_bchunk_init'/2 = fun (_0,_1) -> let <_2> = catch apply 'write_cache'/1 (_0) in case _2 of <{H2,[]}> when 'true' -> case call 'dets_v9':'table_parameters' (H2) of <'undefined'> when 'true' -> {H2,{'error','old_version'}}
<Parms> when 'true' -> let <L> = call 'dets_utils':'all_allocated' (H2) in let <_4> = case <> of <> when call 'erlang':'=:=' (L,#{}#) -> 'eof'
<> when 'true' -> #{}# end in let <BinParms> = call 'erlang':'term_to_binary' (Parms) in let <_7> = call 'erlang':'self' () in {H2,{{'dets_cont','bchunk','default',_4,L,_1,_7,'undefined'},[BinParms|[]]}} end
<HeadError = {NewHead = {'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40},_41}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'do_bchunk'/2 = fun (_0,_1) -> case <_0,_1> of <Head,{'dets_cont',_14,_15,_16,_17,_18,Proc,_19}> when try let <_2> = call 'erlang':'self' () in call 'erlang':'=/=' (Proc,_2) of <Try> -> Try catch <T,R> -> 'false' -> {Head,'badarg'}
<Head,{'dets_cont',_20,_21,'eof',_22,_23,_24,_25}> when 'true' -> {Head,'$end_of_table'}
<Head,State> when 'true' -> (case State of (<({'dets_cont',_26,_27,_28,_rec37,_29,_30,_31}-|['compiler_generated'] )> when 'true' -> case call 'dets_v9':'read_bchunks' (Head,_rec37) of <{'error',Reason}> when 'true' -> call 'dets_utils':'corrupt_reason' (Head,Reason)
<{'finished',Bins}> when 'true' -> case State of <{'dets_cont',_33,_34,_35,_36,_37,_38,_39}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,State,'eof') in {Head,{_7,Bins}}
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{Bins,NewL}> when 'true' -> case State of <{'dets_cont',_41,_42,_43,_44,_45,_46,_47}> when 'true' -> let <_10> = call 'erlang':'setelement' (5,State,NewL) in {Head,{_10,Bins}}
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'fdelete_all_objects'/1 = fun (_0) -> case _0 of <Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}> when (try let <_5> = call 'erlang':'element' (17,Head) in call 'erlang':'=:=' (_5,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_7> = catch apply 'do_delete_all_objects'/1 (Head) in case _7 of <{'ok',NewHead}> when 'true' -> do apply 'start_auto_save_timer'/1 (NewHead) {NewHead,'ok'}
<{'error',Reason}> when 'true' -> call 'dets_utils':'corrupt_reason' (Head,Reason)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
<Head> when 'true' -> {Head,'fixed'} end
'do_delete_all_objects'/1 = fun (_0) -> case _0 of <{'head',_5,_6,_7,Fd,_8,_9,_10,_11,Type,Kp,_12,_13,_14,Auto,_15,_16,_17,_18,MinSlots,MaxSlots,Cache,Fname,_19,Ram,Tab,_20,_21,_22,_23}> when 'true' -> let <CacheSz> = call 'dets_utils':'cache_size' (Cache) in case call 'dets_utils':'truncate' (Fd,Fname,'bof') of <'ok'> when 'true' -> call 'dets_v9':'initiate_file' (Fd,Tab,Fname,Type,Kp,MinSlots,MaxSlots,Ram,CacheSz,Auto,'true')
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'ffirst'/1 = fun (_0) -> let <Ref> = call 'erlang':'make_ref' () in let <_3> = catch let <_2> = apply 'ffirst1'/1 (_0) in {Ref,_2} in case _3 of <{_6,{NH,R}}> when call 'erlang':'=:=' (_6,Ref) -> {NH,{'ok',R}}
<{NH = {'head',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35},R}> when ('true'-|['compiler_generated'] ) -> {NH,{'error',R}}
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'ffirst1'/1 = fun (_0) -> do apply 'check_safe_fixtable'/1 (_0) case apply 'write_cache'/1 (_0) of <{NH,[]}> when 'true' -> apply 'ffirst'/2 (NH,0)
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'ffirst'/2 = fun (_0,_1) -> case call 'dets_v9':'slot_objs' (_0,_1) of <'$end_of_table'> when 'true' -> {_0,'$end_of_table'}
<[]> when 'true' -> let <_2> = call 'erlang':'+' (_1,1) in apply 'ffirst'/2 (_0,_2)
<[X|_9]> when 'true' -> (case _0 of (<({'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec40,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}-|['compiler_generated'] )> when 'true' -> let <_5> = call 'erlang':'element' (_rec40,X) in {_0,_5}-|['compiler_generated'] )
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'finsert'/2 = fun (_0,_1) -> let <_2> = catch apply 'update_cache'/3 (_0,_1,'insert') in case _2 of <{NewHead,[]}> when 'true' -> {NewHead,'ok'}
<HeadError = {NewHead = {'head',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34},_35}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'finsert_new'/2 = fun (_0,_1) -> (case _0 of (<({'head',_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec41,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> let <_8> = catch let <_7> = fun (_5) -> call 'erlang':'element' (_rec41,_5) in call 'lists':'map' (_7,_1) in case _8 of <Keys> when call 'erlang':'is_list' (_8) -> let <_9> = catch apply 'update_cache'/3 (_0,Keys,{'lookup','nopid'}) in case _9 of <{Head1,PidObjs}> when call 'erlang':'is_list' (PidObjs) -> let <_12> = fun (_10) -> case _10 of <{_X_P,OL}> when 'true' -> call 'erlang':'=:=' (OL,[])
(<_11> when 'true' -> (primop 'match_fail' ({'function_clause',_11})-|[{'function_name',{'-finsert_new/2-fun-1-',1}}] )-|['compiler_generated'] ) end in case call 'lists':'all' (_12,PidObjs) of <'true'> when 'true' -> let <_13> = catch apply 'update_cache'/3 (Head1,_1,'insert') in case _13 of <{NewHead,[]}> when 'true' -> {NewHead,'true'}
<_@r0 = {NewHead = {'head',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77},Error}> when ('true'-|['compiler_generated'] ) -> _@r0
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
<Reply = 'false'> when 'true' -> {Head1,Reply}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<HeadError = {NewHead = {'head',_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106},_107}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
<_108> when 'true' -> {_0,'badarg'} end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'do_safe_fixtable'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,Pid,'true'> when 'true' -> (case Head of (<({'head',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_rec42,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> case _rec42 of <'false'> when 'true' -> do call 'erlang':'link' (Pid) let <MonTime> = call 'erlang':'monotonic_time' () in let <TimeOffset> = call 'erlang':'time_offset' () in let <Fixed> = {{MonTime,TimeOffset},[{Pid,1}|[]]} in let <Ftab> = call 'dets_utils':'get_freelists' (Head) in let <_rec43> = {Ftab,Ftab} in case Head of <{'head',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' -> let <_11> = call 'erlang':'setelement' (17,Head,Fixed) in call 'erlang':'setelement' (12,_11,_rec43)
(<_84> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{TimeStamp,Counters}> when 'true' -> case call 'lists':'keysearch' (Pid,1,Counters) of <{'value',{_85,Counter}}> when call 'erlang':'=:=' (_85,Pid) -> let <_13> = call 'erlang':'+' (Counter,1) in let <NewCounters> = call 'lists':'keyreplace' (Pid,1,Counters,{Pid,_13}) in let <_rec45> = {TimeStamp,NewCounters} in case Head of <{'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114}> when 'true' -> call 'erlang':'setelement' (17,Head,_rec45)
(<_115> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'false'> when 'true' -> do call 'erlang':'link' (Pid) let <Fixed> = {TimeStamp,[{Pid,1}|Counters]} in case Head of <{'head',_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144}> when 'true' -> call 'erlang':'setelement' (17,Head,Fixed)
(<_145> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head,Pid,'false'> when 'true' -> apply 'remove_fix'/3 (Head,Pid,'false')
(<_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_25,_24,_23})-|[{'function_name',{'do_safe_fixtable',3}}] )-|['compiler_generated'] ) end
'remove_fix'/3 = fun (_0,_1,_2) -> (case _0 of (<({'head',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_rec48,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}-|['compiler_generated'] )> when 'true' -> case _rec48 of <'false'> when 'true' -> _0
<{TimeStamp,Counters}> when 'true' -> case call 'lists':'keysearch' (_1,1,Counters) of <{'value',{_54,Counter}}> when let <_55> = call 'erlang':'=:=' (_54,_1) in let <_5> = call 'erlang':'=:=' (Counter,1) in let <_6> = call 'erlang':'=:=' (_2,'close') in let <_56> = call 'erlang':'or' (_5,_6) in call 'erlang':'and' (_55,_56) -> do call 'erlang':'unlink' (_1) case call 'lists':'keydelete' (_1,1,Counters) of <[]> when 'true' -> do apply 'check_growth'/1 (_0) do call 'erlang':'garbage_collect' () let <_rec49> = call 'dets_utils':'get_freelists' (_0) in case _0 of <{'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_9> = call 'erlang':'setelement' (17,_0,'false') in call 'erlang':'setelement' (12,_9,_rec49)
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<NewCounters> when 'true' -> let <_rec51> = {TimeStamp,NewCounters} in case _0 of <{'head',_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115}> when 'true' -> call 'erlang':'setelement' (17,_0,_rec51)
(<_116> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<{'value',{_117,Counter}}> when call 'erlang':'=:=' (_117,_1) -> let <_15> = call 'erlang':'-' (Counter,1) in let <NewCounters> = call 'lists':'keyreplace' (_1,1,Counters,{_1,_15}) in let <_rec53> = {TimeStamp,NewCounters} in case _0 of <{'head',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' -> call 'erlang':'setelement' (17,_0,_rec53)
(<_147> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'false'> when 'true' -> _0
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'do_stop'/1 = fun (_0) -> do apply 'unlink_fixing_procs'/1 (_0) apply 'fclose'/1 (_0)
'unlink_fixing_procs'/1 = fun (_0) -> (case _0 of (<({'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec55,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> case _rec55 of <'false'> when 'true' -> _0
<{_41,Counters}> when 'true' -> let <_5> = fun (_3) -> case _3 of <{Pid,_X_Counter}> when 'true' -> call 'erlang':'unlink' (Pid)
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'-unlink_fixing_procs/1-fun-0-',1}}] )-|['compiler_generated'] ) end in do call 'lists':'foreach' (_5,Counters) let <_rec56> = call 'dets_utils':'get_freelists' (_0) in case _0 of <{'head',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' -> let <_8> = call 'erlang':'setelement' (17,_0,'false') in call 'erlang':'setelement' (12,_8,_rec56)
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'check_growth'/1 = fun (_0) -> case _0 of <{'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,'read',_34,_35,_36,_37,_38,_39}> when 'true' -> 'ok'
<Head> when 'true' -> let <NoThings> = apply 'no_things'/1 (Head) in case <> of <> when (try (let <_4> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_2-|['compiler_generated'] )> when 'true' -> (_2-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_5> = call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true') in let <_6> = call 'erlang':'element' (4,Head) in let <_7> = call 'erlang':'>' (NoThings,_6) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_5,_7)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_9> = call 'erlang':'self' () in let <_8> = call 'erlang':'self' () in do call 'erlang':'send_after' (200,_9,{'$dets_call',_8,'may_grow'}) 'ok'
<> when 'true' -> 'ok' end end
'finfo'/1 = fun (_0) -> let <_1> = catch apply 'write_cache'/1 (_0) in case _1 of <{H2,[]}> when 'true' -> let <_15> = catch (case H2 of (<({'head',_19,_20,_21,_22,_23,_24,_25,_26,_rec58,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}-|['compiler_generated'] )> when 'true' -> (case H2 of (<({'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec59,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}-|['compiler_generated'] )> when 'true' -> (case H2 of (<({'head',_77,_78,_79,_80,_rec60,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}-|['compiler_generated'] )> when 'true' -> (case H2 of (<({'head',_106,_107,_108,_rec61,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}-|['compiler_generated'] )> when 'true' -> (case H2 of (<({'head',_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec62,_156,_157,_158,_159,_160,_161,_162}-|['compiler_generated'] )> when 'true' -> let <_12> = apply 'file_size'/2 (_rec61,_rec62) in (case H2 of (<({'head',_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_rec63,_185,_186,_187,_188,_189,_190,_191}-|['compiler_generated'] )> when 'true' -> [{'type',_rec58}|[{'keypos',_rec59}|[{'size',_rec60}|[{'file_size',_12}|[{'filename',_rec63}|[]]]]]]-|['compiler_generated'] )
(<_192> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_163> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_134> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in {H2,_15}
<HeadError = {H2 = {'head',_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221},_222}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
'finfo'/2 = fun (_0,_1) -> case <_0,_1> of <H,'access'> when 'true' -> (case H of (<({'head',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec64,_77,_78,_79,_80,_81,_82}-|['compiler_generated'] )> when 'true' -> {H,_rec64}-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'auto_save'> when 'true' -> (case H of (<({'head',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec65,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> {H,_rec65}-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'bchunk_format'> when 'true' -> let <_6> = catch apply 'write_cache'/1 (H) in case _6 of <{H2,[]}> when 'true' -> case call 'dets_v9':'table_parameters' (H2) of <Undef = 'undefined'> when 'true' -> {H2,Undef}
<Parms> when 'true' -> let <_7> = call 'erlang':'term_to_binary' (Parms) in {H2,_7} end
<HeadError = {H2 = {'head',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141},_142}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<H,'delayed_write'> when 'true' -> (case H of (<({'head',_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_rec66,_163,_164,_165,_166,_167,_168,_169,_170}-|['compiler_generated'] )> when 'true' -> let <_12> = call 'dets_utils':'cache_size' (_rec66) in {H,_12}-|['compiler_generated'] )
(<_171> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'filename'> when 'true' -> (case H of (<({'head',_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_rec67,_193,_194,_195,_196,_197,_198,_199}-|['compiler_generated'] )> when 'true' -> {H,_rec67}-|['compiler_generated'] )
(<_200> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'file_size'> when 'true' -> let <_15> = catch apply 'write_cache'/1 (H) in case _15 of <{H2,[]}> when 'true' -> let <_20> = catch (case H of (<({'head',_201,_202,_203,_rec68,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228}-|['compiler_generated'] )> when 'true' -> (case H of (<({'head',_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_rec69,_251,_252,_253,_254,_255,_256,_257}-|['compiler_generated'] )> when 'true' -> apply 'file_size'/2 (_rec68,_rec69)-|['compiler_generated'] )
(<_258> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_229> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in {H2,_20}
<HeadError = {H2 = {'head',_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287},_288}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<H,'fixed'> when 'true' -> (case H of (<({'head',_289,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_302,_303,_rec70,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316}-|['compiler_generated'] )> when 'true' -> let <_25> = call 'erlang':'=/=' (_rec70,'false') in {H,_25}-|['compiler_generated'] )
(<_317> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'hash'> when 'true' -> (case H of (<({'head',_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_rec71,_334,_335,_336,_337,_338,_339,_340,_341,_342,_343,_344,_345}-|['compiler_generated'] )> when 'true' -> {H,_rec71}-|['compiler_generated'] )
(<_346> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'keypos'> when 'true' -> (case H of (<({'head',_347,_348,_349,_350,_351,_352,_353,_354,_355,_rec72,_356,_357,_358,_359,_360,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374}-|['compiler_generated'] )> when 'true' -> {H,_rec72}-|['compiler_generated'] )
(<_375> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'memory'> when 'true' -> apply 'finfo'/2 (H,'file_size')
<H,'no_objects'> when 'true' -> apply 'finfo'/2 (H,'size')
<H,'no_keys'> when 'true' -> let <_30> = catch apply 'write_cache'/1 (H) in case _30 of <{H2,[]}> when 'true' -> (case H2 of (<({'head',_376,_377,_378,_379,_380,_rec73,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392,_393,_394,_395,_396,_397,_398,_399,_400,_401,_402,_403}-|['compiler_generated'] )> when 'true' -> {H2,_rec73}-|['compiler_generated'] )
(<_404> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<HeadError = {H2 = {'head',_405,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424,_425,_426,_427,_428,_429,_430,_431,_432,_433},_434}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_33> when 'true' -> primop 'match_fail' ({'case_clause',_33})-|['compiler_generated'] ) end
<H,'no_slots'> when 'true' -> let <_34> = call 'dets_v9':'no_slots' (H) in {H,_34}
<H,'pid'> when 'true' -> let <_35> = call 'erlang':'self' () in {H,_35}
<H,'ram_file'> when 'true' -> (case H of (<({'head',_435,_436,_437,_438,_439,_440,_441,_442,_443,_444,_445,_446,_447,_448,_449,_450,_451,_452,_453,_454,_455,_456,_457,_rec74,_458,_459,_460,_461,_462}-|['compiler_generated'] )> when 'true' -> {H,_rec74}-|['compiler_generated'] )
(<_463> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'safe_fixed'> when 'true' -> (case H of (<({'head',_464,_465,_466,_467,_468,_469,_470,_471,_472,_473,_474,_475,_476,_477,_478,_rec75,_479,_480,_481,_482,_483,_484,_485,_486,_487,_488,_489,_490,_491}-|['compiler_generated'] )> when 'true' -> let <_42> = case _rec75 of <'false'> when 'true' -> 'false'
<{{FixMonTime,TimeOffset},RefList}> when 'true' -> let <_40> = apply 'make_timestamp'/2 (FixMonTime,TimeOffset) in {_40,RefList}
(<_41> when 'true' -> primop 'match_fail' ({'case_clause',_41})-|['compiler_generated'] ) end in {H,_42}-|['compiler_generated'] )
(<_492> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'safe_fixed_monotonic_time'> when 'true' -> (case H of (<({'head',_493,_494,_495,_496,_497,_498,_499,_500,_501,_502,_503,_504,_505,_506,_507,_rec76,_508,_509,_510,_511,_512,_513,_514,_515,_516,_517,_518,_519,_520}-|['compiler_generated'] )> when 'true' -> let <_46> = case _rec76 of <'false'> when 'true' -> 'false'
<{{FixMonTime,_X_TimeOffset},RefList}> when 'true' -> {FixMonTime,RefList}
(<_45> when 'true' -> primop 'match_fail' ({'case_clause',_45})-|['compiler_generated'] ) end in {H,_46}-|['compiler_generated'] )
(<_521> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'size'> when 'true' -> let <_47> = catch apply 'write_cache'/1 (H) in case _47 of <{H2,[]}> when 'true' -> (case H2 of (<({'head',_522,_523,_524,_525,_rec77,_526,_527,_528,_529,_530,_531,_532,_533,_534,_535,_536,_537,_538,_539,_540,_541,_542,_543,_544,_545,_546,_547,_548,_549}-|['compiler_generated'] )> when 'true' -> {H2,_rec77}-|['compiler_generated'] )
(<_550> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<HeadError = {H2 = {'head',_551,_552,_553,_554,_555,_556,_557,_558,_559,_560,_561,_562,_563,_564,_565,_566,_567,_568,_569,_570,_571,_572,_573,_574,_575,_576,_577,_578,_579},_580}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_50> when 'true' -> primop 'match_fail' ({'case_clause',_50})-|['compiler_generated'] ) end
<H,'type'> when 'true' -> (case H of (<({'head',_581,_582,_583,_584,_585,_586,_587,_588,_rec78,_589,_590,_591,_592,_593,_594,_595,_596,_597,_598,_599,_600,_601,_602,_603,_604,_605,_606,_607,_608}-|['compiler_generated'] )> when 'true' -> {H,_rec78}-|['compiler_generated'] )
(<_609> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,'version'> when 'true' -> {H,9}
<H,_610> when 'true' -> {H,'undefined'} end
'file_size'/2 = fun (_0,_1) -> case call 'dets_utils':'position' (_0,_1,'eof') of <{'ok',Pos}> when 'true' -> Pos
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'test_bchunk_format'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Head,'undefined'> when 'true' -> 'false'
<Head,Term> when 'true' -> let <_2> = call 'dets_v9':'try_bchunk_header' (Term,Head) in call 'erlang':'=/=' (_2,'not_ok') end
'do_open_file'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[Fname|[Verbose|[]]],Parent,Server,Ref> when 'true' -> let <_4> = catch apply 'fopen2'/2 (Fname,Ref) in case _4 of <{'error',{'tooshort',_22}}> when 'true' -> apply 'err'/1 ({'error',{'not_a_dets_file',Fname}})
<Error = {'error',_X_Reason}> when 'true' -> apply 'err'/1 (Error)
<{'ok',Head}> when 'true' -> do apply 'maybe_put'/2 ('verbose',Verbose) case Head of <{'head',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' -> let <_6> = call 'erlang':'setelement' (28,Head,Server) in let <_8> = call 'erlang':'setelement' (27,_6,Parent) in {'ok',_8}
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error = {'EXIT',_X_Reason}> when 'true' -> Error
<Bad> when 'true' -> do call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[111|[112|[101|[110|[95|[102|[105|[108|[101|[47|[49|[44|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Bad|[]]) {'error',{'dets_bug',Fname,Bad}} end
<[Tab|[OpenArgs|[Verb|[]]]],Parent,Server,_X_Ref> when 'true' -> let <_10> = catch apply 'fopen3'/2 (Tab,OpenArgs) in case _10 of <{'error',{'tooshort',_53}}> when 'true' -> (case OpenArgs of (<({'open_args',_rec80,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}-|['compiler_generated'] )> when 'true' -> apply 'err'/1 ({'error',{'not_a_dets_file',_rec80}})-|['compiler_generated'] )
(<_64> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error = {'error',_X_Reason}> when 'true' -> apply 'err'/1 (Error)
<{'ok',Head}> when 'true' -> do apply 'maybe_put'/2 ('verbose',Verb) case Head of <{'head',_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_14> = call 'erlang':'setelement' (28,Head,Server) in let <_16> = call 'erlang':'setelement' (27,_14,Parent) in {'ok',_16}
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error = {'EXIT',_X_Reason}> when 'true' -> Error
<Bad> when 'true' -> do call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[66|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[111|[112|[101|[110|[95|[102|[105|[108|[101|[47|[50|[44|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[119|[101|[114|[101|[126|[110|[42|[42|[32|[100|[101|[116|[115|[58|[32|[126|[116|[119|[32|[97|[110|[100|[32|[114|[101|[112|[108|[121|[32|[119|[97|[115|[32|[126|[116|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[OpenArgs|[Bad|[]]]) {'error',{'dets_bug',Tab,{'open_file',OpenArgs},Bad}} end
(<_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20,_19,_18})-|[{'function_name',{'do_open_file',4}}] )-|['compiler_generated'] ) end
'maybe_put'/2 = fun (_0,_1) -> case <_0,_1> of <_4,'undefined'> when 'true' -> 'ignore'
<K,V> when 'true' -> call 'erlang':'put' (K,V) end
'finit'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Head = {'head',_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58},InitFun,_X_Format,_X_NoSlots> when (try let <_8> = call 'erlang':'element' (24,Head) in call 'erlang':'=:=' (_8,'read') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do try apply InitFun (('close'-|['result_not_wanted'] )) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' (case Head of (<({'head',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_rec82,_80,_81,_82,_83,_84,_85,_86}-|['compiler_generated'] )> when 'true' -> {Head,{'error',{'access_mode',_rec82}}}-|['compiler_generated'] )
(<_87> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head = {'head',_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116},InitFun,_X_Format,_X_NoSlots> when (try let <_18> = call 'erlang':'element' (17,Head) in call 'erlang':'=/=' (_18,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do try apply InitFun (('close'-|['result_not_wanted'] )) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' (case Head of (<({'head',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_rec83,_141,_142,_143,_144}-|['compiler_generated'] )> when 'true' -> {Head,{'error',{'fixed_table',_rec83}}}-|['compiler_generated'] )
(<_145> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head,InitFun,Format,NoSlots> when 'true' -> let <_24> = catch apply 'do_finit'/4 (Head,InitFun,Format,NoSlots) in case _24 of <{'ok',NewHead}> when 'true' -> do apply 'check_growth'/1 (NewHead) do apply 'start_auto_save_timer'/1 (NewHead) {NewHead,'ok'}
<'badarg'> when 'true' -> {Head,'badarg'}
<Error> when 'true' -> call 'dets_utils':'corrupt' (Head,Error) end end
'do_finit'/4 = fun (_0,_1,_2,_3) -> case _0 of <{'head',_34,_35,_36,Fd,_37,_38,_39,_40,Type,Kp,_41,_42,_43,Auto,UpdateMode,_44,_45,_46,MinSlots0,MaxSlots,Cache,Fname,_47,Ram,Tab,_48,_49,_50,_51}> when 'true' -> let <CacheSz> = call 'dets_utils':'cache_size' (Cache) in let <_111,_112> = case _2 of <'term'> when let <_6> = call 'erlang':'is_integer' (_3) in let <_7> = call 'erlang':'>' (_3,MaxSlots) in call 'erlang':'and' (_6,_7) -> call 'erlang':'throw' ('badarg')
<'term'> when 'true' -> let <MinSlots> = apply 'choose_no_slots'/2 (_3,MinSlots0) in case <> of <> when let <_9> = call 'erlang':'=:=' (UpdateMode,'new_dirty') in let <_10> = call 'erlang':'=:=' (MinSlots,MinSlots0) in call 'erlang':'and' (_9,_10) -> <'general_init',_0>
<> when 'true' -> case call 'dets_utils':'truncate' (Fd,Fname,'bof') of <'ok'> when 'true' -> case call 'dets_v9':'initiate_file' (Fd,Tab,Fname,Type,Kp,MinSlots,MaxSlots,Ram,CacheSz,Auto,'false') of <{'ok',H}> when 'true' -> <'general_init',H>
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
<'bchunk'> when 'true' -> case call 'dets_utils':'truncate' (Fd,Fname,'bof') of <'ok'> when 'true' -> <'bchunk_init',_0>
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end in case (_111-|['compiler_generated'] ) of <'bchunk_init'> when 'true' -> case call 'dets_v9':'bchunk_init' ((_112-|['compiler_generated'] ),_1) of <{'ok',NewHead}> when 'true' -> case NewHead of <{'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}> when 'true' -> let <_19> = call 'erlang':'setelement' (16,NewHead,'dirty') in {'ok',_19}
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> Error end
<'general_init'> when 'true' -> let <Cntrs> = call 'ets':'new' ('dets_init',[]) in let <Input> = call 'dets_v9':'bulk_input' ((_112-|['compiler_generated'] ),_1,Cntrs) in (case (_112-|['compiler_generated'] ) of (<({'head',_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec85,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}-|['compiler_generated'] )> when 'true' -> let <SlotNumbers> = {_rec85,'bulk_init',MaxSlots} in case apply 'do_sort'/5 ((_112-|['compiler_generated'] ),SlotNumbers,Input,Cntrs,Fname) of <{Reply,SizeData}> when 'true' -> case Reply of <{'ok',NoDups,H1}> when 'true' -> apply 'fsck_copy'/4 (SizeData,H1,'true',NoDups)
<Else> when 'true' -> do apply 'close_files'/3 ('true',SizeData,(_112-|['compiler_generated'] )) Else end
(<_26> when 'true' -> primop 'match_fail' ({'badmatch',_26})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'flookup_keys'/2 = fun (_0,_1) -> let <_2> = catch apply 'update_cache'/3 (_0,_1,{'lookup','nopid'}) in case _2 of <{NewHead,[{_X_NoPid,Objs}|[]]}> when 'true' -> {NewHead,Objs}
<{NewHead,L}> when call 'erlang':'is_list' (L) -> let <_5> = fun (_3) -> case _3 of <{_X_Pid,OL}> when 'true' -> OL
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'-flookup_keys/2-fun-0-',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'flatmap' (_5,L) in {NewHead,_6}
<HeadError = {NewHead = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38},_39}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'fmatch_init'/2 = fun (_0,_1) -> case <_0,_1> of <Head,{'dets_cont',_5,_6,'eof',_7,_8,_9,_10}> when 'true' -> {Head,'$end_of_table'}
<Head,C> when 'true' -> case apply 'scan'/2 (Head,C) of <{'scan_error',Reason}> when 'true' -> call 'dets_utils':'corrupt_reason' (Head,Reason)
<_@r0 = {Ts,NC}> when 'true' -> {Head,{'cont',_@r0}}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end end
'fmatch'/6 = fun (_0,_1,_2,_3,_4,_5) -> (case _0 of (<({'head',_30,_31,_32,_33,_34,_35,_36,_37,_38,_rec86,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> case apply 'find_all_keys'/3 (_2,_rec86,[]) of <[]> when 'true' -> let <_9> = catch apply 'write_cache'/1 (_0) in case _9 of <{Head1,[]}> when 'true' -> let <_11> = case _4 of <'safe'> when 'true' -> apply 'do_safe_fixtable'/3 (Head1,_5,'true')
<'no_safe'> when 'true' -> Head1
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end in let <C0> = apply 'init_scan'/2 (_11,_3) in case C0 of <{'dets_cont',_59,_60,_61,_62,_63,_64,_65}> when 'true' -> let <_16> = call 'erlang':'setelement' (8,C0,_1) in {_11,{'cont',_16}}
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<HeadError = {NewHead = {'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95},_96}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
<List> when 'true' -> let <Keys> = call 'lists':'usort' (List) in case apply 'flookup_keys'/2 (_0,Keys) of <{NewHead,Reply}> when 'true' -> case Reply of <Objs> when call 'erlang':'is_list' (Reply) -> case _1 of <{'match_spec',MS}> when 'true' -> let <MatchingObjs> = call 'ets':'match_spec_run' (Objs,MS) in {NewHead,{'done',MatchingObjs}}
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
<Error> when 'true' -> {NewHead,Error} end
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'find_all_keys'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_9,Ks> when 'true' -> Ks
<[{H,_10,_11}|T],KeyPos,Ks> when call 'erlang':'is_tuple' (H) -> case call 'erlang':'tuple_size' (H) of <Enough> when call 'erlang':'>=' (Enough,KeyPos) -> let <Key> = call 'erlang':'element' (KeyPos,H) in case apply 'contains_variable'/1 (Key) of <'true'> when 'true' -> []
<'false'> when 'true' -> apply 'find_all_keys'/3 (T,KeyPos,[Key|Ks])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<_12> when 'true' -> apply 'find_all_keys'/3 (T,KeyPos,Ks) end
<_13,_14,_15> when 'true' -> [] end
'contains_variable'/1 = fun (_0) -> case _0 of <'_'> when 'true' -> 'true'
<A> when call 'erlang':'is_atom' (_0) -> case call 'erlang':'atom_to_list' (A) of <[36|T]> when 'true' -> let <_1> = catch call 'erlang':'list_to_integer' (T) in case _1 of <{'EXIT',_7}> when 'true' -> 'false'
<_8> when 'true' -> 'true' end
<_9> when 'true' -> 'false' end
<T> when call 'erlang':'is_tuple' (_0) -> let <_4> = call 'erlang':'tuple_to_list' (T) in apply 'contains_variable'/1 (_4)
<[]> when 'true' -> 'false'
<[H|T]> when 'true' -> case apply 'contains_variable'/1 (H) of <'true'> when 'true' -> 'true'
<'false'> when 'true' -> apply 'contains_variable'/1 (T)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<_10> when 'true' -> 'false' end
'fmatch_delete_init'/4 = fun (_0,_1,_2,_3) -> (case _0 of (<({'head',_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec88,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}-|['compiler_generated'] )> when 'true' -> let <_9> = catch case apply 'find_all_keys'/3 (_2,_rec88,[]) of <[]> when 'true' -> apply 'do_fmatch_delete_var_keys'/4 (_0,_1,_2,_3)
<List> when 'true' -> let <Keys> = call 'lists':'usort' (List) in apply 'do_fmatch_constant_keys'/3 (_0,Keys,_1) end in case _9 of <Reply = {NewHead = {'head',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72},_73}> when ('true'-|['compiler_generated'] ) -> Reply
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_43> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fmatch_delete'/2 = fun (_0,_1) -> case apply 'scan'/2 (_0,_1) of <{'scan_error',Reason}> when 'true' -> call 'dets_utils':'corrupt_reason' (_0,Reason)
<{[],_11}> when 'true' -> {_0,{'done',0}}
<{RTs,NC}> when 'true' -> (case _1 of (<({'dets_cont',_12,_13,_14,_15,_16,_17,_rec89}-|['compiler_generated'] )> when 'true' -> case _rec89 of <{'match_spec',MP}> when 'true' -> let <_5> = catch apply 'filter_binary_terms'/3 (RTs,MP,[]) in case _5 of <{'EXIT',_19}> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('fmatch_delete',RTs) in call 'dets_utils':'corrupt_reason' (_0,Bad)
<Terms> when 'true' -> apply 'do_fmatch_delete'/3 (_0,Terms,NC) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'do_fmatch_delete_var_keys'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Head = {'head',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53},_X_MP,[{'_',[],['true']}],_X_From> when (try let <_8> = call 'erlang':'element' (17,Head) in call 'erlang':'=:=' (_8,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'write_cache'/1 (Head) of <{Head1,[]}> when 'true' -> (case Head1 of (<({'head',_54,_55,_56,_57,_rec90,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}-|['compiler_generated'] )> when 'true' -> case apply 'fdelete_all_objects'/1 (Head1) of <{NewHead,'ok'}> when 'true' -> {NewHead,{'done',_rec90}}
<Reply> when 'true' -> Reply end-|['compiler_generated'] )
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<Head,MP,_X_Spec,From> when 'true' -> let <Head1> = apply 'do_safe_fixtable'/3 (Head,From,'true') in case apply 'write_cache'/1 (Head1) of <{NewHead,[]}> when 'true' -> let <C0> = apply 'init_scan'/2 (NewHead,'default') in case C0 of <{'dets_cont',_83,_84,_85,_86,_87,_88,_89}> when 'true' -> let <_20> = call 'erlang':'setelement' (8,C0,MP) in {NewHead,{'cont',_20,0}}
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end end
'do_fmatch_constant_keys'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,Keys,{'match_spec',MP}> when 'true' -> case apply 'flookup_keys'/2 (Head,Keys) of <{NewHead,ReadTerms}> when call 'erlang':'is_list' (ReadTerms) -> let <Terms> = apply 'filter_terms'/3 (ReadTerms,MP,[]) in apply 'do_fmatch_delete'/3 (NewHead,Terms,'fixed')
<Reply> when 'true' -> Reply end
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'do_fmatch_constant_keys',3}}] )-|['compiler_generated'] ) end
'filter_binary_terms'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[Bin|Bins],MP,L> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (Bin) in case call 'ets':'match_spec_run' ([Term|[]],MP) of <['true']> when 'true' -> apply 'filter_binary_terms'/3 (Bins,MP,[Term|L])
<_8> when 'true' -> apply 'filter_binary_terms'/3 (Bins,MP,L) end
<[],_X_MP,L> when 'true' -> L
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'filter_binary_terms',3}}] )-|['compiler_generated'] ) end
'filter_terms'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[Term|Terms],MP,L> when 'true' -> case call 'ets':'match_spec_run' ([Term|[]],MP) of <['true']> when 'true' -> apply 'filter_terms'/3 (Terms,MP,[Term|L])
<_7> when 'true' -> apply 'filter_terms'/3 (Terms,MP,L) end
<[],_X_MP,L> when 'true' -> L
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'filter_terms',3}}] )-|['compiler_generated'] ) end
'do_fmatch_delete'/3 = fun (_0,_1,_2) -> let <N> = call 'erlang':'length' (_1) in case apply 'do_delete'/3 (_0,_1,'delete_object') of <{NewHead,'ok'}> when call 'erlang':'=:=' (_2,'fixed') -> {NewHead,{'done',N}}
<{NewHead,'ok'}> when 'true' -> {NewHead,{'cont',_2,N}}
<Reply> when 'true' -> Reply end
'do_delete'/3 = fun (_0,_1,_2) -> let <_3> = catch apply 'update_cache'/3 (_0,_1,_2) in case _3 of <{NewHead,[]}> when 'true' -> {NewHead,'ok'}
<HeadError = {NewHead = {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36},_37}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'fnext'/2 = fun (_0,_1) -> let <Slot> = call 'dets_v9':'db_hash' (_1,_0) in let <Ref> = call 'erlang':'make_ref' () in let <_5> = catch let <_4> = apply 'fnext'/3 (_0,_1,Slot) in {Ref,_4} in case _5 of <{_9,{H,R}}> when call 'erlang':'=:=' (_9,Ref) -> {H,{'ok',R}}
<HeadError = {NewHead = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38},_39}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'fnext'/3 = fun (_0,_1,_2) -> case apply 'write_cache'/1 (_0) of <{NH,[]}> when 'true' -> case call 'dets_v9':'slot_objs' (NH,_2) of <'$end_of_table'> when 'true' -> {NH,'$end_of_table'}
<L> when 'true' -> apply 'fnext_search'/4 (NH,_1,_2,L) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'fnext_search'/4 = fun (_0,_1,_2,_3) -> (case _0 of (<({'head',_17,_18,_19,_20,_21,_22,_23,_24,_25,_rec92,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> case apply 'beyond_key'/3 (_1,_rec92,_3) of <[]> when 'true' -> let <_7> = call 'erlang':'+' (_2,1) in apply 'fnext_slot'/3 (_0,_1,_7)
<L2> when 'true' -> (case _0 of (<({'head',_46,_47,_48,_49,_50,_51,_52,_53,_54,_rec93,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}-|['compiler_generated'] )> when 'true' -> let <_8> = call 'erlang':'hd' (L2) in let <_11> = call 'erlang':'element' (_rec93,_8) in {_0,_11}-|['compiler_generated'] )
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fnext_slot'/3 = fun (_0,_1,_2) -> case call 'dets_v9':'slot_objs' (_0,_2) of <'$end_of_table'> when 'true' -> {_0,'$end_of_table'}
<[]> when 'true' -> let <_3> = call 'erlang':'+' (_2,1) in apply 'fnext_slot'/3 (_0,_1,_3)
<L> when 'true' -> (case _0 of (<({'head',_12,_13,_14,_15,_16,_17,_18,_19,_20,_rec94,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> let <_4> = call 'erlang':'hd' (L) in let <_7> = call 'erlang':'element' (_rec94,_4) in {_0,_7}-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'beyond_key'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_K,_X_Kp,[]> when 'true' -> []
<K,Kp,[H|T]> when 'true' -> let <_3> = call 'erlang':'element' (Kp,H) in case call 'dets_utils':'cmp' (_3,K) of <0> when 'true' -> apply 'beyond_key2'/3 (K,Kp,T)
<_8> when 'true' -> apply 'beyond_key'/3 (K,Kp,T) end
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'beyond_key',3}}] )-|['compiler_generated'] ) end
'beyond_key2'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_K,_X_Kp,[]> when 'true' -> []
<K,Kp,L = [H|T]> when 'true' -> let <_3> = call 'erlang':'element' (Kp,H) in case call 'dets_utils':'cmp' (_3,K) of <0> when 'true' -> apply 'beyond_key2'/3 (K,Kp,T)
<_8> when 'true' -> L end
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'beyond_key2',3}}] )-|['compiler_generated'] ) end
'fopen2'/2 = fun (_0,_1) -> case call 'file':'read_file_info' (_0) of <{'ok',_23}> when 'true' -> case apply 'read_file_header'/3 (_0,'read_write','false') of <{'ok',Fd,FH}> when 'true' -> let <_16> = case call 'dets_v9':'check_file_header' (FH,Fd) of <{'ok',Head1}> when 'true' -> case Head1 of <{'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' -> let <_7> = call 'erlang':'setelement' (23,Head1,_0) in try let <_9> = call 'dets_v9':'init_freelist' (_7) in {'ok',_9} of <_10> -> _10 catch <_13,_12,_11> -> case <_13,_12,_11> of <('throw'-|['compiler_generated'] ),_54,_55> when 'true' -> {'repair',[32|[104|[97|[115|[32|[98|[97|[100|[32|[102|[114|[101|[101|[32|[108|[105|[115|[116|[115|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
(<_56,_57,_58> when 'true' -> primop 'raise' (_58,_57)-|['compiler_generated'] ) end
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error','not_closed'}> when 'true' -> {'repair',[32|[110|[111|[116|[32|[112|[114|[111|[112|[101|[114|[108|[121|[32|[99|[108|[111|[115|[101|[100|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
<Else> when 'true' -> Else end in case _16 of <{'repair',Mess}> when 'true' -> do call 'io':'format' ('user',[100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[115|[126|[110]]]]]]]]]]]]]]]]]],[_0|[Mess|[]]]) case apply 'fsck'/6 (Fd,_1,_0,FH,'default','default') of <'ok'> when 'true' -> apply 'fopen2'/2 (_0,_1)
<Error> when 'true' -> call 'erlang':'throw' (Error) end
<{'ok',Head}> when 'true' -> apply 'open_final'/7 (Head,_0,'read_write','false',{3000,14000},_1,'false')
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'error',{Reason,_0}})
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<Error> when 'true' -> call 'dets_utils':'file_error' (_0,Error) end
'fopen3'/2 = fun (_0,_1) -> (case _1 of (<({'open_args',_rec96,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> case call 'file':'read_file_info' (_rec96) of <{'ok',_25}> when 'true' -> apply 'fopen_existing_file'/2 (_0,_1)
<Error> when (try (let <_7> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_1,('open_args'-|['compiler_generated'] ),(12-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_5-|['compiler_generated'] )> when 'true' -> (_5-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_8> = call 'erlang':'=:=' ((_7-|['compiler_generated'] ),'true') in let <_9> = call 'erlang':'element' (11,_1) in let <_10> = call 'erlang':'=:=' (_9,'read') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_10)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'dets_utils':'file_error' (_rec96,Error)
<_X_Error> when 'true' -> apply 'fopen_init_file'/2 (_0,_1) end-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fopen_existing_file'/2 = fun (_0,_1) -> case _1 of <{'open_args',Fname,Type,Kp,Rep,MinSlots,MaxSlots,Ram,CacheSz,Auto,Acc,Debug}> when 'true' -> case apply 'read_file_header'/3 (Fname,Acc,Ram) of <{'ok',Fd,FH}> when 'true' -> let <_7> = call 'erlang':'=:=' (MinSlots,'default') in (case FH of (<({'fileheader',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec97,_92,_93,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> let <_6> = call 'erlang':'=:=' (MinSlots,_rec97) in let <MinF> = call 'erlang':'or' (_7,_6) in let <_12> = call 'erlang':'=:=' (MaxSlots,'default') in (case FH of (<({'fileheader',_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_rec98,_114,_115,_116,_117,_118,_119,_120,_121}-|['compiler_generated'] )> when 'true' -> let <_11> = call 'erlang':'=:=' (MaxSlots,_rec98) in let <MaxF> = call 'erlang':'or' (_12,_11) in let <_38> = case call 'dets_v9':'check_file_header' (FH,Fd) of <{'ok',Head}> when try let <_14> = call 'erlang':'=:=' (Rep,'force') in let <_15> = call 'erlang':'=:=' (Acc,'read_write') in (let <_18> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (FH,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_16-|['compiler_generated'] )> when 'true' -> (_16-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_19> = call 'erlang':'=:=' ((_18-|['compiler_generated'] ),'true') in let <_20> = call 'erlang':'element' (15,FH) in let <_21> = call 'erlang':'=/=' (_20,'undefined') in let <_22> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_19,_21) in let <_25> = call 'erlang':'and' (MinF,MaxF) in let <_26> = call 'erlang':'and' (_22,_25) in let <_27> = call 'erlang':'and' (_15,_26) in call 'erlang':'and' (_14,_27)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> {'compact',Head}
<{'ok',_X_Head}> when let <_28> = call 'erlang':'=:=' (Rep,'force') in let <_29> = call 'erlang':'=:=' (Acc,'read') in call 'erlang':'and' (_28,_29) -> call 'erlang':'throw' ({'error',{'access_mode',Fname}})
<{'ok',_X_Head}> when call 'erlang':'=:=' (Rep,'force') -> {'repair',[44|[32|[114|[101|[112|[97|[105|[114|[32|[102|[111|[114|[99|[101|[100|[46]]]]]]]]]]]]]]]]}
<{'ok',Head}> when 'true' -> {'final',Head}
<{'error','not_closed'}> when let <_31> = call 'erlang':'=:=' (Rep,'force') in let <_32> = call 'erlang':'=:=' (Acc,'read_write') in call 'erlang':'and' (_31,_32) -> {'repair',[44|[32|[114|[101|[112|[97|[105|[114|[32|[102|[111|[114|[99|[101|[100|[46]]]]]]]]]]]]]]]]}
<{'error','not_closed'}> when let <_34> = call 'erlang':'=:=' (Rep,'true') in let <_35> = call 'erlang':'=:=' (Acc,'read_write') in call 'erlang':'and' (_34,_35) -> {'repair',[32|[110|[111|[116|[32|[112|[114|[111|[112|[101|[114|[108|[121|[32|[99|[108|[111|[115|[101|[100|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
<{'error','not_closed'}> when call 'erlang':'=:=' (Rep,'false') -> call 'erlang':'throw' ({'error',{'needs_repair',Fname}})
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'error',{Reason,Fname}})
(<_37> when 'true' -> primop 'match_fail' ({'case_clause',_37})-|['compiler_generated'] ) end in let <_52> = case _38 of <{Tag,Hd}> when let <_40> = call 'erlang':'=:=' (Tag,'final') in let <_41> = call 'erlang':'=:=' (Tag,'compact') in call 'erlang':'or' (_40,_41) -> case Hd of <{'head',_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' -> let <_44> = call 'erlang':'setelement' (23,Hd,Fname) in try let <_46> = call 'dets_v9':'init_freelist' (_44) in {Tag,_46} of <_47> -> _47 catch <_50,_49,_48> -> case <_50,_49,_48> of <('throw'-|['compiler_generated'] ),_153,_154> when 'true' -> {'repair',[32|[104|[97|[115|[32|[98|[97|[100|[32|[102|[114|[101|[101|[32|[108|[105|[115|[116|[115|[44|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
(<_199,_200,_201> when 'true' -> primop 'raise' (_201,_200)-|['compiler_generated'] ) end
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Else> when 'true' -> Else end in case _52 of <_155> when (try (let <_56> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (FH,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_54-|['compiler_generated'] )> when 'true' -> (_54-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_57> = call 'erlang':'=:=' ((_56-|['compiler_generated'] ),'true') in let <_58> = call 'erlang':'element' (6,FH) in let <_59> = call 'erlang':'=/=' (_58,Type) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_57,_59)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'throw' ({'error',{'type_mismatch',Fname}})
<_156> when (try (let <_62> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (FH,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_60-|['compiler_generated'] )> when 'true' -> (_60-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_63> = call 'erlang':'=:=' ((_62-|['compiler_generated'] ),'true') in let <_64> = call 'erlang':'element' (10,FH) in let <_65> = call 'erlang':'=/=' (_64,Kp) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_63,_65)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'throw' ({'error',{'keypos_mismatch',Fname}})
<{'compact',SourceHead}> when 'true' -> do call 'io':'format' ('user',[100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[105|[115|[32|[110|[111|[119|[32|[99|[111|[109|[112|[97|[99|[116|[101|[100|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Fname|[]]) case apply 'open_final'/7 (SourceHead,Fname,'read','false',{3000,14000},_0,Debug) of <{'ok',NewSourceHead}> when 'true' -> let <_67> = catch apply 'compact'/1 (NewSourceHead) in case _67 of <'ok'> when 'true' -> do call 'erlang':'garbage_collect' () case _1 of <{'open_args',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' -> let <_70> = call 'erlang':'setelement' (5,_1,'false') in apply 'fopen3'/2 (_0,_70)
(<_168> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_X_Err> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) do call 'dets_utils':'stop_disk_map' () do call 'io':'format' ('user',[100|[101|[116|[115|[58|[32|[99|[111|[109|[112|[97|[99|[116|[105|[111|[110|[32|[111|[102|[32|[102|[105|[108|[101|[32|[126|[116|[112|[32|[102|[97|[105|[108|[101|[100|[44|[32|[110|[111|[119|[32|[114|[101|[112|[97|[105|[114|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Fname|[]]) case apply 'read_file_header'/3 (Fname,Acc,Ram) of <{'ok',Fd2,_X_FH}> when 'true' -> apply 'do_repair'/7 (Fd2,_0,Fname,FH,MinSlots,MaxSlots,_1)
(<_72> when 'true' -> primop 'match_fail' ({'badmatch',_72})-|['compiler_generated'] ) end end
(<_66> when 'true' -> primop 'match_fail' ({'badmatch',_66})-|['compiler_generated'] ) end
<{'repair',Mess}> when 'true' -> do call 'io':'format' ('user',[100|[101|[116|[115|[58|[32|[102|[105|[108|[101|[32|[126|[116|[112|[126|[115|[126|[110]]]]]]]]]]]]]]]]]],[Fname|[Mess|[]]]) apply 'do_repair'/7 (Fd,_0,Fname,FH,MinSlots,MaxSlots,_1)
<{'final',H}> when 'true' -> case H of <{'head',_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197}> when 'true' -> let <_76> = call 'erlang':'setelement' (15,H,Auto) in apply 'open_final'/7 (_76,Fname,Acc,Ram,CacheSz,_0,Debug)
(<_198> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_78> when 'true' -> primop 'match_fail' ({'case_clause',_78})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_122> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'do_repair'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'fsck'/6 (_0,_1,_2,_3,_4,_5) of <'ok'> when 'true' -> do call 'erlang':'garbage_collect' () case _6 of <{'open_args',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}> when 'true' -> let <_9> = call 'erlang':'setelement' (5,_6,'false') in apply 'fopen3'/2 (_1,_9)
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','open_args'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> call 'erlang':'throw' (Error) end
'open_final'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <_rec103> = call 'dets_utils':'new_cache' (_4) in case _0 of <{'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55}> when 'true' -> let <_9> = call 'erlang':'setelement' (26,_0,_5) in let <_10> = call 'erlang':'setelement' (25,_9,_3) in let <_11> = call 'erlang':'setelement' (24,_10,_2) in let <_12> = call 'erlang':'setelement' (23,_11,_1) in let <_14> = call 'erlang':'setelement' (22,_12,_rec103) in do apply 'init_disk_map'/2 (_5,_6) (case _14 of (<({'head',_57,_58,_59,_rec105,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}-|['compiler_generated'] )> when 'true' -> (case _14 of (<({'head',_86,_87,_rec106,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113}-|['compiler_generated'] )> when 'true' -> do call 'dets_v9':'cache_segps' (_rec105,_1,_rec106) do apply 'check_growth'/1 (_14) {'ok',_14}-|['compiler_generated'] )
(<_114> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_56> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
'fopen_init_file'/2 = fun (_0,_1) -> case _1 of <{'open_args',Fname,Type,Kp,_21,MinSlotsArg,MaxSlotsArg,Ram,CacheSz,Auto,_22,Debug}> when 'true' -> let <MinSlots> = apply 'choose_no_slots'/2 (MinSlotsArg,256) in let <MaxSlots> = apply 'choose_no_slots'/2 (MaxSlotsArg,33554432) in let <_7> = case <> of <> when (call 'erlang':'=:=' (Ram,'true')-|['compiler_generated'] ) -> []
<> when 'true' -> Fname end in let <_9> = apply 'open_args'/2 ('read_write',Ram) in case call 'dets_utils':'open' (_7,_9) of <{'ok',Fd}> when 'true' -> do apply 'init_disk_map'/2 (_0,Debug) let <_11> = catch call 'dets_v9':'initiate_file' (Fd,_0,Fname,Type,Kp,MinSlots,MaxSlots,Ram,CacheSz,Auto,'true') in case _11 of <_@r0 = {'error',Reason}> when (call 'erlang':'=:=' (Ram,'true')-|['compiler_generated'] ) -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) call 'erlang':'throw' (_@r0)
<_@r1 = {'error',Reason}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Fname)-|['result_not_wanted'] ) call 'erlang':'throw' (_@r1)
<{'ok',Head}> when 'true' -> do apply 'start_auto_save_timer'/1 (Head) case Head of <{'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' -> let <_17> = call 'erlang':'setelement' (16,Head,'new_dirty') in {'ok',_17}
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'init_disk_map'/2 = fun (_0,_1) -> let <_4> = case _1 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'dets_utils':'debug_mode' ()-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _4 of <'true'> when 'true' -> call 'dets_utils':'init_disk_map' (_0)
<'false'> when 'true' -> 'ok'
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'open_args'/2 = fun (_0,_1) -> let <_3> = case _0 of <'read'> when 'true' -> []
<'read_write'> when 'true' -> ['write']
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end in let <_6> = case _1 of <'true'> when 'true' -> ['ram']
<'false'> when 'true' -> ['raw']
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in let <_8> = call 'erlang':'++' (_6,['binary'|['read']]) in call 'erlang':'++' (_3,_8)
'compact'/1 = fun (_0) -> case _0 of <{'head',_22,_23,_24,SFd,_25,_26,_27,_28,Type,Kp,_29,_30,_31,Auto,_32,_33,_34,_35,_36,_37,_38,Fname,_39,Ram,Tab,_40,_41,_42,_43}> when 'true' -> let <Tmp> = apply 'tempfile'/1 (Fname) in let <TblParms> = call 'dets_v9':'table_parameters' (_0) in let <_4> = apply 'open_args'/2 ('read_write','false') in case call 'dets_utils':'open' (Tmp,_4) of <{'ok',Fd}> when 'true' -> let <_7> = catch call 'dets_v9':'prep_table_copy' (Fd,Tab,Tmp,Type,Kp,Ram,{3000,14000},Auto,TblParms) in let <_11> = case _7 of <{'ok',H}> when 'true' -> H
<Error> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tmp)-|['result_not_wanted'] ) call 'erlang':'throw' (Error) end in case call 'dets_v9':'compact_init' (_0,_11,TblParms) of <{'ok',NewHead}> when 'true' -> let <_15> = case apply 'fclose'/1 (NewHead) of <'ok'> when 'true' -> case call 'file':'close' (SFd) of <'ok'> when 'true' -> call 'dets_utils':'rename' (Tmp,Fname)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<E> when 'true' -> E end in case <> of <> when call 'erlang':'=:=' (_15,'ok') -> 'ok'
<> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tmp)-|['result_not_wanted'] ) call 'erlang':'throw' (_15) end
<Err> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tmp)-|['result_not_wanted'] ) call 'erlang':'throw' (Err) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'fsck'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _3 of <{'fileheader',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,MinSlotsFile,MaxSlotsFile,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> let <EstNoSlots0> = apply 'file_no_things'/1 (_3) in let <MinSlots> = apply 'choose_no_slots'/2 (_4,MinSlotsFile) in let <MaxSlots> = apply 'choose_no_slots'/2 (_5,MaxSlotsFile) in let <_10> = call 'erlang':'max' (MinSlots,EstNoSlots0) in let <EstNoSlots> = call 'erlang':'min' (MaxSlots,_10) in let <SlotNumbers> = {MinSlots,EstNoSlots,MaxSlots} in case apply 'fsck_try'/5 (_0,_1,_3,_2,SlotNumbers) of <{'try_again',BetterNoSlots}> when 'true' -> let <BetterSlotNumbers> = {MinSlots,BetterNoSlots,MaxSlots} in case apply 'fsck_try'/5 (_0,_1,_3,_2,BetterSlotNumbers) of <{'try_again',_42}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_0)-|['result_not_wanted'] ) {'error',{'cannot_repair',_2}}
<Else> when 'true' -> Else end
<Else> when 'true' -> Else end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'choose_no_slots'/2 = fun (_0,_1) -> case <_0,_1> of <'default',NoSlots> when 'true' -> NoSlots
<NoSlots,_4> when 'true' -> NoSlots end
'fsck_try'/5 = fun (_0,_1,_2,_3,_4) -> let <Tmp> = apply 'tempfile'/1 (_3) in case _2 of <{'fileheader',_23,_24,_25,_26,Type,_27,_28,_29,KeyPos,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> case _4 of <{_X_MinSlots,EstNoSlots,MaxSlots}> when 'true' -> let <OpenArgs> = {'open_args',Tmp,Type,KeyPos,'false',EstNoSlots,MaxSlots,'false',{3000,14000},'infinity','read_write','false'} in let <_9> = catch apply 'fopen3'/2 (_1,OpenArgs) in case _9 of <{'ok',Head}> when 'true' -> case apply 'fsck_try_est'/5 (Head,_0,_3,_4,_2) of <{'ok',NewHead}> when 'true' -> let <_11> = case apply 'fclose'/1 (NewHead) of <'ok'> when 'true' -> call 'dets_utils':'rename' (Tmp,_3)
<Error> when 'true' -> Error end in case <> of <> when call 'erlang':'=:=' (_11,'ok') -> 'ok'
<> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tmp)-|['result_not_wanted'] ) _11 end
<TryAgainOrError> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (Tmp)-|['result_not_wanted'] ) TryAgainOrError end
<Error> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_0)-|['result_not_wanted'] ) Error end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'tempfile'/1 = fun (_0) -> let <Tmp> = call 'lists':'concat' ([_0|[[46|[84|[77|[80]]]]]]) in do case call 'file':'delete' (Tmp) of <{'error',_X_Reason}> when 'true' -> 'ok'
<'ok'> when 'true' -> apply 'assure_no_file'/1 (Tmp)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end Tmp
'assure_no_file'/1 = fun (_0) -> case call 'file':'read_file_info' (_0) of <{'ok',_X_FileInfo}> when 'true' -> do call 'timer':'sleep' (100) apply 'assure_no_file'/1 (_0)
<{'error',_3}> when 'true' -> 'ok'
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'fsck_try_est'/5 = fun (_0,_1,_2,_3,_4) -> let <Cntrs> = call 'ets':'new' ('dets_repair',[]) in let <Input> = call 'dets_v9':'fsck_input' (_0,_1,Cntrs,_4) in case apply 'do_sort'/5 (_0,_3,Input,Cntrs,_2) of <{Reply,SizeData}> when 'true' -> case Reply of <{'ok',NoDups,H1}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) apply 'fsck_copy'/4 (SizeData,H1,'false',NoDups)
<Return = {'try_again',_17}> when 'true' -> do apply 'close_files'/3 ('false',SizeData,_0) Return
<Else> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) do apply 'close_files'/3 ('false',SizeData,_0) Else end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'do_sort'/5 = fun (_0,_1,_2,_3,_4) -> let <Output> = call 'dets_v9':'output_objs' (_0,_1,_3) in let <TmpDir> = call 'filename':'dirname' (_4) in let <_7> = catch call 'file_sorter':'sort' (_2,Output,[{'format','binary'}|[{'tmpdir',TmpDir}|[]]]) in let <L> = call 'ets':'tab2list' (_3) in do call 'ets':'delete' (_3) let <_10> = call 'lists':'keysort' (1,L) in let <_11> = call 'lists':'reverse' (_10) in {_7,_11}
'fsck_copy'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{_X_LogSz,Pos,Bins,_X_NoObjects}|SizeData],Head,_X_Bulk,NoDups> when call 'erlang':'is_list' (Bins) -> case call 'erlang':'=:=' (NoDups,0) of <'true'> when 'true' -> let <_7> = fun (_5) -> case _5 of <{_18,P,B,_19}> when 'true' -> {P,B}
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-fsck_copy/4-fun-0-',1}}] )-|['compiler_generated'] ) end in let <_8> = call 'lists':'map' (_7,SizeData) in let <PWs> = [{Pos,Bins}|_8] in case Head of <{'head',_20,_21,_22,Fd,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,FileName,_40,_41,_42,_43,_44,_45,_46}> when 'true' -> do call 'dets_utils':'pwrite' (Fd,FileName,PWs) case Head of <{'head',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' -> let <_13> = call 'erlang':'setelement' (16,Head,'dirty') in {'ok',_13}
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<SizeData,Head,Bulk,NoDups> when 'true' -> catch apply 'fsck_copy1'/4 (SizeData,Head,Bulk,NoDups) end
'fsck_copy1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[SzData|L],Head,Bulk,NoDups> when 'true' -> (case Head of (<({'head',_34,_35,_36,_rec109,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}-|['compiler_generated'] )> when 'true' -> case SzData of <{LogSz,Pos,{FileName,Fd},NoObjects}> when 'true' -> let <_9> = case <> of <> when call 'erlang':'=:=' (NoObjects,0) -> 0
<> when 'true' -> let <_8> = call 'erlang':'-' (LogSz,1) in call 'erlang':'bsl' (1,_8) end in let <ExpectedSize> = call 'erlang':'*' (_9,NoObjects) in do case apply 'close_tmp'/1 (Fd) of <'ok'> when 'true' -> 'ok'
<Err> when 'true' -> do apply 'close_files'/3 (Bulk,L,Head) call 'dets_utils':'file_error' (FileName,Err) end do case call 'file':'position' (_rec109,Pos) of <{'ok',_63}> when call 'erlang':'=:=' (_63,Pos) -> 'ok'
<Err2> when 'true' -> do apply 'close_files'/3 (Bulk,L,Head) (case Head of (<({'head',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec110,_85,_86,_87,_88,_89,_90,_91}-|['compiler_generated'] )> when 'true' -> call 'dets_utils':'file_error' (_rec110,Err2)-|['compiler_generated'] )
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end let <CR> = call 'file':'copy' ({FileName,['raw'|['binary']]},_rec109) in do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (FileName)-|['result_not_wanted'] ) case CR of <{'ok',Copied}> when let <_18> = call 'erlang':'=:=' (Copied,ExpectedSize) in let <_19> = call 'erlang':'=:=' (NoObjects,0) in call 'erlang':'or' (_18,_19) -> apply 'fsck_copy1'/4 (L,Head,Bulk,NoDups)
<{'ok',_X_Copied}> when 'true' -> do apply 'close_files'/3 (Bulk,L,Head) let <_20> = case <> of <> when (call 'erlang':'=:=' (Bulk,'true')-|['compiler_generated'] ) -> 'initialization_failed'
<> when 'true' -> 'repair_failed' end in (case Head of (<({'head',_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_rec111,_114,_115,_116,_117,_118,_119,_120}-|['compiler_generated'] )> when 'true' -> {'error',{_20,_rec111}}-|['compiler_generated'] )
(<_121> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<FError> when 'true' -> do apply 'close_files'/3 (Bulk,L,Head) call 'dets_utils':'file_error' (FileName,FError) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[],Head,_X_Bulk,NoDups> when call 'erlang':'=/=' (NoDups,0) -> (case Head of (<({'head',_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_rec112,_143,_144,_145,_146,_147,_148,_149}-|['compiler_generated'] )> when 'true' -> {'error',{'initialization_failed',_rec112}}-|['compiler_generated'] )
(<_150> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[],Head,_X_Bulk,_X_NoDups> when 'true' -> case Head of <{'head',_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179}> when 'true' -> let <_29> = call 'erlang':'setelement' (16,Head,'dirty') in {'ok',_29}
(<_180> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_33,_32,_31,_30> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32,_31,_30})-|[{'function_name',{'fsck_copy1',4}}] )-|['compiler_generated'] ) end
'close_files'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'false',SizeData,Head> when 'true' -> (case Head of (<({'head',_13,_14,_15,_rec114,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}-|['result_not_wanted','compiler_generated'] )> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (_rec114)-|['result_not_wanted'] ) apply 'close_files'/3 ('true',SizeData,Head)-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['result_not_wanted','compiler_generated'] ):('error'-|['result_not_wanted','compiler_generated'] ) (({'badrecord','head'}-|['result_not_wanted','compiler_generated'] ))-|['result_not_wanted','compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'true',SizeData,_X_Head> when 'true' -> let <Fun> = fun (_7) -> case _7 of <{_X_Size,_X_Pos,{FileName,Fd},_X_No}> when 'true' -> do apply 'close_tmp'/1 (Fd) call 'file':'delete' (FileName)
<_42> when 'true' -> 'ok' end in call 'lists':'foreach' (Fun,SizeData)
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'close_files',3}}] )-|['compiler_generated'] ) end
'close_tmp'/1 = fun (_0) -> call 'file':'close' (_0)
'fslot'/2 = fun (_0,_1) -> let <_4> = catch case apply 'write_cache'/1 (_0) of <{NH,[]}> when 'true' -> let <Objs> = call 'dets_v9':'slot_objs' (NH,_1) in {NH,Objs}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end in case _4 of <Reply = {NewHead = {'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36},_X_Objects}> when ('true'-|['compiler_generated'] ) -> Reply
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'do_update_counter'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head = {'head',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47},_X_Key,_X_Incr> when (try let <_7> = call 'erlang':'element' (10,Head) in call 'erlang':'=/=' (_7,'set') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {Head,'badarg'}
<Head,Key,Incr> when 'true' -> case apply 'flookup_keys'/2 (Head,[Key|[]]) of <{H1,[O|[]]}> when 'true' -> (case H1 of (<({'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec115,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}-|['compiler_generated'] )> when 'true' -> let <_12> = catch apply 'try_update_tuple'/3 (O,_rec115,Incr) in case _12 of <{'EXIT',_77}> when 'true' -> {H1,'badarg'}
<{New,Term}> when 'true' -> case apply 'finsert'/2 (H1,[Term|[]]) of <{H2,'ok'}> when 'true' -> {H2,New}
<Reply> when 'true' -> Reply end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{H1,[]}> when 'true' -> {H1,'badarg'}
<HeadError> when 'true' -> HeadError end end
'try_update_tuple'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <O,_X_Kp,{Pos,Incr}> when 'true' -> apply 'try_update_tuple2'/3 (O,Pos,Incr)
<O,Kp,Incr> when 'true' -> let <_3> = call 'erlang':'+' (Kp,1) in apply 'try_update_tuple2'/3 (O,_3,Incr) end
'try_update_tuple2'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'element' (_1,_0) in let <New> = call 'erlang':'+' (_3,_2) in let <_5> = call 'erlang':'setelement' (_1,_0,New) in {New,_5}
'set_verbose'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> call 'erlang':'put' ('verbose','yes')
<_2> when 'true' -> call 'erlang':'erase' ('verbose') end
'where_is_object'/2 = fun (_0,_1) -> (case _0 of (<({'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_rec116,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> case apply 'check_objects'/2 ([_1|[]],_rec116) of <'true'> when 'true' -> let <_5> = catch apply 'write_cache'/1 (_0) in case _5 of <{NewHead,[]}> when 'true' -> let <_6> = call 'dets_v9':'find_object' (NewHead,_1) in {NewHead,_6}
<HeadError = {NewHead = {'head',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68},_69}> when ('true'-|['compiler_generated'] ) -> HeadError
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<'false'> when 'true' -> {_0,'badarg'}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'check_objects'/2 = fun (_0,_1) -> case <_0,_1> of <[T|Ts],Kp> when try let <_2> = call 'erlang':'tuple_size' (T) in call 'erlang':'>=' (_2,Kp) of <Try> -> Try catch <T,R> -> 'false' -> apply 'check_objects'/2 (Ts,Kp)
<L,_X_Kp> when 'true' -> call 'erlang':'=:=' (L,[]) end
'no_things'/1 = fun (_0) -> (case _0 of (<({'head',_3,_4,_5,_6,_7,_rec117,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}-|['compiler_generated'] )> when 'true' -> _rec117-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'file_no_things'/1 = fun (_0) -> (case _0 of (<({'fileheader',_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_rec118,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22}-|['compiler_generated'] )> when 'true' -> _rec118-|['compiler_generated'] )
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'update_cache'/3 = fun (_0,_1,_2) -> case apply 'update_cache'/2 (_0,[{_2,_1}|[]]) of <{Head1,LU,PwriteList}> when 'true' -> case call 'dets_utils':'pwrite' (Head1,PwriteList) of <{NewHead,'ok'}> when 'true' -> {NewHead,LU}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'update_cache'/2 = fun (_0,_1) -> (case _0 of (<({'head',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec119,_77,_78,_79,_80,_81,_82,_83,_84}-|['compiler_generated'] )> when 'true' -> case _rec119 of <{'cache',C,Size0,Ins,_86,_87,_88}> when 'true' -> let <_6> = call 'erlang':'external_size' (_1) in let <NewSize> = call 'erlang':'+' (Size0,_6) in case apply 'cache_binary'/7 (_0,_1,C,Size0,Ins,'false',[]) of <{NewC,NewIns,Lookup,Found}> when 'true' -> case _rec119 of <{'cache',_89,_90,_91,_92,_93,_94}> when 'true' -> let <_10> = call 'erlang':'setelement' (4,_rec119,NewIns) in let <_11> = call 'erlang':'setelement' (3,_10,NewSize) in let <_13> = call 'erlang':'setelement' (2,_11,NewC) in case _0 of <{'head',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' -> let <_17> = call 'erlang':'setelement' (22,_0,_13) in case <> of <> when let <_19> = call 'erlang':'=:=' (Lookup,'true') in let <_26> = try (let <_22> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_rec119,('cache'-|['compiler_generated'] ),(7-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_20-|['compiler_generated'] )> when 'true' -> (_20-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_23> = call 'erlang':'=:=' ((_22-|['compiler_generated'] ),'true') in let <_24> = call 'erlang':'element' (6,_rec119) in let <_25> = call 'erlang':'>=' (NewSize,_24) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_23,_25)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_19,_26) -> case call 'dets_v9':'write_cache' (_17) of <{NewHead,LU,PwriteList}> when 'true' -> let <_28> = call 'erlang':'++' (Found,LU) in {NewHead,_28,PwriteList}
(<_27> when 'true' -> primop 'match_fail' ({'badmatch',_27})-|['compiler_generated'] ) end
<> when call 'erlang':'=:=' (NewC,[]) -> {_17,Found,[]}
<> when (try (let <_31> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_rec119,('cache'-|['compiler_generated'] ),(7-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_29-|['compiler_generated'] )> when 'true' -> (_29-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_32> = call 'erlang':'=:=' ((_31-|['compiler_generated'] ),'true') in let <_33> = call 'erlang':'element' (5,_rec119) in let <_34> = call 'erlang':'=:=' (_33,'undefined') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_32,_34)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <Now> = call ('erlang'-|['compiler_generated'] ):('monotonic_time'-|['compiler_generated'] ) ((1000000-|['compiler_generated'] )) in let <Me> = call 'erlang':'self' () in let <Call> = {'$dets_call',Me,{'delayed_write',Now}} in (case _rec119 of (<({'cache',_126,_127,_128,_129,_130,_rec122}-|['compiler_generated'] )> when 'true' -> do call 'erlang':'send_after' (_rec122,Me,Call) case _13 of <{'cache',_132,_133,_134,_135,_136,_137}> when 'true' -> let <_42> = call 'erlang':'setelement' (5,_13,Now) in case _17 of <{'head',_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' -> let <_46> = call 'erlang':'setelement' (22,_17,_42) in {_46,Found,[]}
(<_168> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_138> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_131> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when call 'erlang':'=:=' (Size0,0) -> let <_rec128> = call ('erlang'-|['compiler_generated'] ):('monotonic_time'-|['compiler_generated'] ) ((1000000-|['compiler_generated'] )) in case _13 of <{'cache',_169,_170,_171,_172,_173,_174}> when 'true' -> let <_50> = call 'erlang':'setelement' (5,_13,_rec128) in case _17 of <{'head',_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204}> when 'true' -> let <_54> = call 'erlang':'setelement' (22,_17,_50) in {_54,Found,[]}
(<_205> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_175> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> {_17,Found,[]} end
(<_125> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'cache_binary'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Head,[{Q,Os}|L],C,Seq,Ins,Lu,F> when call 'erlang':'=:=' (Q,'delete_object') -> (case Head of (<({'head',_24,_25,_26,_27,_28,_29,_30,_31,_32,_rec130,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> apply 'cache_obj_op'/10 (Head,L,C,Seq,Ins,Lu,F,Os,_rec130,Q)-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head,[{Q,Os}|L],C,Seq,Ins,Lu,F> when call 'erlang':'=:=' (Q,'insert') -> let <_9> = call 'erlang':'length' (Os) in let <NewIns> = call 'erlang':'+' (Ins,_9) in (case Head of (<({'head',_53,_54,_55,_56,_57,_58,_59,_60,_61,_rec131,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}-|['compiler_generated'] )> when 'true' -> apply 'cache_obj_op'/10 (Head,L,C,Seq,NewIns,Lu,F,Os,_rec131,Q)-|['compiler_generated'] )
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head,[{Q,Ks}|L],C,Seq,Ins,Lu,F> when call 'erlang':'=:=' (Q,'delete_key') -> apply 'cache_key_op'/9 (Head,L,C,Seq,Ins,Lu,F,Ks,Q)
<Head,[{Q,Ks}|L],C,Seq,Ins,_X_Lu,F> when call 'erlang':'=:=' (C,[]) -> apply 'cache_key_op'/9 (Head,L,C,Seq,Ins,'true',F,Ks,Q)
<Head,[{Q,Ks}|L],C,Seq,Ins,Lu,F> when 'true' -> (case Head of (<({'head',_82,_83,_84,_85,_86,_87,_88,_89,_rec132,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'cache_lookup' (_rec132,Ks,C,[]) of <'false'> when 'true' -> apply 'cache_key_op'/9 (Head,L,C,Seq,Ins,'true',F,Ks,Q)
<Found> when 'true' -> case Q of <{'lookup',Pid}> when 'true' -> apply 'cache_binary'/7 (Head,L,C,Seq,Ins,Lu,[{Pid,Found}|F])
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Head,[],C,_X_Seq,Ins,Lu,F> when 'true' -> {C,Ins,Lu,F}
(<_23,_22,_21,_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22,_21,_20,_19,_18,_17})-|[{'function_name',{'cache_binary',7}}] )-|['compiler_generated'] ) end
'cache_key_op'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <Head,L,C,Seq,Ins,Lu,F,[K|Ks],Q> when 'true' -> let <E> = {K,{Seq,Q}} in let <_10> = call 'erlang':'+' (Seq,1) in apply 'cache_key_op'/9 (Head,L,[E|C],_10,Ins,Lu,F,Ks,Q)
<Head,L,C,Seq,Ins,Lu,F,[],_X_Q> when 'true' -> apply 'cache_binary'/7 (Head,L,C,Seq,Ins,Lu,F)
(<_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'cache_key_op',9}}] )-|['compiler_generated'] ) end
'cache_obj_op'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <Head,L,C,Seq,Ins,Lu,F,[O|Os],Kp,Q> when 'true' -> let <_10> = call 'erlang':'element' (Kp,O) in let <E> = {_10,{Seq,{Q,O}}} in let <_12> = call 'erlang':'+' (Seq,1) in apply 'cache_obj_op'/10 (Head,L,[E|C],_12,Ins,Lu,F,Os,Kp,Q)
<Head,L,C,Seq,Ins,Lu,F,[],_X_Kp,_X_Q> when 'true' -> apply 'cache_binary'/7 (Head,L,C,Seq,Ins,Lu,F)
(<_22,_21,_20,_19,_18,_17,_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14,_13})-|[{'function_name',{'cache_obj_op',10}}] )-|['compiler_generated'] ) end
'delayed_write'/2 = fun (_0,_1) -> (case _0 of (<({'head',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec133,_57,_58,_59,_60,_61,_62,_63,_64}-|['compiler_generated'] )> when 'true' -> (case _rec133 of (<({'cache',_66,_67,_68,_rec134,_69,_70}-|['compiler_generated'] )> when 'true' -> case <> of <> when call 'erlang':'=:=' (_rec134,_1) -> let <_8> = catch apply 'write_cache'/1 (_0) in case _8 of <{Head2,[]}> when 'true' -> (case Head2 of (<({'head',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec136,_92,_93,_94,_95,_96,_97,_98,_99}-|['compiler_generated'] )> when 'true' -> case _rec136 of <{'cache',_101,_102,_103,_104,_105,_106}> when 'true' -> let <_13> = call 'erlang':'setelement' (5,_rec136,'undefined') in case Head2 of <{'head',_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136}> when 'true' -> call 'erlang':'setelement' (22,Head2,_13)
(<_137> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_107> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_100> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{NewHead,_X_Error}> when 'true' -> NewHead
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
<> when 'true' -> case <> of <> when (try (let <_20> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_rec133,('cache'-|['compiler_generated'] ),(7-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_18-|['compiler_generated'] )> when 'true' -> (_18-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_21> = call 'erlang':'=:=' ((_20-|['compiler_generated'] ),'true') in let <_22> = call 'erlang':'element' (3,_rec133) in let <_23> = call 'erlang':'=:=' (_22,0) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_21,_23)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case _rec133 of <{'cache',_138,_139,_140,_141,_142,_143}> when 'true' -> let <_26> = call 'erlang':'setelement' (5,_rec133,'undefined') in case _0 of <{'head',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173}> when 'true' -> call 'erlang':'setelement' (22,_0,_26)
(<_174> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_144> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> let <_30> = call 'erlang':'-' (_rec134,_1) in let <_31> = call 'erlang':'/' (_30,1000) in let <When> = call 'erlang':'round' (_31) in let <Me> = call 'erlang':'self' () in let <Call> = {'$dets_call',Me,{'delayed_write',_rec134}} in do call 'erlang':'send_after' (When,Me,Call) _0 end end-|['compiler_generated'] )
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','cache'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'write_cache'/1 = fun (_0) -> case call 'dets_v9':'write_cache' (_0) of <{Head1,LU,PwriteList}> when 'true' -> case call 'dets_utils':'pwrite' (Head1,PwriteList) of <{NewHead,'ok'}> when 'true' -> {NewHead,LU}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'status'/1 = fun (_0) -> (case _0 of (<({'head',_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec140,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}-|['compiler_generated'] )> when 'true' -> case _rec140 of <'saved'> when 'true' -> 'ok'
<'dirty'> when 'true' -> 'ok'
<'new_dirty'> when 'true' -> 'ok'
<Error> when 'true' -> Error end-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'init_scan'/2 = fun (_0,_1) -> do apply 'check_safe_fixtable'/1 (_0) let <FreeLists> = call 'dets_utils':'get_freelists' (_0) in (case _0 of (<({'head',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_rec141}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'find_next_allocated' (FreeLists,_rec141,_rec141) of <{From,To}> when 'true' -> {'dets_cont','undefined',_1,#{}#,{From,To,#{}#},'undefined','undefined','undefined'}
<'none'> when 'true' -> {'dets_cont','undefined',_1,'eof',#{}#,'undefined','undefined','undefined'}
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'check_safe_fixtable'/1 = fun (_0) -> (case _0 of (<({'head',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_rec142,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> let <_8> = case <> of (<> when call 'erlang':'=:=' (_rec142,'false') -> let <_5> = call 'erlang':'get' ('verbose') in (case <> of (<> when call 'erlang':'=:=' (_5,'yes') -> 'true'-|['compiler_generated'] )
(<> when 'true' -> call 'dets_utils':'debug_mode' ()-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in case _8 of <'true'> when 'true' -> (case _0 of (<({'head',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_rec143,_66,_67,_68,_69}-|['compiler_generated'] )> when 'true' -> call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[116|[114|[97|[118|[101|[114|[115|[97|[108|[32|[111|[102|[32|[126|[116|[112|[32|[110|[101|[101|[100|[115|[32|[115|[97|[102|[101|[95|[102|[105|[120|[116|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_rec143|[]])-|['compiler_generated'] )
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'scan'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Head,C = {'dets_cont',_12,_13,_14,#{}#,_15,_16,_17}> when 'true' -> {[],C}
<Head,C> when 'true' -> case C of <{'dets_cont',_18,No,Bin,L0,_19,_20,_21}> when 'true' -> case L0 of <{From,To,L}> when 'true' -> let <_6> = case No of <'default'> when 'true' -> 0
<_22> when call 'erlang':'is_integer' (No) -> let <_4> = call 'erlang':'-' (No) in call 'erlang':'-' (_4,1)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in (case Head of (<({'head',_23,_24,_25,_26,_27,_28,_29,_30,_rec144,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}-|['compiler_generated'] )> when 'true' -> apply 'scan'/8 (Bin,Head,From,To,L,[],_6,{C,_rec144})-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
'scan'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Bin,H,From,To,L,Ts,R,C = {C0,Type}> when 'true' -> case call 'dets_v9':'scan_objs' (H,Bin,From,To,L,Ts,R,Type) of <{'more',NFrom,NTo,NL,NTs,NR,Sz}> when 'true' -> apply 'scan_read'/8 (H,NFrom,NTo,Sz,NL,NTs,NR,C)
<{'stop',B = #{}#,NFrom,NTo,NL = #{}#,NTs}> when 'true' -> let <Ftab> = call 'dets_utils':'get_freelists' (H) in (case H of (<({'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_rec145}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'find_next_allocated' (Ftab,NFrom,_rec145) of <'none'> when 'true' -> case C0 of <{'dets_cont',_65,_66,_67,_68,_69,_70,_71}> when 'true' -> let <_12> = call 'erlang':'setelement' (5,C0,B) in let <_14> = call 'erlang':'setelement' (4,_12,'eof') in {NTs,_14}
(<_72> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_73> when 'true' -> let <_rec147> = {NFrom,NTo,NL} in case C0 of <{'dets_cont',_74,_75,_76,_77,_78,_79,_80}> when 'true' -> let <_17> = call 'erlang':'setelement' (5,C0,_rec147) in let <_19> = call 'erlang':'setelement' (4,_17,B) in {NTs,_19}
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_64> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'stop',B,NFrom,NTo,NL,NTs}> when 'true' -> let <_rec149> = {NFrom,NTo,NL} in case C0 of <{'dets_cont',_82,_83,_84,_85,_86,_87,_88}> when 'true' -> let <_23> = call 'erlang':'setelement' (5,C0,_rec149) in let <_25> = call 'erlang':'setelement' (4,_23,B) in {NTs,_25}
(<_89> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'bad_object'> when 'true' -> let <_26> = call 'dets_utils':'bad_object' ('scan',{From,To,Bin}) in {'scan_error',_26}
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end
(<_35,_34,_33,_32,_31,_30,_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_35,_34,_33,_32,_31,_30,_29,_28})-|[{'function_name',{'scan',8}}] )-|['compiler_generated'] ) end
'scan_read'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <_X_H,From,To,_X_Min,L0,Ts,R,{C,_X_Type}> when call 'erlang':'>=' (R,8192) -> let <L> = {From,To,L0} in case C of <{'dets_cont',_35,_36,_37,_38,_39,_40,_41}> when 'true' -> let <_10> = call 'erlang':'setelement' (5,C,L) in let <_12> = call 'erlang':'setelement' (4,_10,#{}#) in {Ts,_12}
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<H,From,_X_To,Min,_X_L,Ts,R,C> when 'true' -> let <_13> = case <> of <> when call 'erlang':'<' (Min,8192) -> 8192
<> when 'true' -> Min end in let <FreeLists> = call 'dets_utils':'get_freelists' (H) in (case H of (<({'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_rec152}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'find_allocated' (FreeLists,From,_13,_rec152) of <Bin0 = #{}#> when 'true' -> case C of <{Cont,_72}> when 'true' -> case Cont of <{'dets_cont',_73,_74,_75,_76,_77,_78,_79}> when 'true' -> let <_20> = call 'erlang':'setelement' (5,Cont,Bin0) in let <_22> = call 'erlang':'setelement' (4,_20,'eof') in {Ts,_22}
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','dets_cont'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
<#{#<From1>(32,1,'integer',['unsigned'|['big']]),#<To1>(32,1,'integer',['unsigned'|['big']]),#<L1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> (case H of (<({'head',_81,_82,_83,_rec154,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'pread_n' (_rec154,From1,_13) of <'eof'> when 'true' -> {'scan_error','premature_eof'}
<NewBin> when 'true' -> apply 'scan'/8 (NewBin,H,From1,To1,L1,Ts,R,C) end-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'err'/1 = fun (_0) -> case call 'erlang':'get' ('verbose') of <'yes'> when 'true' -> do call 'error_logger':'format' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[]]) _0
<'undefined'> when 'true' -> _0
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'time_now'/0 = fun () -> call 'erlang':'monotonic_time' (1000000)
'make_timestamp'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'+' (_0,_1) in let <ErlangSystemTime> = call 'erlang':'convert_time_unit' (_2,'native','microsecond') in let <MegaSecs> = call 'erlang':'div' (ErlangSystemTime,1000000000000) in let <_6> = call 'erlang':'div' (ErlangSystemTime,1000000) in let <_5> = call 'erlang':'*' (MegaSecs,1000000) in let <Secs> = call 'erlang':'-' (_6,_5) in let <MicroSecs> = call 'erlang':'rem' (ErlangSystemTime,1000000) in {MegaSecs,Secs,MicroSecs}
'file_info'/1 = fun (_0) -> let <_1> = catch apply 'read_file_header'/3 (_0,'read','false') in case _1 of <{'ok',Fd,FH}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) call 'dets_v9':'file_info' (FH)
<Other> when 'true' -> Other end
'get_head_field'/2 = fun (_0,_1) -> call 'dets_utils':'read_4' (_0,_1)
'view'/1 = fun (_0) -> let <_1> = catch apply 'read_file_header'/3 (_0,'read','false') in case _1 of <{'ok',Fd,FH}> when 'true' -> letrec 'after$^0'/0 = fun () -> (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) in try try call 'dets_v9':'check_file_header' (FH,Fd) of <_2> -> case _2 of <{'ok',H0}> when 'true' -> case call 'dets_v9':'check_file_header' (FH,Fd) of <{'ok',_16}> when call 'erlang':'=:=' (_16,H0) -> let <H> = call 'dets_v9':'init_freelist' (H0) in do apply 'v_free_list'/1 (H) do call 'dets_v9':'v_segments' (H) 'ok'
<X> when 'true' -> X end
(<_5> when 'true' -> primop 'match_fail' ({'try_clause',_5})-|['compiler_generated'] ) end catch <_8,_7,_6> -> primop 'raise' (_6,_7) of <_10> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _10 catch <_13,_12,_11> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_11,_12)
<X> when 'true' -> X end
'v_free_list'/1 = fun (_0) -> do call 'io':'format' ([70|[82|[69|[69|[32|[76|[73|[83|[84|[32|[46|[46|[46|[46|[46|[46|[32|[10]]]]]]]]]]]]]]]]]],[]) let <_1> = call 'dets_utils':'all_free' (_0) in do call 'io':'format' ([126|[112|[126|[110]]]],[_1|[]]) call 'io':'format' ([69|[78|[68|[32|[79|[70|[32|[70|[82|[69|[69|[32|[76|[73|[83|[84|[32|[10]]]]]]]]]]]]]]]]]],[])
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('dets')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('dets',_0) end