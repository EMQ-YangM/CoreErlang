module 'escript' ['create'/2,'extract'/2,'module_info'/0,'module_info'/1,'parse_file'/1,'script_name'/0,'start'/0,'start'/1] attributes [ 'file' = [{[115|[114|[99|[47|[101|[115|[99|[114|[105|[112|[116|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'type' = [{'mode',{'type',35,'union',[{'atom',35,'native'}|[{'atom',35,'compile'}|[{'atom',35,'debug'}|[{'atom',35,'interpret'}|[{'atom',35,'run'}]]]]]},[]}]
, 'type' = [{'source',{'type',36,'union',[{'atom',36,'archive'}|[{'atom',36,'beam'}|[{'atom',36,'text'}]]]},[]}]
, 'record' = [{'state',[{'typed_record_field',{'record_field',38,{'atom',38,'file'}},{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'module'}},{'type',39,'module',[]}}|[{'record_field',40,{'atom',40,'forms_or_bin'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'source'}},{'type',41,'union',[{'user_type',41,'source',[]}|[{'atom',41,'undefined'}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'n_errors'}},{'type',42,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'mode'}},{'user_type',43,'mode',[]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'exports_main'}},{'type',44,'boolean',[]}}|[{'typed_record_field',{'record_field',45,{'atom',45,'has_records'}},{'type',45,'boolean',[]}}]]]]]]]]}]
, 'type' = [{'shebang',{'type',47,'string',[]},[]}]
, 'type' = [{'comment',{'type',48,'string',[]},[]}]
, 'type' = [{'emu_args',{'type',49,'string',[]},[]}]
, 'record' = [{'sections',[{'record_field',51,{'atom',51,'type'}}|[{'typed_record_field',{'record_field',52,{'atom',52,'shebang'}},{'type',52,'union',[{'user_type',52,'shebang',[]}|[{'atom',52,'undefined'}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'comment'}},{'type',53,'union',[{'user_type',53,'comment',[]}|[{'atom',53,'undefined'}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'emu_args'}},{'type',54,'union',[{'user_type',54,'emu_args',[]}|[{'atom',54,'undefined'}]]}}|[{'record_field',55,{'atom',55,'body'}}]]]]]}]
, 'record' = [{'extract_options',[{'record_field',57,{'atom',57,'compile_source'}}]}]
, 'type' = [{'zip_file',{'type',60,'union',[{'remote_type',60,[{'atom',60,'file'}|[{'atom',60,'filename'}|[[]]]]}|[{'type',61,'tuple',[{'remote_type',61,[{'atom',61,'file'}|[{'atom',61,'filename'}|[[]]]]}|[{'type',61,'binary',[]}]]}|[{'type',62,'tuple',[{'remote_type',62,[{'atom',62,'file'}|[{'atom',62,'filename'}|[[]]]]}|[{'type',62,'binary',[]}|[{'remote_type',62,[{'atom',62,'file'}|[{'atom',62,'file_info'}|[[]]]]}]]]}]]]},[]}]
, 'type' = [{'section',{'type',64,'union',[{'atom',64,'shebang'}|[{'type',65,'tuple',[{'atom',65,'shebang'}|[{'type',65,'union',[{'user_type',65,'shebang',[]}|[{'atom',65,'default'}|[{'atom',65,'undefined'}]]]}]]}|[{'atom',66,'comment'}|[{'type',67,'tuple',[{'atom',67,'comment'}|[{'type',67,'union',[{'user_type',67,'comment',[]}|[{'atom',67,'default'}|[{'atom',67,'undefined'}]]]}]]}|[{'type',68,'tuple',[{'atom',68,'emu_args'}|[{'type',68,'union',[{'user_type',68,'emu_args',[]}|[{'atom',68,'undefined'}]]}]]}|[{'type',69,'tuple',[{'atom',69,'source'}|[{'type',69,'union',[{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'filename'}|[[]]]]}|[{'type',69,'binary',[]}]]}]]}|[{'type',70,'tuple',[{'atom',70,'beam'}|[{'type',70,'union',[{'remote_type',70,[{'atom',70,'file'}|[{'atom',70,'filename'}|[[]]]]}|[{'type',70,'binary',[]}]]}]]}|[{'type',71,'tuple',[{'atom',71,'archive'}|[{'type',71,'union',[{'remote_type',71,[{'atom',71,'zip'}|[{'atom',71,'filename'}|[[]]]]}|[{'type',71,'binary',[]}]]}]]}|[{'type',72,'tuple',[{'atom',72,'archive'}|[{'type',72,'list',[{'user_type',72,'zip_file',[]}]}|[{'type',72,'list',[{'remote_type',72,[{'atom',72,'zip'}|[{'atom',72,'create_option'}|[[]]]]}]}]]]}]]]]]]]]]},[]}]
, 'spec' = [{{'create',2},[{'type',77,'fun',[{'type',77,'product',[{'type',77,'union',[{'remote_type',77,[{'atom',77,'file'}|[{'atom',77,'filename'}|[[]]]]}|[{'atom',77,'binary'}]]}|[{'type',77,'list',[{'user_type',77,'section',[]}]}]]}|[{'type',78,'union',[{'atom',78,'ok'}|[{'type',78,'tuple',[{'atom',78,'ok'}|[{'type',78,'binary',[]}]]}|[{'type',78,'tuple',[{'atom',78,'error'}|[{'type',78,'term',[]}]]}]]]}]]}]}]
, 'type' = [{'section_name',{'type',158,'union',[{'atom',158,'shebang'}|[{'atom',158,'comment'}|[{'atom',158,'emu_args'}|[{'atom',158,'body'}]]]]},[]}]
, 'type' = [{'extract_option',{'type',159,'union',[{'atom',159,'compile_source'}|[{'type',159,'tuple',[{'atom',159,'section'}|[{'type',159,'list',[{'user_type',159,'section_name',[]}]}]]}]]},[]}]
, 'spec' = [{{'extract',2},[{'type',160,'fun',[{'type',160,'product',[{'remote_type',160,[{'atom',160,'file'}|[{'atom',160,'filename'}|[[]]]]}|[{'type',160,'list',[{'user_type',160,'extract_option',[]}]}]]}|[{'type',161,'union',[{'type',161,'tuple',[{'atom',161,'ok'}|[{'type',161,'list',[{'user_type',161,'section',[]}]}]]}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'type',161,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'script_name',0},[{'type',251,'fun',[{'type',251,'product',[]}|[{'type',251,'string',[]}]]}]}]
, 'spec' = [{{'start',0},[{'type',261,'fun',[{'type',261,'product',[]}|[{'type',261,'no_return',[]}]]}]}]
, 'spec' = [{{'start',1},[{'type',266,'fun',[{'type',266,'product',[{'type',266,'list',[{'type',266,'string',[]}]}]}|[{'type',266,'no_return',[]}]]}]}]
, 'spec' = [{{'parse_and_run',3},[{'type',292,'fun',[{'type',292,'product',[{'var',292,'_'}|[{'var',292,'_'}|[{'var',292,'_'}]]]}|[{'type',292,'no_return',[]}]]}]}]
, 'spec' = [{{'debug',3},[{'type',737,'fun',[{'type',737,'product',[{'var',737,'_'}|[{'var',737,'_'}|[{'var',737,'_'}]]]}|[{'type',737,'no_return',[]}]]}]}]
, 'spec' = [{{'run',2},[{'type',754,'fun',[{'type',754,'product',[{'var',754,'_'}|[{'var',754,'_'}]]}|[{'type',754,'no_return',[]}]]}]}]
, 'spec' = [{{'interpret',4},[{'type',765,'fun',[{'type',765,'product',[{'var',765,'_'}|[{'var',765,'_'}|[{'var',765,'_'}|[{'var',765,'_'}]]]]}|[{'type',765,'no_return',[]}]]}]}]
, 'spec' = [{{'my_halt',1},[{'type',918,'fun',[{'type',918,'product',[{'var',918,'_'}]}|[{'type',918,'no_return',[]}]]}]}] ] 'create'/2 = fun (_0,_1) -> case <_0,_1> of <File,Options> when call 'erlang':'is_list' (Options) -> try let <S> = apply 'prepare'/2 (Options,{'sections','undefined','undefined','undefined','undefined','undefined'}) in let <_15> = letrec 'lc$^0'/1 = fun (_13) -> case _13 of <[Section|_4]> when call 'erlang':'=/=' (Section,'undefined') -> let <_14> = apply 'lc$^0'/1 (_4) in ([Section|_14]-|['compiler_generated'] )
(<[Section|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_48> when 'true' -> (primop 'match_fail' ({'function_clause',_48})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in (case S of (<({'sections',_26,_rec0,_27,_28,_29}-|['compiler_generated'] )> when 'true' -> (case S of (<({'sections',_31,_32,_rec1,_33,_34}-|['compiler_generated'] )> when 'true' -> (case S of (<({'sections',_36,_37,_38,_rec2,_39}-|['compiler_generated'] )> when 'true' -> (case S of (<({'sections',_41,_42,_43,_44,_rec3}-|['compiler_generated'] )> when 'true' -> apply 'lc$^0'/1 ([_rec0|[_rec1|[_rec2|[_rec3|[]]]]])-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case File of <'binary'> when 'true' -> let <_17> = call 'erlang':'list_to_binary' (_15) in {'ok',_17}
<_46> when 'true' -> case call 'file':'write_file' (File,_15) of <'ok'> when 'true' -> 'ok'
<{'error',Reason}> when 'true' -> {'error',{Reason,File}}
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end end of <_20> -> _20 catch <_23,_22,_21> -> case <_23,_22,_21> of <('throw'-|['compiler_generated'] ),PrepareReason,_47> when 'true' -> {'error',PrepareReason}
(<_49,_50,_51> when 'true' -> primop 'raise' (_51,_50)-|['compiler_generated'] ) end
(<_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_25,_24})-|[{'function_name',{'create',2}}] )-|['compiler_generated'] ) end
'prepare'/2 = fun (_0,_1) -> case <_0,_1> of <[H|T],S> when 'true' -> case H of <{'shebang','undefined'}> when 'true' -> apply 'prepare'/2 (T,S)
<'shebang'> when 'true' -> case S of <{'sections',_62,_63,_64,_65,_66}> when 'true' -> let <_6> = call 'erlang':'setelement' (3,S,[35|[33|[47|[117|[115|[114|[47|[98|[105|[110|[47|[101|[110|[118|[32|[101|[115|[99|[114|[105|[112|[116|[10]]]]]]]]]]]]]]]]]]]]]]]) in apply 'prepare'/2 (T,_6)
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'shebang','default'}> when 'true' -> case S of <{'sections',_68,_69,_70,_71,_72}> when 'true' -> let <_11> = call 'erlang':'setelement' (3,S,[35|[33|[47|[117|[115|[114|[47|[98|[105|[110|[47|[101|[110|[118|[32|[101|[115|[99|[114|[105|[112|[116|[10]]]]]]]]]]]]]]]]]]]]]]]) in apply 'prepare'/2 (T,_11)
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'shebang',Shebang}> when call 'erlang':'is_list' (Shebang) -> let <_12> = call 'erlang':'++' (Shebang,[10]) in let <_rec8> = [35|[33|_12]] in case S of <{'sections',_74,_75,_76,_77,_78}> when 'true' -> let <_16> = call 'erlang':'setelement' (3,S,_rec8) in apply 'prepare'/2 (T,_16)
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'comment','undefined'}> when 'true' -> apply 'prepare'/2 (T,S)
<'comment'> when 'true' -> case S of <{'sections',_80,_81,_82,_83,_84}> when 'true' -> let <_21> = call 'erlang':'setelement' (4,S,[37|[37|[32|[84|[104|[105|[115|[32|[105|[115|[32|[97|[110|[32|[45|[42|[45|[32|[101|[114|[108|[97|[110|[103|[32|[45|[42|[45|[32|[102|[105|[108|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) in apply 'prepare'/2 (T,_21)
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'comment','default'}> when 'true' -> case S of <{'sections',_86,_87,_88,_89,_90}> when 'true' -> let <_26> = call 'erlang':'setelement' (4,S,[37|[37|[32|[84|[104|[105|[115|[32|[105|[115|[32|[97|[110|[32|[45|[42|[45|[32|[101|[114|[108|[97|[110|[103|[32|[45|[42|[45|[32|[102|[105|[108|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) in apply 'prepare'/2 (T,_26)
(<_91> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'comment',Comment}> when call 'erlang':'is_list' (Comment) -> let <_27> = call 'erlang':'++' (Comment,[10]) in let <_rec14> = [37|[37|[32|_27]]] in case S of <{'sections',_92,_93,_94,_95,_96}> when 'true' -> let <_31> = call 'erlang':'setelement' (4,S,_rec14) in apply 'prepare'/2 (T,_31)
(<_97> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'emu_args','undefined'}> when 'true' -> apply 'prepare'/2 (T,S)
<{'emu_args',Args}> when call 'erlang':'is_list' (Args) -> let <_32> = call 'erlang':'++' (Args,[10]) in let <_rec16> = [37|[37|[33|_32]]] in case S of <{'sections',_98,_99,_100,_101,_102}> when 'true' -> let <_36> = call 'erlang':'setelement' (5,S,_rec16) in apply 'prepare'/2 (T,_36)
(<_103> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{Type,File}> when call 'erlang':'is_list' (File) -> case call 'file':'read_file' (File) of <{'ok',Bin}> when 'true' -> case S of <{'sections',_104,_105,_106,_107,_108}> when 'true' -> let <_38> = call 'erlang':'setelement' (6,S,Bin) in let <_40> = call 'erlang':'setelement' (2,_38,Type) in apply 'prepare'/2 (T,_40)
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({Reason,H})
(<_41> when 'true' -> primop 'match_fail' ({'case_clause',_41})-|['compiler_generated'] ) end
<{Type,Bin}> when call 'erlang':'is_binary' (Bin) -> case S of <{'sections',_110,_111,_112,_113,_114}> when 'true' -> let <_43> = call 'erlang':'setelement' (6,S,Bin) in let <_45> = call 'erlang':'setelement' (2,_43,Type) in apply 'prepare'/2 (T,_45)
(<_115> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{Type = 'archive',ZipFiles,ZipOptions}> when let <_46> = call 'erlang':'is_list' (ZipFiles) in let <_47> = call 'erlang':'is_list' (ZipOptions) in call 'erlang':'and' (_46,_47) -> let <_49> = call 'erlang':'++' (ZipOptions,['memory']) in case call 'zip':'create' ([100|[117|[109|[109|[121|[46|[122|[105|[112]]]]]]]]],ZipFiles,_49) of <{'ok',{_116,ZipBin}}> when call 'erlang':'=:=' (_116,[100|[117|[109|[109|[121|[46|[122|[105|[112]]]]]]]]]) -> case S of <{'sections',_117,_118,_119,_120,_121}> when 'true' -> let <_51> = call 'erlang':'setelement' (6,S,ZipBin) in let <_53> = call 'erlang':'setelement' (2,_51,Type) in apply 'prepare'/2 (T,_53)
(<_122> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({Reason,H})
(<_54> when 'true' -> primop 'match_fail' ({'case_clause',_54})-|['compiler_generated'] ) end
<_123> when 'true' -> call 'erlang':'throw' ({'badarg',H}) end
<[],{'sections',_124,_125,_126,_127,'undefined'}> when 'true' -> call 'erlang':'throw' ('missing_body')
<[],S = {'sections',Type,_128,_129,_130,_131}> when let <_56> = call 'erlang':'=:=' (Type,'source') in let <_57> = call 'erlang':'=:=' (Type,'beam') in let <_58> = call 'erlang':'=:=' (Type,'archive') in let <_59> = call 'erlang':'or' (_57,_58) in call 'erlang':'or' (_56,_59) -> S
<[],{'sections',Type,_132,_133,_134,_135}> when 'true' -> call 'erlang':'throw' ({'illegal_type',Type})
<BadOptions,_136> when 'true' -> call 'erlang':'throw' ({'badarg',BadOptions}) end
'extract'/2 = fun (_0,_1) -> case <_0,_1> of <File,Options> when let <_2> = call 'erlang':'is_list' (File) in let <_3> = call 'erlang':'is_list' (Options) in call 'erlang':'and' (_2,_3) -> try let <EO> = apply 'parse_extract_options'/2 (Options,{'extract_options','false'}) in (case EO of (<({'extract_options',_rec21}-|['compiler_generated'] )> when 'true' -> let <_7> = call 'erlang':'not' (_rec21) in case apply 'parse_header'/2 (File,_7) of <{HeaderSz,NextLineNo,Fd,Sections}> when 'true' -> (case Sections of (<({'sections',_rec22,_26,_27,_28,_29}-|['compiler_generated'] )> when 'true' -> (case EO of (<({'extract_options',_rec23}-|['compiler_generated'] )> when 'true' -> let <Bin> = case <_rec22,_rec23> of <'source','true'> when 'true' -> apply 'compile_source'/5 (_rec22,File,Fd,NextLineNo,HeaderSz)
<_32,_33> when 'true' -> case call 'file':'close' (Fd) of <'ok'> when 'true' -> case call 'file':'read_file' (File) of <{'ok',#{#<_X_Header>(HeaderSz,8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' -> Bin
<{'error',ReadReason}> when 'true' -> call 'erlang':'throw' (ReadReason)
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end end in apply 'return_sections'/2 (Sections,Bin)-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','extract_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','extract_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <_19> -> _19 catch <_22,_21,_20> -> case <_22,_21,_20> of <('throw'-|['compiler_generated'] ),Reason,_34> when 'true' -> {'error',Reason}
(<_40,_41,_42> when 'true' -> primop 'raise' (_42,_41)-|['compiler_generated'] ) end
(<_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23})-|[{'function_name',{'extract',2}}] )-|['compiler_generated'] ) end
'parse_extract_options'/2 = fun (_0,_1) -> case <_0,_1> of <[H|T],EO> when 'true' -> case H of <'compile_source'> when 'true' -> case EO of <{'extract_options',_rec25}> when 'true' -> apply 'parse_extract_options'/2 (T,{'extract_options','true'})
(<_9> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','extract_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_10> when 'true' -> call 'erlang':'throw' ({'badarg',H}) end
<[],EO> when 'true' -> EO
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'parse_extract_options',2}}] )-|['compiler_generated'] ) end
'compile_source'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'do_parse_file'/6 (_0,_1,_2,_3,_4,'false') of <{'text',_X_Module,Forms,_X_HasRecs,_X_Mode}> when 'true' -> case call 'file':'close' (_2) of <'ok'> when 'true' -> case call 'compile':'forms' (Forms,['return_errors'|['debug_info']]) of <{'ok',_15,BeamBin}> when 'true' -> BeamBin
<{'error',Errors,Warnings}> when 'true' -> let <_7> = apply 'format_errors'/1 (Errors) in let <_8> = apply 'format_errors'/1 (Warnings) in call 'erlang':'throw' ({'compile',[{'errors',_7}|[{'warnings',_8}|[]]]})
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'format_errors'/1 = fun (_0) -> (letrec 'lc$^0'/1 = fun (_5) -> case _5 of <[{File,FileErrors}|_2]> when 'true' -> (letrec 'lc$^1'/1 = fun (_6) -> case _6 of <[{LineNo,Mod,Error}|_4]> when 'true' -> let <_7> = call 'erlang':'integer_to_list' (LineNo) in let <_8> = call Mod:'format_error' (Error) in let <_9> = call 'lists':'flatten' ([File|[[58]|[_7|[[58|[32]]|[_8|[]]]]]]) in let <_10> = apply 'lc$^1'/1 (_4) in ([_9|_10]-|['compiler_generated'] )
(<[_3|_4]> when 'true' -> apply 'lc$^1'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_2)
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (FileErrors)-|['list_comprehension'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_13> when 'true' -> (primop 'match_fail' ({'function_clause',_13})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0)-|['list_comprehension'] )
'return_sections'/2 = fun (_0,_1) -> (case _0 of (<({'sections',_16,_rec26,_17,_18,_19}-|['compiler_generated'] )> when 'true' -> let <_4> = apply 'normalize_section'/2 ('shebang',_rec26) in (case _0 of (<({'sections',_21,_22,_rec27,_23,_24}-|['compiler_generated'] )> when 'true' -> let <_7> = apply 'normalize_section'/2 ('comment',_rec27) in (case _0 of (<({'sections',_26,_27,_28,_rec28,_29}-|['compiler_generated'] )> when 'true' -> let <_10> = apply 'normalize_section'/2 ('emu_args',_rec28) in (case _0 of (<({'sections',_rec29,_31,_32,_33,_34}-|['compiler_generated'] )> when 'true' -> let <_13> = apply 'normalize_section'/2 (_rec29,_1) in {'ok',[_4|[_7|[_10|[_13|[]]]]]}-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_20> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'normalize_section'/2 = fun (_0,_1) -> case <_0,_1> of <Name,'undefined'> when 'true' -> {Name,'undefined'}
<'shebang',[35|[33|Chars]]> when 'true' -> let <Chopped> = call 'string':'trim' (Chars,'trailing',[36|[10]]) in let <Stripped> = call 'string':'trim' (Chopped,'both') in case <> of <> when call 'erlang':'=:=' (Stripped,[47|[117|[115|[114|[47|[98|[105|[110|[47|[101|[110|[118|[32|[101|[115|[99|[114|[105|[112|[116]]]]]]]]]]]]]]]]]]]]) -> {'shebang','default'}
<> when 'true' -> {'shebang',Stripped} end
<'comment',Chars> when 'true' -> let <Chopped> = call 'string':'trim' (Chars,'trailing',[36|[10]]) in let <_5> = call 'string':'trim' (Chopped,'leading',[36|[37]]) in let <Stripped> = call 'string':'trim' (_5,'both') in case <> of <> when call 'erlang':'=:=' (Stripped,[84|[104|[105|[115|[32|[105|[115|[32|[97|[110|[32|[45|[42|[45|[32|[101|[114|[108|[97|[110|[103|[32|[45|[42|[45|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) -> {'comment','default'}
<> when 'true' -> {'comment',Stripped} end
<'emu_args',[37|[37|[33|Chars]]]> when 'true' -> let <Chopped> = call 'string':'trim' (Chars,'trailing',[36|[10]]) in let <Stripped> = call 'string':'trim' (Chopped,'both') in {'emu_args',Stripped}
<Name,Chars> when 'true' -> {Name,Chars} end
'script_name'/0 = fun () -> case call 'init':'get_plain_arguments' () of <[ScriptName|_1]> when 'true' -> ScriptName
(<_0> when 'true' -> primop 'match_fail' ({'badmatch',_0})-|['compiler_generated'] ) end
'start'/0 = fun () -> apply 'start'/1 ([])
'start'/1 = fun (_0) -> try do call 'erlang':'process_flag' ('trap_exit','false') case call 'init':'get_plain_arguments' () of <[File|Args]> when 'true' -> apply 'parse_and_run'/3 (File,Args,_0)
<[]> when 'true' -> do call 'io':'format' ([101|[115|[99|[114|[105|[112|[116|[58|[32|[77|[105|[115|[115|[105|[110|[103|[32|[102|[105|[108|[101|[110|[97|[109|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]],[]) apply 'my_halt'/1 (127)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end of <_2> -> _2 catch <_5,_4,_3> -> case <_5,_4,_3> of <('throw'-|['compiler_generated'] ),Str,_10> when 'true' -> let <_6> = call 'io_lib':'format' ([101|[115|[99|[114|[105|[112|[116|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]],[Str|[]]) in do apply 'put_chars'/1 (_6) apply 'my_halt'/1 (127)
<_11,Reason,_12> when 'true' -> let <_7> = call 'io_lib':'format' ([101|[115|[99|[114|[105|[112|[116|[58|[32|[73|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Reason|[]]) in do apply 'put_chars'/1 (_7) let <Stk> = primop 'build_stacktrace' (_12) in let <_8> = call 'io_lib':'format' ([126|[116|[112|[10]]]],[Stk|[]]) in do apply 'put_chars'/1 (_8) apply 'my_halt'/1 (127) end
'parse_and_run'/3 = fun (_0,_1,_2) -> let <CheckOnly> = call 'lists':'member' ([115],_2) in case apply 'parse_file'/2 (_0,CheckOnly) of <{Source,Module,FormsOrBin,HasRecs,Mode}> when 'true' -> let <_9> = case call 'lists':'member' ([100],_2) of <'true'> when 'true' -> 'debug'
<'false'> when 'true' -> case call 'lists':'member' ([99],_2) of <'true'> when 'true' -> 'compile'
<'false'> when 'true' -> case call 'lists':'member' ([105],_2) of <'true'> when 'true' -> 'interpret'
<'false'> when 'true' -> case call 'lists':'member' ([110],_2) of <'true'> when 'true' -> 'native'
<'false'> when 'true' -> Mode
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in case <> of <> when call 'erlang':'is_list' (FormsOrBin) -> case _9 of <'interpret'> when 'true' -> apply 'interpret'/4 (FormsOrBin,HasRecs,_0,_1)
<'compile'> when 'true' -> case call 'compile':'forms' (FormsOrBin,['report']) of <{'ok',_42,BeamBin}> when call 'erlang':'=:=' (_42,Module) -> case call 'code':'load_binary' (Module,_0,BeamBin) of <{'module',_43}> when call 'erlang':'=:=' (_43,Module) -> apply 'run'/2 (Module,_1)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<_X_Other> when 'true' -> apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) end
<'native'> when 'true' -> case call 'compile':'forms' (FormsOrBin,['report'|['native']]) of <{'ok',_44,BeamBin}> when call 'erlang':'=:=' (_44,Module) -> case call 'code':'load_binary' (Module,_0,BeamBin) of <{'module',_45}> when call 'erlang':'=:=' (_45,Module) -> apply 'run'/2 (Module,_1)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<_X_Other> when 'true' -> apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) end
<'debug'> when 'true' -> case call 'compile':'forms' (FormsOrBin,['report'|['debug_info']]) of <{'ok',_46,BeamBin}> when call 'erlang':'=:=' (_46,Module) -> case call 'code':'load_binary' (Module,_0,BeamBin) of <{'module',_47}> when call 'erlang':'=:=' (_47,Module) -> apply 'debug'/3 (Module,{Module,_0,_0,BeamBin},_1)
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<_X_Other> when 'true' -> apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) end
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
<> when call 'erlang':'is_binary' (FormsOrBin) -> case Source of <'archive'> when 'true' -> case call 'file':'read_file_info' (_0) of <{'ok',FileInfo}> when 'true' -> case call 'code':'set_primary_archive' (_0,FormsOrBin,FileInfo,fun 'escript':'parse_file'/1) of <'ok'> when (call 'erlang':'=:=' (CheckOnly,'true')-|['compiler_generated'] ) -> case call 'code':'load_file' (Module) of <{'module',_48}> when 'true' -> case call 'erlang':'function_exported' (Module,'main',1) of <'true'> when 'true' -> apply 'my_halt'/1 (0)
<'false'> when 'true' -> let <Text> = call 'lists':'concat' ([[70|[117|[110|[99|[116|[105|[111|[110|[32]]]]]]]]]|[Module|[[58|[109|[97|[105|[110|[47|[49|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]) in apply 'fatal'/1 (Text)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<_49> when 'true' -> let <Text> = call 'lists':'concat' ([[67|[97|[110|[110|[111|[116|[32|[108|[111|[97|[100|[32|[109|[111|[100|[117|[108|[101|[32]]]]]]]]]]]]]]]]]]]|[Module|[[32|[102|[114|[111|[109|[32|[97|[114|[99|[104|[105|[118|[101]]]]]]]]]]]]]]]]) in apply 'fatal'/1 (Text) end
<'ok'> when 'true' -> case _9 of <'run'> when 'true' -> apply 'run'/2 (Module,_1)
<'debug'> when 'true' -> apply 'debug'/3 (Module,Module,_1)
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<{'error','bad_eocd'}> when 'true' -> apply 'fatal'/1 ([78|[111|[116|[32|[97|[110|[32|[97|[114|[99|[104|[105|[118|[101|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]])
<{'error',Reason}> when 'true' -> apply 'fatal'/1 (Reason)
(<_25> when 'true' -> primop 'match_fail' ({'case_clause',_25})-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
<'beam'> when 'true' -> case _9 of <'run'> when 'true' -> case call 'code':'load_binary' (Module,_0,FormsOrBin) of <{'module',_50}> when call 'erlang':'=:=' (_50,Module) -> apply 'run'/2 (Module,_1)
(<_26> when 'true' -> primop 'match_fail' ({'badmatch',_26})-|['compiler_generated'] ) end
<'debug'> when 'true' -> let <_27> = call 'filename':'split' (_0) in case call 'lists':'reverse' (_27) of <[Base|Rest]> when 'true' -> let <_29> = call 'code':'objfile_extension' () in let <Base2> = call 'filename':'basename' (Base,_29) in let <_32> = case Rest of <[[101|[98|[105|[110]]]]|Top]> when 'true' -> [[115|[114|[99]]]|Top]
<_51> when 'true' -> Rest end in let <_34> = call 'erlang':'++' (Base2,[46|[101|[114|[108]]]]) in let <_35> = call 'lists':'reverse' ([_34|_32]) in let <SrcFile> = call 'filename':'join' (_35) in apply 'debug'/3 (Module,{Module,SrcFile,_0,FormsOrBin},_1)
(<_28> when 'true' -> primop 'match_fail' ({'badmatch',_28})-|['compiler_generated'] ) end
(<_37> when 'true' -> primop 'match_fail' ({'case_clause',_37})-|['compiler_generated'] ) end
(<_38> when 'true' -> primop 'match_fail' ({'case_clause',_38})-|['compiler_generated'] ) end
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'parse_file'/1 = fun (_0) -> try apply 'parse_file'/2 (_0,'false') of <_1> -> case _1 of <{_X_Source,_X_Module,FormsOrBin,_X_HasRecs,_X_Mode}> when call 'erlang':'is_binary' (FormsOrBin) -> {'ok',FormsOrBin}
<_7> when 'true' -> {'error','no_archive_bin'} end catch <_5,_4,_3> -> case <_5,_4,_3> of <('throw'-|['compiler_generated'] ),Reason,_8> when 'true' -> {'error',Reason}
(<_9,_10,_11> when 'true' -> primop 'raise' (_11,_10)-|['compiler_generated'] ) end
'parse_file'/2 = fun (_0,_1) -> case apply 'parse_header'/2 (_0,'false') of <{HeaderSz,NextLineNo,Fd,Sections}> when 'true' -> (case Sections of (<({'sections',_rec30,_7,_8,_9,_10}-|['compiler_generated'] )> when 'true' -> apply 'do_parse_file'/6 (_rec30,_0,Fd,NextLineNo,HeaderSz,_1)-|['compiler_generated'] )
(<_11> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'do_parse_file'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <S> = apply 'initial_state'/1 (_1) in let <_10> = case _0 of <'archive'> when 'true' -> case call 'file':'close' (_2) of <'ok'> when 'true' -> apply 'parse_archive'/3 (S,_1,_4)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<'beam'> when 'true' -> case call 'file':'close' (_2) of <'ok'> when 'true' -> apply 'parse_beam'/4 (S,_1,_4,_5)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<'source'> when 'true' -> apply 'parse_source'/6 (S,_1,_2,_3,_4,_5)
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in case _10 of <{'state',_18,Module,FormsOrBin,Source,_19,Mode,_20,HasRecs}> when 'true' -> {Source,Module,FormsOrBin,HasRecs,Mode}
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
'initial_state'/1 = fun (_0) -> {'state',_0,'undefined','undefined','undefined',0,'interpret','false','false'}
'parse_header'/2 = fun (_0,_1) -> let <_6> = case call 'file':'open' (_0,['read']) of <_@r0 = {'ok',Fd0}> when 'true' -> _@r0
<{'error',R}> when 'true' -> let <_3> = call 'file':'format_error' (R) in let <_4> = call 'lists':'concat' ([_3|[[58|[32|[39]]]|[_0|[[39]]]]]) in apply 'fatal'/1 (_4)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in case _6 of <{'ok',Fd}> when 'true' -> case call 'file':'position' (Fd,'cur') of <{'ok',HeaderSz0}> when 'true' -> let <Line1> = apply 'get_line'/1 (Fd) in case apply 'classify_line'/1 (Line1) of <'shebang'> when 'true' -> apply 'find_first_body_line'/5 (Fd,HeaderSz0,1,_1,{'sections','undefined',Line1,'undefined','undefined','undefined'})
<'archive'> when 'true' -> {HeaderSz0,1,Fd,{'sections','archive','undefined','undefined','undefined','undefined'}}
<'beam'> when 'true' -> {HeaderSz0,1,Fd,{'sections','beam','undefined','undefined','undefined','undefined'}}
<_13> when 'true' -> apply 'find_first_body_line'/5 (Fd,HeaderSz0,1,_1,{'sections','undefined','undefined','undefined','undefined','undefined'}) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'find_first_body_line'/5 = fun (_0,_1,_2,_3,_4) -> case call 'file':'position' (_0,'cur') of <{'ok',HeaderSz1}> when 'true' -> let <Line2> = apply 'get_line'/1 (_0) in case call 'file':'position' (_0,'cur') of <{'ok',HeaderSz2}> when 'true' -> case <> of <> when (try (let <_10> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_4,('sections'-|['compiler_generated'] ),(6-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_8-|['compiler_generated'] )> when 'true' -> (_8-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'element' (3,_4) in let <_13> = call 'erlang':'=:=' (_12,'undefined') in let <_14> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_13) in let <_15> = call 'erlang':'=:=' (_3,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_14,_15)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_rec31> = apply 'guess_type'/1 (Line2) in case _4 of <{'sections',_62,_63,_64,_65,_66}> when 'true' -> let <_19> = call 'erlang':'setelement' (2,_4,_rec31) in {_1,_2,_0,_19}
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when (try (let <_22> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_4,('sections'-|['compiler_generated'] ),(6-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_20-|['compiler_generated'] )> when 'true' -> (_20-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_23> = call 'erlang':'=:=' ((_22-|['compiler_generated'] ),'true') in let <_24> = call 'erlang':'element' (3,_4) in let <_25> = call 'erlang':'=:=' (_24,'undefined') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_23,_25)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_rec33> = apply 'guess_type'/1 (Line2) in case _4 of <{'sections',_68,_69,_70,_71,_72}> when 'true' -> let <_29> = call 'erlang':'setelement' (2,_4,_rec33) in {HeaderSz1,_2,_0,_29}
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> case apply 'classify_line'/1 (Line2) of <'emu_args'> when 'true' -> let <Line3> = apply 'get_line'/1 (_0) in let <_35> = call 'erlang':'+' (_2,2) in let <_rec35> = apply 'guess_type'/1 (Line3) in case _4 of <{'sections',_rec37,_rec38,_rec39,_rec40,_rec41}> when 'true' -> let <_34> = {'sections',_rec35,_rec38,'undefined',Line2,_rec41} in {HeaderSz2,_35,_0,_34}
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'comment'> when 'true' -> let <Line3> = apply 'get_line'/1 (_0) in case call 'file':'position' (_0,'cur') of <{'ok',HeaderSz3}> when 'true' -> let <Line3Type> = apply 'classify_line'/1 (Line3) in case <> of <> when call 'erlang':'=:=' (Line3Type,'emu_args') -> let <Line4> = apply 'get_line'/1 (_0) in let <_44> = call 'erlang':'+' (_2,3) in let <_rec42> = apply 'guess_type'/1 (Line4) in case _4 of <{'sections',_rec44,_rec45,_rec46,_rec47,_rec48}> when 'true' -> let <_43> = {'sections',_rec42,_rec45,Line2,Line3,_rec48} in {HeaderSz3,_44,_0,_43}
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> let <_50> = call 'erlang':'+' (_2,2) in let <_rec49> = apply 'guess_type'/1 (Line3) in case _4 of <{'sections',_76,_77,_78,_79,_80}> when 'true' -> let <_47> = call 'erlang':'setelement' (4,_4,Line2) in let <_49> = call 'erlang':'setelement' (2,_47,_rec49) in {HeaderSz2,_50,_0,_49}
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
(<_37> when 'true' -> primop 'match_fail' ({'badmatch',_37})-|['compiler_generated'] ) end
<_82> when 'true' -> let <_55> = call 'erlang':'+' (_2,1) in let <_rec51> = apply 'guess_type'/1 (Line2) in case _4 of <{'sections',_83,_84,_85,_86,_87}> when 'true' -> let <_54> = call 'erlang':'setelement' (2,_4,_rec51) in {HeaderSz1,_55,_0,_54}
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sections'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'classify_line'/1 = fun (_0) -> case _0 of <[35|[33|_3]]> when 'true' -> 'shebang'
<[80|[75|_4]]> when 'true' -> 'archive'
<[70|[79|[82|[49|_5]]]]> when 'true' -> 'beam'
<[37|[37|[33|_6]]]> when 'true' -> 'emu_args'
<[37|_7]> when 'true' -> 'comment'
<_8> when 'true' -> 'undefined' end
'guess_type'/1 = fun (_0) -> case apply 'classify_line'/1 (_0) of <'archive'> when 'true' -> 'archive'
<'beam'> when 'true' -> 'beam'
<_3> when 'true' -> 'source' end
'get_line'/1 = fun (_0) -> case call 'io':'get_line' (_0,'') of <'eof'> when 'true' -> apply 'fatal'/1 ([80|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101|[32|[114|[101|[97|[99|[104|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
<Line> when 'true' -> Line end
'parse_archive'/3 = fun (_0,_1,_2) -> case call 'file':'read_file' (_1) of <{'ok',#{#<_X_Header>(_2,8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' -> let <_13> = case call 'init':'get_argument' ('escript') of <{'ok',[[[109|[97|[105|[110]]]]|[M|[]]]|[]]}> when 'true' -> call 'erlang':'list_to_atom' (M)
<_25> when 'true' -> let <_3> = call 'filename':'basename' (_1) in let <RevBase> = call 'lists':'reverse' (_3) in let <_7> = fun (_5) -> call 'erlang':'=/=' (_5,46) in let <_9> = case call 'lists':'dropwhile' (_7,RevBase) of <[46|Rest]> when 'true' -> Rest
<[]> when 'true' -> RevBase
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in let <_11> = call 'lists':'reverse' (_9) in call 'erlang':'list_to_atom' (_11) end in case _0 of <{'state',_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> let <_16> = call 'erlang':'setelement' (7,_0,'run') in let <_17> = call 'erlang':'setelement' (5,_16,'archive') in let <_18> = call 'erlang':'setelement' (4,_17,Bin) in call 'erlang':'setelement' (3,_18,_13)
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',_35}> when 'true' -> apply 'fatal'/1 ([73|[108|[108|[101|[103|[97|[108|[32|[97|[114|[99|[104|[105|[118|[101|[32|[102|[111|[114|[109|[97|[116]]]]]]]]]]]]]]]]]]]]]])
<{'error',Reason}> when 'true' -> let <_20> = call 'file':'format_error' (Reason) in apply 'fatal'/1 (_20)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
'parse_beam'/4 = fun (_0,_1,_2,_3) -> case call 'file':'read_file' (_1) of <{'ok',#{#<_X_Header>(_2,8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' -> case call 'beam_lib':'chunks' (Bin,['exports']) of <{'ok',{Module,[{'exports',Exports}|[]]}}> when 'true' -> case _3 of <'true'> when 'true' -> case call 'lists':'member' ({'main',1},Exports) of <'true'> when 'true' -> apply 'my_halt'/1 (0)
<'false'> when 'true' -> let <Text> = call 'lists':'concat' ([[70|[117|[110|[99|[116|[105|[111|[110|[32]]]]]]]]]|[Module|[[58|[109|[97|[105|[110|[47|[49|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]) in apply 'fatal'/1 (Text)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<'false'> when 'true' -> case _0 of <{'state',_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' -> let <_8> = call 'erlang':'setelement' (7,_0,'run') in let <_9> = call 'erlang':'setelement' (5,_8,'beam') in let <_10> = call 'erlang':'setelement' (4,_9,Bin) in call 'erlang':'setelement' (3,_10,Module)
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<{'error','beam_lib',Reason}> when call 'erlang':'is_tuple' (Reason) -> let <_13> = call 'erlang':'element' (1,Reason) in apply 'fatal'/1 (_13)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'parse_source'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'pre_def_macros'/1 (_1) of <{PreDefMacros,Module}> when 'true' -> case call 'file':'position' (_2,0) of <{'ok',_42}> when 'true' -> do (call ('io'-|['result_not_wanted'] ):('get_line'-|['result_not_wanted'] ) (_2,(''-|['result_not_wanted'] ))-|['result_not_wanted'] ) let <Encoding> = call 'epp':'set_encoding' (_2) in case call 'file':'position' (_2,_4) of <{'ok',_43}> when 'true' -> case call 'epp':'open' (_1,_2,_3,[],PreDefMacros) of <{'ok',Epp}> when 'true' -> do (case <> of <> when (call ('erlang'-|['result_not_wanted'] ):('=/='-|['result_not_wanted'] ) (Encoding,('none'-|['result_not_wanted'] ))-|['result_not_wanted'] ) -> (call ('io'-|['result_not_wanted'] ):('setopts'-|['result_not_wanted'] ) (_2,([({('encoding'-|['result_not_wanted'] ),Encoding}-|['result_not_wanted'] )|([]-|['result_not_wanted'] )]-|['result_not_wanted'] ))-|['result_not_wanted'] )
(<> when 'true' -> []-|['compiler_generated'] ) end-|['list_comprehension'] ) case call 'epp':'parse_erl_form' (Epp) of <{'ok',FileForm}> when 'true' -> let <OptModRes> = call 'epp':'parse_erl_form' (Epp) in case _0 of <{'state',_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' -> let <_18> = call 'erlang':'setelement' (5,_0,'text') in let <_20> = call 'erlang':'setelement' (3,_18,Module) in let <_31> = case OptModRes of <{'ok',Form = {'attribute',_54,'module',M}}> when 'true' -> case _20 of <{'state',_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' -> let <_24> = call 'erlang':'setelement' (3,_20,M) in apply 'epp_parse_file'/3 (Epp,_24,[Form|[FileForm|[]]])
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',_64}> when 'true' -> let <_25> = apply 'a1'/0 () in let <ModForm> = {'attribute',_25,'module',Module} in apply 'epp_parse_file2'/4 (Epp,_20,[ModForm|[FileForm|[]]],OptModRes)
<{'error',_65}> when 'true' -> apply 'epp_parse_file2'/4 (Epp,_20,[FileForm|[]],OptModRes)
<_@r0 = {'eof',LastLine}> when 'true' -> let <_rec57> = [FileForm|[_@r0|[]]] in case _0 of <{'state',_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' -> call 'erlang':'setelement' (4,_0,_rec57)
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_30> when 'true' -> primop 'match_fail' ({'case_clause',_30})-|['compiler_generated'] ) end in case call 'epp':'close' (Epp) of <'ok'> when 'true' -> case call 'file':'close' (_2) of <'ok'> when 'true' -> apply 'check_source'/2 (_31,_5)
(<_34> when 'true' -> primop 'match_fail' ({'badmatch',_34})-|['compiler_generated'] ) end
(<_33> when 'true' -> primop 'match_fail' ({'badmatch',_33})-|['compiler_generated'] ) end
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> do call 'io':'format' ([101|[115|[99|[114|[105|[112|[116|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]],[Reason|[]]) apply 'fatal'/1 ([80|[114|[101|[112|[114|[111|[99|[101|[115|[115|[111|[114|[32|[101|[114|[114|[111|[114]]]]]]]]]]]]]]]]]])
(<_35> when 'true' -> primop 'match_fail' ({'case_clause',_35})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'check_source'/2 = fun (_0,_1) -> case _0 of <{'state',_14,_15,_16,_17,Nerrs,_18,_19,_20}> when call 'erlang':'=/=' (Nerrs,0) -> apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
<{'state',_21,_22,[FileForm2|[ModForm2|Forms]],_23,_24,_25,ExpMain,_26}> when 'true' -> let <_4> = case ExpMain of <'false'> when 'true' -> let <_2> = apply 'a0'/0 () in [{'attribute',_2,'export',[{'main',1}]}|Forms]
<'true'> when 'true' -> Forms
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end in let <Forms3> = [FileForm2|[ModForm2|_4]] in case _1 of <'true'> when 'true' -> case call 'compile':'forms' (Forms3,['report'|['strong_validation']]) of <{'ok',_27}> when 'true' -> apply 'my_halt'/1 (0)
<_X_Other> when 'true' -> apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) end
<'false'> when 'true' -> case _0 of <{'state',_28,_29,_30,_31,_32,_33,_34,_35}> when 'true' -> call 'erlang':'setelement' (4,_0,Forms3)
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'pre_def_macros'/1 = fun (_0) -> case call 'erlang':'timestamp' () of <{MegaSecs,Secs,MicroSecs}> when 'true' -> let <Unique> = call 'erlang':'unique_integer' (['positive']) in let <Replace> = fun (_4) -> case _4 of <46> when 'true' -> 95
<_25> when 'true' -> _4 end in let <_7> = call 'filename':'basename' (_0) in let <CleanBase> = call 'lists':'map' (Replace,_7) in let <_17> = call 'erlang':'integer_to_list' (MegaSecs) in let <_14> = call 'erlang':'integer_to_list' (Secs) in let <_11> = call 'erlang':'integer_to_list' (MicroSecs) in let <_9> = call 'erlang':'integer_to_list' (Unique) in let <_10> = [95|[95|_9]] in let <_12> = call 'erlang':'++' (_11,_10) in let <_13> = [95|[95|_12]] in let <_15> = call 'erlang':'++' (_14,_13) in let <_16> = [95|[95|_15]] in let <_18> = call 'erlang':'++' (_17,_16) in let <_19> = call 'erlang':'++' ([101|[115|[99|[114|[105|[112|[116|[95|[95]]]]]]]]],_18) in let <_20> = [95|[95|_19]] in let <ModuleStr> = call 'erlang':'++' (CleanBase,_20) in let <Module> = call 'erlang':'list_to_atom' (ModuleStr) in let <PreDefMacros> = [{'MODULE',Module,'redefine'}|[{'MODULE_STRING',ModuleStr,'redefine'}|[]]] in {PreDefMacros,Module}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'epp_parse_file'/3 = fun (_0,_1,_2) -> let <Parsed> = call 'epp':'parse_erl_form' (_0) in apply 'epp_parse_file2'/4 (_0,_1,_2,Parsed)
'epp_parse_file2'/4 = fun (_0,_1,_2,_3) -> case _3 of <{'ok',Form}> when 'true' -> case Form of <{'attribute',_51,'record',_52}> when 'true' -> case _1 of <{'state',_53,_54,_55,_56,_57,_58,_59,_60}> when 'true' -> let <_6> = call 'erlang':'setelement' (9,_1,'true') in apply 'epp_parse_file'/3 (_0,_6,[Form|_2])
(<_61> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'attribute',Ln,'mode',NewMode}> when 'true' -> case _1 of <{'state',_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' -> let <_10> = call 'erlang':'setelement' (7,_1,NewMode) in case <> of <> when let <_12> = call 'erlang':'=:=' (NewMode,'compile') in let <_13> = call 'erlang':'=:=' (NewMode,'interpret') in let <_14> = call 'erlang':'=:=' (NewMode,'debug') in let <_15> = call 'erlang':'=:=' (NewMode,'native') in let <_16> = call 'erlang':'or' (_14,_15) in let <_17> = call 'erlang':'or' (_13,_16) in call 'erlang':'or' (_12,_17) -> apply 'epp_parse_file'/3 (_0,_10,[Form|_2])
<> when 'true' -> let <_18> = call 'io_lib':'format' ([105|[108|[108|[101|[103|[97|[108|[32|[109|[111|[100|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]],[NewMode|[]]) in let <Args> = call 'lists':'flatten' (_18) in (case _1 of (<({'state',_rec62,_71,_72,_73,_74,_75,_76,_77}-|['compiler_generated'] )> when 'true' -> do call 'io':'format' ([126|[116|[115|[58|[126|[119|[32|[126|[115|[10]]]]]]]]]],[_rec62|[Ln|[Args|[]]]]) let <Error> = {'error',{Ln,'erl_parse',Args}} in (case _1 of (<({'state',_79,_80,_81,_82,_rec63,_83,_84,_85}-|['compiler_generated'] )> when 'true' -> let <Nerrs> = call 'erlang':'+' (_rec63,1) in case _10 of <{'state',_87,_88,_89,_90,_91,_92,_93,_94}> when 'true' -> let <_28> = call 'erlang':'setelement' (6,_10,Nerrs) in apply 'epp_parse_file'/3 (_0,_28,[Error|_2])
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'attribute',_96,'export',Fs}> when 'true' -> case call 'lists':'member' ({'main',1},Fs) of <'false'> when 'true' -> apply 'epp_parse_file'/3 (_0,_1,[Form|_2])
<'true'> when 'true' -> case _1 of <{'state',_97,_98,_99,_100,_101,_102,_103,_104}> when 'true' -> let <_31> = call 'erlang':'setelement' (8,_1,'true') in apply 'epp_parse_file'/3 (_0,_31,[Form|_2])
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end
<_106> when 'true' -> apply 'epp_parse_file'/3 (_0,_1,[Form|_2]) end
<Form = {'error',{Ln,Mod,Args}}> when 'true' -> (case _1 of (<({'state',_rec66,_107,_108,_109,_110,_111,_112,_113}-|['compiler_generated'] )> when 'true' -> let <_36> = call Mod:'format_error' (Args) in do call 'io':'format' ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]],[_rec66|[Ln|[_36|[]]]]) (case _1 of (<({'state',_115,_116,_117,_118,_rec69,_119,_120,_121}-|['compiler_generated'] )> when 'true' -> let <_rec67> = call 'erlang':'+' (_rec69,1) in case _1 of <{'state',_123,_124,_125,_126,_127,_128,_129,_130}> when 'true' -> let <_42> = call 'erlang':'setelement' (6,_1,_rec67) in apply 'epp_parse_file'/3 (_0,_42,[Form|_2])
(<_131> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_122> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_114> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_@r0 = {'eof',LastLine}> when 'true' -> let <_rec70> = call 'lists':'reverse' ([_@r0|_2]) in case _1 of <{'state',_132,_133,_134,_135,_136,_137,_138,_139}> when 'true' -> call 'erlang':'setelement' (4,_1,_rec70)
(<_140> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_46> when 'true' -> primop 'match_fail' ({'case_clause',_46})-|['compiler_generated'] ) end
'debug'/3 = fun (_0,_1,_2) -> case apply 'hidden_apply'/4 ('debugger','debugger','start',[]) of <{'ok',_9}> when 'true' -> case apply 'hidden_apply'/4 ('debugger','int','i',[_1|[]]) of <{'module',_10}> when 'true' -> do apply 'hidden_apply'/4 ('debugger','debugger','auto_attach',[['init']]) apply 'run'/2 (_0,_2)
<'error'> when 'true' -> let <Text> = call 'lists':'concat' ([[67|[97|[110|[110|[111|[116|[32|[108|[111|[97|[100|[32|[116|[104|[101|[32|[99|[111|[100|[101|[32|[102|[111|[114|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[_0|[[32|[105|[110|[116|[111|[32|[116|[104|[101|[32|[100|[101|[98|[117|[103|[103|[101|[114]]]]]]]]]]]]]]]]]]]]]) in apply 'fatal'/1 (Text)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<_11> when 'true' -> apply 'fatal'/1 ([67|[97|[110|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[116|[104|[101|[32|[100|[101|[98|[117|[103|[103|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]) end
'run'/2 = fun (_0,_1) -> try do call _0:'main' (_1) apply 'my_halt'/1 (0) of <_2> -> _2 catch <_5,_4,_3> -> let <StackTrace> = primop 'build_stacktrace' (_3) in let <_6> = apply 'format_exception'/3 (_5,_4,StackTrace) in apply 'fatal'/1 (_6)
'interpret'/4 = fun (_0,_1,_2,_3) -> do case call 'erl_lint':'module' (_0) of <{'ok',Ws}> when 'true' -> apply 'report_warnings'/1 (Ws)
<{'error',Es,Ws}> when 'true' -> do apply 'report_errors'/1 (Es) do apply 'report_warnings'/1 (Ws) apply 'fatal'/1 ([84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end let <_6> = case _1 of <'false'> when 'true' -> _0
<'true'> when 'true' -> call 'erl_expand_records':'module' (_0,[])
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in let <Dict> = apply 'parse_to_map'/1 (_6) in let <ArgsA> = call 'erl_parse':'abstract' (_3,0) in let <Anno> = apply 'a0'/0 () in let <Call> = {'call',Anno,{'atom',Anno,'main'},[ArgsA|[]]} in try let <_17> = call ('erl_eval'-|['result_not_wanted'] ):('new_bindings'-|['result_not_wanted'] ) () in let <_16> = fun (_13,_12) -> apply 'code_handler'/4 (_13,_12,Dict,_2) in do (call ('erl_eval'-|['result_not_wanted'] ):('expr'-|['result_not_wanted'] ) (Call,_17,({('value'-|['result_not_wanted'] ),_16}-|['result_not_wanted'] ))-|['result_not_wanted'] ) apply 'my_halt'/1 (0) of <_19> -> _19 catch <_22,_21,_20> -> let <StackTrace> = primop 'build_stacktrace' (_20) in let <_23> = apply 'format_exception'/3 (_22,_21,StackTrace) in apply 'fatal'/1 (_23)
'report_errors'/1 = fun (_0) -> let <_3> = fun (_1) -> case _1 of <{{F,_X_L},Eds}> when 'true' -> apply 'list_errors'/2 (F,Eds)
<{F,Eds}> when 'true' -> apply 'list_errors'/2 (F,Eds)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'-report_errors/1-fun-0-',1}}] )-|['compiler_generated'] ) end in call 'lists':'foreach' (_3,_0)
'list_errors'/2 = fun (_0,_1) -> case <_0,_1> of <F,[{Line,Mod,E}|Es]> when 'true' -> let <_2> = call Mod:'format_error' (E) in do call 'io':'fwrite' ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]],[F|[Line|[_2|[]]]]) apply 'list_errors'/2 (F,Es)
<F,[{Mod,E}|Es]> when 'true' -> let <_3> = call Mod:'format_error' (E) in do call 'io':'fwrite' ([126|[116|[115|[58|[32|[126|[116|[115|[10]]]]]]]]],[F|[_3|[]]]) apply 'list_errors'/2 (F,Es)
<_X_F,[]> when 'true' -> 'ok'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'list_errors',2}}] )-|['compiler_generated'] ) end
'report_warnings'/1 = fun (_0) -> let <_3> = fun (_1) -> case _1 of <{{F,_X_L},Eds}> when 'true' -> apply 'format_message'/2 (F,Eds)
<{F,Eds}> when 'true' -> apply 'format_message'/2 (F,Eds)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'-report_warnings/1-fun-0-',1}}] )-|['compiler_generated'] ) end in let <Ws1> = call 'lists':'flatmap' (_3,_0) in let <Ws> = call 'ordsets':'from_list' (Ws1) in let <_8> = fun (_6) -> case _6 of <{_10,Str}> when 'true' -> call 'io':'put_chars' (Str)
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'-report_warnings/1-fun-1-',1}}] )-|['compiler_generated'] ) end in call 'lists':'foreach' (_8,Ws)
'format_message'/2 = fun (_0,_1) -> case <_0,_1> of <F,[{Line,Mod,E}|Es]> when 'true' -> let <_2> = call Mod:'format_error' (E) in let <_3> = call 'io_lib':'format' ([126|[116|[115|[58|[126|[119|[58|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]],[F|[Line|[_2|[]]]]) in let <M> = {{F,Line},_3} in let <_5> = apply 'format_message'/2 (F,Es) in [M|_5]
<F,[{Mod,E}|Es]> when 'true' -> let <_6> = call Mod:'format_error' (E) in let <_7> = call 'io_lib':'format' ([126|[116|[115|[58|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]],[F|[_6|[]]]) in let <M> = {'none',_7} in let <_9> = apply 'format_message'/2 (F,Es) in [M|_9]
<_12,[]> when 'true' -> []
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'format_message',2}}] )-|['compiler_generated'] ) end
'parse_to_map'/1 = fun (_0) -> let <_1> = call 'maps':'new' () in apply 'parse_to_map'/2 (_0,_1)
'parse_to_map'/2 = fun (_0,_1) -> case <_0,_1> of <[{'function',_11,Name,Arity,Clauses}|T],Map0> when 'true' -> let <Map> = call 'maps':'put' ({'local',Name,Arity},Clauses,Map0) in apply 'parse_to_map'/2 (T,Map)
<[{'attribute',_12,'import',{Mod,Funcs}}|T],Map0> when 'true' -> let <_7> = fun (_4,_3) -> call 'maps':'put' ({'remote',_4},Mod,_3) in let <Map> = call 'lists':'foldl' (_7,Map0,Funcs) in apply 'parse_to_map'/2 (T,Map)
<[_13|T],Map> when 'true' -> apply 'parse_to_map'/2 (T,Map)
<[],Map> when 'true' -> Map
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'parse_to_map',2}}] )-|['compiler_generated'] ) end
'code_handler'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'local',['file'],_19,File> when 'true' -> File
<Name,Args,Map,File> when 'true' -> let <Arity> = call 'erlang':'length' (Args) in case call 'maps':'find' ({'local',Name,Arity},Map) of <{'ok',Cs}> when 'true' -> let <_9> = fun (_6,_5) -> apply 'code_handler'/4 (_6,_5,Map,File) in let <LF> = {'value',_9} in let <_11> = call 'erl_eval':'new_bindings' () in case call 'erl_eval':'match_clause' (Cs,Args,_11,LF) of <{Body,Bs}> when 'true' -> apply 'eval_exprs'/5 (Body,Bs,LF,'none','none')
<'nomatch'> when 'true' -> call 'erlang':'error' ({'function_clause',[{'local',Name,Args}|[]]})
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<'error'> when 'true' -> case call 'maps':'find' ({'remote',{Name,Arity}},Map) of <{'ok',Mod}> when 'true' -> call 'erlang':'apply' (Mod,Name,Args)
<'error'> when 'true' -> do call 'io':'format' ([83|[99|[114|[105|[112|[116|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[32|[126|[116|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Arity|[]]]) apply 'my_halt'/1 (127)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end end
'eval_exprs'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[E|[]],Bs0,Lf,Ef,_X_RBs> when 'true' -> call 'erl_eval':'expr' (E,Bs0,Lf,Ef,'value')
<[E|Es],Bs0,Lf,Ef,RBs> when 'true' -> case call 'erl_eval':'expr' (E,Bs0,Lf,Ef,'none') of <{'value',_X_V,Bs}> when 'true' -> apply 'eval_exprs'/5 (Es,Bs,Lf,Ef,RBs)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9,_8})-|[{'function_name',{'eval_exprs',5}}] )-|['compiler_generated'] ) end
'format_exception'/3 = fun (_0,_1,_2) -> let <Enc> = apply 'encoding'/0 () in let <_5> = case Enc of <'latin1'> when 'true' -> [80]
<_27> when 'true' -> [116|[80]] end in let <PF> = fun (_11,_10) -> let <_7> = call 'erlang':'integer_to_list' (_10) in let <_8> = call 'erlang':'++' (_7,_5) in let <_9> = [126|[46|_8]] in call 'io_lib':'format' (_9,[_11|[50]]) in let <StackFun> = fun (_19,_18,_17) -> let <_16> = call 'erlang':'=:=' (_19,'erl_eval') in let <_15> = call 'erlang':'=:=' (_19,'escript') in call 'erlang':'or' (_16,_15) in call 'erl_error':'format_exception' (1,_0,_1,_2,StackFun,PF,Enc)
'encoding'/0 = fun () -> case call 'io':'getopts' () of <_X_Err = {'error',_2}> when 'true' -> 'latin1'
<Opts> when 'true' -> case call 'lists':'keyfind' ('encoding',1,Opts) of <'false'> when 'true' -> 'latin1'
<{'encoding',Encoding}> when 'true' -> Encoding
(<_0> when 'true' -> primop 'match_fail' ({'case_clause',_0})-|['compiler_generated'] ) end end
'put_chars'/1 = fun (_0) -> try call 'io':'put_chars' (_0) of <_1> -> _1 catch <_4,_3,_2> -> let <_5> = call 'lists':'flatten' (_0) in call 'erlang':'display' (_5)
'a0'/0 = fun () -> apply 'anno'/1 (0)
'a1'/0 = fun () -> apply 'anno'/1 (1)
'anno'/1 = fun (_0) -> call 'erl_anno':'new' (_0)
'fatal'/1 = fun (_0) -> call 'erlang':'throw' (_0)
'my_halt'/1 = fun (_0) -> call 'erlang':'halt' (_0)
'hidden_apply'/4 = fun (_0,_1,_2,_3) -> try let <_4> = fun () -> _1 in let <_5> = apply _4 () in call 'erlang':'apply' (_5,_2,_3) of <_6> -> _6 catch <_9,_8,_7> -> case <_9,_8,_7> of <('error'-|['compiler_generated'] ),('undef'-|['compiler_generated'] ),_26> when 'true' -> let <StackTrace> = primop 'build_stacktrace' (_26) in case StackTrace of <[{_17,_18,_19,_20}|_21]> when let <_24> = call 'erlang':'=:=' (_17,_1) in let <_22> = call 'erlang':'=:=' (_18,_2) in let <_23> = call 'erlang':'=:=' (_19,_3) in let <_25> = call 'erlang':'and' (_22,_23) in call 'erlang':'and' (_24,_25) -> let <Arity> = call 'erlang':'length' (_3) in let <Text> = call 'io_lib':'format' ([67|[97|[108|[108|[32|[116|[111|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[105|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[_2|[Arity|[_0|[]]]]]) in apply 'fatal'/1 (Text)
<Stk> when 'true' -> call 'erlang':'raise' ('error','undef',Stk) end
(<_27,_28,_29> when 'true' -> primop 'raise' (_29,_28)-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('escript')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('escript',_0) end