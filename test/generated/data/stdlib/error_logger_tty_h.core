module 'error_logger_tty_h' ['code_change'/3,'handle_call'/2,'handle_event'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'terminate'/2,'write_event'/2,'write_event'/3] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[114|[111|[114|[95|[108|[111|[103|[103|[101|[114|[95|[116|[116|[121|[95|[104|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_event']
, 'record' = [{'st',[{'record_field',39,{'atom',39,'user'}}|[{'record_field',40,{'atom',40,'prev_handler'}}|[{'record_field',41,{'atom',41,'io_mod'},{'atom',41,'io'}}|[{'record_field',42,{'atom',42,'depth'},{'atom',42,'unlimited'}}|[{'record_field',43,{'atom',43,'modifier'},{'string',43,[]}}]]]]]}] ] 'init'/1 = fun (_0) -> case _0 of <{[],{'error_logger',Buf}}> when 'true' -> let <User> = apply 'set_group_leader'/0 () in let <Depth> = call 'error_logger':'get_format_depth' () in let <Modifier> = apply 'modifier'/0 () in let <State> = {'st',User,'error_logger','io',Depth,Modifier} in do apply 'write_events'/2 (State,Buf) {'ok',State}
<{[],{'error_logger_tty_h',PrevHandler}}> when 'true' -> let <User> = apply 'set_group_leader'/0 () in {'ok',{'st',User,PrevHandler,'io','unlimited',[]}}
<[]> when 'true' -> let <User> = apply 'set_group_leader'/0 () in let <Depth> = call 'error_logger':'get_format_depth' () in let <Modifier> = apply 'modifier'/0 () in {'ok',{'st',User,[],'io',Depth,Modifier}}
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'handle_event'/2 = fun (_0,_1) -> case <_0,_1> of <{_X_Type,GL,_X_Msg},State> when try let <_3> = call 'erlang':'node' (GL) in let <_2> = call 'erlang':'node' () in call 'erlang':'=/=' (_3,_2) of <Try> -> Try catch <T,R> -> 'false' -> {'ok',State}
<Event,State> when 'true' -> let <_4> = apply 'tag_event'/1 (Event) in case apply 'do_write_event'/2 (State,_4) of <'ok'> when 'true' -> {'ok',State}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end end
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <{'EXIT',User,_X_Reason},State = {'st',_5,PrevHandler,_6,_7,_8}> when call 'erlang':'=:=' (_5,User) -> case PrevHandler of <[]> when 'true' -> 'remove_handler'
<_9> when 'true' -> {'swap_handler','install_prev',State,PrevHandler,'go_back'} end
<_10,State> when 'true' -> {'ok',State} end
'handle_call'/2 = fun (_0,_1) -> {'ok',{'error','bad_query'},_1}
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <'install_prev',_X_State> when 'true' -> []
<_X_Reason,{'st',_4,PrevHandler,_5,_6,_7}> when 'true' -> {'error_logger_tty_h',PrevHandler}
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'terminate',2}}] )-|['compiler_generated'] ) end
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'write_event'/2 = fun (_0,_1) -> apply 'do_write_event'/2 ({'st','undefined','undefined',_1,'unlimited',[]},_0)
'write_event'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Event,IoMod,{Depth,Enc}> when 'true' -> let <Modifier> = apply 'modifier'/1 (Enc) in apply 'do_write_event'/2 ({'st','undefined','undefined',IoMod,Depth,Modifier},Event)
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'write_event',3}}] )-|['compiler_generated'] ) end
'set_group_leader'/0 = fun () -> case call 'erlang':'whereis' ('user') of <User> when call 'erlang':'is_pid' (User) -> do call 'erlang':'link' (User) let <_0> = call 'erlang':'self' () in do call 'erlang':'group_leader' (User,_0) User
<_2> when 'true' -> 'false' end
'tag_event'/1 = fun (_0) -> let <_1> = call 'erlang':'universaltime' () in {_1,_0}
'write_events'/2 = fun (_0,_1) -> case <_0,_1> of <State,[Ev|Es]> when 'true' -> do apply 'write_events'/2 (State,Es) do apply 'do_write_event'/2 (State,Ev) 'ok'
<_X_State,[]> when 'true' -> 'ok'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'write_events',2}}] )-|['compiler_generated'] ) end
'do_write_event'/2 = fun (_0,_1) -> case <_0,_1> of <State = {'st',_17,_18,_19,_20,M},{Time,Event}> when 'true' -> case apply 'parse_event'/2 (Event,M) of <'ignore'> when 'true' -> 'ok'
<{Title,Pid,FormatList}> when 'true' -> let <Header> = apply 'header'/3 (Time,Title,M) in let <Body> = apply 'format_body'/2 (State,FormatList) in let <_8> = case <> of <> when try let <_5> = call 'erlang':'node' (Pid) in let <_4> = call 'erlang':'node' () in call 'erlang':'=/=' (_5,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_6> = call 'erlang':'node' (Pid) in let <_7> = call 'erlang':'atom_to_list' (_6) in [[42|[42|[32|[97|[116|[32|[110|[111|[100|[101|[32]]]]]]]]]]]|[_7|[[32|[42|[42|[10]]]]]]]
<> when 'true' -> [] end in let <Str> = [Header|[_8|[Body|[]]]] in (case State of (<({'st',_21,_22,_rec0,_23,_24}-|['compiler_generated'] )> when 'true' -> case _rec0 of <'io_lib'> when 'true' -> Str
<'io'> when 'true' -> call 'io':'put_chars' ('user',Str)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','st'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
<_26,_27> when 'true' -> 'ok' end
'format_body'/2 = fun (_0,_1) -> case <_0,_1> of <State = {'st',_16,_17,_18,_19,M},[{Format,Args}|T]> when 'true' -> let <_11> = try apply 'format'/3 (State,Format,Args) of <_2> -> _2 catch <_6,_5,_4> -> let <_7> = call 'erlang':'++' (M,[112|[10]]) in let <_8> = call 'erlang':'++' ([112|[32|[45|[32|[126]]]]],_7) in let <_9> = call 'erlang':'++' (M,_8) in let <_10> = call 'erlang':'++' ([69|[82|[82|[79|[82|[58|[32|[126]]]]]]]],_9) in apply 'format'/3 (State,_10,[Format|[Args|[]]]) in let <_13> = apply 'format_body'/2 (State,T) in [_11|_13]
<_X_State,[]> when 'true' -> []
(<_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14})-|[{'function_name',{'format_body',2}}] )-|['compiler_generated'] ) end
'format'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'st',_8,_9,_10,'unlimited',_11},Format,Args> when 'true' -> call 'io_lib':'format' (Format,Args)
<{'st',_12,_13,_14,Depth,_15},Format0,Args> when 'true' -> let <Format1> = call 'io_lib':'scan_format' (Format0,Args) in let <Format> = apply 'limit_format'/2 (Format1,Depth) in call 'io_lib':'build_text' (Format)
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'format',3}}] )-|['compiler_generated'] ) end
'limit_format'/2 = fun (_0,_1) -> case <_0,_1> of <[M0 = ~{'control_char':=C0}~|T],Depth> when let <_2> = call 'erlang':'=:=' (C0,112) in let <_3> = call 'erlang':'=:=' (C0,119) in call 'erlang':'or' (_2,_3) -> let <C> = call 'erlang':'-' (C0,32) in case M0 of <~{'args':=Args}~> when 'true' -> let <_7> = call 'erlang':'++' (Args,[Depth|[]]) in case <> of (<> when call 'erlang':'is_map' (M0) -> let <_8> = ~{'control_char':=C,'args':=_7|M0}~ in let <_10> = apply 'limit_format'/2 (T,Depth) in [_8|_10]-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',M0})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[H|T],Depth> when 'true' -> let <_11> = apply 'limit_format'/2 (T,Depth) in [H|_11]
<[],_14> when 'true' -> []
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'limit_format',2}}] )-|['compiler_generated'] ) end
'parse_event'/2 = fun (_0,_1) -> case <_0,_1> of <{'error',_X_GL,{Pid,Format,Args}},_7> when 'true' -> {[69|[82|[82|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'info_msg',_X_GL,{Pid,Format,Args}},_8> when 'true' -> {[73|[78|[70|[79|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'warning_msg',_X_GL,{Pid,Format,Args}},_9> when 'true' -> {[87|[65|[82|[78|[73|[78|[71|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'error_report',_X_GL,{Pid,'std_error',Args}},M> when 'true' -> let <_2> = apply 'format_term'/2 (Args,M) in {[69|[82|[82|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]],Pid,_2}
<{'info_report',_X_GL,{Pid,'std_info',Args}},M> when 'true' -> let <_3> = apply 'format_term'/2 (Args,M) in {[73|[78|[70|[79|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]],Pid,_3}
<{'warning_report',_X_GL,{Pid,'std_warning',Args}},M> when 'true' -> let <_4> = apply 'format_term'/2 (Args,M) in {[87|[65|[82|[78|[73|[78|[71|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]],Pid,_4}
<_10,_11> when 'true' -> 'ignore' end
'format_term'/2 = fun (_0,_1) -> case <_0,_1> of <Term,M> when call 'erlang':'is_list' (Term) -> let <_2> = call 'lists':'flatten' (Term) in case apply 'string_p'/1 (_2) of <'true'> when 'true' -> let <_3> = call 'erlang':'++' (M,[115|[10]]) in let <_4> = [126|_3] in [{_4,[Term|[]]}|[]]
<'false'> when 'true' -> apply 'format_term_list'/2 (Term,M)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Term,M> when 'true' -> let <_6> = call 'erlang':'++' (M,[112|[10]]) in let <_7> = [126|_6] in [{_7,[Term|[]]}|[]] end
'format_term_list'/2 = fun (_0,_1) -> case <_0,_1> of <[{Tag,Data}|T],M> when 'true' -> let <_2> = call 'erlang':'++' (M,[112|[10]]) in let <_3> = [112|[58|[32|[126|_2]]]] in let <_4> = call 'erlang':'++' (M,_3) in let <_5> = call 'erlang':'++' ([32|[32|[32|[32|[126]]]]],_4) in let <_6> = apply 'format_term_list'/2 (T,M) in [{_5,[Tag|[Data|[]]]}|_6]
<[Data|T],M> when 'true' -> let <_7> = call 'erlang':'++' (M,[112|[10]]) in let <_8> = call 'erlang':'++' ([32|[32|[32|[32|[126]]]]],_7) in let <_9> = apply 'format_term_list'/2 (T,M) in [{_8,[Data|[]]}|_9]
<[],_12> when 'true' -> []
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'format_term_list',2}}] )-|['compiler_generated'] ) end
'string_p'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'false'
<FlatList> when 'true' -> call 'io_lib':'printable_list' (FlatList) end
'get_utc_config'/0 = fun () -> case call 'application':'get_env' ('sasl','utc_log') of <{'ok',Val}> when 'true' -> Val
<'undefined'> when 'true' -> case call 'application':'get_env' ('stdlib','utc_log') of <{'ok',Val}> when 'true' -> Val
<'undefined'> when 'true' -> 'false'
(<_0> when 'true' -> primop 'match_fail' ({'case_clause',_0})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'header'/3 = fun (_0,_1,_2) -> case apply 'get_utc_config'/0 () of <'true'> when 'true' -> apply 'header'/4 (_0,_1,[85|[84|[67|[32]]]],_2)
<_8> when 'true' -> let <_3> = call 'calendar':'universal_time_to_local_time' (_0) in apply 'header'/4 (_3,_1,[],_2) end
'header'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{{Y,Mo,D},{H,Mi,S}},Title,UTC,M> when 'true' -> let <_8> = call 'erlang':'++' (M,[115|[61|[61|[61|[61|[32|[126|[112|[45|[126|[115|[45|[126|[112|[58|[58|[126|[115|[58|[126|[115|[58|[126|[115|[32|[126|[115|[61|[61|[61|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) in let <_9> = [126|[110|[61|[126|_8]]]] in let <_4> = apply 'month'/1 (Mo) in let <_5> = apply 't'/1 (H) in let <_6> = apply 't'/1 (Mi) in let <_7> = apply 't'/1 (S) in call 'io_lib':'format' (_9,[Title|[D|[_4|[Y|[_5|[_6|[_7|[UTC|[]]]]]]]]])
(<_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10})-|[{'function_name',{'header',4}}] )-|['compiler_generated'] ) end
't'/1 = fun (_0) -> case _0 of <X> when call 'erlang':'is_integer' (_0) -> let <_1> = call 'erlang':'integer_to_list' (X) in apply 't1'/1 (_1)
<_3> when 'true' -> [] end
't1'/1 = fun (_0) -> case _0 of <_@r0 = [X|[]]> when 'true' -> [48|_@r0]
<X> when 'true' -> X end
'month'/1 = fun (_0) -> case _0 of <1> when 'true' -> [74|[97|[110]]]
<2> when 'true' -> [70|[101|[98]]]
<3> when 'true' -> [77|[97|[114]]]
<4> when 'true' -> [65|[112|[114]]]
<5> when 'true' -> [77|[97|[121]]]
<6> when 'true' -> [74|[117|[110]]]
<7> when 'true' -> [74|[117|[108]]]
<8> when 'true' -> [65|[117|[103]]]
<9> when 'true' -> [83|[101|[112]]]
<10> when 'true' -> [79|[99|[116]]]
<11> when 'true' -> [78|[111|[118]]]
<12> when 'true' -> [68|[101|[99]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'month',1}}] )-|['compiler_generated'] ) end
'modifier'/0 = fun () -> let <_0> = apply 'encoding'/0 () in apply 'modifier'/1 (_0)
'modifier'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'encoding'/0 = fun () -> let <_0> = call 'io':'getopts' () in call 'proplists':'get_value' ('encoding',_0,'latin1')
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('error_logger_tty_h')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('error_logger_tty_h',_0) end