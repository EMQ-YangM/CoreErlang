module 'io_lib_pretty' ['intermediate'/6,'module_info'/0,'module_info'/1,'print'/1,'print'/2,'print'/3,'print'/4,'print'/5,'print'/6,'write'/1] attributes [ 'file' = [{[115|[114|[99|[47|[105|[111|[95|[108|[105|[98|[95|[112|[114|[101|[116|[116|[121|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]],1}]
, 'spec' = [{{'print',1},[{'type',40,'fun',[{'type',40,'product',[{'type',40,'term',[]}]}|[{'remote_type',40,[{'atom',40,'io_lib'}|[{'atom',40,'chars'}|[[]]]]}]]}]}]
, 'type' = [{'rec_print_fun',{'type',50,'fun',[{'type',50,'product',[{'ann_type',50,[{'var',50,'Tag'}|[{'type',50,'atom',[]}]]}|[{'ann_type',50,[{'var',50,'NFields'}|[{'type',50,'non_neg_integer',[]}]]}]]}|[{'type',51,'union',[{'atom',51,'no'}|[{'type',51,'list',[{'ann_type',51,[{'var',51,'FieldName'}|[{'type',51,'atom',[]}]]}]}]]}]]},[]}]
, 'type' = [{'column',{'type',52,'integer',[]},[]}]
, 'type' = [{'encoding',{'type',53,'union',[{'remote_type',53,[{'atom',53,'epp'}|[{'atom',53,'source_encoding'}|[[]]]]}|[{'atom',53,'unicode'}]]},[]}]
, 'type' = [{'line_length',{'type',54,'pos_integer',[]},[]}]
, 'type' = [{'depth',{'type',55,'integer',[]},[]}]
, 'type' = [{'line_max_chars',{'type',56,'integer',[]},[]}]
, 'type' = [{'chars_limit',{'type',57,'integer',[]},[]}]
, 'type' = [{'chars',{'remote_type',59,[{'atom',59,'io_lib'}|[{'atom',59,'chars'}|[[]]]]},[]}]
, 'type' = [{'option',{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'chars_limit'}|[{'user_type',60,'chars_limit',[]}]]}|[{'type',61,'tuple',[{'atom',61,'column'}|[{'user_type',61,'column',[]}]]}|[{'type',62,'tuple',[{'atom',62,'depth'}|[{'user_type',62,'depth',[]}]]}|[{'type',63,'tuple',[{'atom',63,'encoding'}|[{'user_type',63,'encoding',[]}]]}|[{'type',64,'tuple',[{'atom',64,'line_length'}|[{'user_type',64,'line_length',[]}]]}|[{'type',65,'tuple',[{'atom',65,'line_max_chars'}|[{'user_type',65,'line_max_chars',[]}]]}|[{'type',66,'tuple',[{'atom',66,'record_print_fun'}|[{'user_type',66,'rec_print_fun',[]}]]}|[{'type',67,'tuple',[{'atom',67,'strings'}|[{'type',67,'boolean',[]}]]}]]]]]]]]},[]}]
, 'type' = [{'options',{'type',68,'list',[{'user_type',68,'option',[]}]},[]}]
, 'spec' = [{{'print',2},[{'type',70,'fun',[{'type',70,'product',[{'type',70,'term',[]}|[{'user_type',70,'rec_print_fun',[]}]]}|[{'user_type',70,'chars',[]}]]}|[{'type',71,'fun',[{'type',71,'product',[{'type',71,'term',[]}|[{'user_type',71,'options',[]}]]}|[{'user_type',71,'chars',[]}]]}]]}]
, 'spec' = [{{'print',3},[{'type',86,'fun',[{'type',86,'product',[{'type',86,'term',[]}|[{'user_type',86,'depth',[]}|[{'user_type',86,'rec_print_fun',[]}]]]}|[{'user_type',86,'chars',[]}]]}]}]
, 'spec' = [{{'print',4},[{'type',91,'fun',[{'type',91,'product',[{'type',91,'term',[]}|[{'user_type',91,'column',[]}|[{'user_type',91,'line_length',[]}|[{'user_type',91,'depth',[]}]]]]}|[{'user_type',91,'chars',[]}]]}]}]
, 'spec' = [{{'print',5},[{'type',96,'fun',[{'type',96,'product',[{'type',96,'term',[]}|[{'user_type',96,'column',[]}|[{'user_type',96,'line_length',[]}|[{'user_type',96,'depth',[]}|[{'user_type',96,'rec_print_fun',[]}]]]]]}|[{'user_type',97,'chars',[]}]]}]}]
, 'spec' = [{{'print',6},[{'type',101,'fun',[{'type',101,'product',[{'type',101,'term',[]}|[{'user_type',101,'column',[]}|[{'user_type',101,'line_length',[]}|[{'user_type',101,'depth',[]}|[{'user_type',101,'line_max_chars',[]}|[{'user_type',102,'rec_print_fun',[]}]]]]]]}|[{'user_type',102,'chars',[]}]]}]}]
, 'type' = [{'more',{'type',417,'fun',[{'type',417,'product',[{'user_type',417,'chars_limit',[]}|[{'ann_type',417,[{'var',417,'DeltaDepth'}|[{'type',417,'non_neg_integer',[]}]]}]]}|[{'user_type',418,'intermediate_format',[]}]]},[]}]
, 'type' = [{'if_list',{'type',420,'maybe_improper_list',[{'user_type',420,'intermediate_format',[]}|[{'type',421,'tuple',[{'atom',421,'dots'}|[{'type',421,'non_neg_integer',[]}|[{'type',422,'non_neg_integer',[]}|[{'user_type',422,'more',[]}]]]]}]]},[]}]
, 'type' = [{'intermediate_format',{'type',425,'tuple',[{'type',425,'union',[{'user_type',425,'chars',[]}|[{'type',426,'tuple',[{'atom',426,'bin'}|[{'user_type',426,'chars',[]}]]}|[{'atom',427,'dots'}|[{'type',428,'tuple',[{'atom',428,'field'}|[{'ann_type',428,[{'var',428,'Name'}|[{'user_type',428,'chars',[]}]]}|[{'ann_type',428,[{'var',428,'NameLen'}|[{'type',428,'non_neg_integer',[]}]]}|[{'user_type',429,'intermediate_format',[]}]]]]}|[{'type',430,'tuple',[{'atom',430,'list'}|[{'user_type',430,'if_list',[]}]]}|[{'type',431,'tuple',[{'atom',431,'map'}|[{'user_type',431,'if_list',[]}]]}|[{'type',432,'tuple',[{'atom',432,'map_pair'}|[{'ann_type',432,[{'var',432,'K'}|[{'user_type',432,'intermediate_format',[]}]]}|[{'ann_type',433,[{'var',433,'V'}|[{'user_type',433,'intermediate_format',[]}]]}]]]}|[{'type',434,'tuple',[{'atom',434,'record'}|[{'type',434,'list',[{'type',434,'union',[{'type',434,'tuple',[{'ann_type',434,[{'var',434,'Name'}|[{'user_type',434,'chars',[]}]]}|[{'ann_type',434,[{'var',434,'NameLen'}|[{'type',434,'non_neg_integer',[]}]]}]]}|[{'user_type',435,'if_list',[]}]]}]}]]}|[{'type',436,'tuple',[{'atom',436,'tuple'}|[{'ann_type',436,[{'var',436,'IsTagged'}|[{'type',436,'boolean',[]}]]}|[{'user_type',436,'if_list',[]}]]]}]]]]]]]]]}|[{'ann_type',437,[{'var',437,'Len'}|[{'type',437,'non_neg_integer',[]}]]}|[{'ann_type',438,[{'var',438,'NumOfDots'}|[{'type',438,'non_neg_integer',[]}]]}|[{'ann_type',439,[{'var',439,'More'}|[{'type',439,'union',[{'user_type',439,'more',[]}|[{'atom',439,'no_more'}]]}]]}]]]]},[]}]
, 'spec' = [{{'intermediate',6},[{'type',442,'fun',[{'type',442,'product',[{'type',442,'term',[]}|[{'user_type',442,'depth',[]}|[{'type',442,'pos_integer',[]}|[{'user_type',442,'rec_print_fun',[]}|[{'user_type',443,'encoding',[]}|[{'type',443,'boolean',[]}]]]]]]}|[{'user_type',443,'intermediate_format',[]}]]}]}] ] 'print'/1 = fun (_0) -> apply 'print'/4 (_0,1,80,-1)
'print'/2 = fun (_0,_1) -> case <_0,_1> of <Term,Options> when call 'erlang':'is_list' (Options) -> let <Col> = apply 'get_option'/3 ('column',Options,1) in let <Ll> = apply 'get_option'/3 ('line_length',Options,80) in let <D> = apply 'get_option'/3 ('depth',Options,-1) in let <M> = apply 'get_option'/3 ('line_max_chars',Options,-1) in let <T> = apply 'get_option'/3 ('chars_limit',Options,-1) in let <RecDefFun> = apply 'get_option'/3 ('record_print_fun',Options,'no_fun') in let <_11> = call 'epp':'default_encoding' () in let <Encoding> = apply 'get_option'/3 ('encoding',Options,_11) in let <Strings> = apply 'get_option'/3 ('strings',Options,'true') in apply 'print'/9 (Term,Col,Ll,D,M,T,RecDefFun,Encoding,Strings)
<Term,RecDefFun> when 'true' -> apply 'print'/3 (Term,-1,RecDefFun) end
'print'/3 = fun (_0,_1,_2) -> apply 'print'/5 (_0,1,80,_1,_2)
'print'/4 = fun (_0,_1,_2,_3) -> apply 'print'/9 (_0,_1,_2,_3,-1,-1,'no_fun','latin1','true')
'print'/5 = fun (_0,_1,_2,_3,_4) -> apply 'print'/6 (_0,_1,_2,_3,-1,_4)
'print'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'print'/9 (_0,_1,_2,_3,_4,-1,_5,'latin1','true')
'print'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <_37,_38,_39,0,_X_M,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> [46|[46|[46]]]
<_40,_41,_42,_X_D,_X_M,0,_X_RF,_X_Enc,_X_Str> when 'true' -> [46|[46|[46]]]
<Term,Col,Ll,D,M,T,RecDefFun,Enc,Str> when call 'erlang':'=<' (Col,0) -> apply 'print'/9 (Term,1,Ll,D,M,T,RecDefFun,Enc,Str)
<Atom,_X_Col,_X_Ll,_X_D,_X_M,_X_T,_X_RF,Enc,_X_Str> when call 'erlang':'is_atom' (Atom) -> apply 'write_atom'/2 (Atom,Enc)
<Term,Col,Ll,D,M0,T,RecDefFun,Enc,Str> when let <_9> = call 'erlang':'is_tuple' (Term) in let <_10> = call 'erlang':'is_list' (Term) in let <_11> = call 'erlang':'is_map' (Term) in let <_12> = call 'erlang':'is_bitstring' (Term) in let <_13> = call 'erlang':'or' (_11,_12) in let <_14> = call 'erlang':'or' (_10,_13) in call 'erlang':'or' (_9,_14) -> let <_16> = case <> of <> when call 'erlang':'<' (T,0) -> apply 'print_length'/6 (Term,D,T,RecDefFun,Enc,Str)
<> when 'true' -> apply 'intermediate'/6 (Term,D,T,RecDefFun,Enc,Str) end in case _16 of <If = {_43,Len,_X_Dots,_44}> when 'true' -> let <M> = apply 'max_cs'/2 (M0,Len) in case <> of <> when call 'erlang':'=:=' (Ll,0) -> apply 'write'/1 (If)
<> when try let <_19> = call 'erlang':'-' (Ll,Col) in let <_20> = call 'erlang':'<' (Len,_19) in let <_21> = call 'erlang':'=<' (Len,M) in call 'erlang':'and' (_20,_21) of <Try> -> Try catch <T,R> -> 'false' -> apply 'write'/1 (If)
<> when 'true' -> let <_24> = fun (_22) -> apply 'cind'/7 (If,Col,Ll,M,_22,0,0) in let <TInd> = apply 'while_fail'/3 ([-1|[4]],_24,1) in let <_27> = apply 'indent'/1 (Col) in apply 'pp'/8 (If,Col,Ll,M,TInd,_27,0,0) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
<Term,_X_Col,_X_Ll,_X_D,_X_M,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> call 'io_lib':'write' (Term) end
'max_cs'/2 = fun (_0,_1) -> case <_0,_1> of <M,Len> when call 'erlang':'<' (M,0) -> Len
<M,_X_Len> when 'true' -> M end
'pp'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <If = {_X_S,Len,_41,_42},Col,Ll,M,_X_TInd,_X_Ind,LD,W> when try let <_8> = call 'erlang':'-' (Ll,Col) in let <_9> = call 'erlang':'-' (_8,LD) in let <_10> = call 'erlang':'<' (Len,_9) in let <_11> = call 'erlang':'+' (Len,W) in let <_12> = call 'erlang':'+' (_11,LD) in let <_13> = call 'erlang':'=<' (_12,M) in call 'erlang':'and' (_10,_13) of <Try> -> Try catch <T,R> -> 'false' -> apply 'write'/1 (If)
<{{'list',L},_X_Len,_43,_44},Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_16> = call 'erlang':'+' (Col,1) in let <_15> = apply 'indent'/2 (1,Ind) in let <_14> = call 'erlang':'+' (W,1) in let <_17> = apply 'pp_list'/9 (L,_16,Ll,M,TInd,_15,LD,124,_14) in [91|[_17|[93]]]
<{{'tuple','true',L},_X_Len,_45,_46},Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_18> = call 'erlang':'+' (W,1) in let <_19> = apply 'pp_tag_tuple'/8 (L,Col,Ll,M,TInd,Ind,LD,_18) in [123|[_19|[125]]]
<{{'tuple','false',L},_X_Len,_47,_48},Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_22> = call 'erlang':'+' (Col,1) in let <_21> = apply 'indent'/2 (1,Ind) in let <_20> = call 'erlang':'+' (W,1) in let <_23> = apply 'pp_list'/9 (L,_22,Ll,M,TInd,_21,LD,44,_20) in [123|[_23|[125]]]
<{{'map',Pairs},_X_Len,_49,_50},Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_26> = call 'erlang':'+' (Col,2) in let <_25> = apply 'indent'/2 (2,Ind) in let <_24> = call 'erlang':'+' (W,1) in let <_27> = apply 'pp_map'/8 (Pairs,_26,Ll,M,TInd,_25,LD,_24) in [35|[123|[_27|[125]]]]
<{{'record',[{Name,NLen}|L]},_X_Len,_51,_52},Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_28> = call 'erlang':'+' (W,NLen) in let <_29> = call 'erlang':'+' (_28,1) in let <_30> = apply 'pp_record'/9 (L,NLen,Col,Ll,M,TInd,Ind,LD,_29) in [Name|[123|[_30|[125]]]]
<{{'bin',S},_X_Len,_53,_54},Col,Ll,M,_X_TInd,Ind,LD,W> when 'true' -> let <_32> = call 'erlang':'+' (Col,2) in let <_31> = apply 'indent'/2 (2,Ind) in apply 'pp_binary'/7 (S,_32,Ll,M,_31,LD,W)
<{S,_X_Len,_55,_56},_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> S
(<_40,_39,_38,_37,_36,_35,_34,_33> when 'true' -> (primop 'match_fail' ({'function_clause',_40,_39,_38,_37,_36,_35,_34,_33})-|[{'function_name',{'pp',8}}] )-|['compiler_generated'] ) end
'pp_tag_tuple'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[{Tag,Tlen,_29,_30}|L],Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <TagInd> = call 'erlang':'+' (Tlen,2) in let <Tcol> = call 'erlang':'+' (Col,TagInd) in case <> of <> when let <_11> = call 'erlang':'>' (TInd,0) in let <_12> = call 'erlang':'>' (TagInd,TInd) in call 'erlang':'and' (_11,_12) -> let <Col1> = call 'erlang':'+' (Col,TInd) in let <Indent> = apply 'indent'/2 (TInd,Ind) in let <_15> = call 'erlang':'+' (W,Tlen) in let <_16> = apply 'pp_tail'/10 (L,Col1,Tcol,Ll,M,TInd,Indent,LD,44,_15) in [Tag|_16]
<> when 'true' -> let <Indent> = apply 'indent'/2 (TagInd,Ind) in let <_18> = call 'erlang':'+' (W,Tlen) in let <_19> = call 'erlang':'+' (_18,1) in let <_20> = apply 'pp_list'/9 (L,Tcol,Ll,M,TInd,Indent,LD,44,_19) in [Tag|[44|_20]] end
(<_28,_27,_26,_25,_24,_23,_22,_21> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24,_23,_22,_21})-|[{'function_name',{'pp_tag_tuple',8}}] )-|['compiler_generated'] ) end
'pp_map'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[],_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> []
<{'dots',_20,_21,_22},_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> [46|[46|[46]]]
<[P|Ps],Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_8> = apply 'last_depth'/2 (Ps,LD) in case apply 'pp_pair'/8 (P,Col,Ll,M,TInd,Ind,_8,W) of <{PS,PW}> when 'true' -> let <_10> = call 'erlang':'+' (Col,PW) in let <_11> = apply 'pp_pairs_tail'/9 (Ps,Col,_10,Ll,M,TInd,Ind,LD,PW) in [PS|_11]
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_19,_18,_17,_16,_15,_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12})-|[{'function_name',{'pp_map',8}}] )-|['compiler_generated'] ) end
'pp_pairs_tail'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> []
<{'dots',_67,_68,_69},_X_Col0,_X_Col,_X_M,_X_Ll,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> [44|[46|[46|[46]]]]
<[P = {_70,Len,_71,_72}|Ps],Col0,Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Ps,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_30> = try let <_11> = call 'erlang':'=:=' (LD1,0) in let <_13> = call 'erlang':'+' (ELen,1) in let <_12> = call 'erlang':'-' (Ll,Col) in let <_14> = call 'erlang':'<' (_13,_12) in let <_15> = call 'erlang':'+' (W,ELen) in let <_16> = call 'erlang':'+' (_15,1) in let <_17> = call 'erlang':'=<' (_16,M) in let <_19> = call 'erlang':'element' (1,P) in let <_20> = call 'erlang':'element' (2,_19) in let <_21> = call 'erlang':'element' (1,_20) in (let <_26> = case call 'erlang':'is_list' (_21) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_22> = call 'erlang':'element' (1,P) in let <_23> = call 'erlang':'element' (3,_22) in let <_24> = call 'erlang':'element' (1,_23) in call 'erlang':'is_list' (_24)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> _18-|['compiler_generated'] ) end in let <_27> = call 'erlang':'=:=' ((_26-|['compiler_generated'] ),'true') in let <_28> = call 'erlang':'and' (_17,_27) in let <_29> = call 'erlang':'and' (_14,_28) in call 'erlang':'and' (_11,_29)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in let <_50> = try let <_31> = call 'erlang':'>' (LD1,0) in let <_32> = call 'erlang':'-' (Ll,Col) in let <_33> = call 'erlang':'-' (_32,LD1) in let <_34> = call 'erlang':'<' (ELen,_33) in let <_35> = call 'erlang':'+' (W,ELen) in let <_36> = call 'erlang':'+' (_35,LD1) in let <_37> = call 'erlang':'=<' (_36,M) in let <_39> = call 'erlang':'element' (1,P) in let <_40> = call 'erlang':'element' (2,_39) in let <_41> = call 'erlang':'element' (1,_40) in (let <_46> = case call 'erlang':'is_list' (_41) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_42> = call 'erlang':'element' (1,P) in let <_43> = call 'erlang':'element' (3,_42) in let <_44> = call 'erlang':'element' (1,_43) in call 'erlang':'is_list' (_44)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_38> when 'true' -> _38-|['compiler_generated'] ) end in let <_47> = call 'erlang':'=:=' ((_46-|['compiler_generated'] ),'true') in let <_48> = call 'erlang':'and' (_37,_47) in let <_49> = call 'erlang':'and' (_34,_48) in call 'erlang':'and' (_31,_49)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_30,_50) -> let <_51> = apply 'write_pair'/1 (P) in let <_53> = call 'erlang':'+' (Col,ELen) in let <_52> = call 'erlang':'+' (W,ELen) in let <_54> = apply 'pp_pairs_tail'/9 (Ps,Col0,_53,Ll,M,TInd,Ind,LD,_52) in [44|[_51|_54]]
<> when 'true' -> case apply 'pp_pair'/8 (P,Col0,Ll,M,TInd,Ind,LD1,0) of <{PS,PW}> when 'true' -> let <_56> = call 'erlang':'+' (Col0,PW) in let <_57> = apply 'pp_pairs_tail'/9 (Ps,Col0,_56,Ll,M,TInd,Ind,LD,PW) in [44|[10|[Ind|[PS|_57]]]]
(<_55> when 'true' -> primop 'match_fail' ({'badmatch',_55})-|['compiler_generated'] ) end end
(<_66,_65,_64,_63,_62,_61,_60,_59,_58> when 'true' -> (primop 'match_fail' ({'function_clause',_66,_65,_64,_63,_62,_61,_60,_59,_58})-|[{'function_name',{'pp_pairs_tail',9}}] )-|['compiler_generated'] ) end
'pp_pair'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Pair = {_38,Len,_39,_40},Col,Ll,M,_X_TInd,_X_Ind,LD,W> when try let <_8> = call 'erlang':'-' (Ll,Col) in let <_9> = call 'erlang':'-' (_8,LD) in let <_10> = call 'erlang':'<' (Len,_9) in let <_11> = call 'erlang':'+' (Len,W) in let <_12> = call 'erlang':'+' (_11,LD) in let <_13> = call 'erlang':'=<' (_12,M) in call 'erlang':'and' (_10,_13) of <Try> -> Try catch <T,R> -> 'false' -> let <_24> = apply 'write_pair'/1 (Pair) in let <_23> = case <> of <> when try let <_15> = call 'erlang':'element' (1,Pair) in let <_16> = call 'erlang':'element' (2,_15) in let <_17> = call 'erlang':'element' (1,_16) in (let <_22> = case call 'erlang':'is_list' (_17) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_18> = call 'erlang':'element' (1,Pair) in let <_19> = call 'erlang':'element' (3,_18) in let <_20> = call 'erlang':'element' (1,_19) in call 'erlang':'is_list' (_20)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_14> when 'true' -> _14-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_22-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> Len
<> when 'true' -> Ll end in {_24,_23}
<{{'map_pair',K,V},_X_Len,_41,_42},Col0,Ll,M,TInd,Ind0,LD,W> when 'true' -> let <I> = apply 'map_value_indent'/1 (TInd) in let <Ind> = apply 'indent'/2 (I,Ind0) in let <_27> = apply 'pp'/8 (K,Col0,Ll,M,TInd,Ind0,LD,W) in let <_28> = call 'erlang':'+' (Col0,I) in let <_29> = apply 'pp'/8 (V,_28,Ll,M,TInd,Ind,LD,0) in {[_27|[[32|[61|[62|[10]]]]|[Ind|_29]]],Ll}
(<_37,_36,_35,_34,_33,_32,_31,_30> when 'true' -> (primop 'match_fail' ({'function_clause',_37,_36,_35,_34,_33,_32,_31,_30})-|[{'function_name',{'pp_pair',8}}] )-|['compiler_generated'] ) end
'pp_record'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <[],_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> []
<{'dots',_25,_26,_27},_X_Nlen,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> [46|[46|[46]]]
<[F|Fs],Nlen,Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' -> let <Nind> = call 'erlang':'+' (Nlen,1) in case apply 'rec_indent'/5 (Nind,TInd,Col0,Ind0,W0) of <{Col,Ind,S,W}> when 'true' -> let <_11> = apply 'last_depth'/2 (Fs,LD) in case apply 'pp_field'/8 (F,Col,Ll,M,TInd,Ind,_11,W) of <{FS,FW}> when 'true' -> let <_14> = call 'erlang':'+' (Col,FW) in let <_13> = call 'erlang':'+' (W,FW) in let <_15> = apply 'pp_fields_tail'/9 (Fs,Col,_14,Ll,M,TInd,Ind,LD,_13) in [S|[FS|_15]]
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_24,_23,_22,_21,_20,_19,_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20,_19,_18,_17,_16})-|[{'function_name',{'pp_record',9}}] )-|['compiler_generated'] ) end
'pp_fields_tail'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> []
<{'dots',_55,_56,_57},_X_Col0,_X_Col,_X_M,_X_Ll,_X_TInd,_X_Ind,_X_LD,_X_W> when 'true' -> [44|[46|[46|[46]]]]
<[F = {_58,Len,_59,_60}|Fs],Col0,Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Fs,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_24> = try let <_11> = call 'erlang':'=:=' (LD1,0) in let <_13> = call 'erlang':'+' (ELen,1) in let <_12> = call 'erlang':'-' (Ll,Col) in let <_14> = call 'erlang':'<' (_13,_12) in let <_15> = call 'erlang':'+' (W,ELen) in let <_16> = call 'erlang':'+' (_15,1) in let <_17> = call 'erlang':'=<' (_16,M) in let <_18> = call 'erlang':'element' (1,F) in let <_19> = call 'erlang':'element' (4,_18) in let <_20> = call 'erlang':'element' (1,_19) in let <_21> = call 'erlang':'is_list' (_20) in let <_22> = call 'erlang':'and' (_17,_21) in let <_23> = call 'erlang':'and' (_14,_22) in call 'erlang':'and' (_11,_23) of <Try> -> Try catch <T,R> -> 'false' in let <_38> = try let <_25> = call 'erlang':'>' (LD1,0) in let <_26> = call 'erlang':'-' (Ll,Col) in let <_27> = call 'erlang':'-' (_26,LD1) in let <_28> = call 'erlang':'<' (ELen,_27) in let <_29> = call 'erlang':'+' (W,ELen) in let <_30> = call 'erlang':'+' (_29,LD1) in let <_31> = call 'erlang':'=<' (_30,M) in let <_32> = call 'erlang':'element' (1,F) in let <_33> = call 'erlang':'element' (4,_32) in let <_34> = call 'erlang':'element' (1,_33) in let <_35> = call 'erlang':'is_list' (_34) in let <_36> = call 'erlang':'and' (_31,_35) in let <_37> = call 'erlang':'and' (_28,_36) in call 'erlang':'and' (_25,_37) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_24,_38) -> let <_39> = apply 'write_field'/1 (F) in let <_41> = call 'erlang':'+' (Col,ELen) in let <_40> = call 'erlang':'+' (W,ELen) in let <_42> = apply 'pp_fields_tail'/9 (Fs,Col0,_41,Ll,M,TInd,Ind,LD,_40) in [44|[_39|_42]]
<> when 'true' -> case apply 'pp_field'/8 (F,Col0,Ll,M,TInd,Ind,LD1,0) of <{FS,FW}> when 'true' -> let <_44> = call 'erlang':'+' (Col0,FW) in let <_45> = apply 'pp_fields_tail'/9 (Fs,Col0,_44,Ll,M,TInd,Ind,LD,FW) in [44|[10|[Ind|[FS|_45]]]]
(<_43> when 'true' -> primop 'match_fail' ({'badmatch',_43})-|['compiler_generated'] ) end end
(<_54,_53,_52,_51,_50,_49,_48,_47,_46> when 'true' -> (primop 'match_fail' ({'function_clause',_54,_53,_52,_51,_50,_49,_48,_47,_46})-|[{'function_name',{'pp_fields_tail',9}}] )-|['compiler_generated'] ) end
'pp_field'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Fl = {_33,Len,_34,_35},Col,Ll,M,_X_TInd,_X_Ind,LD,W> when try let <_8> = call 'erlang':'-' (Ll,Col) in let <_9> = call 'erlang':'-' (_8,LD) in let <_10> = call 'erlang':'<' (Len,_9) in let <_11> = call 'erlang':'+' (Len,W) in let <_12> = call 'erlang':'+' (_11,LD) in let <_13> = call 'erlang':'=<' (_12,M) in call 'erlang':'and' (_10,_13) of <Try> -> Try catch <T,R> -> 'false' -> let <_18> = apply 'write_field'/1 (Fl) in let <_17> = case <> of <> when try let <_14> = call 'erlang':'element' (1,Fl) in let <_15> = call 'erlang':'element' (4,_14) in let <_16> = call 'erlang':'element' (1,_15) in call 'erlang':'is_list' (_16) of <Try> -> Try catch <T,R> -> 'false' -> Len
<> when 'true' -> Ll end in {_18,_17}
<{{'field',Name,NameL,F},_36,_37,_38},Col0,Ll,M,TInd,Ind0,LD,W0> when 'true' -> let <_19> = call 'erlang':'+' (W0,NameL) in case apply 'rec_indent'/5 (NameL,TInd,Col0,Ind0,_19) of <{Col,Ind,S,W}> when 'true' -> let <_22> = case S of <[10|_39]> when 'true' -> [32|[61]]
<_40> when 'true' -> [32|[61|[32]]] end in let <_24> = apply 'pp'/8 (F,Col,Ll,M,TInd,Ind,LD,W) in {[Name|[_22|[S|_24]]],Ll}
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
(<_32,_31,_30,_29,_28,_27,_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_32,_31,_30,_29,_28,_27,_26,_25})-|[{'function_name',{'pp_field',8}}] )-|['compiler_generated'] ) end
'rec_indent'/5 = fun (_0,_1,_2,_3,_4) -> let <_6> = call 'erlang':'>' (_1,0) in let <_5> = call 'erlang':'>' (_0,_1) in let <Nl> = call 'erlang':'and' (_6,_5) in let <_9> = case Nl of <'true'> when 'true' -> _1
<'false'> when 'true' -> _0
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in let <Col> = call 'erlang':'+' (_2,_9) in let <Ind> = apply 'indent'/2 (_9,_3) in let <_14> = case Nl of <'true'> when 'true' -> [10|Ind]
<'false'> when 'true' -> []
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end in let <_17> = case Nl of <'true'> when 'true' -> 0
<'false'> when 'true' -> _4
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end in {Col,Ind,_14,_17}
'pp_list'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <{'dots',_23,_24,_25},_X_Col0,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' -> [46|[46|[46]]]
<[E|Es],Col0,Ll,M,TInd,Ind,LD,S,W> when 'true' -> let <_9> = apply 'last_depth'/2 (Es,LD) in case apply 'pp_element'/8 (E,Col0,Ll,M,TInd,Ind,_9,W) of <{ES,WE}> when 'true' -> let <_12> = call 'erlang':'+' (Col0,WE) in let <_11> = call 'erlang':'+' (W,WE) in let <_13> = apply 'pp_tail'/10 (Es,Col0,_12,Ll,M,TInd,Ind,LD,S,_11) in [ES|_13]
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_22,_21,_20,_19,_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20,_19,_18,_17,_16,_15,_14})-|[{'function_name',{'pp_list',9}}] )-|['compiler_generated'] ) end
'pp_tail'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <[],_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,_X_S,_X_W> when 'true' -> []
<[E = {_69,Len,_70,_71}|Es],Col0,Col,Ll,M,TInd,Ind,LD,S,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Es,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_23> = try let <_12> = call 'erlang':'=:=' (LD1,0) in let <_14> = call 'erlang':'+' (ELen,1) in let <_13> = call 'erlang':'-' (Ll,Col) in let <_15> = call 'erlang':'<' (_14,_13) in let <_16> = call 'erlang':'+' (W,ELen) in let <_17> = call 'erlang':'+' (_16,1) in let <_18> = call 'erlang':'=<' (_17,M) in let <_19> = call 'erlang':'element' (1,E) in let <_20> = call 'erlang':'is_list' (_19) in let <_21> = call 'erlang':'and' (_18,_20) in let <_22> = call 'erlang':'and' (_15,_21) in call 'erlang':'and' (_12,_22) of <Try> -> Try catch <T,R> -> 'false' in let <_35> = try let <_24> = call 'erlang':'>' (LD1,0) in let <_25> = call 'erlang':'-' (Ll,Col) in let <_26> = call 'erlang':'-' (_25,LD1) in let <_27> = call 'erlang':'<' (ELen,_26) in let <_28> = call 'erlang':'+' (W,ELen) in let <_29> = call 'erlang':'+' (_28,LD1) in let <_30> = call 'erlang':'=<' (_29,M) in let <_31> = call 'erlang':'element' (1,E) in let <_32> = call 'erlang':'is_list' (_31) in let <_33> = call 'erlang':'and' (_30,_32) in let <_34> = call 'erlang':'and' (_27,_33) in call 'erlang':'and' (_24,_34) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_23,_35) -> let <_36> = apply 'write'/1 (E) in let <_38> = call 'erlang':'+' (Col,ELen) in let <_37> = call 'erlang':'+' (W,ELen) in let <_39> = apply 'pp_tail'/10 (Es,Col0,_38,Ll,M,TInd,Ind,LD,S,_37) in [44|[_36|_39]]
<> when 'true' -> case apply 'pp_element'/8 (E,Col0,Ll,M,TInd,Ind,LD1,0) of <{ES,WE}> when 'true' -> let <_41> = call 'erlang':'+' (Col0,WE) in let <_42> = apply 'pp_tail'/10 (Es,Col0,_41,Ll,M,TInd,Ind,LD,S,WE) in [44|[10|[Ind|[ES|_42]]]]
(<_40> when 'true' -> primop 'match_fail' ({'badmatch',_40})-|['compiler_generated'] ) end end
<{'dots',_72,_73,_74},_X_Col0,_X_Col,_X_Ll,_X_M,_X_TInd,_X_Ind,_X_LD,S,_X_W> when 'true' -> [S|[46|[46|[46]]]]
<E = {_75,Len,_76,_77},_X_Col0,Col,Ll,M,_X_TInd,_X_Ind,LD,S,W> when try let <_46> = call 'erlang':'+' (Len,1) in let <_44> = call 'erlang':'-' (Ll,Col) in let <_43> = call 'erlang':'+' (LD,1) in let <_45> = call 'erlang':'-' (_44,_43) in let <_47> = call 'erlang':'<' (_46,_45) in let <_49> = call 'erlang':'+' (Len,1) in let <_50> = call 'erlang':'+' (_49,W) in let <_48> = call 'erlang':'+' (LD,1) in let <_51> = call 'erlang':'+' (_50,_48) in let <_52> = call 'erlang':'=<' (_51,M) in let <_53> = call 'erlang':'element' (1,E) in let <_54> = call 'erlang':'is_list' (_53) in let <_55> = call 'erlang':'and' (_52,_54) in call 'erlang':'and' (_47,_55) of <Try> -> Try catch <T,R> -> 'false' -> let <_56> = apply 'write'/1 (E) in [S|_56]
<E,Col0,_X_Col,Ll,M,TInd,Ind,LD,S,_X_W> when 'true' -> let <_57> = call 'erlang':'+' (LD,1) in let <_58> = apply 'pp'/8 (E,Col0,Ll,M,TInd,Ind,_57,0) in [S|[10|[Ind|_58]]] end
'pp_element'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <E = {_27,Len,_28,_29},Col,Ll,M,_X_TInd,_X_Ind,LD,W> when try let <_8> = call 'erlang':'-' (Ll,Col) in let <_9> = call 'erlang':'-' (_8,LD) in let <_10> = call 'erlang':'<' (Len,_9) in let <_11> = call 'erlang':'+' (Len,W) in let <_12> = call 'erlang':'+' (_11,LD) in let <_13> = call 'erlang':'=<' (_12,M) in let <_14> = call 'erlang':'element' (1,E) in let <_15> = call 'erlang':'is_list' (_14) in let <_16> = call 'erlang':'and' (_13,_15) in call 'erlang':'and' (_10,_16) of <Try> -> Try catch <T,R> -> 'false' -> let <_17> = apply 'write'/1 (E) in {_17,Len}
<E,Col,Ll,M,TInd,Ind,LD,W> when 'true' -> let <_18> = apply 'pp'/8 (E,Col,Ll,M,TInd,Ind,LD,W) in {_18,Ll} end
'pp_binary'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[LT|[_21|[S|[GT|[_22|[]]]]]],Col,Ll,M,Ind,LD,W> when let <_23> = call 'erlang':'=:=' (_21,LT) in let <_24> = call 'erlang':'=:=' (_22,GT) in call 'erlang':'and' (_23,_24) -> let <_9> = call 'erlang':'-' (Ll,Col) in let <_7> = call 'erlang':'-' (M,4) in let <_8> = call 'erlang':'-' (_7,W) in let <_10> = call 'erlang':'min' (_9,_8) in let <_11> = call 'erlang':'-' (_10,LD) in let <N> = call 'erlang':'max' (8,_11) in let <_13> = apply 'pp_binary'/4 (S,N,N,Ind) in [LT|[LT|[_13|[GT|[GT|[]]]]]]
(<_20,_19,_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17,_16,_15,_14})-|[{'function_name',{'pp_binary',7}}] )-|['compiler_generated'] ) end
'pp_binary'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[BS|[44|S]],N,N0,Ind> when 'true' -> let <_4> = call 'erlang':'length' (BS) in let <Len> = call 'erlang':'+' (_4,1) in case call 'erlang':'-' (N,Len) of <N1> when call 'erlang':'<' (N1,0) -> let <_6> = call 'erlang':'-' (N0,Len) in let <_7> = apply 'pp_binary'/4 (S,_6,N0,Ind) in [10|[Ind|[BS|[44|_7]]]]
<N1> when 'true' -> let <_8> = apply 'pp_binary'/4 (S,N1,N0,Ind) in [BS|[44|_8]] end
<S = [BS1|[58|[BS2|[]]]],N,_X_N0,Ind> when try let <_11> = call 'erlang':'length' (BS1) in let <_10> = call 'erlang':'length' (BS2) in let <_12> = call 'erlang':'+' (_11,_10) in let <_13> = call 'erlang':'+' (_12,1) in call 'erlang':'>' (_13,N) of <Try> -> Try catch <T,R> -> 'false' -> [10|[Ind|[S|[]]]]
<S,N,_X_N0,Ind> when 'true' -> let <_14> = call 'erlang':'iolist_size' (S) in case <> of <> when call 'erlang':'>' (_14,N) -> [10|[Ind|[S|[]]]]
<> when 'true' -> S end end
'write'/1 = fun (_0) -> case _0 of <{{'tuple',_X_IsTagged,L},_6,_7,_8}> when 'true' -> let <_1> = apply 'write_list'/2 (L,44) in [123|[_1|[125]]]
<{{'list',L},_9,_10,_11}> when 'true' -> let <_2> = apply 'write_list'/2 (L,124) in [91|[_2|[93]]]
<{{'map',Pairs},_12,_13,_14}> when 'true' -> let <_3> = apply 'write_list'/2 (Pairs,44) in [35|[123|[_3|[125]]]]
<Pair = {{'map_pair',_X_K,_X_V},_15,_16,_17}> when 'true' -> apply 'write_pair'/1 (Pair)
<{{'record',[{Name,_18}|L]},_19,_20,_21}> when 'true' -> let <_4> = apply 'write_fields'/1 (L) in [Name|[123|[_4|[125]]]]
<{{'bin',S},_22,_23,_24}> when 'true' -> S
<{S,_25,_26,_27}> when 'true' -> S
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'write',1}}] )-|['compiler_generated'] ) end
'write_pair'/1 = fun (_0) -> case _0 of <{{'map_pair',K,V},_4,_5,_6}> when 'true' -> let <_1> = apply 'write'/1 (K) in let <_2> = apply 'write'/1 (V) in [_1|[[32|[61|[62|[32]]]]|[_2|[]]]]
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'write_pair',1}}] )-|['compiler_generated'] ) end
'write_fields'/1 = fun (_0) -> case _0 of <[]> when 'true' -> []
<{'dots',_4,_5,_6}> when 'true' -> [46|[46|[46]]]
<[F|Fs]> when 'true' -> let <_1> = apply 'write_field'/1 (F) in let <_2> = apply 'write_fields_tail'/1 (Fs) in [_1|_2]
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'write_fields',1}}] )-|['compiler_generated'] ) end
'write_fields_tail'/1 = fun (_0) -> case _0 of <[]> when 'true' -> []
<{'dots',_4,_5,_6}> when 'true' -> [44|[46|[46|[46]]]]
<[F|Fs]> when 'true' -> let <_1> = apply 'write_field'/1 (F) in let <_2> = apply 'write_fields_tail'/1 (Fs) in [44|[_1|_2]]
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'write_fields_tail',1}}] )-|['compiler_generated'] ) end
'write_field'/1 = fun (_0) -> case _0 of <{{'field',Name,_X_NameL,F},_3,_4,_5}> when 'true' -> let <_1> = apply 'write'/1 (F) in [Name|[[32|[61|[32]]]|_1]]
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'write_field',1}}] )-|['compiler_generated'] ) end
'write_list'/2 = fun (_0,_1) -> case <_0,_1> of <{'dots',_6,_7,_8},_X_S> when 'true' -> [46|[46|[46]]]
<[E|Es],S> when 'true' -> let <_2> = apply 'write'/1 (E) in let <_3> = apply 'write_tail'/2 (Es,S) in [_2|_3]
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'write_list',2}}] )-|['compiler_generated'] ) end
'write_tail'/2 = fun (_0,_1) -> case <_0,_1> of <[],_X_S> when 'true' -> []
<[E|Es],S> when 'true' -> let <_2> = apply 'write'/1 (E) in let <_3> = apply 'write_tail'/2 (Es,S) in [44|[_2|_3]]
<{'dots',_7,_8,_9},S> when 'true' -> [S|[46|[46|[46]]]]
<E,S> when 'true' -> let <_4> = apply 'write'/1 (E) in [S|_4] end
'intermediate'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Term,D,T,RF,Enc,Str> when call 'erlang':'>' (T,0) -> let <If> = apply 'print_length'/6 (Term,1,T,RF,Enc,Str) in case If of <{_19,Len,Dots,_20}> when let <_8> = call 'erlang':'=:=' (Dots,0) in let <_9> = call 'erlang':'>' (Len,T) in let <_10> = call 'erlang':'=:=' (D,1) in let <_11> = call 'erlang':'or' (_9,_10) in call 'erlang':'or' (_8,_11) -> If
<_21> when 'true' -> apply 'find_upper'/9 (If,Term,T,1,2,D,RF,Enc,Str) end
(<_18,_17,_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15,_14,_13})-|[{'function_name',{'intermediate',6}}] )-|['compiler_generated'] ) end
'find_upper'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> let <Dd2> = call 'erlang':'*' (_4,2) in let <_12> = case <> of <> when call 'erlang':'<' (_5,0) -> call 'erlang':'+' (_3,Dd2)
<> when 'true' -> let <_10> = call 'erlang':'+' (_3,Dd2) in call 'erlang':'min' (_10,_5) end in let <_14> = call 'erlang':'-' (_12,_3) in let <If> = apply 'expand'/3 (_0,_2,_14) in case If of <{_31,_32,_X_Dots = 0,_33}> when 'true' -> If
<{_34,_X_Len = _35,_36,_37}> when call 'erlang':'=:=' (_35,_2) -> If
<{_38,Len,_39,_40}> when try let <_16> = call 'erlang':'<' (Len,_2) in (let <_19> = case call 'erlang':'<' (_12,_5) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'<' (_5,0)-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end in let <_20> = call 'erlang':'=:=' ((_19-|['compiler_generated'] ),'true') in call 'erlang':'and' (_16,_20)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'find_upper'/9 (If,_1,_2,_12,Dd2,_5,_6,_7,_8)
<_41> when 'true' -> apply 'search_depth'/9 (_0,If,_1,_2,_3,_12,_6,_7,_8) end
'search_depth'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <Lower,Upper,_X_Term,T,Dl,Du,_X_RF,_X_Enc,_X_Str> when try let <_9> = call 'erlang':'-' (Du,Dl) in call 'erlang':'=:=' (_9,1) of <Try> -> Try catch <T,R> -> 'false' -> case Lower of <{_25,_26,_27,_28}> when call 'erlang':'=:=' (_26,T) -> Lower
<_29> when 'true' -> Upper end
<Lower,Upper,Term,T,Dl,Du,RF,Enc,Str> when 'true' -> let <_11> = call 'erlang':'+' (Dl,Du) in let <D1> = call 'erlang':'div' (_11,2) in let <_13> = call 'erlang':'-' (D1,Dl) in let <If> = apply 'expand'/3 (Lower,T,_13) in case If of <{_30,Len,_31,_32}> when call 'erlang':'>' (Len,T) -> apply 'search_depth'/9 (Lower,If,Term,T,Dl,D1,RF,Enc,Str)
<_33> when 'true' -> apply 'search_depth'/9 (If,Upper,Term,T,D1,Du,RF,Enc,Str) end end
'print_length'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[],_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> {[91|[93]],2,0,'no_more'}
<{},_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> {[123|[125]],2,0,'no_more'}
<M = ~{}~,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when try let <_6> = call 'erlang':'map_size' (M) in call 'erlang':'=:=' (_6,0) of <Try> -> Try catch <T,R> -> 'false' -> {[35|[123|[125]]],3,0,'no_more'}
<Atom,_X_D,_X_T,_X_RF,Enc,_X_Str> when call 'erlang':'is_atom' (Atom) -> let <S> = apply 'write_atom'/2 (Atom,Enc) in let <_8> = call 'io_lib':'chars_length' (S) in {S,_8,0,'no_more'}
<List,D,T,RF,Enc,Str> when call 'erlang':'is_list' (List) -> let <_11> = case Str of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'printable_list'/4 (List,D,T,Enc)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_9> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _11 of <'true'> when 'true' -> let <S> = apply 'write_string'/2 (List,Enc) in let <_13> = call 'io_lib':'chars_length' (S) in {S,_13,0,'no_more'}
<{'true',Prefix}> when 'true' -> let <S> = apply 'write_string'/2 (Prefix,Enc) in let <_15> = call 'io_lib':'chars_length' (S) in let <_16> = call 'erlang':'+' (3,_15) in {[S|[46|[46|[46]]]],_16,0,'no_more'}
<'false'> when 'true' -> case apply 'print_length_list'/6 (List,D,T,RF,Enc,Str) of <{What,Len,Dots,_X_More}> when call 'erlang':'>' (Dots,0) -> let <More> = fun (_19,_18) -> let <_17> = call 'erlang':'+' (D,_18) in apply 'print_length'/6 (List,_17,_19,RF,Enc,Str) in {What,Len,Dots,More}
<If> when 'true' -> If end
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<Fun,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when call 'erlang':'is_function' (Fun) -> let <S> = call 'io_lib':'write' (Fun) in let <_26> = call 'erlang':'iolist_size' (S) in {S,_26,0,'no_more'}
<R,D,T,RF,Enc,Str> when try let <_27> = call 'erlang':'element' (1,R) in let <_28> = call 'erlang':'is_atom' (_27) in let <_29> = call 'erlang':'is_function' (RF) in call 'erlang':'and' (_28,_29) of <Try> -> Try catch <T,R> -> 'false' -> let <_32> = call 'erlang':'element' (1,R) in let <_30> = call 'erlang':'tuple_size' (R) in let <_31> = call 'erlang':'-' (_30,1) in case apply RF (_32,_31) of <'no'> when 'true' -> apply 'print_length_tuple'/6 (R,D,T,RF,Enc,Str)
<RDefs> when 'true' -> apply 'print_length_record'/7 (R,D,T,RF,RDefs,Enc,Str) end
<Tuple,D,T,RF,Enc,Str> when call 'erlang':'is_tuple' (Tuple) -> apply 'print_length_tuple'/6 (Tuple,D,T,RF,Enc,Str)
<Map,D,T,RF,Enc,Str> when call 'erlang':'is_map' (Map) -> apply 'print_length_map'/6 (Map,D,T,RF,Enc,Str)
<#{}#,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> {[60|[60|[62|[62]]]],4,0,'no_more'}
<Bin = #{#<_91>('all',1,'binary',['unsigned'|['big']])}#,1,_X_T,RF,Enc,Str> when 'true' -> let <More> = fun (_36,_35) -> let <_34> = call 'erlang':'+' (1,_35) in apply 'print_length'/6 (Bin,_34,_36,RF,Enc,Str) in {[60|[60|[46|[46|[46|[62|[62]]]]]]],7,3,More}
<Bin = #{#<_92>('all',1,'binary',['unsigned'|['big']])}#,D,T,RF,Enc,Str> when 'true' -> let <D1> = call 'erlang':'-' (D,1) in let <_48> = case Str of (<('true'-|['compiler_generated'] )> when 'true' -> let <_43> = call 'erlang':'bit_size' (Bin) in let <_44> = call 'erlang':'rem' (_43,8) in (case <> of (<> when call 'erlang':'=:=' (_44,0) -> let <_45> = apply 'tsub'/2 (T,6) in apply 'printable_bin0'/4 (Bin,D1,_45,Enc)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_41}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _48 of <{'true',List}> when call 'erlang':'is_list' (List) -> let <S> = call 'io_lib':'write_string' (List,34) in let <_50> = call 'erlang':'length' (S) in let <_51> = call 'erlang':'+' (4,_50) in {[60|[60|[S|[62|[62]]]]],_51,0,'no_more'}
<{'false',List}> when call 'erlang':'is_list' (List) -> let <S> = call 'io_lib':'write_string' (List,34) in let <_53> = call 'io_lib':'chars_length' (S) in let <_54> = call 'erlang':'+' (9,_53) in {[60|[60|[S|[[47|[117|[116|[102|[56|[62|[62]]]]]]]]]]],_54,0,'no_more'}
<{'true','true',Prefix}> when 'true' -> let <S> = call 'io_lib':'write_string' (Prefix,34) in let <More> = fun (_58,_57) -> let <_56> = call 'erlang':'+' (D,_57) in apply 'print_length'/6 (Bin,_56,_58,RF,Enc,Str) in let <_62> = call 'erlang':'length' (S) in let <_63> = call 'erlang':'+' (7,_62) in {[60|[60|[S|[46|[46|[46|[62|[62]]]]]]]],_63,3,More}
<{'false','true',Prefix}> when 'true' -> let <S> = call 'io_lib':'write_string' (Prefix,34) in let <More> = fun (_67,_66) -> let <_65> = call 'erlang':'+' (D,_66) in apply 'print_length'/6 (Bin,_65,_67,RF,Enc,Str) in let <_71> = call 'io_lib':'chars_length' (S) in let <_72> = call 'erlang':'+' (12,_71) in {[60|[60|[S|[47|[117|[116|[102|[56|[46|[46|[46|[62|[62]]]]]]]]]]]]],_72,3,More}
<'false'> when 'true' -> case call 'io_lib':'write_binary' (Bin,D,T) of <{S,#{}#}> when 'true' -> let <_73> = call 'erlang':'iolist_size' (S) in {{'bin',S},_73,0,'no_more'}
<{S,_X_Rest}> when 'true' -> let <More> = fun (_76,_75) -> let <_74> = call 'erlang':'+' (D,_75) in apply 'print_length'/6 (Bin,_74,_76,RF,Enc,Str) in let <_80> = call 'erlang':'iolist_size' (S) in {{'bin',S},_80,3,More}
(<_81> when 'true' -> primop 'match_fail' ({'case_clause',_81})-|['compiler_generated'] ) end
(<_82> when 'true' -> primop 'match_fail' ({'case_clause',_82})-|['compiler_generated'] ) end
<Term,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> let <S> = call 'io_lib':'write' (Term) in let <_84> = call 'io_lib':'chars_length' (S) in {S,_84,0,'no_more'} end
'print_length_map'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Map,1,_X_T,RF,Enc,Str> when 'true' -> let <More> = fun (_8,_7) -> let <_6> = call 'erlang':'+' (1,_7) in apply 'print_length_map'/6 (Map,_6,_8,RF,Enc,Str) in {[35|[123|[46|[46|[46|[125]]]]]],6,3,More}
<Map,D,T,RF,Enc,Str> when call 'erlang':'is_map' (Map) -> let <_12> = call 'maps':'iterator' (Map) in let <Next> = call 'maps':'next' (_12) in let <_15> = call 'erlang':'-' (D,1) in let <_14> = apply 'tsub'/2 (T,3) in let <PairsS> = apply 'print_length_map_pairs'/7 (Next,D,_15,_14,RF,Enc,Str) in case apply 'list_length'/3 (PairsS,3,0) of <{Len,Dots}> when 'true' -> {{'map',PairsS},Len,Dots,'no_more'}
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_23,_22,_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22,_21,_20,_19,_18})-|[{'function_name',{'print_length_map',6}}] )-|['compiler_generated'] ) end
'print_length_map_pairs'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <'none',_X_D,_X_D0,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> []
<Term,D,D0,T,RF,Enc,Str> when let <_7> = call 'erlang':'=:=' (D,1) in let <_8> = call 'erlang':'=:=' (T,0) in call 'erlang':'or' (_7,_8) -> let <More> = fun (_11,_10) -> let <_9> = call 'erlang':'+' (D,_10) in apply 'print_length_map_pairs'/7 (Term,_9,D0,_11,RF,Enc,Str) in {'dots',3,3,More}
<{K,V,Iter},D,D0,T,RF,Enc,Str> when 'true' -> let <_15> = apply 'tsub'/2 (T,1) in let <Pair1> = apply 'print_length_map_pair'/7 (K,V,D0,_15,RF,Enc,Str) in case Pair1 of <{_30,Len1,_31,_32}> when 'true' -> let <Next> = call 'maps':'next' (Iter) in let <_21> = call 'erlang':'-' (D,1) in let <_19> = call 'erlang':'+' (Len1,1) in let <_20> = apply 'tsub'/2 (T,_19) in let <_22> = apply 'print_length_map_pairs'/7 (Next,_21,D0,_20,RF,Enc,Str) in [Pair1|_22]
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_29,_28,_27,_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28,_27,_26,_25,_24,_23})-|[{'function_name',{'print_length_map_pairs',7}}] )-|['compiler_generated'] ) end
'print_length_map_pair'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'print_length'/6 (_0,_2,_3,_4,_5,_6) of <P1 = {_20,KL,KD,_21}> when 'true' -> let <KL1> = call 'erlang':'+' (KL,4) in let <_9> = apply 'tsub'/2 (_3,KL1) in case apply 'print_length'/6 (_1,_2,_9,_4,_5,_6) of <P2 = {_22,VL,VD,_23}> when 'true' -> let <_12> = call 'erlang':'+' (KL1,VL) in let <_11> = call 'erlang':'+' (KD,VD) in {{'map_pair',P1,P2},_12,_11,'no_more'}
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'print_length_tuple'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Tuple,1,_X_T,RF,Enc,Str> when 'true' -> let <More> = fun (_8,_7) -> let <_6> = call 'erlang':'+' (1,_7) in apply 'print_length_tuple'/6 (Tuple,_6,_8,RF,Enc,Str) in {[123|[46|[46|[46|[125]]]]],5,3,More}
<Tuple,D,T,RF,Enc,Str> when 'true' -> let <_12> = apply 'tsub'/2 (T,2) in let <L> = apply 'print_length_tuple1'/7 (Tuple,1,D,_12,RF,Enc,Str) in let <_16> = call 'erlang':'element' (1,Tuple) in let <_17> = call 'erlang':'is_atom' (_16) in let <_14> = call 'erlang':'tuple_size' (Tuple) in let <_15> = call 'erlang':'>' (_14,1) in let <IsTagged> = call 'erlang':'and' (_17,_15) in case apply 'list_length'/3 (L,2,0) of <{Len,Dots}> when 'true' -> {{'tuple',IsTagged,L},Len,Dots,'no_more'}
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end end
'print_length_tuple1'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Tuple,I,_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when try let <_7> = call 'erlang':'tuple_size' (Tuple) in call 'erlang':'>' (I,_7) of <Try> -> Try catch <T,R> -> 'false' -> []
<Tuple,I,D,T,RF,Enc,Str> when let <_8> = call 'erlang':'=:=' (D,1) in let <_9> = call 'erlang':'=:=' (T,0) in call 'erlang':'or' (_8,_9) -> let <More> = fun (_12,_11) -> let <_10> = call 'erlang':'+' (D,_11) in apply 'print_length_tuple1'/7 (Tuple,I,_10,_12,RF,Enc,Str) in {'dots',3,3,More}
<Tuple,I,D,T,RF,Enc,Str> when 'true' -> let <E> = call 'erlang':'element' (I,Tuple) in let <T1> = apply 'tsub'/2 (T,1) in let <_18> = call 'erlang':'-' (D,1) in case apply 'print_length'/6 (E,_18,T1,RF,Enc,Str) of <Elem1 = {_31,Len1,_32,_33}> when 'true' -> let <T2> = apply 'tsub'/2 (T1,Len1) in let <_22> = call 'erlang':'+' (I,1) in let <_21> = call 'erlang':'-' (D,1) in let <_23> = apply 'print_length_tuple1'/7 (Tuple,_22,_21,T2,RF,Enc,Str) in [Elem1|_23]
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end end
'print_length_record'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Tuple,1,_X_T,RF,RDefs,Enc,Str> when 'true' -> let <More> = fun (_9,_8) -> let <_7> = call 'erlang':'+' (1,_8) in apply 'print_length_record'/7 (Tuple,_7,_9,RF,RDefs,Enc,Str) in {[123|[46|[46|[46|[125]]]]],5,3,More}
<Tuple,D,T,RF,RDefs,Enc,Str> when 'true' -> let <_13> = call 'erlang':'element' (1,Tuple) in let <_14> = apply 'write_atom'/2 (_13,Enc) in let <Name> = [35|_14] in let <NameL> = call 'io_lib':'chars_length' (Name) in let <_17> = call 'erlang':'+' (NameL,2) in let <T1> = apply 'tsub'/2 (T,_17) in let <_19> = call 'erlang':'-' (D,1) in let <L> = apply 'print_length_fields'/8 (RDefs,_19,T1,Tuple,2,RF,Enc,Str) in let <_21> = call 'erlang':'+' (NameL,2) in case apply 'list_length'/3 (L,_21,0) of <{Len,Dots}> when 'true' -> {{'record',[{Name,NameL}|L]},Len,Dots,'no_more'}
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end end
'print_length_fields'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[],_X_D,_X_T,Tuple,I,_X_RF,_X_Enc,_X_Str> when try let <_8> = call 'erlang':'tuple_size' (Tuple) in call 'erlang':'>' (I,_8) of <Try> -> Try catch <T,R> -> 'false' -> []
<Term,D,T,Tuple,I,RF,Enc,Str> when let <_9> = call 'erlang':'=:=' (D,1) in let <_10> = call 'erlang':'=:=' (T,0) in call 'erlang':'or' (_9,_10) -> let <More> = fun (_13,_12) -> let <_11> = call 'erlang':'+' (D,_12) in apply 'print_length_fields'/8 (Term,_11,_13,Tuple,I,RF,Enc,Str) in {'dots',3,3,More}
<[Def|Defs],D,T,Tuple,I,RF,Enc,Str> when 'true' -> let <E> = call 'erlang':'element' (I,Tuple) in let <T1> = apply 'tsub'/2 (T,1) in let <_19> = call 'erlang':'-' (D,1) in let <Field1> = apply 'print_length_field'/7 (Def,_19,T1,E,RF,Enc,Str) in case Field1 of <{_34,Len1,_35,_36}> when 'true' -> let <T2> = apply 'tsub'/2 (T1,Len1) in let <_24> = call 'erlang':'-' (D,1) in let <_23> = call 'erlang':'+' (I,1) in let <_25> = apply 'print_length_fields'/8 (Defs,_24,T2,Tuple,_23,RF,Enc,Str) in [Field1|_25]
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_33,_32,_31,_30,_29,_28,_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32,_31,_30,_29,_28,_27,_26})-|[{'function_name',{'print_length_fields',8}}] )-|['compiler_generated'] ) end
'print_length_field'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <Name> = apply 'write_atom'/2 (_0,_5) in let <_8> = call 'io_lib':'chars_length' (Name) in let <NameL> = call 'erlang':'+' (_8,3) in let <_10> = apply 'tsub'/2 (_2,NameL) in case apply 'print_length'/6 (_3,_1,_10,_4,_5,_6) of <Field = {_20,Len,Dots,_21}> when 'true' -> let <_12> = call 'erlang':'+' (NameL,Len) in {{'field',Name,NameL,Field},_12,Dots,'no_more'}
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
'print_length_list'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = apply 'tsub'/2 (_2,2) in let <L> = apply 'print_length_list1'/6 (_0,_1,_6,_3,_4,_5) in case apply 'list_length'/3 (L,2,0) of <{Len,Dots}> when 'true' -> {{'list',L},Len,Dots,'no_more'}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
'print_length_list1'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[],_X_D,_X_T,_X_RF,_X_Enc,_X_Str> when 'true' -> []
<Term,D,T,RF,Enc,Str> when let <_6> = call 'erlang':'=:=' (D,1) in let <_7> = call 'erlang':'=:=' (T,0) in call 'erlang':'or' (_6,_7) -> let <More> = fun (_10,_9) -> let <_8> = call 'erlang':'+' (D,_9) in apply 'print_length_list1'/6 (Term,_8,_10,RF,Enc,Str) in {'dots',3,3,More}
<[E|Es],D,T,RF,Enc,Str> when 'true' -> let <_15> = call 'erlang':'-' (D,1) in let <_14> = apply 'tsub'/2 (T,1) in case apply 'print_length'/6 (E,_15,_14,RF,Enc,Str) of <Elem1 = {_28,Len1,_29,_30}> when 'true' -> let <_19> = call 'erlang':'-' (D,1) in let <_17> = call 'erlang':'+' (Len1,1) in let <_18> = apply 'tsub'/2 (T,_17) in let <_20> = apply 'print_length_list1'/6 (Es,_19,_18,RF,Enc,Str) in [Elem1|_20]
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
<E,D,T,RF,Enc,Str> when 'true' -> let <_21> = call 'erlang':'-' (D,1) in apply 'print_length'/6 (E,_21,T,RF,Enc,Str) end
'list_length'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],Acc,DotsAcc> when 'true' -> {Acc,DotsAcc}
<[{_10,Len,Dots,_11}|Es],Acc,DotsAcc> when 'true' -> let <_4> = call 'erlang':'+' (Acc,Len) in let <_3> = call 'erlang':'+' (DotsAcc,Dots) in apply 'list_length_tail'/3 (Es,_4,_3)
<{_12,Len,Dots,_13},Acc,DotsAcc> when 'true' -> let <_6> = call 'erlang':'+' (Acc,Len) in let <_5> = call 'erlang':'+' (DotsAcc,Dots) in {_6,_5}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'list_length',3}}] )-|['compiler_generated'] ) end
'list_length_tail'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],Acc,DotsAcc> when 'true' -> {Acc,DotsAcc}
<[{_12,Len,Dots,_13}|Es],Acc,DotsAcc> when 'true' -> let <_4> = call 'erlang':'+' (Acc,1) in let <_5> = call 'erlang':'+' (_4,Len) in let <_3> = call 'erlang':'+' (DotsAcc,Dots) in apply 'list_length_tail'/3 (Es,_5,_3)
<{_14,Len,Dots,_15},Acc,DotsAcc> when 'true' -> let <_7> = call 'erlang':'+' (Acc,1) in let <_8> = call 'erlang':'+' (_7,Len) in let <_6> = call 'erlang':'+' (DotsAcc,Dots) in {_8,_6}
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'list_length_tail',3}}] )-|['compiler_generated'] ) end
'printable_list'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_L,1,_X_T,_X_Enc> when 'true' -> 'false'
<L,_X_D,T,'latin1'> when call 'erlang':'<' (T,0) -> call 'io_lib':'printable_latin1_list' (L)
<L,_X_D,T,'latin1'> when call 'erlang':'>=' (T,0) -> let <N> = apply 'tsub'/2 (T,2) in case apply 'printable_latin1_list'/2 (L,N) of <'all'> when 'true' -> 'true'
<0> when 'true' -> case call 'lists':'split' (N,L) of <{L1,_22}> when 'true' -> {'true',L1}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_X_NC> when 'true' -> 'false' end
<L,_X_D,T,_X_Unicode> when call 'erlang':'>=' (T,0) -> let <N> = apply 'tsub'/2 (T,2) in try call 'string':'slice' (L,0,N) of <_8> -> case _8 of <[]> when 'true' -> 'false'
<Prefix> when 'true' -> let <_9> = call 'lists':'flatlength' (Prefix) in case apply 'is_flat'/2 (L,_9) of <'true'> when 'true' -> case call 'string':'equal' (Prefix,L) of <'true'> when 'true' -> call 'io_lib':'printable_list' (L)
<'false'> when 'true' -> (case call 'io_lib':'printable_list' (Prefix) of (<('true'-|['compiler_generated'] )> when 'true' -> {'true',Prefix}-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_10}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<'false'> when 'true' -> 'false'
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end end catch <_17,_16,_15> -> 'false'
<L,_X_D,T,_X_Uni> when call 'erlang':'<' (T,0) -> call 'io_lib':'printable_list' (L)
(<_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20,_19,_18})-|[{'function_name',{'printable_list',4}}] )-|['compiler_generated'] ) end
'is_flat'/2 = fun (_0,_1) -> case <_0,_1> of <_X_L,0> when 'true' -> 'true'
<[C|Cs],N> when call 'erlang':'is_integer' (C) -> let <_2> = call 'erlang':'-' (N,1) in apply 'is_flat'/2 (Cs,_2)
<_5,_X_N> when 'true' -> 'false' end
'printable_bin0'/4 = fun (_0,_1,_2,_3) -> let <_9> = case call 'erlang':'>=' (_1,0) of <'true'> when 'true' -> let <_5> = call 'erlang':'*' (4,_1) in let <_4> = call 'erlang':'byte_size' (_0) in let <DChars> = call 'erlang':'min' (_5,_4) in case <> of <> when call 'erlang':'>=' (_2,0) -> call 'erlang':'min' (_2,DChars)
<> when 'true' -> DChars end
<'false'> when call 'erlang':'<' (_2,0) -> call 'erlang':'byte_size' (_0)
<'false'> when call 'erlang':'>=' (_2,0) -> _2
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in apply 'printable_bin'/4 (_0,_9,_1,_3)
'printable_bin'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_Bin,0,_X_D,_X_Enc> when 'true' -> 'false'
<Bin,Len,D,'latin1'> when 'true' -> let <N> = call 'erlang':'min' (20,Len) in let <L> = call 'erlang':'binary_to_list' (Bin,1,N) in case apply 'printable_latin1_list'/2 (L,N) of <'all'> when try let <_6> = call 'erlang':'byte_size' (Bin) in call 'erlang':'=:=' (N,_6) of <Try> -> Try catch <T,R> -> 'false' -> {'true',L}
<'all'> when call 'erlang':'=:=' (N,Len) -> {'true','true',L}
<'all'> when 'true' -> let <_8> = call 'erlang':'+' (1,N) in let <_7> = call 'erlang':'-' (Len,N) in case apply 'printable_bin1'/3 (Bin,_8,_7) of <0> when try let <_9> = call 'erlang':'byte_size' (Bin) in call 'erlang':'=:=' (_9,Len) of <Try> -> Try catch <T,R> -> 'false' -> let <_10> = call 'erlang':'binary_to_list' (Bin) in {'true',_10}
<NC> when try let <_11> = call 'erlang':'>' (D,0) in let <_12> = call 'erlang':'-' (Len,NC) in let <_13> = call 'erlang':'>=' (_12,D) in call 'erlang':'and' (_11,_13) of <Try> -> Try catch <T,R> -> 'false' -> let <_14> = call 'erlang':'-' (Len,NC) in let <_15> = call 'erlang':'binary_to_list' (Bin,1,_14) in {'true','true',_15}
<NC> when call 'erlang':'is_integer' (NC) -> 'false'
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
<NC> when try let <_17> = call 'erlang':'is_integer' (NC) in let <_18> = call 'erlang':'>' (D,0) in let <_19> = call 'erlang':'-' (N,NC) in let <_20> = call 'erlang':'>=' (_19,D) in let <_21> = call 'erlang':'and' (_18,_20) in call 'erlang':'and' (_17,_21) of <Try> -> Try catch <T,R> -> 'false' -> let <_22> = call 'erlang':'-' (N,NC) in let <_23> = call 'erlang':'binary_to_list' (Bin,1,_22) in {'true','true',_23}
<NC> when call 'erlang':'is_integer' (NC) -> 'false'
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<Bin,Len,D,_X_Uni> when 'true' -> case apply 'valid_utf8'/2 (Bin,Len) of <'true'> when 'true' -> let <_25> = call 'io':'printable_range' () in case apply 'printable_unicode'/4 (Bin,Len,[],_25) of <{_43,#{}#,L}> when 'true' -> let <_27> = call 'erlang':'byte_size' (Bin) in let <_26> = call 'erlang':'length' (L) in let <_28> = call 'erlang':'=:=' (_27,_26) in {_28,L}
<{NC,Bin1,L}> when try let <_29> = call 'erlang':'>' (D,0) in let <_30> = call 'erlang':'-' (Len,NC) in let <_31> = call 'erlang':'>=' (_30,D) in call 'erlang':'and' (_29,_31) of <Try> -> Try catch <T,R> -> 'false' -> let <_34> = call 'erlang':'byte_size' (Bin) in let <_33> = call 'erlang':'byte_size' (Bin1) in let <_35> = call 'erlang':'-' (_34,_33) in let <_32> = call 'erlang':'length' (L) in let <_36> = call 'erlang':'=:=' (_35,_32) in {_36,'true',L}
<{_X_NC,_X_Bin,_X_L}> when 'true' -> 'false'
(<_37> when 'true' -> primop 'match_fail' ({'case_clause',_37})-|['compiler_generated'] ) end
<'false'> when 'true' -> apply 'printable_bin'/4 (Bin,Len,D,'latin1')
(<_38> when 'true' -> primop 'match_fail' ({'case_clause',_38})-|['compiler_generated'] ) end end
'printable_bin1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_Bin,_X_Start,0> when 'true' -> 0
<Bin,Start,Len> when 'true' -> let <N> = call 'erlang':'min' (10000,Len) in let <_4> = call 'erlang':'+' (Start,N) in let <_5> = call 'erlang':'-' (_4,1) in let <L> = call 'erlang':'binary_to_list' (Bin,Start,_5) in case apply 'printable_latin1_list'/2 (L,N) of <'all'> when 'true' -> let <_8> = call 'erlang':'+' (Start,N) in let <_7> = call 'erlang':'-' (Len,N) in apply 'printable_bin1'/3 (Bin,_8,_7)
<NC> when call 'erlang':'is_integer' (NC) -> let <_9> = call 'erlang':'-' (N,NC) in call 'erlang':'-' (Len,_9)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end end
'printable_latin1_list'/2 = fun (_0,_1) -> case <_0,_1> of <[_17|_18],0> when 'true' -> 0
<[C|Cs],N> when let <_2> = call 'erlang':'>=' (C,32) in let <_3> = call 'erlang':'=<' (C,126) in call 'erlang':'and' (_2,_3) -> let <_4> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_4)
<[C|Cs],N> when let <_5> = call 'erlang':'>=' (C,160) in let <_6> = call 'erlang':'=<' (C,255) in call 'erlang':'and' (_5,_6) -> let <_7> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_7)
<[10|Cs],N> when 'true' -> let <_8> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_8)
<[13|Cs],N> when 'true' -> let <_9> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_9)
<[9|Cs],N> when 'true' -> let <_10> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_10)
<[11|Cs],N> when 'true' -> let <_11> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_11)
<[8|Cs],N> when 'true' -> let <_12> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_12)
<[12|Cs],N> when 'true' -> let <_13> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_13)
<[27|Cs],N> when 'true' -> let <_14> = call 'erlang':'-' (N,1) in apply 'printable_latin1_list'/2 (Cs,_14)
<[],_19> when 'true' -> 'all'
<_20,N> when 'true' -> N end
'valid_utf8'/2 = fun (_0,_1) -> case <_0,_1> of <#{}#,_5> when 'true' -> 'true'
<_6,0> when 'true' -> 'true'
<#{#<_7>('undefined','undefined','utf8',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#,N> when 'true' -> let <_2> = call 'erlang':'-' (N,1) in apply 'valid_utf8'/2 (R,_2)
<_8,_9> when 'true' -> 'false' end
'printable_unicode'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Bin = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#,I,L,Range> when call 'erlang':'>' (I,0) -> case apply 'printable_char'/2 (C,Range) of <'true'> when 'true' -> let <_4> = call 'erlang':'-' (I,1) in apply 'printable_unicode'/4 (R,_4,[C|L],Range)
<'false'> when 'true' -> let <_5> = call 'lists':'reverse' (L) in {I,Bin,_5}
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<Bin,I,L,_12> when 'true' -> let <_7> = call 'lists':'reverse' (L) in {I,Bin,_7} end
'printable_char'/2 = fun (_0,_1) -> case <_0,_1> of <10,_28> when 'true' -> 'true'
<13,_29> when 'true' -> 'true'
<9,_30> when 'true' -> 'true'
<11,_31> when 'true' -> 'true'
<8,_32> when 'true' -> 'true'
<12,_33> when 'true' -> 'true'
<27,_34> when 'true' -> 'true'
<C,'latin1'> when 'true' -> let <_5> = case <> of (<> when call 'erlang':'>=' (C,32) -> call 'erlang':'=<' (C,126)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _5 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case <> of (<> when call 'erlang':'>=' (C,160) -> call 'erlang':'=<' (C,255)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<C,'unicode'> when 'true' -> let <_12> = case <> of (<> when call 'erlang':'>=' (C,32) -> call 'erlang':'=<' (C,126)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _12 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_16> = case <> of (<> when call 'erlang':'>=' (C,160) -> call 'erlang':'<' (C,55296)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _16 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_20> = case <> of (<> when call 'erlang':'>' (C,57343) -> call 'erlang':'<' (C,65534)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in (case _20 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case <> of (<> when call 'erlang':'>' (C,65535) -> call 'erlang':'=<' (C,1114111)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_17}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_13> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_13}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26})-|[{'function_name',{'printable_char',2}}] )-|['compiler_generated'] ) end
'write_atom'/2 = fun (_0,_1) -> case <_0,_1> of <A,'latin1'> when 'true' -> call 'io_lib':'write_atom_as_latin1' (A)
<A,_X_Uni> when 'true' -> call 'io_lib':'write_atom' (A) end
'write_string'/2 = fun (_0,_1) -> case <_0,_1> of <S,'latin1'> when 'true' -> call 'io_lib':'write_latin1_string' (S,34)
<S,_X_Uni> when 'true' -> call 'io_lib':'write_string' (S,34) end
'expand'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <If = {_20,_21,_X_Dots = 0,'no_more'},_X_T,_X_Dd> when 'true' -> If
<{{'tuple',IsTagged,L},_X_Len,_22,'no_more'},T,Dd> when 'true' -> case apply 'expand_list'/4 (L,T,Dd,2) of <{NL,NLen,NDots}> when 'true' -> {{'tuple',IsTagged,NL},NLen,NDots,'no_more'}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<{{'map',Pairs},_X_Len,_23,'no_more'},T,Dd> when 'true' -> case apply 'expand_list'/4 (Pairs,T,Dd,3) of <{NPairs,NLen,NDots}> when 'true' -> {{'map',NPairs},NLen,NDots,'no_more'}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{{'map_pair',K,V},_X_Len,_24,'no_more'},T,Dd> when 'true' -> let <_5> = apply 'tsub'/2 (T,1) in case apply 'expand'/3 (K,_5,Dd) of <P1 = {_25,KL,KD,_26}> when 'true' -> let <KL1> = call 'erlang':'+' (KL,4) in let <_8> = apply 'tsub'/2 (T,KL1) in case apply 'expand'/3 (V,_8,Dd) of <P2 = {_27,VL,VD,_28}> when 'true' -> let <_11> = call 'erlang':'+' (KL1,VL) in let <_10> = call 'erlang':'+' (KD,VD) in {{'map_pair',P1,P2},_11,_10,'no_more'}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{{'record',[_@r0 = {Name,NameL}|L]},_X_Len,_29,'no_more'},T,Dd> when 'true' -> let <_12> = call 'erlang':'+' (NameL,2) in case apply 'expand_list'/4 (L,T,Dd,_12) of <{NL,NLen,NDots}> when 'true' -> {{'record',[_@r0|NL]},NLen,NDots,'no_more'}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<{{'field',Name,NameL,Field},_X_Len,_30,'no_more'},T,Dd> when 'true' -> let <_14> = apply 'tsub'/2 (T,NameL) in case apply 'expand'/3 (Field,_14,Dd) of <F = {_X_S,L,Dots,_31}> when 'true' -> let <_16> = call 'erlang':'+' (NameL,L) in {{'field',Name,NameL,F},_16,Dots,'no_more'}
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{_32,_33,_34,More},T,Dd> when 'true' -> apply More (T,Dd)
(<_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17})-|[{'function_name',{'expand',3}}] )-|['compiler_generated'] ) end
'expand_list'/4 = fun (_0,_1,_2,_3) -> let <_4> = apply 'tsub'/2 (_1,_3) in let <L> = apply 'expand_list'/3 (_0,_4,_2) in case apply 'list_length'/3 (L,_3,0) of <{Len,Dots}> when 'true' -> {L,Len,Dots}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'expand_list'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_X_T,_X_Dd> when 'true' -> []
<[If|Ifs],T,Dd> when 'true' -> let <_3> = apply 'tsub'/2 (T,1) in case apply 'expand'/3 (If,_3,Dd) of <Elem1 = {_11,Len1,_12,_13}> when 'true' -> let <_5> = call 'erlang':'+' (Len1,1) in let <_6> = apply 'tsub'/2 (T,_5) in let <_7> = apply 'expand_list'/3 (Ifs,_6,Dd) in [Elem1|_7]
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{_14,_15,_16,More},T,Dd> when 'true' -> apply More (T,Dd)
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'expand_list',3}}] )-|['compiler_generated'] ) end
'tsub'/2 = fun (_0,_1) -> case <_0,_1> of <T,_4> when call 'erlang':'<' (T,0) -> T
<T,E> when call 'erlang':'>=' (T,E) -> call 'erlang':'-' (T,E)
<_5,_6> when 'true' -> 0 end
'cind'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <{_X_S,Len,_29,_30},Col,Ll,M,Ind,LD,W> when try let <_7> = call 'erlang':'-' (Ll,Col) in let <_8> = call 'erlang':'-' (_7,LD) in let <_9> = call 'erlang':'<' (Len,_8) in let <_10> = call 'erlang':'+' (Len,W) in let <_11> = call 'erlang':'+' (_10,LD) in let <_12> = call 'erlang':'=<' (_11,M) in call 'erlang':'and' (_9,_12) of <Try> -> Try catch <T,R> -> 'false' -> Ind
<{{'list',L},_X_Len,_31,_32},Col,Ll,M,Ind,LD,W> when 'true' -> let <_14> = call 'erlang':'+' (Col,1) in let <_13> = call 'erlang':'+' (W,1) in apply 'cind_list'/7 (L,_14,Ll,M,Ind,LD,_13)
<{{'tuple','true',L},_X_Len,_33,_34},Col,Ll,M,Ind,LD,W> when 'true' -> let <_15> = call 'erlang':'+' (W,1) in apply 'cind_tag_tuple'/7 (L,Col,Ll,M,Ind,LD,_15)
<{{'tuple','false',L},_X_Len,_35,_36},Col,Ll,M,Ind,LD,W> when 'true' -> let <_17> = call 'erlang':'+' (Col,1) in let <_16> = call 'erlang':'+' (W,1) in apply 'cind_list'/7 (L,_17,Ll,M,Ind,LD,_16)
<{{'map',Pairs},_X_Len,_37,_38},Col,Ll,M,Ind,LD,W> when 'true' -> let <_19> = call 'erlang':'+' (Col,2) in let <_18> = call 'erlang':'+' (W,2) in apply 'cind_map'/7 (Pairs,_19,Ll,M,Ind,LD,_18)
<{{'record',[{_X_Name,NLen}|L]},_X_Len,_39,_40},Col,Ll,M,Ind,LD,W> when 'true' -> let <_20> = call 'erlang':'+' (W,NLen) in let <_21> = call 'erlang':'+' (_20,1) in apply 'cind_record'/8 (L,NLen,Col,Ll,M,Ind,LD,_21)
<{{'bin',_X_S},_X_Len,_41,_42},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind
<{_X_S,_X_Len,_43,_44},_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind
(<_28,_27,_26,_25,_24,_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24,_23,_22})-|[{'function_name',{'cind',7}}] )-|['compiler_generated'] ) end
'cind_tag_tuple'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[{_X_Tag,Tlen,_30,_31}|L],Col,Ll,M,Ind,LD,W> when 'true' -> let <TagInd> = call 'erlang':'+' (Tlen,2) in let <Tcol> = call 'erlang':'+' (Col,TagInd) in case <> of <> when let <_9> = call 'erlang':'>' (Ind,0) in let <_10> = call 'erlang':'>' (TagInd,Ind) in call 'erlang':'and' (_9,_10) -> let <Col1> = call 'erlang':'+' (Col,Ind) in case <> of <> when let <_13> = try let <_12> = call 'erlang':'+' (M,Col1) in call 'erlang':'=<' (_12,Ll) of <Try> -> Try catch <T,R> -> 'false' in let <_15> = try let <_14> = call 'erlang':'div' (Ll,2) in call 'erlang':'=<' (Col1,_14) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_13,_15) -> let <_16> = call 'erlang':'+' (W,Tlen) in apply 'cind_tail'/8 (L,Col1,Tcol,Ll,M,Ind,LD,_16)
<> when 'true' -> call 'erlang':'throw' ('no_good') end
<> when let <_18> = try let <_17> = call 'erlang':'+' (M,Tcol) in call 'erlang':'<' (_17,Ll) of <Try> -> Try catch <T,R> -> 'false' in let <_20> = try let <_19> = call 'erlang':'div' (Ll,2) in call 'erlang':'<' (Tcol,_19) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_18,_20) -> let <_21> = call 'erlang':'+' (W,Tlen) in let <_22> = call 'erlang':'+' (_21,1) in apply 'cind_list'/7 (L,Tcol,Ll,M,Ind,LD,_22)
<> when 'true' -> call 'erlang':'throw' ('no_good') end
(<_29,_28,_27,_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28,_27,_26,_25,_24,_23})-|[{'function_name',{'cind_tag_tuple',7}}] )-|['compiler_generated'] ) end
'cind_map'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[P|Ps],Col,Ll,M,Ind,LD,W> when 'true' -> let <_7> = apply 'last_depth'/2 (Ps,LD) in let <PW> = apply 'cind_pair'/7 (P,Col,Ll,M,Ind,_7,W) in let <_10> = call 'erlang':'+' (Col,PW) in let <_9> = call 'erlang':'+' (W,PW) in apply 'cind_pairs_tail'/8 (Ps,Col,_10,Ll,M,Ind,LD,_9)
<_18,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind end
'cind_pairs_tail'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[P = {_62,Len,_63,_64}|Ps],Col0,Col,Ll,M,Ind,LD,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Ps,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_29> = try let <_10> = call 'erlang':'=:=' (LD1,0) in let <_12> = call 'erlang':'+' (ELen,1) in let <_11> = call 'erlang':'-' (Ll,Col) in let <_13> = call 'erlang':'<' (_12,_11) in let <_14> = call 'erlang':'+' (W,ELen) in let <_15> = call 'erlang':'+' (_14,1) in let <_16> = call 'erlang':'=<' (_15,M) in let <_18> = call 'erlang':'element' (1,P) in let <_19> = call 'erlang':'element' (2,_18) in let <_20> = call 'erlang':'element' (1,_19) in (let <_25> = case call 'erlang':'is_list' (_20) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_21> = call 'erlang':'element' (1,P) in let <_22> = call 'erlang':'element' (3,_21) in let <_23> = call 'erlang':'element' (1,_22) in call 'erlang':'is_list' (_23)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end in let <_26> = call 'erlang':'=:=' ((_25-|['compiler_generated'] ),'true') in let <_27> = call 'erlang':'and' (_16,_26) in let <_28> = call 'erlang':'and' (_13,_27) in call 'erlang':'and' (_10,_28)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in let <_49> = try let <_30> = call 'erlang':'>' (LD1,0) in let <_31> = call 'erlang':'-' (Ll,Col) in let <_32> = call 'erlang':'-' (_31,LD1) in let <_33> = call 'erlang':'<' (ELen,_32) in let <_34> = call 'erlang':'+' (W,ELen) in let <_35> = call 'erlang':'+' (_34,LD1) in let <_36> = call 'erlang':'=<' (_35,M) in let <_38> = call 'erlang':'element' (1,P) in let <_39> = call 'erlang':'element' (2,_38) in let <_40> = call 'erlang':'element' (1,_39) in (let <_45> = case call 'erlang':'is_list' (_40) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_41> = call 'erlang':'element' (1,P) in let <_42> = call 'erlang':'element' (3,_41) in let <_43> = call 'erlang':'element' (1,_42) in call 'erlang':'is_list' (_43)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_37> when 'true' -> _37-|['compiler_generated'] ) end in let <_46> = call 'erlang':'=:=' ((_45-|['compiler_generated'] ),'true') in let <_47> = call 'erlang':'and' (_36,_46) in let <_48> = call 'erlang':'and' (_33,_47) in call 'erlang':'and' (_30,_48)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_29,_49) -> let <_51> = call 'erlang':'+' (Col,ELen) in let <_50> = call 'erlang':'+' (W,ELen) in apply 'cind_pairs_tail'/8 (Ps,Col0,_51,Ll,M,Ind,LD,_50)
<> when 'true' -> let <PW> = apply 'cind_pair'/7 (P,Col0,Ll,M,Ind,LD1,0) in let <_53> = call 'erlang':'+' (Col0,PW) in apply 'cind_pairs_tail'/8 (Ps,Col0,_53,Ll,M,Ind,LD,PW) end
<_65,_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind end
'cind_pair'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Pair = {{'map_pair',_X_Key,_X_Value},Len,_31,_32},Col,Ll,M,_X_Ind,LD,W> when try let <_7> = call 'erlang':'-' (Ll,Col) in let <_8> = call 'erlang':'-' (_7,LD) in let <_9> = call 'erlang':'<' (Len,_8) in let <_10> = call 'erlang':'+' (Len,W) in let <_11> = call 'erlang':'+' (_10,LD) in let <_12> = call 'erlang':'=<' (_11,M) in call 'erlang':'and' (_9,_12) of <Try> -> Try catch <T,R> -> 'false' -> case <> of <> when try let <_14> = call 'erlang':'element' (1,Pair) in let <_15> = call 'erlang':'element' (2,_14) in let <_16> = call 'erlang':'element' (1,_15) in (let <_21> = case call 'erlang':'is_list' (_16) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_17> = call 'erlang':'element' (1,Pair) in let <_18> = call 'erlang':'element' (3,_17) in let <_19> = call 'erlang':'element' (1,_18) in call 'erlang':'is_list' (_19)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_13> when 'true' -> _13-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_21-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> Len
<> when 'true' -> Ll end
<{{'map_pair',K,V},_X_Len,_33,_34},Col0,Ll,M,Ind,LD,W0> when 'true' -> do apply 'cind'/7 (K,Col0,Ll,M,Ind,LD,W0) let <I> = apply 'map_value_indent'/1 (Ind) in let <_23> = call 'erlang':'+' (Col0,I) in do apply 'cind'/7 (V,_23,Ll,M,Ind,LD,0) Ll
(<_30,_29,_28,_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29,_28,_27,_26,_25,_24})-|[{'function_name',{'cind_pair',7}}] )-|['compiler_generated'] ) end
'map_value_indent'/1 = fun (_0) -> case <> of <> when call 'erlang':'>' (_0,0) -> _0
<> when 'true' -> 4 end
'cind_record'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[F|Fs],Nlen,Col0,Ll,M,Ind,LD,W0> when 'true' -> let <Nind> = call 'erlang':'+' (Nlen,1) in case apply 'cind_rec'/6 (Nind,Col0,Ll,M,Ind,W0) of <{Col,W}> when 'true' -> let <_10> = apply 'last_depth'/2 (Fs,LD) in let <FW> = apply 'cind_field'/7 (F,Col,Ll,M,Ind,_10,W) in let <_13> = call 'erlang':'+' (Col,FW) in let <_12> = call 'erlang':'+' (W,FW) in apply 'cind_fields_tail'/8 (Fs,Col,_13,Ll,M,Ind,LD,_12)
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<_22,_X_Nlen,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind end
'cind_fields_tail'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[F = {_50,Len,_51,_52}|Fs],Col0,Col,Ll,M,Ind,LD,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Fs,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_23> = try let <_10> = call 'erlang':'=:=' (LD1,0) in let <_12> = call 'erlang':'+' (ELen,1) in let <_11> = call 'erlang':'-' (Ll,Col) in let <_13> = call 'erlang':'<' (_12,_11) in let <_14> = call 'erlang':'+' (W,ELen) in let <_15> = call 'erlang':'+' (_14,1) in let <_16> = call 'erlang':'=<' (_15,M) in let <_17> = call 'erlang':'element' (1,F) in let <_18> = call 'erlang':'element' (4,_17) in let <_19> = call 'erlang':'element' (1,_18) in let <_20> = call 'erlang':'is_list' (_19) in let <_21> = call 'erlang':'and' (_16,_20) in let <_22> = call 'erlang':'and' (_13,_21) in call 'erlang':'and' (_10,_22) of <Try> -> Try catch <T,R> -> 'false' in let <_37> = try let <_24> = call 'erlang':'>' (LD1,0) in let <_25> = call 'erlang':'-' (Ll,Col) in let <_26> = call 'erlang':'-' (_25,LD1) in let <_27> = call 'erlang':'<' (ELen,_26) in let <_28> = call 'erlang':'+' (W,ELen) in let <_29> = call 'erlang':'+' (_28,LD1) in let <_30> = call 'erlang':'=<' (_29,M) in let <_31> = call 'erlang':'element' (1,F) in let <_32> = call 'erlang':'element' (4,_31) in let <_33> = call 'erlang':'element' (1,_32) in let <_34> = call 'erlang':'is_list' (_33) in let <_35> = call 'erlang':'and' (_30,_34) in let <_36> = call 'erlang':'and' (_27,_35) in call 'erlang':'and' (_24,_36) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_23,_37) -> let <_39> = call 'erlang':'+' (Col,ELen) in let <_38> = call 'erlang':'+' (W,ELen) in apply 'cind_fields_tail'/8 (Fs,Col0,_39,Ll,M,Ind,LD,_38)
<> when 'true' -> let <FW> = apply 'cind_field'/7 (F,Col0,Ll,M,Ind,LD1,0) in let <_41> = call 'erlang':'+' (Col,FW) in apply 'cind_fields_tail'/8 (Fs,Col0,_41,Ll,M,Ind,LD,FW) end
<_53,_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind end
'cind_field'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Fl = {{'field',_X_N,_X_NL,_X_F},Len,_25,_26},Col,Ll,M,_X_Ind,LD,W> when try let <_7> = call 'erlang':'-' (Ll,Col) in let <_8> = call 'erlang':'-' (_7,LD) in let <_9> = call 'erlang':'<' (Len,_8) in let <_10> = call 'erlang':'+' (Len,W) in let <_11> = call 'erlang':'+' (_10,LD) in let <_12> = call 'erlang':'=<' (_11,M) in call 'erlang':'and' (_9,_12) of <Try> -> Try catch <T,R> -> 'false' -> case <> of <> when try let <_13> = call 'erlang':'element' (1,Fl) in let <_14> = call 'erlang':'element' (4,_13) in let <_15> = call 'erlang':'element' (1,_14) in call 'erlang':'is_list' (_15) of <Try> -> Try catch <T,R> -> 'false' -> Len
<> when 'true' -> Ll end
<{{'field',_X_Name,NameL,F},_X_Len,_27,_28},Col0,Ll,M,Ind,LD,W0> when 'true' -> let <_16> = call 'erlang':'+' (W0,NameL) in case apply 'cind_rec'/6 (NameL,Col0,Ll,M,Ind,_16) of <{Col,W}> when 'true' -> do apply 'cind'/7 (F,Col,Ll,M,Ind,LD,W) Ll
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_24,_23,_22,_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20,_19,_18})-|[{'function_name',{'cind_field',7}}] )-|['compiler_generated'] ) end
'cind_rec'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_7> = call 'erlang':'>' (_4,0) in let <_6> = call 'erlang':'>' (_0,_4) in let <Nl> = call 'erlang':'and' (_7,_6) in let <_10> = case Nl of <'true'> when 'true' -> _4
<'false'> when 'true' -> _0
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in let <Col> = call 'erlang':'+' (_1,_10) in case <> of <> when let <_14> = try let <_13> = call 'erlang':'+' (_3,Col) in call 'erlang':'=<' (_13,_2) of <Try> -> Try catch <T,R> -> 'false' in let <_16> = try let <_15> = call 'erlang':'div' (_2,2) in call 'erlang':'=<' (Col,_15) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_14,_16) -> let <_18> = case Nl of <'true'> when 'true' -> 0
<'false'> when 'true' -> _5
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end in {Col,_18}
<> when 'true' -> call 'erlang':'throw' ('no_good') end
'cind_list'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <{'dots',_18,_19,_20},_X_Col0,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind
<[E|Es],Col0,Ll,M,Ind,LD,W> when 'true' -> let <_7> = apply 'last_depth'/2 (Es,LD) in let <WE> = apply 'cind_element'/7 (E,Col0,Ll,M,Ind,_7,W) in let <_10> = call 'erlang':'+' (Col0,WE) in let <_9> = call 'erlang':'+' (W,WE) in apply 'cind_tail'/8 (Es,Col0,_10,Ll,M,Ind,LD,_9)
(<_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'cind_list',7}}] )-|['compiler_generated'] ) end
'cind_tail'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[],_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind
<[E = {_60,Len,_61,_62}|Es],Col0,Col,Ll,M,Ind,LD,W> when 'true' -> let <LD1> = apply 'last_depth'/2 (Es,LD) in let <ELen> = call 'erlang':'+' (1,Len) in case <> of <> when let <_21> = try let <_10> = call 'erlang':'=:=' (LD1,0) in let <_12> = call 'erlang':'+' (ELen,1) in let <_11> = call 'erlang':'-' (Ll,Col) in let <_13> = call 'erlang':'<' (_12,_11) in let <_14> = call 'erlang':'+' (W,ELen) in let <_15> = call 'erlang':'+' (_14,1) in let <_16> = call 'erlang':'=<' (_15,M) in let <_17> = call 'erlang':'element' (1,E) in let <_18> = call 'erlang':'is_list' (_17) in let <_19> = call 'erlang':'and' (_16,_18) in let <_20> = call 'erlang':'and' (_13,_19) in call 'erlang':'and' (_10,_20) of <Try> -> Try catch <T,R> -> 'false' in let <_33> = try let <_22> = call 'erlang':'>' (LD1,0) in let <_23> = call 'erlang':'-' (Ll,Col) in let <_24> = call 'erlang':'-' (_23,LD1) in let <_25> = call 'erlang':'<' (ELen,_24) in let <_26> = call 'erlang':'+' (W,ELen) in let <_27> = call 'erlang':'+' (_26,LD1) in let <_28> = call 'erlang':'=<' (_27,M) in let <_29> = call 'erlang':'element' (1,E) in let <_30> = call 'erlang':'is_list' (_29) in let <_31> = call 'erlang':'and' (_28,_30) in let <_32> = call 'erlang':'and' (_25,_31) in call 'erlang':'and' (_22,_32) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_21,_33) -> let <_35> = call 'erlang':'+' (Col,ELen) in let <_34> = call 'erlang':'+' (W,ELen) in apply 'cind_tail'/8 (Es,Col0,_35,Ll,M,Ind,LD,_34)
<> when 'true' -> let <WE> = apply 'cind_element'/7 (E,Col0,Ll,M,Ind,LD1,0) in let <_37> = call 'erlang':'+' (Col0,WE) in apply 'cind_tail'/8 (Es,Col0,_37,Ll,M,Ind,LD,WE) end
<{'dots',_63,_64,_65},_X_Col0,_X_Col,_X_Ll,_X_M,Ind,_X_LD,_X_W> when 'true' -> Ind
<E = {_66,Len,_67,_68},_X_Col0,Col,Ll,M,Ind,LD,W> when try let <_41> = call 'erlang':'+' (Len,1) in let <_39> = call 'erlang':'-' (Ll,Col) in let <_38> = call 'erlang':'+' (LD,1) in let <_40> = call 'erlang':'-' (_39,_38) in let <_42> = call 'erlang':'<' (_41,_40) in let <_44> = call 'erlang':'+' (Len,1) in let <_45> = call 'erlang':'+' (_44,W) in let <_43> = call 'erlang':'+' (LD,1) in let <_46> = call 'erlang':'+' (_45,_43) in let <_47> = call 'erlang':'=<' (_46,M) in let <_48> = call 'erlang':'element' (1,E) in let <_49> = call 'erlang':'is_list' (_48) in let <_50> = call 'erlang':'and' (_47,_49) in call 'erlang':'and' (_42,_50) of <Try> -> Try catch <T,R> -> 'false' -> Ind
<E,_X_Col0,Col,Ll,M,Ind,LD,_X_W> when 'true' -> let <_51> = call 'erlang':'+' (LD,1) in apply 'cind'/7 (E,Col,Ll,M,Ind,_51,0) end
'cind_element'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <E = {_23,Len,_24,_25},Col,Ll,M,_X_Ind,LD,W> when try let <_7> = call 'erlang':'-' (Ll,Col) in let <_8> = call 'erlang':'-' (_7,LD) in let <_9> = call 'erlang':'<' (Len,_8) in let <_10> = call 'erlang':'+' (Len,W) in let <_11> = call 'erlang':'+' (_10,LD) in let <_12> = call 'erlang':'=<' (_11,M) in let <_13> = call 'erlang':'element' (1,E) in let <_14> = call 'erlang':'is_list' (_13) in let <_15> = call 'erlang':'and' (_12,_14) in call 'erlang':'and' (_9,_15) of <Try> -> Try catch <T,R> -> 'false' -> Len
<E,Col,Ll,M,Ind,LD,W> when 'true' -> do apply 'cind'/7 (E,Col,Ll,M,Ind,LD,W) Ll end
'last_depth'/2 = fun (_0,_1) -> case <_0,_1> of <[_4|_5],_X_LD> when 'true' -> 0
<_6,LD> when 'true' -> call 'erlang':'+' (LD,1) end
'while_fail'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_X_F,V> when 'true' -> V
<[A|As],F,V> when 'true' -> try apply F (A) of <_3> -> _3 catch <_6,_5,_4> -> case <_6,_5,_4> of <('throw'-|['compiler_generated'] ),_10,_11> when 'true' -> apply 'while_fail'/3 (As,F,V)
(<_12,_13,_14> when 'true' -> primop 'raise' (_14,_13)-|['compiler_generated'] ) end
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'while_fail',3}}] )-|['compiler_generated'] ) end
'indent'/1 = fun (_0) -> case _0 of <N> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in call 'erlang':'and' (_1,_2) -> let <_3> = call 'erlang':'-' (N,1) in apply 'chars'/2 (32,_3)
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'indent',1}}] )-|['compiler_generated'] ) end
'indent'/2 = fun (_0,_1) -> case <_0,_1> of <1,Ind> when 'true' -> [32|Ind]
<4,Ind> when 'true' -> [[32|[32]]|[[32|[32]]|Ind]]
<N,Ind> when let <_3> = call 'erlang':'is_integer' (N) in let <_4> = call 'erlang':'>' (N,0) in call 'erlang':'and' (_3,_4) -> let <_5> = apply 'chars'/2 (32,N) in [_5|Ind]
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'indent',2}}] )-|['compiler_generated'] ) end
'chars'/2 = fun (_0,_1) -> case <_0,_1> of <_X_C,0> when 'true' -> []
<C,2> when 'true' -> [C|[C|[]]]
<C,3> when 'true' -> [C|[C|[C|[]]]]
<C,N> when try let <_2> = call 'erlang':'band' (N,1) in call 'erlang':'=:=' (_2,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_3> = call 'erlang':'bsr' (N,1) in let <S> = apply 'chars'/2 (C,_3) in [S|S]
<C,N> when 'true' -> let <_5> = call 'erlang':'bsr' (N,1) in let <S> = apply 'chars'/2 (C,_5) in [C|[S|S]] end
'get_option'/3 = fun (_0,_1,_2) -> case call 'lists':'keyfind' (_0,1,_1) of <'false'> when 'true' -> _2
<{_7,Value}> when call 'erlang':'=:=' (_7,_0) -> Value
<_8> when 'true' -> _2 end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('io_lib_pretty')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('io_lib_pretty',_0) end