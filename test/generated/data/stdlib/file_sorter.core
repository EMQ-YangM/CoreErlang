module 'file_sorter' ['check'/1,'check'/2,'keycheck'/2,'keycheck'/3,'keymerge'/3,'keymerge'/4,'keysort'/2,'keysort'/3,'keysort'/4,'merge'/2,'merge'/3,'module_info'/0,'module_info'/1,'sort'/1,'sort'/2,'sort'/3] attributes [ 'file' = [{[115|[114|[99|[47|[102|[105|[108|[101|[95|[115|[111|[114|[116|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],1}]
, 'compile' = [{'no_auto_import',[{'error',2}]}]
, 'dialyzer' = ['no_improper_lists']
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}]
, 'record' = [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}]
, 'file' = [{[115|[114|[99|[47|[102|[105|[108|[101|[95|[115|[111|[114|[116|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],34}]
, 'record' = [{'w',[{'record_field',42,{'atom',42,'keypos'}}|[{'record_field',42,{'atom',42,'runs'},{'cons',42,{'nil',42},{'nil',42}}}|[{'record_field',42,{'atom',42,'seq'},{'integer',42,1}}|[{'record_field',42,{'atom',42,'in'}}|[{'record_field',42,{'atom',42,'out'}}|[{'record_field',42,{'atom',42,'fun_out'}}|[{'record_field',42,{'atom',42,'prefix'}}|[{'record_field',42,{'atom',42,'temp'},{'nil',42}}|[{'record_field',43,{'atom',43,'format'}}|[{'record_field',43,{'atom',43,'runsize'}}|[{'record_field',43,{'atom',43,'no_files'}}|[{'record_field',43,{'atom',43,'order'}}|[{'record_field',43,{'atom',43,'chunksize'}}|[{'record_field',43,{'atom',43,'wfd'}}|[{'record_field',43,{'atom',43,'ref'}}|[{'record_field',43,{'atom',43,'z'}}|[{'record_field',43,{'atom',43,'unique'}}|[{'record_field',44,{'atom',44,'hdlen'}}|[{'record_field',44,{'atom',44,'inout_value'}}]]]]]]]]]]]]]]]]]]]}]
, 'record' = [{'opts',[{'record_field',46,{'atom',46,'format'},{'call',46,{'atom',46,'binary_term_fun'},[]}}|[{'record_field',46,{'atom',46,'size'},{'integer',46,524288}}|[{'record_field',47,{'atom',47,'no_files'},{'integer',47,16}}|[{'record_field',47,{'atom',47,'tmpdir'},{'atom',47,'default'}}|[{'record_field',47,{'atom',47,'order'},{'atom',47,'ascending'}}|[{'record_field',48,{'atom',48,'compressed'},{'atom',48,'false'}}|[{'record_field',48,{'atom',48,'unique'},{'atom',48,'false'}}|[{'record_field',48,{'atom',48,'header'},{'integer',48,4}}]]]]]]]]}]
, 'compile' = [{'inline',[{'badarg',2}|[{'make_key',2}|[{'make_stable_key',3}|[{'cfun',3}]]]]}]
, 'export_type' = [{'reason',0}]
, 'type' = [{'file_name',{'remote_type',58,[{'atom',58,'file'}|[{'atom',58,'name'}|[[]]]]},[]}]
, 'type' = [{'file_names',{'type',59,'list',[{'remote_type',59,[{'atom',59,'file'}|[{'atom',59,'name'}|[[]]]]}]},[]}]
, 'type' = [{'i_command',{'type',60,'union',[{'atom',60,'read'}|[{'atom',60,'close'}]]},[]}]
, 'type' = [{'i_reply',{'type',61,'union',[{'atom',61,'end_of_input'}|[{'type',61,'tuple',[{'atom',61,'end_of_input'}|[{'user_type',61,'value',[]}]]}|[{'type',62,'tuple',[{'type',62,'list',[{'user_type',62,'object',[]}]}|[{'user_type',62,'infun',[]}]]}|[{'user_type',62,'input_reply',[]}]]]]},[]}]
, 'type' = [{'infun',{'type',63,'fun',[{'type',63,'product',[{'user_type',63,'i_command',[]}]}|[{'user_type',63,'i_reply',[]}]]},[]}]
, 'type' = [{'input',{'type',64,'union',[{'user_type',64,'file_names',[]}|[{'user_type',64,'infun',[]}]]},[]}]
, 'type' = [{'input_reply',{'type',65,'term',[]},[]}]
, 'type' = [{'o_command',{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'value'}|[{'user_type',66,'value',[]}]]}|[{'type',66,'list',[{'user_type',66,'object',[]}]}|[{'atom',66,'close'}]]]},[]}]
, 'type' = [{'o_reply',{'type',67,'union',[{'user_type',67,'outfun',[]}|[{'user_type',67,'output_reply',[]}]]},[]}]
, 'type' = [{'object',{'type',68,'union',[{'type',68,'term',[]}|[{'type',68,'binary',[]}]]},[]}]
, 'type' = [{'outfun',{'type',69,'fun',[{'type',69,'product',[{'user_type',69,'o_command',[]}]}|[{'user_type',69,'o_reply',[]}]]},[]}]
, 'type' = [{'output',{'type',70,'union',[{'user_type',70,'file_name',[]}|[{'user_type',70,'outfun',[]}]]},[]}]
, 'type' = [{'output_reply',{'type',71,'term',[]},[]}]
, 'type' = [{'value',{'type',72,'term',[]},[]}]
, 'type' = [{'options',{'type',74,'union',[{'type',74,'list',[{'user_type',74,'option',[]}]}|[{'user_type',74,'option',[]}]]},[]}]
, 'type' = [{'option',{'type',75,'union',[{'type',75,'tuple',[{'atom',75,'compressed'}|[{'type',75,'boolean',[]}]]}|[{'type',76,'tuple',[{'atom',76,'header'}|[{'user_type',76,'header_length',[]}]]}|[{'type',77,'tuple',[{'atom',77,'format'}|[{'user_type',77,'format',[]}]]}|[{'type',78,'tuple',[{'atom',78,'no_files'}|[{'user_type',78,'no_files',[]}]]}|[{'type',79,'tuple',[{'atom',79,'order'}|[{'user_type',79,'order',[]}]]}|[{'type',80,'tuple',[{'atom',80,'size'}|[{'user_type',80,'size',[]}]]}|[{'type',81,'tuple',[{'atom',81,'tmpdir'}|[{'user_type',81,'tmp_directory',[]}]]}|[{'type',82,'tuple',[{'atom',82,'unique'}|[{'type',82,'boolean',[]}]]}]]]]]]]]},[]}]
, 'type' = [{'format',{'type',83,'union',[{'atom',83,'binary_term'}|[{'atom',83,'term'}|[{'atom',83,'binary'}|[{'user_type',83,'format_fun',[]}]]]]},[]}]
, 'type' = [{'format_fun',{'type',84,'fun',[{'type',84,'product',[{'type',84,'binary',[]}]}|[{'type',84,'term',[]}]]},[]}]
, 'type' = [{'header_length',{'type',85,'pos_integer',[]},[]}]
, 'type' = [{'key_pos',{'type',86,'union',[{'type',86,'pos_integer',[]}|[{'type',86,'list',[{'type',86,'pos_integer',[]}]}]]},[]}]
, 'type' = [{'no_files',{'type',87,'pos_integer',[]},[]}]
, 'type' = [{'order',{'type',88,'union',[{'atom',88,'ascending'}|[{'atom',88,'descending'}|[{'user_type',88,'order_fun',[]}]]]},[]}]
, 'type' = [{'order_fun',{'type',89,'fun',[{'type',89,'product',[{'type',89,'term',[]}|[{'type',89,'term',[]}]]}|[{'type',89,'boolean',[]}]]},[]}]
, 'type' = [{'size',{'type',90,'non_neg_integer',[]},[]}]
, 'type' = [{'tmp_directory',{'type',91,'union',[{'type',91,'nil',[]}|[{'remote_type',91,[{'atom',91,'file'}|[{'atom',91,'name'}|[[]]]]}]]},[]}]
, 'type' = [{'reason',{'type',93,'union',[{'atom',93,'bad_object'}|[{'type',94,'tuple',[{'atom',94,'bad_object'}|[{'user_type',94,'file_name',[]}]]}|[{'type',95,'tuple',[{'atom',95,'bad_term'}|[{'user_type',95,'file_name',[]}]]}|[{'type',96,'tuple',[{'atom',96,'file_error'}|[{'user_type',96,'file_name',[]}|[{'type',97,'union',[{'remote_type',97,[{'atom',97,'file'}|[{'atom',97,'posix'}|[[]]]]}|[{'atom',97,'badarg'}|[{'atom',97,'system_limit'}]]]}]]]}|[{'type',98,'tuple',[{'atom',98,'premature_eof'}|[{'user_type',98,'file_name',[]}]]}]]]]]},[]}]
, 'spec' = [{{'sort',1},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'FileName'}]}|[{'var',100,'Reply'}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'FileName'}|[{'user_type',101,'file_name',[]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Reply'}|[{'type',102,'union',[{'atom',102,'ok'}|[{'type',102,'tuple',[{'atom',102,'error'}|[{'user_type',102,'reason',[]}]]}|[{'user_type',102,'input_reply',[]}|[{'user_type',102,'output_reply',[]}]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'sort',2},[{'type',106,'bounded_fun',[{'type',106,'fun',[{'type',106,'product',[{'var',106,'Input'}|[{'var',106,'Output'}]]}|[{'var',106,'Reply'}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Input'}|[{'user_type',107,'input',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Output'}|[{'user_type',108,'output',[]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Reply'}|[{'type',109,'union',[{'atom',109,'ok'}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'user_type',109,'reason',[]}]]}|[{'user_type',109,'input_reply',[]}|[{'user_type',109,'output_reply',[]}]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'sort',3},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[{'var',113,'Input'}|[{'var',113,'Output'}|[{'var',113,'Options'}]]]}|[{'var',113,'Reply'}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'Input'}|[{'user_type',114,'input',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Output'}|[{'user_type',115,'output',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Options'}|[{'user_type',116,'options',[]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Reply'}|[{'type',117,'union',[{'atom',117,'ok'}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'user_type',117,'reason',[]}]]}|[{'user_type',117,'input_reply',[]}|[{'user_type',117,'output_reply',[]}]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'keysort',2},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'KeyPos'}|[{'var',126,'FileName'}]]}|[{'var',126,'Reply'}]]}|[[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'KeyPos'}|[{'user_type',127,'key_pos',[]}]]]]}|[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'FileName'}|[{'user_type',128,'file_name',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Reply'}|[{'type',129,'union',[{'atom',129,'ok'}|[{'type',129,'tuple',[{'atom',129,'error'}|[{'user_type',129,'reason',[]}]]}|[{'user_type',129,'input_reply',[]}|[{'user_type',129,'output_reply',[]}]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'keysort',3},[{'type',133,'bounded_fun',[{'type',133,'fun',[{'type',133,'product',[{'var',133,'KeyPos'}|[{'var',133,'Input'}|[{'var',133,'Output'}]]]}|[{'var',133,'Reply'}]]}|[[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'KeyPos'}|[{'user_type',134,'key_pos',[]}]]]]}|[{'type',135,'constraint',[{'atom',135,'is_subtype'}|[[{'var',135,'Input'}|[{'user_type',135,'input',[]}]]]]}|[{'type',136,'constraint',[{'atom',136,'is_subtype'}|[[{'var',136,'Output'}|[{'user_type',136,'output',[]}]]]]}|[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Reply'}|[{'type',137,'union',[{'atom',137,'ok'}|[{'type',137,'tuple',[{'atom',137,'error'}|[{'user_type',137,'reason',[]}]]}|[{'user_type',137,'input_reply',[]}|[{'user_type',137,'output_reply',[]}]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'keysort',4},[{'type',141,'bounded_fun',[{'type',141,'fun',[{'type',141,'product',[{'var',141,'KeyPos'}|[{'var',141,'Input'}|[{'var',141,'Output'}|[{'var',141,'Options'}]]]]}|[{'var',141,'Reply'}]]}|[[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'KeyPos'}|[{'user_type',142,'key_pos',[]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Input'}|[{'user_type',143,'input',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Output'}|[{'user_type',144,'output',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'Options'}|[{'user_type',145,'options',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Reply'}|[{'type',146,'union',[{'atom',146,'ok'}|[{'type',146,'tuple',[{'atom',146,'error'}|[{'user_type',146,'reason',[]}]]}|[{'user_type',146,'input_reply',[]}|[{'user_type',146,'output_reply',[]}]]]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'merge',2},[{'type',166,'bounded_fun',[{'type',166,'fun',[{'type',166,'product',[{'var',166,'FileNames'}|[{'var',166,'Output'}]]}|[{'var',166,'Reply'}]]}|[[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'FileNames'}|[{'user_type',167,'file_names',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'Output'}|[{'user_type',168,'output',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Reply'}|[{'type',169,'union',[{'atom',169,'ok'}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'user_type',169,'reason',[]}]]}|[{'user_type',169,'output_reply',[]}]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'merge',3},[{'type',173,'bounded_fun',[{'type',173,'fun',[{'type',173,'product',[{'var',173,'FileNames'}|[{'var',173,'Output'}|[{'var',173,'Options'}]]]}|[{'var',173,'Reply'}]]}|[[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'FileNames'}|[{'user_type',174,'file_names',[]}]]]]}|[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Output'}|[{'user_type',175,'output',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Options'}|[{'user_type',176,'options',[]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Reply'}|[{'type',177,'union',[{'atom',177,'ok'}|[{'type',177,'tuple',[{'atom',177,'error'}|[{'user_type',177,'reason',[]}]]}|[{'user_type',177,'output_reply',[]}]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'keymerge',3},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'KeyPos'}|[{'var',187,'FileNames'}|[{'var',187,'Output'}]]]}|[{'var',187,'Reply'}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'KeyPos'}|[{'user_type',188,'key_pos',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'FileNames'}|[{'user_type',189,'file_names',[]}]]]]}|[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Output'}|[{'user_type',190,'output',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Reply'}|[{'type',191,'union',[{'atom',191,'ok'}|[{'type',191,'tuple',[{'atom',191,'error'}|[{'user_type',191,'reason',[]}]]}|[{'user_type',191,'output_reply',[]}]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'keymerge',4},[{'type',195,'bounded_fun',[{'type',195,'fun',[{'type',195,'product',[{'var',195,'KeyPos'}|[{'var',195,'FileNames'}|[{'var',195,'Output'}|[{'var',195,'Options'}]]]]}|[{'var',195,'Reply'}]]}|[[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'KeyPos'}|[{'user_type',196,'key_pos',[]}]]]]}|[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'FileNames'}|[{'user_type',197,'file_names',[]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Output'}|[{'user_type',198,'output',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Options'}|[{'user_type',199,'options',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Reply'}|[{'type',200,'union',[{'atom',200,'ok'}|[{'type',200,'tuple',[{'atom',200,'error'}|[{'user_type',200,'reason',[]}]]}|[{'user_type',200,'output_reply',[]}]]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'check',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'FileName'}]}|[{'var',220,'Reply'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'FileName'}|[{'user_type',221,'file_name',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Reply'}|[{'type',222,'union',[{'type',222,'tuple',[{'atom',222,'ok'}|[{'type',222,'list',[{'var',222,'Result'}]}]]}|[{'type',222,'tuple',[{'atom',222,'error'}|[{'user_type',222,'reason',[]}]]}]]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Result'}|[{'type',223,'tuple',[{'var',223,'FileName'}|[{'var',223,'TermPosition'}|[{'type',223,'term',[]}]]]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'TermPosition'}|[{'type',224,'pos_integer',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'check',2},[{'type',228,'bounded_fun',[{'type',228,'fun',[{'type',228,'product',[{'var',228,'FileNames'}|[{'var',228,'Options'}]]}|[{'var',228,'Reply'}]]}|[[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'FileNames'}|[{'user_type',229,'file_names',[]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Options'}|[{'user_type',230,'options',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Reply'}|[{'type',231,'union',[{'type',231,'tuple',[{'atom',231,'ok'}|[{'type',231,'list',[{'var',231,'Result'}]}]]}|[{'type',231,'tuple',[{'atom',231,'error'}|[{'user_type',231,'reason',[]}]]}]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Result'}|[{'type',232,'tuple',[{'var',232,'FileName'}|[{'var',232,'TermPosition'}|[{'type',232,'term',[]}]]]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'FileName'}|[{'user_type',233,'file_name',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'TermPosition'}|[{'type',234,'pos_integer',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'keycheck',2},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'KeyPos'}|[{'var',243,'FileName'}]]}|[{'var',243,'Reply'}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'KeyPos'}|[{'user_type',244,'key_pos',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'FileName'}|[{'user_type',245,'file_name',[]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Reply'}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'ok'}|[{'type',246,'list',[{'var',246,'Result'}]}]]}|[{'type',246,'tuple',[{'atom',246,'error'}|[{'user_type',246,'reason',[]}]]}]]}]]]]}|[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Result'}|[{'type',247,'tuple',[{'var',247,'FileName'}|[{'var',247,'TermPosition'}|[{'type',247,'term',[]}]]]}]]]]}|[{'type',248,'constraint',[{'atom',248,'is_subtype'}|[[{'var',248,'TermPosition'}|[{'type',248,'pos_integer',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'keycheck',3},[{'type',252,'bounded_fun',[{'type',252,'fun',[{'type',252,'product',[{'var',252,'KeyPos'}|[{'var',252,'FileNames'}|[{'var',252,'Options'}]]]}|[{'var',252,'Reply'}]]}|[[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'KeyPos'}|[{'user_type',253,'key_pos',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'FileNames'}|[{'user_type',254,'file_names',[]}]]]]}|[{'type',255,'constraint',[{'atom',255,'is_subtype'}|[[{'var',255,'Options'}|[{'user_type',255,'options',[]}]]]]}|[{'type',256,'constraint',[{'atom',256,'is_subtype'}|[[{'var',256,'Reply'}|[{'type',256,'union',[{'type',256,'tuple',[{'atom',256,'ok'}|[{'type',256,'list',[{'var',256,'Result'}]}]]}|[{'type',256,'tuple',[{'atom',256,'error'}|[{'user_type',256,'reason',[]}]]}]]}]]]]}|[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Result'}|[{'type',257,'tuple',[{'var',257,'FileName'}|[{'var',257,'TermPosition'}|[{'type',257,'term',[]}]]]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'FileName'}|[{'user_type',258,'file_name',[]}]]]]}|[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'TermPosition'}|[{'type',259,'pos_integer',[]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'file_error',3},[{'type',1471,'fun',[{'type',1471,'product',[{'var',1471,'_'}|[{'type',1471,'tuple',[{'atom',1471,'error'}|[{'type',1471,'atom',[]}]]}|[{'type',1471,'record',[{'atom',1471,'w'}]}]]]}|[{'type',1471,'no_return',[]}]]}]}] ] 'sort'/1 = fun (_0) -> apply 'sort'/2 ([_0|[]],_0)
'sort'/2 = fun (_0,_1) -> apply 'sort'/3 (_0,_1,[])
'sort'/3 = fun (_0,_1,_2) -> let <_5> = apply 'is_input'/1 (_0) in let <_4> = apply 'maybe_output'/1 (_1) in let <_3> = apply 'options'/1 (_2) in case <_5,_4,_3> of <({('true'-|['compiler_generated'] ),Input}-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Output}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (0,Input,Output,Opts,'sort')
<(_20-|['compiler_generated'] ),(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] )> when 'true' -> let <T> = {(_20-|['compiler_generated'] ),(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] )} in let <_6> = call 'erlang':'tuple_to_list' (T) in let <_7> = apply 'culprit'/1 (_6) in let <_27> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_7,_27> of (<(E = ({('error'-|['compiler_generated'] ),_28}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_29}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_30,_31> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_30,_31}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'keysort'/2 = fun (_0,_1) -> apply 'keysort'/3 (_0,[_1|[]],_1)
'keysort'/3 = fun (_0,_1,_2) -> apply 'keysort'/4 (_0,_1,_2,[])
'keysort'/4 = fun (_0,_1,_2,_3) -> let <_7> = apply 'is_keypos'/1 (_0) in let <_6> = apply 'is_input'/1 (_1) in let <_5> = apply 'maybe_output'/1 (_2) in let <_4> = apply 'options'/1 (_3) in let <_74,_75,_76> = case <_7,_6,_5,_4> of <_18,_19,_20,({('opts'-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),_21,_22,_23,_24,_25,_26,_27}-|['compiler_generated'] )> when 'true' -> <_1,_2,[{'badarg','format'}]>
<_28,_29,_30,({('opts'-|['compiler_generated'] ),_31,_32,_33,_34,Order,_35,_36,_37}-|['compiler_generated'] )> when call 'erlang':'is_function' (Order) -> <_1,_2,[{'badarg','order'}]>
<('true'-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),In}-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Out}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_38,_39,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> <In,Out,Opts>
<(_56-|['compiler_generated'] ),(_57-|['compiler_generated'] ),(_58-|['compiler_generated'] ),(_59-|['compiler_generated'] )> when 'true' -> let <T> = {(_56-|['compiler_generated'] ),(_57-|['compiler_generated'] ),(_58-|['compiler_generated'] ),(_59-|['compiler_generated'] )} in let <_8> = call 'erlang':'tuple_to_list' (T) in <_1,_2,_8> end in case (<(_74-|['compiler_generated'] ),(_75-|['compiler_generated'] ),(_76-|['compiler_generated'] )>-|['compiler_generated'] ) of <Input,Output,O = ({('opts'-|['compiler_generated'] ),_46,_47,_48,_49,_50,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (_0,Input,Output,O,'sort')
<_54,_55,O> when 'true' -> let <_12> = apply 'culprit'/1 (O) in let <_65> = [_0|([_1|([_2|([_3|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_12,_65> of (<(E = ({('error'-|['compiler_generated'] ),_66}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_67}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_68,_69> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_68,_69}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'merge'/2 = fun (_0,_1) -> apply 'merge'/3 (_0,_1,[])
'merge'/3 = fun (_0,_1,_2) -> let <_5> = apply 'is_files'/1 (_0) in let <_4> = apply 'maybe_output'/1 (_1) in let <_3> = apply 'options'/1 (_2) in case <_5,_4,_3> of <({('true'-|['compiler_generated'] ),Files}-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Output}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_12,_13,_14,_15,_16,_17,_18,_19}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (0,Files,Output,Opts,'merge')
<(_20-|['compiler_generated'] ),(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] )> when 'true' -> let <T> = {(_20-|['compiler_generated'] ),(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] )} in let <_6> = call 'erlang':'tuple_to_list' (T) in let <_7> = apply 'culprit'/1 (_6) in let <_27> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_7,_27> of (<(E = ({('error'-|['compiler_generated'] ),_28}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_29}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_30,_31> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_30,_31}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'keymerge'/3 = fun (_0,_1,_2) -> apply 'keymerge'/4 (_0,_1,_2,[])
'keymerge'/4 = fun (_0,_1,_2,_3) -> let <_7> = apply 'is_keypos'/1 (_0) in let <_6> = apply 'is_files'/1 (_1) in let <_5> = apply 'maybe_output'/1 (_2) in let <_4> = apply 'options'/1 (_3) in let <_74,_75,_76> = case <_7,_6,_5,_4> of <_18,_19,_20,({('opts'-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),_21,_22,_23,_24,_25,_26,_27}-|['compiler_generated'] )> when 'true' -> <_1,_2,[{'badarg','format'}]>
<_28,_29,_30,({('opts'-|['compiler_generated'] ),_31,_32,_33,_34,Order,_35,_36,_37}-|['compiler_generated'] )> when call 'erlang':'is_function' (Order) -> <_1,_2,[{'badarg','order'}]>
<('true'-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Fs}-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Out}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_38,_39,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> <Fs,Out,Opts>
<(_56-|['compiler_generated'] ),(_57-|['compiler_generated'] ),(_58-|['compiler_generated'] ),(_59-|['compiler_generated'] )> when 'true' -> let <T> = {(_56-|['compiler_generated'] ),(_57-|['compiler_generated'] ),(_58-|['compiler_generated'] ),(_59-|['compiler_generated'] )} in let <_8> = call 'erlang':'tuple_to_list' (T) in <_1,_2,_8> end in case (<(_74-|['compiler_generated'] ),(_75-|['compiler_generated'] ),(_76-|['compiler_generated'] )>-|['compiler_generated'] ) of <Files,Output,O = ({('opts'-|['compiler_generated'] ),_46,_47,_48,_49,_50,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (_0,Files,Output,O,'merge')
<_54,_55,O> when 'true' -> let <_12> = apply 'culprit'/1 (O) in let <_65> = [_0|([_1|([_2|([_3|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_12,_65> of (<(E = ({('error'-|['compiler_generated'] ),_66}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_67}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_68,_69> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_68,_69}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'check'/1 = fun (_0) -> apply 'check'/2 ([_0|[]],[])
'check'/2 = fun (_0,_1) -> let <_3> = apply 'is_files'/1 (_0) in let <_2> = apply 'options'/1 (_1) in case <_3,_2> of <({('true'-|['compiler_generated'] ),Files}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_9,_10,_11,_12,_13,_14,_15,_16}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (0,Files,'undefined',Opts,'check')
<(_17-|['compiler_generated'] ),(_18-|['compiler_generated'] )> when 'true' -> let <T> = {(_17-|['compiler_generated'] ),(_18-|['compiler_generated'] )} in let <_4> = call 'erlang':'tuple_to_list' (T) in let <_5> = apply 'culprit'/1 (_4) in let <_22> = [_0|([_1|([]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_5,_22> of (<(E = ({('error'-|['compiler_generated'] ),_23}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_24}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_25,_26> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_25,_26}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'keycheck'/2 = fun (_0,_1) -> apply 'keycheck'/3 (_0,[_1|[]],[])
'keycheck'/3 = fun (_0,_1,_2) -> let <_5> = apply 'is_keypos'/1 (_0) in let <_4> = apply 'is_files'/1 (_1) in let <_3> = apply 'options'/1 (_2) in let <_65,_66> = case <_5,_4,_3> of <_15,_16,({('opts'-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),_17,_18,_19,_20,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> <_1,[{'badarg','format'}]>
<_24,_25,({('opts'-|['compiler_generated'] ),_26,_27,_28,_29,Order,_30,_31,_32}-|['compiler_generated'] )> when call 'erlang':'is_function' (Order) -> <_1,[{'badarg','order'}]>
<('true'-|['compiler_generated'] ),({('true'-|['compiler_generated'] ),Fs}-|['compiler_generated'] ),Opts = ({('opts'-|['compiler_generated'] ),_33,_34,_35,_36,_37,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> <Fs,Opts>
<(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] ),(_52-|['compiler_generated'] )> when 'true' -> let <T> = {(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] ),(_52-|['compiler_generated'] )} in let <_6> = call 'erlang':'tuple_to_list' (T) in <_1,_6> end in case (<(_65-|['compiler_generated'] ),(_66-|['compiler_generated'] )>-|['compiler_generated'] ) of <Files,O = ({('opts'-|['compiler_generated'] ),_41,_42,_43,_44,_45,_46,_47,_48}-|['compiler_generated'] )> when 'true' -> apply 'do_sort'/5 (_0,Files,'undefined',O,'check')
<_49,O> when 'true' -> let <_10> = apply 'culprit'/1 (O) in let <_57> = [_0|([_1|([_2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )] in (case <_10,_57> of (<(E = ({('error'-|['compiler_generated'] ),_58}-|['compiler_generated'] )-|['compiler_generated'] ),_X_Args> when ('true'-|['compiler_generated'] ) -> E-|['compiler_generated'] )
(<(B = ({('badarg'-|['compiler_generated'] ),_59}-|['compiler_generated'] )-|['compiler_generated'] ),Args> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (B,Args)-|['compiler_generated'] )-|['compiler_generated'] )
(<_60,_61> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_60,_61}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'culprit'/1 = fun (_0) -> case _0 of <[E = {'error',_2}|_3]> when 'true' -> E
<[B = {'badarg',_4}|_5]> when 'true' -> B
<[_6|B]> when 'true' -> apply 'culprit'/1 (B)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'culprit',1}}] )-|['compiler_generated'] ) end
'badarg'/2 = fun (_0,_1) -> case <_0,_1> of <E = {'error',_4},_X_Args> when 'true' -> E
<B = {'badarg',_5},Args> when 'true' -> call 'erlang':'error' (B,Args)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'badarg',2}}] )-|['compiler_generated'] ) end
'options'/1 = fun (_0) -> case _0 of <Options> when call 'erlang':'is_list' (_0) -> let <_1> = apply 'binary_term_fun'/0 () in apply 'options'/2 (Options,{'opts',_1,524288,16,'default','ascending','false','false',4})
<Option> when 'true' -> apply 'options'/1 ([Option|[]]) end
'options'/2 = fun (_0,_1) -> case <_0,_1> of <[{'format',Format}|L],Opts> when let <_2> = call 'erlang':'=:=' (Format,'binary') in let <_3> = call 'erlang':'=:=' (Format,'term') in let <_4> = call 'erlang':'is_function' (Format,1) in let <_5> = call 'erlang':'or' (_3,_4) in call 'erlang':'or' (_2,_5) -> case Opts of <{'opts',_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' -> let <_8> = call 'erlang':'setelement' (2,Opts,Format) in apply 'options'/2 (L,_8)
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'format','binary_term'}|L],Opts> when 'true' -> let <_rec1> = apply 'binary_term_fun'/0 () in case Opts of <{'opts',_75,_76,_77,_78,_79,_80,_81,_82}> when 'true' -> let <_12> = call 'erlang':'setelement' (2,Opts,_rec1) in apply 'options'/2 (L,_12)
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'size',Size}|L],Opts> when let <_13> = call 'erlang':'is_integer' (Size) in let <_14> = call 'erlang':'>=' (Size,0) in call 'erlang':'and' (_13,_14) -> let <_rec3> = call 'erlang':'max' (Size,1) in case Opts of <{'opts',_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' -> let <_18> = call 'erlang':'setelement' (3,Opts,_rec3) in apply 'options'/2 (L,_18)
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'no_files',NoFiles}|L],Opts> when let <_19> = call 'erlang':'is_integer' (NoFiles) in let <_20> = call 'erlang':'>' (NoFiles,1) in call 'erlang':'and' (_19,_20) -> case Opts of <{'opts',_93,_94,_95,_96,_97,_98,_99,_100}> when 'true' -> let <_23> = call 'erlang':'setelement' (4,Opts,NoFiles) in apply 'options'/2 (L,_23)
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'tmpdir',[]}|L],Opts> when 'true' -> case Opts of <{'opts',_102,_103,_104,_105,_106,_107,_108,_109}> when 'true' -> let <_26> = call 'erlang':'setelement' (5,Opts,'default') in apply 'options'/2 (L,_26)
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'tmpdir',Dir}|L],Opts> when 'true' -> let <_27> = catch call 'filename':'absname' (Dir) in case _27 of <{'EXIT',_111}> when 'true' -> {'badarg',Dir}
<FileName> when 'true' -> let <_rec7> = {'dir',FileName} in case Opts of <{'opts',_112,_113,_114,_115,_116,_117,_118,_119}> when 'true' -> let <_31> = call 'erlang':'setelement' (5,Opts,_rec7) in apply 'options'/2 (L,_31)
(<_120> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<[{'order',Fun}|L],Opts> when call 'erlang':'is_function' (Fun,2) -> case Opts of <{'opts',_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' -> let <_35> = call 'erlang':'setelement' (6,Opts,Fun) in apply 'options'/2 (L,_35)
(<_129> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'order',Order}|L],Opts> when let <_36> = call 'erlang':'=:=' (Order,'ascending') in let <_37> = call 'erlang':'=:=' (Order,'descending') in call 'erlang':'or' (_36,_37) -> case Opts of <{'opts',_130,_131,_132,_133,_134,_135,_136,_137}> when 'true' -> let <_40> = call 'erlang':'setelement' (6,Opts,Order) in apply 'options'/2 (L,_40)
(<_138> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'compressed',Bool}|L],Opts> when call 'erlang':'is_boolean' (Bool) -> case Opts of <{'opts',_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' -> let <_43> = call 'erlang':'setelement' (7,Opts,Bool) in apply 'options'/2 (L,_43)
(<_147> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'unique',Bool}|L],Opts> when call 'erlang':'is_boolean' (Bool) -> case Opts of <{'opts',_148,_149,_150,_151,_152,_153,_154,_155}> when 'true' -> let <_46> = call 'erlang':'setelement' (8,Opts,Bool) in apply 'options'/2 (L,_46)
(<_156> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'header',Len}|L],Opts> when try let <_47> = call 'erlang':'is_integer' (Len) in let <_48> = call 'erlang':'>' (Len,0) in let <_50> = call 'erlang':'<' (Len,2147483648) in let <_51> = call 'erlang':'and' (_48,_50) in call 'erlang':'and' (_47,_51) of <Try> -> Try catch <T,R> -> 'false' -> case Opts of <{'opts',_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' -> let <_54> = call 'erlang':'setelement' (9,Opts,Len) in apply 'options'/2 (L,_54)
(<_165> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[],Opts> when 'true' -> case <> of <> when (try (let <_57> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Opts,('opts'-|['compiler_generated'] ),(9-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_55-|['compiler_generated'] )> when 'true' -> (_55-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_58> = call 'erlang':'=:=' ((_57-|['compiler_generated'] ),'true') in let <_59> = call 'erlang':'element' (2,Opts) in let <_60> = call 'erlang':'=:=' (_59,'term') in let <_61> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_58,_60) in let <_62> = call 'erlang':'element' (9,Opts) in let <_63> = call 'erlang':'=/=' (_62,4) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_61,_63)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'badarg','header'}
<> when 'true' -> Opts end
<[Bad|_166],_X_Opts> when 'true' -> {'badarg',Bad}
<Bad,_X_Opts> when 'true' -> {'badarg',Bad} end
'do_sort'/5 = fun (_0,_1,_2,_3,_4) -> case _3 of <{'opts',Format0,Size,NoFiles,TmpDir,Order,Compressed,Unique,HdLen}> when 'true' -> let <Prefix> = apply 'tmp_prefix'/2 (_2,TmpDir) in let <Ref> = call 'erlang':'make_ref' () in let <_10> = case _0 of <[Kp|[]]> when 'true' -> Kp
<_26> when 'true' -> _0 end in case apply 'wrap_input'/3 (Format0,_4,_1) of <{Format,Input}> when 'true' -> let <_13> = case <> of <> when (call 'erlang':'=:=' (Compressed,'true')-|['compiler_generated'] ) -> ['compressed']
<> when 'true' -> [] end in case apply 'wrap_output_terms'/3 (Format0,_2,_13) of <{Output,FunOut}> when 'true' -> let <W> = {'w',_10,[[]],1,'undefined',Output,FunOut,Prefix,[],Format,Size,NoFiles,Order,16384,'undefined',Ref,_13,Unique,HdLen,'no_value'} in try apply 'doit'/3 (_4,Input,W) of <_17> -> _17 catch <_20,_19,_18> -> case <_20,_19,_18> of <('throw'-|['compiler_generated'] ),({_27,Error}-|['compiler_generated'] ),_28> when call 'erlang':'=:=' (_27,Ref) -> Error
(<_29,_30,_31> when 'true' -> primop 'raise' (_31,_30)-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'doit'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'sort',Input,W> when 'true' -> apply 'files'/5 (1,[],0,W,Input)
<'merge',Input,W> when 'true' -> apply 'last_merge'/2 (Input,W)
<'check',Input,W> when 'true' -> apply 'check_files'/3 (Input,W,[])
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'doit',3}}] )-|['compiler_generated'] ) end
'wrap_input'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'term','check',Files> when 'true' -> let <Fun> = fun (_5) -> let <_3> = apply 'file_rterms'/2 ('no_file',[_5|[]]) in let <Fn> = apply 'merge_terms_fun'/1 (_3) in {'fn',Fn,_5} in let <_14> = apply 'binary_term_fun'/0 () in let <_13> = letrec 'lc$^1'/1 = fun (_10) -> case _10 of <[F|_9]> when 'true' -> let <_11> = apply Fun (F) in let <_12> = apply 'lc$^1'/1 (_9) in ([_11|_12]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_42> when 'true' -> (primop 'match_fail' ({'function_clause',_42})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (Files) in {_14,_13}
<Format,'check',Files> when 'true' -> {Format,Files}
<'term','merge',Files> when 'true' -> let <Fun> = fun (_16) -> let <_15> = apply 'file_rterms'/2 ('no_file',[_16|[]]) in apply 'merge_terms_fun'/1 (_15) in let <_24> = letrec 'lc$^3'/1 = fun (_21) -> case _21 of <[F|_20]> when 'true' -> let <_22> = apply Fun (F) in let <_23> = apply 'lc$^3'/1 (_20) in ([_22|_23]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_44> when 'true' -> (primop 'match_fail' ({'function_clause',_44})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in apply 'lc$^3'/1 (Files) in let <Input> = call 'lists':'reverse' (_24) in let <_26> = apply 'binary_term_fun'/0 () in {_26,Input}
<Format,'merge',Files> when 'true' -> let <_32> = letrec 'lc$^4'/1 = fun (_29) -> case _29 of <[F|_28]> when 'true' -> let <_30> = apply 'merge_bins_fun'/1 (F) in let <_31> = apply 'lc$^4'/1 (_28) in ([_30|_31]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_45> when 'true' -> (primop 'match_fail' ({'function_clause',_45})-|[{'function_name',{'lc$^4',1}}] )-|['compiler_generated'] ) end in apply 'lc$^4'/1 (Files) in let <Input> = call 'lists':'reverse' (_32) in {Format,Input}
<'term','sort',InFun> when call 'erlang':'is_function' (InFun,1) -> let <_35> = apply 'binary_term_fun'/0 () in let <_34> = apply 'fun_rterms'/1 (InFun) in {_35,_34}
<'term','sort',Files> when 'true' -> let <_37> = apply 'binary_term_fun'/0 () in let <_36> = apply 'file_rterms'/2 ('no_file',Files) in {_37,_36}
<Format,'sort',Input> when 'true' -> {Format,Input}
(<_40,_39,_38> when 'true' -> (primop 'match_fail' ({'function_clause',_40,_39,_38})-|[{'function_name',{'wrap_input',3}}] )-|['compiler_generated'] ) end
'merge_terms_fun'/1 = fun (_0) -> (fun (_5) -> case _5 of <'close'> when 'true' -> apply _0 ('close')
<{I,[],_X_LSz,W}> when 'true' -> case apply _0 ('read') of <'end_of_input'> when 'true' -> 'eof'
<{Objs,NRFun}> when call 'erlang':'is_function' (NRFun,1) -> case apply 'fun_objs'/6 (Objs,[],0,2147483648,I,W) of <{_8,[],Ts,_9}> when 'true' -> let <_3> = apply 'merge_terms_fun'/1 (NRFun) in {{I,Ts,16384},_3}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<Error> when 'true' -> apply 'error'/2 (Error,W) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-merge_terms_fun/1-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-merge_terms_fun/1-fun-0-'}}] )
'merge_bins_fun'/1 = fun (_0) -> (fun (_2) -> case _2 of <'close'> when 'true' -> 'ok'
<A = {_X_I,_X_L,_X_LSz,W}> when 'true' -> let <Fun> = apply 'read_fun'/3 (_0,'user',W) in apply Fun (A)
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'-merge_bins_fun/1-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-merge_bins_fun/1-fun-0-'}}] )
'wrap_output_terms'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'term',OutFun,_X_Z> when call 'erlang':'is_function' (OutFun,1) -> let <_3> = apply 'fun_wterms'/1 (OutFun) in {_3,'true'}
<'term',File,Z> when call 'erlang':'=/=' (File,'undefined') -> let <_4> = call 'erlang':'++' (Z,['write']) in let <_5> = apply 'file_wterms'/3 ('name',File,_4) in {_5,'false'}
<_X_Format,Output,_X_Z> when 'true' -> let <_6> = call 'erlang':'is_function' (Output,1) in {Output,_6} end
'binary_term_fun'/0 = fun () -> (fun (_0) -> call 'erlang':'binary_to_term' (_0)-|[{'id',{0,0,'-binary_term_fun/0-fun-0-'}}] )
'check_files'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_X_W,L> when 'true' -> let <_3> = call 'lists':'reverse' (L) in {'ok',_3}
<[FN|FNs],W,L> when 'true' -> let <_35,_36> = case FN of <{'fn',Fun,File}> when 'true' -> <Fun,File>
<File> when 'true' -> let <_4> = apply 'read_fun'/3 (File,'user',W) in <_4,File> end in case W of <{'w',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> let <_10> = call 'erlang':'setelement' (5,W,(_35-|['compiler_generated'] )) in apply 'check_run'/7 ((_35-|['compiler_generated'] ),(_36-|['compiler_generated'] ),FNs,_10,L,2,'nolast')
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12})-|[{'function_name',{'check_files',3}}] )-|['compiler_generated'] ) end
'check_run'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply _0 ({{'merge',_5},[],0,_3}) of <{{_X_I,Objs,_X_LSz},IFun1}> when 'true' -> case _3 of <{'w',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}> when 'true' -> let <_9> = call 'erlang':'setelement' (5,_3,IFun1) in let <_11> = call 'lists':'reverse' (Objs) in apply 'check_objs0'/8 (IFun1,_1,_2,_9,_4,_5,_6,_11)
(<_43> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'eof'> when 'true' -> case _3 of <{'w',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' -> let <_14> = call 'erlang':'setelement' (5,_3,'undefined') in apply 'check_files'/3 (_2,_14,_4)
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
'check_objs0'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <IFun,F,FNs,W,L,I,'nolast',[{T,_X_BT}|Os]> when 'true' -> apply 'check_objs1'/8 (IFun,F,FNs,W,L,I,T,Os)
<IFun,F,FNs,W,L,I,Last,[]> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,Last)
<IFun,F,FNs,W,L,I,{'last',Last},Os> when 'true' -> apply 'check_objs1'/8 (IFun,F,FNs,W,L,I,Last,Os)
(<_15,_14,_13,_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11,_10,_9,_8})-|[{'function_name',{'check_objs0',8}}] )-|['compiler_generated'] ) end
'check_objs1'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case _3 of <{'w',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'ascending',_28,_29,_30,_31,'true',_32,_33}> when 'true' -> apply 'ucheck_objs'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<{'w',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'ascending',_45,_46,_47,_48,'false',_49,_50}> when 'true' -> apply 'check_objs'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<{'w',_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,'descending',_62,_63,_64,_65,'true',_66,_67}> when 'true' -> apply 'rucheck_objs'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<{'w',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,'descending',_79,_80,_81,_82,'false',_83,_84}> when 'true' -> apply 'rcheck_objs'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<{'w',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,CF,_96,_97,_98,_99,'true',_100,_101}> when 'true' -> apply 'uccheck_objs'/9 (_0,_1,_2,_3,_4,_5,_6,_7,CF)
<{'w',_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,CF,_113,_114,_115,_116,'false',_117,_118}> when 'true' -> apply 'ccheck_objs'/9 (_0,_1,_2,_3,_4,_5,_6,_7,CF)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'check_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]> when call 'erlang':'>=' (T,Last) -> let <_8> = call 'erlang':'+' (I,1) in apply 'check_objs'/8 (IFun,F,FNs,W,L,_8,T,Os)
<IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_17]> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
<IFun,F,FNs,W,L,I,Last,[]> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',Last})
(<_16,_15,_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})-|[{'function_name',{'check_objs',8}}] )-|['compiler_generated'] ) end
'rcheck_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <IFun,F,FNs,W,L,I,Last,[{T,_X_BT}|Os]> when call 'erlang':'=<' (T,Last) -> let <_8> = call 'erlang':'+' (I,1) in apply 'rcheck_objs'/8 (IFun,F,FNs,W,L,_8,T,Os)
<IFun,F,FNs,W,L,I,_X_Last,[{_X_T,BT}|_17]> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
<IFun,F,FNs,W,L,I,Last,[]> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',Last})
(<_16,_15,_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})-|[{'function_name',{'rcheck_objs',8}}] )-|['compiler_generated'] ) end
'ucheck_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]> when call 'erlang':'>' (T,LT) -> let <_8> = call 'erlang':'+' (I,1) in apply 'ucheck_objs'/8 (IFun,F,FNs,W,L,_8,T,Os)
<IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_17]> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
<IFun,F,FNs,W,L,I,LT,[]> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',LT})
(<_16,_15,_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})-|[{'function_name',{'ucheck_objs',8}}] )-|['compiler_generated'] ) end
'rucheck_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <IFun,F,FNs,W,L,I,LT,[{T,_X_BT}|Os]> when call 'erlang':'<' (T,LT) -> let <_8> = call 'erlang':'+' (I,1) in apply 'rucheck_objs'/8 (IFun,F,FNs,W,L,_8,T,Os)
<IFun,F,FNs,W,L,I,_X_LT,[{_X_T,BT}|_17]> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
<IFun,F,FNs,W,L,I,LT,[]> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',LT})
(<_16,_15,_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13,_12,_11,_10,_9})-|[{'function_name',{'rucheck_objs',8}}] )-|['compiler_generated'] ) end
'ccheck_objs'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' -> case apply CF (LT,T) of <'true'> when 'true' -> let <_9> = call 'erlang':'+' (I,1) in apply 'ccheck_objs'/9 (IFun,F,FNs,W,L,_9,T,Os,CF)
<'false'> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',LT})
(<_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'ccheck_objs',9}}] )-|['compiler_generated'] ) end
'uccheck_objs'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <IFun,F,FNs,W,L,I,LT,[{T,BT}|Os],CF> when 'true' -> case apply CF (LT,T) of <'true'> when 'true' -> case apply CF (T,LT) of <'true'> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
<'false'> when 'true' -> let <_9> = call 'erlang':'+' (I,1) in apply 'uccheck_objs'/9 (IFun,F,FNs,W,L,_9,T,Os,CF)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<'false'> when 'true' -> apply 'culprit_found'/7 (IFun,F,FNs,W,L,I,BT)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<IFun,F,FNs,W,L,I,LT,[],_X_CF> when 'true' -> apply 'check_run'/7 (IFun,F,FNs,W,L,I,{'last',LT})
(<_20,_19,_18,_17,_16,_15,_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13,_12})-|[{'function_name',{'uccheck_objs',9}}] )-|['compiler_generated'] ) end
'culprit_found'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <IFun,F,FNs,W,L,I,[_X_Size|BT]> when 'true' -> do apply IFun ('close') let <_7> = call 'erlang':'binary_to_term' (BT) in apply 'check_files'/3 (FNs,W,[{F,I,_7}|L])
(<_14,_13,_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12,_11,_10,_9,_8})-|[{'function_name',{'culprit_found',7}}] )-|['compiler_generated'] ) end
'files'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_I,L,_X_LSz,W = {'w',_29,_30,1,_31,Out,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45},[]> when 'true' -> case Out of <Fun> when call 'erlang':'is_function' (Out) -> let <SL> = apply 'internal_sort'/2 (L,W) in let <_6> = apply 'binterm_objects'/2 (SL,[]) in let <W1> = apply 'outfun'/2 (_6,W) in let <NW> = apply 'close_input'/1 (W1) in apply 'outfun'/2 ('close',NW)
<_46> when 'true' -> do apply 'write_run'/3 (L,W,Out) 'ok' end
<_X_I,L,_X_LSz,W,[]> when 'true' -> let <W1> = apply 'write_run'/2 (L,W) in (case W1 of (<({'w',_47,_rec18,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}-|['compiler_generated'] )> when 'true' -> let <_14> = call 'lists':'append' (_rec18) in apply 'last_merge'/2 (_14,W1)-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<I,L,LSz,W,Fun> when call 'erlang':'is_function' (Fun) -> case W of <{'w',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84}> when 'true' -> let <_17> = call 'erlang':'setelement' (5,W,Fun) in apply 'fun_run'/5 (I,L,LSz,_17,[])
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<I,L,LSz,W,[FileName|FileNames]> when 'true' -> let <InFun> = apply 'read_fun'/3 (FileName,'user',W) in case W of <{'w',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}> when 'true' -> let <_22> = call 'erlang':'setelement' (5,W,InFun) in apply 'file_run'/6 (InFun,FileNames,I,L,LSz,_22)
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_28,_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24})-|[{'function_name',{'files',5}}] )-|['compiler_generated'] ) end
'file_run'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <InFun,FileNames,I,L,LSz,W = {'w',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}> when (try let <_10> = call 'erlang':'element' (11,W) in call 'erlang':'<' (LSz,_10) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply InFun ({I,L,LSz,W}) of <{{I1,L1,LSz1},InFun1}> when 'true' -> case W of <{'w',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' -> let <_14> = call 'erlang':'setelement' (5,W,InFun1) in apply 'file_run'/6 (InFun1,FileNames,I1,L1,LSz1,_14)
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'eof'> when 'true' -> case W of <{'w',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_18> = call 'erlang':'setelement' (5,W,'undefined') in apply 'files'/5 (I,L,LSz,_18,FileNames)
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end
<InFun,FileNames,I,L,_X_LSz,W> when 'true' -> let <NW> = apply 'write_run'/2 (L,W) in apply 'file_run'/6 (InFun,FileNames,I,[],0,NW) end
'fun_run'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <I,L,LSz,W,[]> when 'true' -> case apply 'infun'/1 (W) of <{'end_of_input',NW}> when 'true' -> apply 'files'/5 (I,L,LSz,NW,[])
<{'cont',NW,Objs}> when 'true' -> apply 'fun_run'/5 (I,L,LSz,NW,Objs)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<I,L,LSz,W = {'w',_13,_14,_15,_16,_17,_18,_19,_20,_21,Runsize,_22,_23,_24,_25,_26,_27,_28,_29,_30},Objs> when call 'erlang':'<' (LSz,Runsize) -> case apply 'fun_objs'/6 (Objs,L,LSz,Runsize,I,W) of <{NI,NObjs,NL,NLSz}> when 'true' -> apply 'fun_run'/5 (NI,NL,NLSz,W,NObjs)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<I,L,_X_LSz,W,Objs> when 'true' -> let <NW> = apply 'write_run'/2 (L,W) in apply 'fun_run'/5 (I,[],0,NW,Objs) end
'write_run'/2 = fun (_0,_1) -> case <_0,_1> of <[],W> when 'true' -> W
<L,W> when 'true' -> case apply 'next_temp'/1 (W) of <{W1,Temp}> when 'true' -> let <NW> = apply 'write_run'/3 (L,W1,Temp) in (case NW of (<({'w',_9,_rec23,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when 'true' -> case _rec23 of <[R|Rs]> when 'true' -> apply 'merge_runs'/3 ([[Temp|R]|Rs],[],NW)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
'write_run'/3 = fun (_0,_1,_2) -> let <SL> = apply 'internal_sort'/2 (_0,_1) in let <BTs> = apply 'binterms'/2 (SL,[]) in case apply 'open_file'/2 (_2,_1) of <{Fd,W1}> when 'true' -> do apply 'write'/4 (Fd,_2,BTs,W1) apply 'close_file'/2 (Fd,W1)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'internal_sort'/2 = fun (_0,_1) -> case <_0,_1> of <L = [],_X_W> when 'true' -> L
<L,{'w',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,CFun,_28,_29,_30,_31,Unique,_32,_33}> when call 'erlang':'is_function' (CFun) -> let <Fun> = fun (_3,_2) -> case <_3,_2> of <{T1,_34},{T2,_35}> when 'true' -> apply CFun (T1,T2)
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'-internal_sort/2-fun-0-',2}}] )-|['compiler_generated'] ) end in let <RL> = call 'lists':'reverse' (L) in let <_8> = case <> of <> when (call 'erlang':'=:=' (Unique,'true')-|['compiler_generated'] ) -> call 'lists':'usort' (Fun,RL)
<> when 'true' -> call 'lists':'sort' (Fun,RL) end in call 'lists':'reverse' (_8)
<L,W = {'w',0,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,'true',_51,_52}> when 'true' -> let <_9> = call 'lists':'usort' (L) in apply 'rev'/2 (_9,W)
<L,W = {'w',0,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,'false',_68,_69}> when 'true' -> let <_10> = call 'lists':'sort' (L) in apply 'rev'/2 (_10,W)
<L,W = {'w',_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,'true',_86,_87}> when 'true' -> let <_11> = call 'lists':'reverse' (L) in let <_12> = call 'lists':'ukeysort' (1,_11) in apply 'rev'/2 (_12,W)
<L,W = {'w',_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,'false',_104,_105}> when 'true' -> let <_13> = call 'lists':'reverse' (L) in let <_14> = call 'lists':'keysort' (1,_13) in apply 'rev'/2 (_14,W)
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'internal_sort',2}}] )-|['compiler_generated'] ) end
'rev'/2 = fun (_0,_1) -> case <_0,_1> of <L,{'w',_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,'ascending',_15,_16,_17,_18,_19,_20,_21}> when 'true' -> call 'lists':'reverse' (L)
<L,{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,'descending',_33,_34,_35,_36,_37,_38,_39}> when 'true' -> L
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'rev',2}}] )-|['compiler_generated'] ) end
'last_merge'/2 = fun (_0,_1) -> case <_0,_1> of <R,W = {'w',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}> when (try let <_7> = call 'erlang':'length' (R) in let <_6> = call 'erlang':'element' (12,W) in call 'erlang':'=<' (_7,_6) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case W of (<({'w',_45,_46,_47,_48,_rec24,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}-|['compiler_generated'] )> when 'true' -> case _rec24 of <Fun> when call 'erlang':'is_function' (_rec24) -> let <_11> = call 'lists':'reverse' (R) in case apply 'init_merge'/4 (_11,1,[],W) of <{Fs,W1}> when 'true' -> let <W2> = apply 'merge_files'/5 (Fs,[],0,'nolast',W1) in let <NW> = apply 'close_input'/1 (W2) in apply 'outfun'/2 ('close',NW)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<Out> when 'true' -> do apply 'merge_files'/3 (R,W,Out) 'ok' end-|['compiler_generated'] )
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<R,W> when 'true' -> (case W of (<({'w',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_rec25,_74,_75,_76,_77,_78,_79,_80,_81}-|['compiler_generated'] )> when 'true' -> let <L> = call 'lists':'sublist' (R,_rec25) in case apply 'merge_files'/2 (L,W) of <{M,NW}> when 'true' -> (case W of (<({'w',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_rec26,_93,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> let <_23> = call 'lists':'nthtail' (_rec26,R) in apply 'last_merge'/2 ([M|_23],NW)-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'merge_runs'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_@r0 = [R|Rs],NRs0,W = {'w',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}> when (try let <_8> = call 'erlang':'length' (R) in let <_7> = call 'erlang':'element' (12,W) in call 'erlang':'<' (_8,_7) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_10> = call 'lists':'reverse' (NRs0) in let <NRs> = call 'erlang':'++' (_10,_@r0) in case W of <{'w',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}> when 'true' -> call 'erlang':'setelement' (3,W,NRs)
(<_61> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[R|[]],NRs0,W> when 'true' -> case apply 'merge_files'/2 (R,W) of <{M,NW}> when 'true' -> let <_15> = call 'lists':'reverse' ([[M|[]]|NRs0]) in let <NRs> = [[]|_15] in case NW of <{'w',_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80}> when 'true' -> call 'erlang':'setelement' (3,NW,NRs)
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<[R|[R1|Rs]],NRs0,W> when 'true' -> case apply 'merge_files'/2 (R,W) of <{M,NW}> when 'true' -> apply 'merge_runs'/3 ([[M|R1]|Rs],[[]|NRs0],NW)
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20})-|[{'function_name',{'merge_runs',3}}] )-|['compiler_generated'] ) end
'merge_files'/2 = fun (_0,_1) -> case apply 'next_temp'/1 (_1) of <{W1,Temp}> when 'true' -> let <_3> = apply 'merge_files'/3 (_0,W1,Temp) in {Temp,_3}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'merge_files'/3 = fun (_0,_1,_2) -> let <_3> = call 'lists':'reverse' (_0) in case apply 'init_merge'/4 (_3,1,[],_1) of <{Fs,W1}> when 'true' -> case apply 'open_file'/2 (_2,W1) of <{Fd,W2}> when 'true' -> let <_rec29> = {Fd,_2} in case W2 of <{'w',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> let <_9> = call 'erlang':'setelement' (15,W2,_rec29) in let <W4> = apply 'merge_files'/5 (Fs,[],0,'nolast',_9) in case W4 of <{'w',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' -> let <_14> = call 'erlang':'setelement' (15,W4,'undefined') in apply 'close_file'/2 (Fd,_14)
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'init_merge'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[FN|FNs],I,Fs,W> when 'true' -> let <_5> = case FN of <_31> when call 'erlang':'is_function' (FN) -> FN
<_32> when 'true' -> apply 'read_fun'/3 (FN,'fsort',W) end in (case W of (<({'w',_33,_34,_35,_36,_37,_38,_39,_rec34,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}-|['compiler_generated'] )> when 'true' -> let <_9> = call 'lists':'delete' (FN,_rec34) in let <_rec32> = [_5|_9] in case W of <{'w',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' -> let <_13> = call 'erlang':'setelement' (9,W,_rec32) in case apply 'read_more'/4 (_5,I,0,_13) of <{Ts,_X_LSz,NIFun,NW}> when 'true' -> let <InEtc> = {I,NIFun} in let <_16> = call 'erlang':'+' (I,1) in apply 'init_merge'/4 (FNs,_16,[[Ts|InEtc]|Fs],NW)
<{'eof',NW}> when 'true' -> let <_17> = call 'erlang':'+' (I,1) in apply 'init_merge'/4 (FNs,_17,Fs,NW)
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[],_X_I,Fs0,W = {'w',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,'ascending',_83,_84,_85,_86,_87,_88,_89}> when 'true' -> let <_19> = call 'lists':'sort' (Fs0) in {_19,W}
<[],_X_I,Fs0,W = {'w',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,'descending',_101,_102,_103,_104,_105,_106,_107}> when 'true' -> let <_20> = call 'lists':'sort' (Fs0) in let <_21> = call 'lists':'reverse' (_20) in {_21,W}
<[],_X_I,Fs0,W = {'w',_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,Order,_119,_120,_121,_122,_123,_124,_125}> when call 'erlang':'is_function' (Order) -> (case W of (<({'w',_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_rec35,_137,_138,_139,_140,_141,_142,_143}-|['compiler_generated'] )> when 'true' -> let <_25> = apply 'cfun_files'/1 (_rec35) in let <_22> = call 'lists':'reverse' (Fs0) in let <_26> = call 'lists':'sort' (_25,_22) in {_26,W}-|['compiler_generated'] )
(<_144> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_30,_29,_28,_27> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29,_28,_27})-|[{'function_name',{'init_merge',4}}] )-|['compiler_generated'] ) end
'cfun_files'/1 = fun (_0) -> (fun (_4,_3) -> case _4 of <[[{T1,_8}|_9]|_10]> when 'true' -> case _3 of <[[{T2,_11}|_12]|_13]> when 'true' -> apply _0 (T1,T2)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end-|[{'id',{0,0,'-cfun_files/1-fun-0-'}}] )
'merge_files'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[F1|[F2|Fs]],L0,LSz,Last0,W> when call 'erlang':'<' (LSz,16384) -> case F1 of <[Ts0|InEtc]> when 'true' -> let <Kind> = apply 'merge_kind'/1 (W) in let <_39,_40,_41> = case <Last0,Kind> of <({('last'-|['compiler_generated'] ),Lst}-|['compiler_generated'] ),_32> when call 'erlang':'=:=' (_32,Kind) -> <Lst,L0,Ts0>
<('nolast'-|['compiler_generated'] ),({('ukmerge'-|['compiler_generated'] ),_X_Kp}-|['compiler_generated'] )> when 'true' -> case Ts0 of <[{[T|_X_I],BT}|Ts1]> when 'true' -> <T,[BT|[]],Ts1>
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<('nolast'-|['compiler_generated'] ),({('rukmerge'-|['compiler_generated'] ),_X_Kp}-|['compiler_generated'] )> when 'true' -> case Ts0 of <[{[T|_X_I],BT}|Ts1]> when 'true' -> <{T,BT},[],Ts1>
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<('nolast'-|['compiler_generated'] ),_33> when 'true' -> case Ts0 of <[{T,BT}|Ts1]> when 'true' -> <T,[BT|[]],Ts1>
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<(_42-|['compiler_generated'] ),(_43-|['compiler_generated'] )> when 'true' -> let <_10> = {(_42-|['compiler_generated'] ),(_43-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end in case F2 of <[Ts2 = [{T2,BT2}|Ts2T]|InEtc2]> when 'true' -> let <_20> = case Kind of <'umerge'> when 'true' -> apply 'umerge_files'/9 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,Ts2,(_41-|['compiler_generated'] ),InEtc,T2,(_39-|['compiler_generated'] ))
<{'ukmerge',Kp}> when 'true' -> apply 'ukmerge_files'/10 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,Ts2,(_41-|['compiler_generated'] ),InEtc,T2,Kp,(_39-|['compiler_generated'] ))
<'merge'> when 'true' -> apply 'merge_files'/9 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,BT2,Ts2T,(_41-|['compiler_generated'] ),InEtc,T2)
<'rumerge'> when 'true' -> apply 'rumerge_files'/9 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,Ts2,(_41-|['compiler_generated'] ),InEtc,T2,(_39-|['compiler_generated'] ))
<{'rukmerge',Kp}> when 'true' -> case (_39-|['compiler_generated'] ) of <{Lt,LtBT}> when 'true' -> apply 'rukmerge_files'/11 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,Ts2,(_41-|['compiler_generated'] ),InEtc,T2,Kp,Lt,LtBT)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<'rmerge'> when 'true' -> apply 'rmerge_files'/9 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,BT2,Ts2T,(_41-|['compiler_generated'] ),InEtc,T2)
<{'ucmerge',CF}> when 'true' -> case InEtc2 of <{I2,_34}> when 'true' -> case InEtc of <{I,_35}> when 'true' -> apply 'ucmerge_files'/12 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,Ts2,I2,(_41-|['compiler_generated'] ),I,InEtc,T2,CF,(_39-|['compiler_generated'] ))
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{'cmerge',CF}> when 'true' -> case InEtc2 of <{I2,_36}> when 'true' -> case InEtc of <{I,_37}> when 'true' -> apply 'cmerge_files'/12 ((_40-|['compiler_generated'] ),F2,Fs,InEtc2,BT2,Ts2T,I2,(_41-|['compiler_generated'] ),I,InEtc,T2,CF)
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end in case _20 of <{NInEtc,NFs,NL,NLast}> when 'true' -> apply 'read_chunk'/6 (NInEtc,NFs,NL,LSz,NLast,W)
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<[F1|[]],L,LSz,Last,W> when call 'erlang':'<' (LSz,16384) -> case F1 of <[Ts|InEtc]> when 'true' -> let <_23> = apply 'merge_kind'/1 (W) in let <NL> = apply 'last_file'/5 (Ts,L,Last,_23,W) in apply 'read_chunk'/6 (InEtc,[],NL,LSz,'nolast',W)
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
<[],[],0,'nolast',W> when 'true' -> apply 'merge_write'/2 (W,[])
<[],L,_X_LSz,Last,W> when 'true' -> case <> of <> when call 'erlang':'=:=' (('nolast'-|['compiler_generated'] ),Last) -> apply 'merge_write'/2 (W,L)
(<> when 'true' -> primop 'match_fail' ({'badmatch','nolast'})-|['compiler_generated'] ) end
<Fs,L,_X_LSz,Last,W> when 'true' -> let <NW> = apply 'merge_write'/2 (W,L) in apply 'merge_files'/5 (Fs,[],0,Last,NW) end
'merge_kind'/1 = fun (_0) -> case _0 of <{'w',0,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,'ascending',_12,_13,_14,_15,'true',_16,_17}> when 'true' -> 'umerge'
<{'w',Kp,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'ascending',_28,_29,_30,_31,'true',_32,_33}> when 'true' -> {'ukmerge',Kp}
<{'w',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'ascending',_45,_46,_47,_48,'false',_49,_50}> when 'true' -> 'merge'
<{'w',0,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,'descending',_61,_62,_63,_64,'true',_65,_66}> when 'true' -> 'rumerge'
<{'w',Kp,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,'descending',_77,_78,_79,_80,'true',_81,_82}> when 'true' -> {'rukmerge',Kp}
<{'w',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,'descending',_94,_95,_96,_97,'false',_98,_99}> when 'true' -> 'rmerge'
<{'w',_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,CF,_111,_112,_113,_114,'true',_115,_116}> when 'true' -> {'ucmerge',CF}
<{'w',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,CF,_128,_129,_130,_131,'false',_132,_133}> when 'true' -> {'cmerge',CF}
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'merge_kind',1}}] )-|['compiler_generated'] ) end
'merge_write'/2 = fun (_0,_1) -> (case _0 of (<({'w',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec36,_24,_25,_26,_27,_28}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'w',_30,_31,_32,_33,_rec37,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> case <_rec36,_rec37> of <('undefined'-|['compiler_generated'] ),Fun> when call 'erlang':'is_function' (Fun) -> let <_6> = apply 'objects'/2 (_1,[]) in apply 'outfun'/2 (_6,_0)
<({Fd,FileName}-|['compiler_generated'] ),_49> when 'true' -> let <_7> = call 'lists':'reverse' (_1) in do apply 'write'/4 (Fd,FileName,_7,_0) _0
(<(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] )> when 'true' -> let <_8> = {(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'umerge_files'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last> when call 'erlang':'==' (T,Last) -> apply 'umerge_files'/9 (L,F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Last)
<L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last> when call 'erlang':'=<' (T,T2) -> apply 'umerge_files'/9 ([BT|L],F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,T)
<L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' -> {InEtc,[F2|Fs],L,{'last',Last}}
<L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' -> case apply 'insert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_20]|InEtc3]> when 'true' -> apply 'umerge_files'/9 (L,F3,NFs,InEtc3,Ts3,Ts2,InEtc2,T3,Last)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end end
'rumerge_files'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <L,F2,Fs,InEtc2,Ts2,[{T,_X_BT}|Ts],InEtc,T2,Last> when call 'erlang':'==' (T,Last) -> apply 'rumerge_files'/9 (L,F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Last)
<L,F2,Fs,InEtc2,Ts2,[{T,BT}|Ts],InEtc,T2,_X_Last> when call 'erlang':'>=' (T,T2) -> apply 'rumerge_files'/9 ([BT|L],F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,T)
<L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,Last> when 'true' -> {InEtc,[F2|Fs],L,{'last',Last}}
<L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Last> when 'true' -> case apply 'rinsert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_20]|InEtc3]> when 'true' -> apply 'rumerge_files'/9 (L,F3,NFs,InEtc3,Ts3,Ts2,InEtc2,T3,Last)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end end
'merge_files'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2> when call 'erlang':'=<' (T,T2) -> apply 'merge_files'/9 ([BT|L],F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,T2)
<L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' -> {InEtc,[F2|Fs],L,{'last','foo'}}
<L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' -> let <L1> = [BT2|L] in case apply 'insert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' -> apply 'merge_files'/9 (L1,F3,NFs,InEtc3,BT3,Ts3,Ts2,InEtc2,T3)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end end
'rmerge_files'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <L,F2,Fs,InEtc2,BT2,Ts2,[{T,BT}|Ts],InEtc,T2> when call 'erlang':'>=' (T,T2) -> apply 'rmerge_files'/9 ([BT|L],F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,T2)
<L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,[],InEtc,_X_T2> when 'true' -> {InEtc,[F2|Fs],L,{'last','foo'}}
<L,_X_F2,Fs,InEtc2,BT2,Ts2,Ts,InEtc,_X_T2> when 'true' -> let <L1> = [BT2|L] in case apply 'rinsert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[[{T3,BT3}|Ts3]|InEtc3]> when 'true' -> apply 'rmerge_files'/9 (L1,F3,NFs,InEtc3,BT3,Ts3,Ts2,InEtc2,T3)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end end
'ukmerge_files'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],_X_BT}|Ts],InEtc,T2,Kp,Last> when call 'erlang':'==' (T,Last) -> apply 'ukmerge_files'/10 (L,F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Kp,Last)
<L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,T2,Kp,_X_Last> when call 'erlang':'=<' (T,T2) -> apply 'ukmerge_files'/10 ([BT|L],F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Kp,T0)
<L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last> when 'true' -> {InEtc,[F2|Fs],L,{'last',Last}}
<L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last> when 'true' -> case apply 'insert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_22]|InEtc3]> when 'true' -> apply 'ukmerge_files'/10 (L,F3,NFs,InEtc3,Ts3,Ts2,InEtc2,T3,Kp,Last)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end end
'rukmerge_files'/11 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of <L,F2,Fs,InEtc2,Ts2,[{[T|_X_I],BT}|Ts],InEtc,T2,Kp,Last,_X_LastBT> when call 'erlang':'==' (T,Last) -> apply 'rukmerge_files'/11 (L,F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Kp,T,BT)
<L,F2,Fs,InEtc2,Ts2,[{T = [T0|_X_I],BT}|Ts],InEtc,T2,Kp,_X_Last,LastBT> when call 'erlang':'>=' (T,T2) -> apply 'rukmerge_files'/11 ([LastBT|L],F2,Fs,InEtc2,Ts2,Ts,InEtc,T2,Kp,T0,BT)
<L,F2,Fs,_X_InEtc2,_X_Ts2,[],InEtc,_X_T2,_X_Kp,Last,LastBT> when 'true' -> {InEtc,[F2|Fs],L,{'last',{Last,LastBT}}}
<L,_X_F2,Fs,InEtc2,Ts2,Ts,InEtc,_X_T2,Kp,Last,LastBT> when 'true' -> case apply 'rinsert'/2 ([Ts|InEtc],Fs) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_24]|InEtc3]> when 'true' -> apply 'rukmerge_files'/11 (L,F3,NFs,InEtc3,Ts3,Ts2,InEtc2,T3,Kp,Last,LastBT)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
'ucmerge_files'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,InEtc,T2,CF,Last> when call 'erlang':'<' (I,I2) -> case apply CF (T,T2) of <'true'> when 'true' -> case apply CF (T,Last) of <'true'> when 'true' -> apply 'ucmerge_files'/12 (L,F2,Fs,InEtc2,Ts2,I2,Ts,I,InEtc,T2,CF,Last)
<'false'> when 'true' -> apply 'ucmerge_files'/12 ([BT|L],F2,Fs,InEtc2,Ts2,I2,Ts,I,InEtc,T2,CF,T)
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<'false'> when 'true' -> case apply 'cinsert'/3 ([Ts0|InEtc],Fs,CF) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_32]|InEtc3 = {I3,_33}]> when 'true' -> apply 'ucmerge_files'/12 (L,F3,NFs,InEtc3,Ts3,I3,Ts2,I2,InEtc2,T3,CF,Last)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<L,F2,Fs,InEtc2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,InEtc,T2,CF,Last> when 'true' -> case apply CF (T2,T) of <'true'> when 'true' -> case apply 'cinsert'/3 ([Ts0|InEtc],Fs,CF) of <[F3|NFs]> when 'true' -> case F3 of <[Ts3 = [{T3,_X_BT3}|_34]|InEtc3 = {I3,_35}]> when 'true' -> apply 'ucmerge_files'/12 (L,F3,NFs,InEtc3,Ts3,I3,Ts2,I2,InEtc2,T3,CF,Last)
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
<'false'> when 'true' -> case apply CF (T,Last) of <'true'> when 'true' -> apply 'ucmerge_files'/12 (L,F2,Fs,InEtc2,Ts2,I2,Ts,I,InEtc,T2,CF,Last)
<'false'> when 'true' -> apply 'ucmerge_files'/12 ([BT|L],F2,Fs,InEtc2,Ts2,I2,Ts,I,InEtc,T2,CF,T)
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
<L,F2,Fs,_X_InEtc2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF,Last> when 'true' -> {InEtc,[F2|Fs],L,{'last',Last}}
(<_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20})-|[{'function_name',{'ucmerge_files',12}}] )-|['compiler_generated'] ) end
'cmerge_files'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,InEtc,T2,CF> when call 'erlang':'<' (I,I2) -> case apply CF (T,T2) of <'true'> when 'true' -> apply 'cmerge_files'/12 ([BT|L],F2,Fs,InEtc2,BT2,Ts2,I2,Ts,I,InEtc,T2,CF)
<'false'> when 'true' -> let <L1> = [BT2|L] in case apply 'cinsert'/3 ([Ts0|InEtc],Fs,CF) of <[F3|NFs]> when 'true' -> case F3 of <[[{T3,BT3}|Ts3]|InEtc3 = {I3,_32}]> when 'true' -> apply 'cmerge_files'/12 (L1,F3,NFs,InEtc3,BT3,Ts3,I3,Ts2,I2,InEtc2,T3,CF)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<L,F2,Fs,InEtc2,BT2,Ts2,I2,Ts0 = [{T,BT}|Ts],I,InEtc,T2,CF> when 'true' -> case apply CF (T2,T) of <'true'> when 'true' -> let <L1> = [BT2|L] in case apply 'cinsert'/3 ([Ts0|InEtc],Fs,CF) of <[F3|NFs]> when 'true' -> case F3 of <[[{T3,BT3}|Ts3]|InEtc3 = {I3,_33}]> when 'true' -> apply 'cmerge_files'/12 (L1,F3,NFs,InEtc3,BT3,Ts3,I3,Ts2,I2,InEtc2,T3,CF)
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
<'false'> when 'true' -> apply 'cmerge_files'/12 ([BT|L],F2,Fs,InEtc2,BT2,Ts2,I2,Ts,I,InEtc,T2,CF)
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
<L,F2,Fs,_X_InEtc2,_X_BT2,_X_Ts2,_X_I2,[],_X_I,InEtc,_X_T2,_X_CF> when 'true' -> {InEtc,[F2|Fs],L,{'last','foo'}}
(<_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20})-|[{'function_name',{'cmerge_files',12}}] )-|['compiler_generated'] ) end
'last_file'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Ts,L,{'last',T},{'ukmerge',_10},_X_W> when 'true' -> apply 'kulast_file'/3 (Ts,T,L)
<Ts,L,{'last',{T,BT}},{'rukmerge',_11},_X_W> when 'true' -> apply 'ruklast_file'/4 (Ts,T,BT,L)
<Ts,L,{'last',T},{'ucmerge',CF},_X_W> when 'true' -> apply 'uclast_file'/4 (Ts,T,CF,L)
<Ts,L,{'last',T},_X_Kind,{'w',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,'true',_28,_29}> when 'true' -> apply 'ulast_file'/3 (Ts,T,L)
<Ts,L,_X_Last,_X_Kind,_X_W> when 'true' -> apply 'last_file'/2 (Ts,L) end
'ulast_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{T,_X_BT}|Ts],Last,L> when call 'erlang':'==' (Last,T) -> apply 'last_file'/2 (Ts,L)
<Ts,_X_Last,L> when 'true' -> apply 'last_file'/2 (Ts,L) end
'kulast_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{[T|_X_I],_X_BT}|Ts],Last,L> when call 'erlang':'==' (Last,T) -> apply 'last_file'/2 (Ts,L)
<Ts,_X_Last,L> when 'true' -> apply 'last_file'/2 (Ts,L) end
'ruklast_file'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{[T|_X_I],BT}|Ts],Last,_X_LastBT,L> when call 'erlang':'==' (Last,T) -> apply 'last_file'/2 (Ts,[BT|L])
<Ts,_X_Last,LastBT,L> when 'true' -> apply 'last_file'/2 (Ts,[LastBT|L]) end
'uclast_file'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{T,BT}|Ts],Last,CF,L> when 'true' -> case apply CF (T,Last) of <'true'> when 'true' -> apply 'last_file'/2 (Ts,L)
<'false'> when 'true' -> apply 'last_file'/2 (Ts,[BT|L])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'uclast_file',4}}] )-|['compiler_generated'] ) end
'last_file'/2 = fun (_0,_1) -> case <_0,_1> of <[{_X_Ta,BTa}|[{_X_Tb,BTb}|Ts]],L> when 'true' -> apply 'last_file'/2 (Ts,[BTb|[BTa|L]])
<[{_X_T,BT}|Ts],L> when 'true' -> apply 'last_file'/2 (Ts,[BT|L])
<[],L> when 'true' -> L
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'last_file',2}}] )-|['compiler_generated'] ) end
'insert'/2 = fun (_0,_1) -> case <_0,_1> of <A,[X1|[X2|[X3|[X4|Xs]]]]> when call 'erlang':'>' (A,X4) -> let <_2> = apply 'insert'/2 (A,Xs) in [X1|[X2|[X3|[X4|_2]]]]
<A,[X1|[X2|[X3|T]]]> when call 'erlang':'>' (A,X3) -> [X1|[X2|[X3|[A|T]]]]
<A,[X1|[X2|Xs]]> when call 'erlang':'>' (A,X2) -> [X1|[X2|[A|Xs]]]
<A,[X1|T]> when call 'erlang':'>' (A,X1) -> [X1|[A|T]]
<A,Xs> when 'true' -> [A|Xs] end
'rinsert'/2 = fun (_0,_1) -> case <_0,_1> of <A,[X1|[X2|[X3|[X4|Xs]]]]> when call 'erlang':'<' (A,X4) -> let <_2> = apply 'rinsert'/2 (A,Xs) in [X1|[X2|[X3|[X4|_2]]]]
<A,[X1|[X2|[X3|T]]]> when call 'erlang':'<' (A,X3) -> [X1|[X2|[X3|[A|T]]]]
<A,[X1|[X2|Xs]]> when call 'erlang':'<' (A,X2) -> [X1|[X2|[A|Xs]]]
<A,[X1|T]> when call 'erlang':'<' (A,X1) -> [X1|[A|T]]
<A,Xs> when 'true' -> [A|Xs] end
'cinsert'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <A,T1 = [F1|T2 = [F2|T3 = [F3|T4 = [F4|Fs]]]],CF> when 'true' -> (case F4 of (<([([({_23,_9}-|['compiler_generated'] )|_10]-|['compiler_generated'] )|({I1,_11}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_24,_12}-|['compiler_generated'] )|_13]-|['compiler_generated'] )|({I2,_14}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (I1,I2)-|['compiler_generated'] ) -> (apply CF (_23,_24)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_24,_23) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> let <_3> = apply 'cinsert'/3 (A,Fs,CF) in [F1|[F2|[F3|[F4|_3]]]]
<'false'> when 'true' -> (case F2 of (<([([({_34,_90}-|['compiler_generated'] )|_91]-|['compiler_generated'] )|({_92,_93}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_35,_109}-|['compiler_generated'] )|_110]-|['compiler_generated'] )|({_111,_112}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_92,_111)-|['compiler_generated'] ) -> (apply CF (_34,_35)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_35,_34) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> (case F3 of (<([([({_45,_94}-|['compiler_generated'] )|_95]-|['compiler_generated'] )|({_96,_97}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_46,_113}-|['compiler_generated'] )|_114]-|['compiler_generated'] )|({_115,_116}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> let <_5> = case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_96,_115)-|['compiler_generated'] ) -> (apply CF (_45,_46)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_46,_45) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> [F3|[A|T4]]
<'false'> when 'true' -> [A|T3]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in [F1|[F2|_5]]-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> (case F1 of (<([([({_56,_98}-|['compiler_generated'] )|_99]-|['compiler_generated'] )|({_100,_101}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_57,_117}-|['compiler_generated'] )|_118]-|['compiler_generated'] )|({_119,_120}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_100,_119)-|['compiler_generated'] ) -> (apply CF (_56,_57)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_57,_56) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> [F1|[A|T2]]
<'false'> when 'true' -> [A|T1]
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<A,T1 = [F1|T2 = [F2|Fs]],CF> when 'true' -> (case F2 of (<([([({_67,_9}-|['compiler_generated'] )|_10]-|['compiler_generated'] )|({I1,_11}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_68,_12}-|['compiler_generated'] )|_13]-|['compiler_generated'] )|({I2,_14}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (I1,I2)-|['compiler_generated'] ) -> (apply CF (_67,_68)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_68,_67) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> let <_102> = apply 'cinsert'/3 (A,Fs,CF) in [F1|[F2|_102]]
<'false'> when 'true' -> (case F1 of (<([([({_78,_103}-|['compiler_generated'] )|_104]-|['compiler_generated'] )|({_105,_106}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({_79,_121}-|['compiler_generated'] )|_122]-|['compiler_generated'] )|({_123,_124}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_105,_123)-|['compiler_generated'] ) -> (apply CF (_78,_79)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (_79,_78) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> [F1|[A|T2]]
<'false'> when 'true' -> [A|T1]
(<_107> when 'true' -> primop 'match_fail' ({'case_clause',_107})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_108> when 'true' -> primop 'match_fail' ({'case_clause',_108})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<A,T = [F|Fs],CF> when 'true' -> (case F of (<([([({T1,_9}-|['compiler_generated'] )|_10]-|['compiler_generated'] )|({I1,_11}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case A of (<([([({T2,_12}-|['compiler_generated'] )|_13]-|['compiler_generated'] )|({I2,_14}-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> case (case <> of (<> when (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (I1,I2)-|['compiler_generated'] ) -> (apply CF (T1,T2)-|['compiler_generated'] )-|['compiler_generated'] )
(<> when ('true'-|['compiler_generated'] ) -> (let <_5> = apply CF (T2,T1) in (call ('erlang'-|['compiler_generated'] ):('not'-|['compiler_generated'] ) (_5)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> [F|[A|Fs]]
<'false'> when 'true' -> [A|T]
(<_125> when 'true' -> primop 'match_fail' ({'case_clause',_125})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<A,_16,_X_CF> when 'true' -> [A|[]] end
'cfun'/3 = fun (_0,_1,_2) -> case _1 of <[[{T1,_9}|_10]|{I1,_11}]> when 'true' -> case _2 of <[[{T2,_12}|_13]|{I2,_14}]> when 'true' -> case <> of <> when call 'erlang':'<' (I1,I2) -> apply _0 (T1,T2)
<> when 'true' -> let <_5> = apply _0 (T2,T1) in call 'erlang':'not' (_5) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'binterm_objects'/2 = fun (_0,_1) -> case <_0,_1> of <[{_X_T,[_X_Sz|BT]}|Ts],L> when 'true' -> apply 'binterm_objects'/2 (Ts,[BT|L])
<[],L> when 'true' -> L
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'binterm_objects',2}}] )-|['compiler_generated'] ) end
'objects'/2 = fun (_0,_1) -> case <_0,_1> of <[[_X_Sz|BT]|Ts],L> when 'true' -> apply 'objects'/2 (Ts,[BT|L])
<[],L> when 'true' -> L
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'objects',2}}] )-|['compiler_generated'] ) end
'binterms'/2 = fun (_0,_1) -> case <_0,_1> of <[{_X_T1,BT1}|[{_X_T2,BT2}|Ts]],L> when 'true' -> apply 'binterms'/2 (Ts,[BT2|[BT1|L]])
<[{_X_T,BT}|Ts],L> when 'true' -> apply 'binterms'/2 (Ts,[BT|L])
<[],L> when 'true' -> L
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'binterms',2}}] )-|['compiler_generated'] ) end
'read_chunk'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _0 of <{I,IFun}> when 'true' -> case apply 'read_more'/4 (IFun,I,_3,_5) of <{Ts,NLSz,NIFun,NW = {'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,'ascending',_33,_34,_35,_36,_37,_38,_39}}> when 'true' -> let <NInEtc> = {I,NIFun} in let <NFs> = apply 'insert'/2 ([Ts|NInEtc],_1) in apply 'merge_files'/5 (NFs,_2,NLSz,_4,NW)
<{Ts,NLSz,NIFun,NW = {'w',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,'descending',_51,_52,_53,_54,_55,_56,_57}}> when 'true' -> let <NInEtc> = {I,NIFun} in let <NFs> = apply 'rinsert'/2 ([Ts|NInEtc],_1) in apply 'merge_files'/5 (NFs,_2,NLSz,_4,NW)
<{Ts,NLSz,NIFun,NW}> when 'true' -> let <NInEtc> = {I,NIFun} in (case NW of (<({'w',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec38,_69,_70,_71,_72,_73,_74,_75}-|['compiler_generated'] )> when 'true' -> let <NFs> = apply 'cinsert'/3 ([Ts|NInEtc],_1,_rec38) in apply 'merge_files'/5 (NFs,_2,NLSz,_4,NW)-|['compiler_generated'] )
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'eof',NW}> when 'true' -> apply 'merge_files'/5 (_1,_2,_3,_4,NW)
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'read_more'/4 = fun (_0,_1,_2,_3) -> case apply _0 ({{'merge',_1},[],_2,_3}) of <{{_28,[],NLSz},NIFun}> when 'true' -> apply 'read_more'/4 (NIFun,_1,NLSz,_3)
<{{_29,L,NLSz},NInFun}> when 'true' -> (case _3 of (<({'w',_30,_31,_32,_33,_34,_35,_36,_rec39,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> let <_13> = case call 'lists':'member' (_0,_rec39) of <'true'> when 'true' -> (case _3 of (<({'w',_49,_50,_51,_52,_53,_54,_55,_rec42,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when 'true' -> let <_8> = call 'lists':'delete' (_0,_rec42) in let <_rec40> = [NInFun|_8] in case _3 of <{'w',_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}> when 'true' -> call 'erlang':'setelement' (9,_3,_rec40)
(<_87> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> _3
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end in let <_15> = call 'lists':'reverse' (L) in {_15,NLSz,NInFun,_13}-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'eof'> when 'true' -> (case _3 of (<({'w',_88,_89,_90,_91,_92,_93,_94,_rec45,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105}-|['compiler_generated'] )> when 'true' -> let <_rec43> = call 'lists':'delete' (_0,_rec45) in case _3 of <{'w',_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125}> when 'true' -> let <_21> = call 'erlang':'setelement' (9,_3,_rec43) in {'eof',_21}
(<_126> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_106> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
'read_fun'/3 = fun (_0,_1,_2) -> case call 'file':'open' (_0,['raw'|['binary'|['read'|['compressed']]]]) of <{'ok',Fd}> when 'true' -> apply 'read_fun2'/5 (Fd,#{}#,0,_0,_1)
<Error> when 'true' -> apply 'file_error'/3 (_0,Error,_2) end
'read_fun2'/5 = fun (_0,_1,_2,_3,_4) -> (fun (_7) -> case _7 of <'close'> when 'true' -> apply 'close_read_fun'/3 (_0,_3,_4)
<{I,L,LSz,W}> when 'true' -> case apply 'read_objs'/8 (_0,_3,I,L,_1,_2,LSz,W) of <{{I1,L1,Bin1,Size1},LSz1}> when 'true' -> let <NIFun> = apply 'read_fun2'/5 (_0,Bin1,Size1,_3,_4) in {{I1,L1,LSz1},NIFun}
<'eof'> when 'true' -> do apply 'close_read_fun'/3 (_0,_3,_4) 'eof'
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'-read_fun2/5-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-read_fun2/5-fun-0-'}}] )
'close_read_fun'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Fd,_X_FileName,'user'> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) 'ok'
<Fd,FileName,'fsort'> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (FileName)-|['result_not_wanted'] ) 'ok'
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'close_read_fun',3}}] )-|['compiler_generated'] ) end
'read_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <Max> = call 'erlang':'max' (_5,16384) in let <BSz0> = call 'erlang':'byte_size' (_4) in let <_12> = call 'erlang':'-' (_5,BSz0) in (case _7 of (<({'w',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_rec46,_46}-|['compiler_generated'] )> when 'true' -> let <Min> = call 'erlang':'+' (_12,_rec46) in let <NoBytes> = call 'erlang':'max' (Min,Max) in case apply 'read'/4 (_0,_1,NoBytes,_7) of <{'ok',Bin}> when 'true' -> let <BSz> = call 'erlang':'byte_size' (Bin) in let <NLSz> = call 'erlang':'+' (_6,BSz) in let <_17> = catch apply 'file_loop'/9 (_3,_2,_4,Bin,_5,BSz0,BSz,Min,_7) in case _17 of <{'EXIT',_X_R}> when 'true' -> apply 'error'/2 ({'error',{'bad_object',_1}},_7)
<Reply> when 'true' -> {Reply,NLSz} end
<'eof'> when try let <_19> = call 'erlang':'byte_size' (_4) in call 'erlang':'=:=' (_19,0) of <Try> -> Try catch <T,R> -> 'false' -> 'eof'
<'eof'> when 'true' -> apply 'error'/2 ({'error',{'premature_eof',_1}},_7)
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'file_loop'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <L,I,_X_B1,B2,Sz,0,_X_B2Sz,_X_Min,W> when 'true' -> apply 'file_loop'/5 (L,I,B2,Sz,W)
<L,I,B1,B2,Sz,_X_B1Sz,B2Sz,Min,W> when call 'erlang':'>' (B2Sz,Min) -> case call 'erlang':'split_binary' (B2,Min) of <{B3,B4}> when 'true' -> let <_10> = call 'erlang':'list_to_binary' ([B1|[B3|[]]]) in case apply 'file_loop'/5 (L,I,_10,Sz,W) of <{I1,L1,#{}#,Sz1}> when 'true' -> apply 'file_loop'/5 (L1,I1,B4,Sz1,W)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<L,I,B1,B2,Sz,_X_B1Sz,_X_B2Sz,_X_Min,W> when 'true' -> let <_12> = call 'erlang':'list_to_binary' ([B1|[B2|[]]]) in apply 'file_loop'/5 (L,I,_12,Sz,W) end
'file_loop'/5 = fun (_0,_1,_2,_3,_4) -> case _4 of <{'w',Kp,_11,_12,_13,_14,_15,_16,_17,Format,_18,_19,_20,_21,_22,_23,_24,_25,HdLen,_26}> when 'true' -> apply 'file_loop1'/7 (_0,_1,_2,_3,Kp,Format,HdLen)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'file_loop1'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <L,I,HB,0,Kp,F,HdLen> when 'true' -> case HB of <#{#<Size>(HdLen,8,'integer',['unsigned'|['big']]),#<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_8> = #{#<Size>(HdLen,8,'integer',['unsigned'|['big']])}# in apply 'file_loop2'/8 (L,I,B,Size,_8,Kp,F,HdLen)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<L,I,B,Sz,Kp,F,HdLen> when 'true' -> let <_9> = #{#<Sz>(HdLen,8,'integer',['unsigned'|['big']])}# in apply 'file_loop2'/8 (L,I,B,Sz,_9,Kp,F,HdLen) end
'file_loop2'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <L,_X_I,B,Sz,SzB,0,'binary',HdLen> when 'true' -> case apply 'file_binloop'/5 (L,Sz,SzB,B,HdLen) of <{NL,NB,NSz,NSzB}> when 'true' -> case <> of <> when try let <_9> = call 'erlang':'byte_size' (NB) in call 'erlang':'=:=' (_9,NSz) of <Try> -> Try catch <T,R> -> 'false' -> case NB of <#{#<Bin>(NSz,8,'binary',['unsigned'|['big']])}#> when 'true' -> {0,[{Bin,[NSzB|Bin]}|NL],#{}#,0}
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<> when 'true' -> {0,NL,NB,NSz} end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<L,_X_I,B,Sz,SzB,0,Fun,HdLen> when 'true' -> apply 'file_binterm_loop'/6 (L,Sz,SzB,B,Fun,HdLen)
<L,{'merge',I},B,Sz,SzB,Kp,Fun,HdLen> when 'true' -> apply 'merge_loop'/8 (Kp,I,L,Sz,SzB,B,Fun,HdLen)
<L,I,B,Sz,SzB,Kp,Fun,HdLen> when call 'erlang':'is_integer' (I) -> apply 'key_loop'/8 (Kp,I,L,Sz,SzB,B,Fun,HdLen)
(<_18,_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'file_loop2',8}}] )-|['compiler_generated'] ) end
'file_binloop'/5 = fun (_0,_1,_2,_3,_4) -> case _3 of <#{#<Bin>(_1,8,'binary',['unsigned'|['big']]),#<NSizeB>(_4,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case NSizeB of <#{#<NSize>(_4,8,'integer',['unsigned'|['big']])}#> when 'true' -> apply 'file_binloop'/5 ([{Bin,[_2|Bin]}|_0],NSize,NSizeB,R,_4)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_12> when 'true' -> {_0,_3,_1,_2} end
'file_binterm_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _3 of <#{#<BinTerm>(_1,8,'binary',['unsigned'|['big']]),#<NSizeB>(_5,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case NSizeB of <#{#<NSize>(_5,8,'integer',['unsigned'|['big']])}#> when 'true' -> let <BT> = [_2|BinTerm] in let <Term> = apply _4 (BinTerm) in apply 'file_binterm_loop'/6 ([{Term,BT}|_0],NSize,NSizeB,R,_4,_5)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<#{#<BinTerm>(_1,8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Term> = apply _4 (BinTerm) in let <NL> = [{Term,[_2|BinTerm]}|_0] in {0,NL,#{}#,0}
<_18> when 'true' -> {0,_0,_3,_1} end
'key_loop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case _5 of <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']]),#<NSizeB>(_7,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case NSizeB of <#{#<NSize>(_7,8,'integer',['unsigned'|['big']])}#> when 'true' -> let <BT> = [_4|BinTerm] in let <_10> = apply _6 (BinTerm) in let <UniqueKey> = case <_0,_10> of (<Kp,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Kp)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp,T)-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_30> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_31> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([_30|([_31|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_32> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_33> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_34> = apply 'make_key2'/2 (Kps,T) in ([_32|([_33|_34]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_8,_35> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_8,_35}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <E> = {UniqueKey,BT} in let <_13> = call 'erlang':'+' (_1,1) in apply 'key_loop'/8 (_0,_13,[E|_2],NSize,NSizeB,R,_6,_7)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_14> = apply _6 (BinTerm) in let <UniqueKey> = case <_0,_14> of (<Kp,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Kp)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp,T)-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_38> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_39> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([_38|([_39|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_40> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_41> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_42> = apply 'make_key2'/2 (Kps,T) in ([_40|([_41|_42]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_8,_43> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_8,_43}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <NL> = [{UniqueKey,[_4|BinTerm]}|_2] in let <_17> = call 'erlang':'+' (_1,1) in {_17,NL,#{}#,0}
<_27> when 'true' -> {_1,_2,_5,_3} end
'merge_loop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case _5 of <#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']]),#<NSizeB>(_7,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case NSizeB of <#{#<NSize>(_7,8,'integer',['unsigned'|['big']])}#> when 'true' -> let <BT> = [_4|BinTerm] in let <_10> = apply _6 (BinTerm) in let <UniqueKey> = case <_0,_1,_10> of (<Kp,_29,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Kp)-|['compiler_generated'] ) -> (let <_30> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp,T) in ([_30|_29]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),_31,T> when ('true'-|['compiler_generated'] ) -> (let <_32> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_33> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([([_32|_33]-|['compiler_generated'] )|_31]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),_34,T> when ('true'-|['compiler_generated'] ) -> (let <_35> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_36> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_8> = apply 'make_key2'/2 (Kps,T) in ([([_35|([_36|_8]-|['compiler_generated'] )]-|['compiler_generated'] )|_34]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_11,_37,_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_11,_37,_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <E> = {UniqueKey,BT} in apply 'merge_loop'/8 (_0,_1,[E|_2],NSize,NSizeB,R,_6,_7)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<#{#<BinTerm>(_3,8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_13> = apply _6 (BinTerm) in let <UniqueKey> = case <_0,_1,_13> of (<Kp,_41,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (Kp)-|['compiler_generated'] ) -> (let <_42> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp,T) in ([_42|_41]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),_43,T> when ('true'-|['compiler_generated'] ) -> (let <_44> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_45> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([([_44|_45]-|['compiler_generated'] )|_43]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),_46,T> when ('true'-|['compiler_generated'] ) -> (let <_47> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_48> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_8> = apply 'make_key2'/2 (Kps,T) in ([([_47|([_48|_8]-|['compiler_generated'] )]-|['compiler_generated'] )|_46]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_11,_10,_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_11,_10,_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <NL> = [{UniqueKey,[_4|BinTerm]}|_2] in {{'merge',_1},NL,#{}#,0}
<_25> when 'true' -> {{'merge',_1},_2,_5,_3} end
'fun_objs'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _5 of <{'w',Keypos,_15,_16,_17,_18,_19,_20,_21,Format,_22,_23,_24,_25,_26,_27,_28,_29,HL,_30}> when 'true' -> let <_7> = catch apply 'fun_loop'/8 (_0,_1,_2,_3,_4,Keypos,Format,HL) in case _7 of <{'EXIT',_X_R}> when 'true' -> apply 'error'/2 ({'error','bad_object'},_5)
<Reply> when 'true' -> Reply end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'fun_loop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Objs,L,LSz,RunSize,_X_I,0,'binary',HdLen> when 'true' -> apply 'fun_binloop'/5 (Objs,L,LSz,RunSize,HdLen)
<Objs,L,LSz,RunSize,_X_I,0,Fun,HdLen> when 'true' -> apply 'fun_loop'/6 (Objs,L,LSz,RunSize,Fun,HdLen)
<Objs,L,LSz,RunSize,{'merge',I},Keypos,Fun,HdLen> when 'true' -> apply 'fun_mergeloop'/8 (Objs,L,LSz,RunSize,I,Keypos,Fun,HdLen)
<Objs,L,LSz,RunSize,I,Keypos,Fun,HdLen> when call 'erlang':'is_integer' (I) -> apply 'fun_keyloop'/8 (Objs,L,LSz,RunSize,I,Keypos,Fun,HdLen)
(<_15,_14,_13,_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11,_10,_9,_8})-|[{'function_name',{'fun_loop',8}}] )-|['compiler_generated'] ) end
'fun_binloop'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[B|Bs],L,LSz,RunSize,HL> when call 'erlang':'<' (LSz,RunSize) -> let <Size> = call 'erlang':'byte_size' (B) in let <_6> = #{#<Size>(HL,8,'integer',['unsigned'|['big']])}# in let <Obj> = {B,[_6|B]} in let <_8> = call 'erlang':'+' (LSz,Size) in apply 'fun_binloop'/5 (Bs,[Obj|L],_8,RunSize,HL)
<Bs,L,LSz,_X_RunSize,_X_HL> when 'true' -> {0,Bs,L,LSz} end
'fun_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[B|Bs],L,LSz,RunSize,Fun,HL> when call 'erlang':'<' (LSz,RunSize) -> let <Size> = call 'erlang':'byte_size' (B) in let <_8> = apply Fun (B) in let <_7> = #{#<Size>(HL,8,'integer',['unsigned'|['big']])}# in let <Obj> = {_8,[_7|B]} in let <_10> = call 'erlang':'+' (LSz,Size) in apply 'fun_loop'/6 (Bs,[Obj|L],_10,RunSize,Fun,HL)
<Bs,L,LSz,_X_RunSize,_X_Fun,_X_HL> when 'true' -> {0,Bs,L,LSz} end
'fun_keyloop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL> when call 'erlang':'<' (LSz,RunSize) -> let <Size> = call 'erlang':'byte_size' (B) in let <_9> = apply Fun (B) in let <UniqueKey> = case <Kp,_9> of (<_25,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_25)-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (_25,T)-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_26> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_27> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([_26|([_27|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),T> when ('true'-|['compiler_generated'] ) -> (let <_28> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_29> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_30> = apply 'make_key2'/2 (Kps,T) in ([_28|([_29|_30]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_8,_31> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_8,_31}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = #{#<Size>(HL,8,'integer',['unsigned'|['big']])}# in let <E> = {UniqueKey,[_11|B]} in let <_14> = call 'erlang':'+' (LSz,Size) in let <_13> = call 'erlang':'+' (I,1) in apply 'fun_keyloop'/8 (Bs,[E|L],_14,RunSize,_13,Kp,Fun,HL)
<Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' -> {I,Bs,L,LSz} end
'fun_mergeloop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <[B|Bs],L,LSz,RunSize,I,Kp,Fun,HL> when call 'erlang':'<' (LSz,RunSize) -> let <Size> = call 'erlang':'byte_size' (B) in let <_9> = apply Fun (B) in let <UniqueKey> = case <Kp,I,_9> of (<_25,_26,T> when (call ('erlang'-|['compiler_generated'] ):('is_integer'-|['compiler_generated'] ) (_25)-|['compiler_generated'] ) -> (let <_27> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (_25,T) in ([_27|_26]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] ),_28,T> when ('true'-|['compiler_generated'] ) -> (let <_29> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_30> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in ([([_29|_30]-|['compiler_generated'] )|_28]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([Kp1|([Kp2|Kps]-|['compiler_generated'] )]-|['compiler_generated'] ),_31,T> when ('true'-|['compiler_generated'] ) -> (let <_32> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp1,T) in (let <_33> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Kp2,T) in (let <_8> = apply 'make_key2'/2 (Kps,T) in ([([_32|([_33|_8]-|['compiler_generated'] )]-|['compiler_generated'] )|_31]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_11,_10,_34> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_11,_10,_34}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = #{#<Size>(HL,8,'integer',['unsigned'|['big']])}# in let <E> = {UniqueKey,[_11|B]} in let <_13> = call 'erlang':'+' (LSz,Size) in apply 'fun_mergeloop'/8 (Bs,[E|L],_13,RunSize,I,Kp,Fun,HL)
<Bs,L,LSz,_X_RunSize,I,_X_Kp,_X_Fun,_X_HL> when 'true' -> {{'merge',I},Bs,L,LSz} end
'make_key'/2 = fun (_0,_1) -> case <_0,_1> of <Kp,T> when call 'erlang':'is_integer' (Kp) -> call 'erlang':'element' (Kp,T)
<[Kp1|[Kp2|[]]],T> when 'true' -> let <_2> = call 'erlang':'element' (Kp1,T) in let <_3> = call 'erlang':'element' (Kp2,T) in [_2|[_3|[]]]
<[Kp1|[Kp2|Kps]],T> when 'true' -> let <_4> = call 'erlang':'element' (Kp1,T) in let <_5> = call 'erlang':'element' (Kp2,T) in let <_6> = apply 'make_key2'/2 (Kps,T) in [_4|[_5|_6]]
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'make_key',2}}] )-|['compiler_generated'] ) end
'make_stable_key'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Kp,I,T> when call 'erlang':'is_integer' (Kp) -> let <_3> = call 'erlang':'element' (Kp,T) in [_3|I]
<[Kp1|[Kp2|[]]],I,T> when 'true' -> let <_4> = call 'erlang':'element' (Kp1,T) in let <_5> = call 'erlang':'element' (Kp2,T) in [[_4|_5]|I]
<[Kp1|[Kp2|Kps]],I,T> when 'true' -> let <_6> = call 'erlang':'element' (Kp1,T) in let <_7> = call 'erlang':'element' (Kp2,T) in let <_8> = apply 'make_key2'/2 (Kps,T) in [[_6|[_7|_8]]|I]
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'make_stable_key',3}}] )-|['compiler_generated'] ) end
'make_key2'/2 = fun (_0,_1) -> case <_0,_1> of <[Kp|[]],T> when 'true' -> let <_2> = call 'erlang':'element' (Kp,T) in [_2|[]]
<[Kp|Kps],T> when 'true' -> let <_3> = call 'erlang':'element' (Kp,T) in let <_4> = apply 'make_key2'/2 (Kps,T) in [_3|_4]
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'make_key2',2}}] )-|['compiler_generated'] ) end
'infun'/1 = fun (_0) -> case _0 of <{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' -> let <_3> = call 'erlang':'setelement' (5,_0,'undefined') in try (case _0 of (<({'w',_42,_43,_44,_rec48,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}-|['compiler_generated'] )> when 'true' -> apply _rec48 ('read')-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <_7> -> case _7 of <'end_of_input'> when 'true' -> {'end_of_input',_3}
<{'end_of_input',Value}> when 'true' -> let <_rec49> = {'value',Value} in case _3 of <{'w',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}> when 'true' -> let <_11> = call 'erlang':'setelement' (20,_3,_rec49) in {'end_of_input',_11}
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{Objs,NFun}> when try let <_12> = call 'erlang':'is_function' (NFun,1) in let <_13> = call 'erlang':'is_list' (Objs) in call 'erlang':'and' (_12,_13) of <Try> -> Try catch <T,R> -> 'false' -> case _0 of <{'w',_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}> when 'true' -> let <_16> = call 'erlang':'setelement' (5,_0,NFun) in {'cont',_16,Objs}
(<_100> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> apply 'error'/2 (Error,_3) end catch <_20,_19,_18> -> do apply 'cleanup'/1 (_3) primop 'raw_raise' (_20,_19,_18)
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
'outfun'/2 = fun (_0,_1) -> case <_0,_1> of <A,W = {'w',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,Val}> when call 'erlang':'=/=' (Val,'no_value') -> case W of <{'w',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' -> let <_4> = call 'erlang':'setelement' (20,W,'no_value') in let <_12> = case <> of <> when (try (let <_8> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_4,('w'-|['compiler_generated'] ),(20-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_6-|['compiler_generated'] )> when 'true' -> (_6-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_9> = call 'erlang':'=:=' ((_8-|['compiler_generated'] ),'true') in let <_10> = call 'erlang':'element' (7,_4) in let <_11> = call 'erlang':'=:=' (_10,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_9,_11)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'outfun'/2 (Val,_4)
<> when 'true' -> _4 end in apply 'outfun'/2 (A,_12)
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<A,W> when 'true' -> case W of <{'w',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_16> = call 'erlang':'setelement' (6,W,'undefined') in try (case W of (<({'w',_87,_88,_89,_90,_rec54,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104}-|['compiler_generated'] )> when 'true' -> apply _rec54 (A)-|['compiler_generated'] )
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <_20> -> case _20 of <Reply> when call 'erlang':'=:=' (A,'close') -> Reply
<NF> when call 'erlang':'is_function' (_20,1) -> case W of <{'w',_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' -> call 'erlang':'setelement' (6,W,NF)
(<_125> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> apply 'error'/2 (Error,_16) end catch <_26,_25,_24> -> do apply 'cleanup'/1 (_16) primop 'raw_raise' (_26,_25,_24)
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'is_keypos'/1 = fun (_0) -> case _0 of <Keypos> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in call 'erlang':'and' (_1,_2) -> 'true'
<[]> when 'true' -> {'badarg',[]}
<L> when 'true' -> apply 'is_keyposs'/1 (L) end
'is_keyposs'/1 = fun (_0) -> case _0 of <[Kp|Kps]> when let <_1> = call 'erlang':'is_integer' (Kp) in let <_2> = call 'erlang':'>' (Kp,0) in call 'erlang':'and' (_1,_2) -> apply 'is_keyposs'/1 (Kps)
<[]> when 'true' -> 'true'
<[Bad|_4]> when 'true' -> {'badarg',Bad}
<Bad> when 'true' -> {'badarg',Bad} end
'is_input'/1 = fun (_0) -> case _0 of <Fun> when call 'erlang':'is_function' (_0,1) -> {'true',Fun}
<Files> when 'true' -> apply 'is_files'/1 (Files) end
'is_files'/1 = fun (_0) -> apply 'is_files'/2 (_0,[])
'is_files'/2 = fun (_0,_1) -> case <_0,_1> of <[F|Fs],L> when 'true' -> case apply 'read_file_info'/1 (F) of <{'ok',File,_X_FI}> when 'true' -> apply 'is_files'/2 (Fs,[File|L])
<Error> when 'true' -> Error end
<[],L> when 'true' -> let <_3> = call 'lists':'reverse' (L) in {'true',_3}
<Bad,_X_L> when 'true' -> {'badarg',Bad} end
'maybe_output'/1 = fun (_0) -> case _0 of <Fun> when call 'erlang':'is_function' (_0,1) -> {'true',Fun}
<File> when 'true' -> case apply 'read_file_info'/1 (File) of <Badarg = {'badarg',_X_File}> when 'true' -> Badarg
<{'ok',FileName,_X_FileInfo}> when 'true' -> {'true',FileName}
<{'error',{'file_error',FileName,_X_Reason}}> when 'true' -> {'true',FileName}
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end end
'read_file_info'/1 = fun (_0) -> let <_1> = catch call 'filename':'absname' (_0) in case _1 of <{'EXIT',_5}> when 'true' -> {'badarg',_0}
<FileName> when 'true' -> case call 'file':'read_file_info' (FileName) of <{'ok',FileInfo}> when 'true' -> {'ok',FileName,FileInfo}
<{'error','einval'}> when 'true' -> {'badarg',_0}
<{'error',Reason}> when 'true' -> {'error',{'file_error',FileName,Reason}}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end end
'next_temp'/1 = fun (_0) -> (case _0 of (<({'w',_13,_14,_rec56,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}-|['compiler_generated'] )> when 'true' -> let <_rec57> = call 'erlang':'+' (_rec56,1) in case _0 of <{'w',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,_0,_rec57) in (case _0 of (<({'w',_52,_53,_54,_55,_56,_57,_rec59,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}-|['compiler_generated'] )> when 'true' -> let <Temp> = call 'lists':'concat' ([_rec59|[_rec56|[]]]) in {_7,Temp}-|['compiler_generated'] )
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'tmp_prefix'/2 = fun (_0,_1) -> case <_0,_1> of <F,TmpDirOpt> when let <_2> = call 'erlang':'is_function' (F) in let <_3> = call 'erlang':'=:=' (F,'undefined') in call 'erlang':'or' (_2,_3) -> case call 'file':'get_cwd' () of <{'ok',CurDir}> when 'true' -> apply 'tmp_prefix1'/2 (CurDir,TmpDirOpt)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<OutFile,TmpDirOpt> when 'true' -> let <Dir> = call 'filename':'dirname' (OutFile) in apply 'tmp_prefix1'/2 (Dir,TmpDirOpt) end
'tmp_prefix1'/2 = fun (_0,_1) -> let <Node> = call 'erlang':'node' () in let <Pid> = call 'os':'getpid' () in let <Unique> = call 'erlang':'unique_integer' (['positive']) in let <F> = call 'lists':'concat' ([[102|[115|[95]]]|[Node|[[95]|[Pid|[[95]|[Unique|[[46]]]]]]]]) in let <_8> = case _1 of <'default'> when 'true' -> _0
<{'dir',TDir}> when 'true' -> TDir
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end in let <_10> = call 'filename':'absname' (_8) in call 'filename':'join' (_10,F)
'open_file'/2 = fun (_0,_1) -> (case _1 of (<({'w',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec60,_29,_30,_31}-|['compiler_generated'] )> when 'true' -> let <_4> = call 'erlang':'++' (_rec60,['raw'|['binary'|['write']]]) in case call 'file':'open' (_0,_4) of <{'ok',Fd}> when 'true' -> (case _1 of (<({'w',_33,_34,_35,_36,_37,_38,_39,_rec63,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}-|['compiler_generated'] )> when 'true' -> let <_rec61> = [{Fd,_0}|_rec63] in case _1 of <{'w',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' -> let <_10> = call 'erlang':'setelement' (9,_1,_rec61) in {Fd,_10}
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> apply 'file_error'/3 (_0,Error,_1) end-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'read'/4 = fun (_0,_1,_2,_3) -> case call 'file':'read' (_0,_2) of <_@r0 = {'ok',Bin}> when 'true' -> _@r0
<'eof'> when 'true' -> 'eof'
<{'error','enomem'}> when 'true' -> apply 'error'/2 ({'error',{'bad_object',_1}},_3)
<{'error','einval'}> when 'true' -> apply 'error'/2 ({'error',{'bad_object',_1}},_3)
<Error> when 'true' -> apply 'file_error'/3 (_1,Error,_3) end
'write'/4 = fun (_0,_1,_2,_3) -> case call 'file':'write' (_0,_2) of <'ok'> when 'true' -> 'ok'
<Error> when 'true' -> apply 'file_error'/3 (_1,Error,_3) end
'file_error'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <File,{'error',Reason},W> when 'true' -> apply 'error'/2 ({'error',{'file_error',File,Reason}},W)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'file_error',3}}] )-|['compiler_generated'] ) end
'error'/2 = fun (_0,_1) -> do apply 'cleanup'/1 (_1) (case _1 of (<({'w',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_rec64,_20,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> call 'erlang':'throw' ({_rec64,_0})-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'cleanup'/1 = fun (_0) -> do apply 'close_out'/1 (_0) let <W1> = apply 'close_input'/1 (_0) in let <F> = fun (_5) -> case _5 of <IFun> when call 'erlang':'is_function' (_5) -> apply IFun ('close')
<{Fd,FileName}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (FileName)-|['result_not_wanted'] )
<FileName> when 'true' -> (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (FileName)-|['result_not_wanted'] ) end in (case W1 of (<({'w',_13,_14,_15,_16,_17,_18,_19,_rec65,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}-|['compiler_generated'] )> when 'true' -> call 'lists':'foreach' (F,_rec65)-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'close_input'/1 = fun (_0) -> case _0 of <W = {'w',_4,_5,_6,In,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21}> when call 'erlang':'is_function' (In) -> do try apply In ('close') of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' case W of <{'w',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' -> call 'erlang':'setelement' (5,W,'undefined')
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<W = {'w',_42,_43,_44,'undefined',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' -> W
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'close_input',1}}] )-|['compiler_generated'] ) end
'close_out'/1 = fun (_0) -> case _0 of <{'w',_2,_3,_4,_5,Out,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19}> when call 'erlang':'is_function' (Out) -> catch apply Out ('close')
<_20> when 'true' -> 'ok' end
'close_file'/2 = fun (_0,_1) -> (case _1 of (<({'w',_14,_15,_16,_17,_18,_19,_20,_rec67,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keyfind' (_0,1,_rec67) of <{_33,FileName}> when call 'erlang':'=:=' (_33,_0) -> case call 'file':'close' (_0) of <'ok'> when 'true' -> (case _1 of (<({'w',_34,_35,_36,_37,_38,_39,_40,_rec70,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> let <_7> = call 'lists':'keydelete' (_0,1,_rec70) in let <_rec68> = [FileName|_7] in case _1 of <{'w',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' -> call 'erlang':'setelement' (9,_1,_rec68)
(<_72> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> apply 'file_error'/3 (FileName,Error,_1) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','w'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'file_rterms'/2 = fun (_0,_1) -> case <_0,_1> of <'no_file',Files> when 'true' -> (fun (_4) -> case _4 of <'close'> when 'true' -> 'ok'
<'read'> when call 'erlang':'=:=' (Files,[]) -> 'end_of_input'
<'read'> when 'true' -> case Files of <[F|Fs]> when 'true' -> case call 'file':'open' (F,['read'|['compressed']]) of <{'ok',Fd}> when 'true' -> apply 'file_rterms2'/5 (Fd,[],0,F,Fs)
<{'error',Reason}> when 'true' -> {'error',{'file_error',F,Reason}}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'-file_rterms/2-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-file_rterms/2-fun-0-'}}] )
<{Fd,FileName},Files> when 'true' -> (fun (_6) -> case _6 of <'close'> when 'true' -> call 'file':'close' (Fd)
<'read'> when 'true' -> apply 'file_rterms2'/5 (Fd,[],0,FileName,Files)
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'-file_rterms/2-fun-1-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-file_rterms/2-fun-1-'}}] )
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'file_rterms',2}}] )-|['compiler_generated'] ) end
'file_rterms2'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Fd,L,LSz,FileName,Files> when call 'erlang':'<' (LSz,16384) -> case call 'io':'read' (Fd,'') of <{'ok',Term}> when 'true' -> let <B> = call 'erlang':'term_to_binary' (Term) in let <_6> = call 'erlang':'byte_size' (B) in let <_7> = call 'erlang':'+' (LSz,_6) in apply 'file_rterms2'/5 (Fd,[B|L],_7,FileName,Files)
<'eof'> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) let <_10> = call 'lists':'reverse' (L) in let <_9> = apply 'file_rterms'/2 ('no_file',Files) in {_10,_9}
<_X_Error> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) {'error',{'bad_term',FileName}} end
<Fd,L,_X_LSz,FileName,Files> when 'true' -> let <_14> = call 'lists':'reverse' (L) in let <_13> = apply 'file_rterms'/2 ({Fd,FileName},Files) in {_14,_13} end
'file_wterms'/3 = fun (_0,_1,_2) -> (fun (_6) -> case _6 of <'close'> when call 'erlang':'=:=' (_0,'name') -> 'ok'
<'close'> when 'true' -> case _0 of <{'fd',Fd}> when 'true' -> call 'file':'close' (Fd)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<L> when call 'erlang':'=:=' (_0,'name') -> case call 'file':'open' (_1,_2) of <{'ok',Fd}> when 'true' -> apply 'write_terms'/4 (Fd,_1,L,_2)
<{'error',Reason}> when 'true' -> {'error',{'file_error',_1,Reason}}
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<L> when 'true' -> case _0 of <{'fd',Fd}> when 'true' -> apply 'write_terms'/4 (Fd,_1,L,_2)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end end-|[{'id',{0,0,'-file_wterms/3-fun-0-'}}] )
'write_terms'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Fd,F,[B|Bs],Args> when 'true' -> let <_4> = call 'erlang':'binary_to_term' (B) in case call 'io':'request' (Fd,{'format',[126|[112|[46|[126|[110]]]]],[_4|[]]}) of <'ok'> when 'true' -> apply 'write_terms'/4 (Fd,F,Bs,Args)
<{'error',Reason}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Fd)-|['result_not_wanted'] ) {'error',{'file_error',F,Reason}}
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<Fd,F,[],Args> when 'true' -> apply 'file_wterms'/3 ({'fd',Fd},F,Args)
(<_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|[{'function_name',{'write_terms',4}}] )-|['compiler_generated'] ) end
'fun_rterms'/1 = fun (_0) -> (fun (_6) -> case _6 of <'close'> when 'true' -> apply _0 ('close')
<'read'> when 'true' -> case apply _0 ('read') of <{Ts,NInFun}> when try let <_1> = call 'erlang':'is_list' (Ts) in let <_2> = call 'erlang':'is_function' (NInFun,1) in call 'erlang':'and' (_1,_2) of <Try> -> Try catch <T,R> -> 'false' -> let <_4> = apply 'to_bin'/2 (Ts,[]) in let <_3> = apply 'fun_rterms'/1 (NInFun) in {_4,_3}
<Else> when 'true' -> Else end
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'-fun_rterms/1-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-fun_rterms/1-fun-0-'}}] )
'fun_wterms'/1 = fun (_0) -> (fun (_3) -> case _3 of <'close'> when 'true' -> apply _0 ('close')
<L> when 'true' -> let <_1> = apply 'wterms_arg'/1 (L) in case apply _0 (_1) of <NOutFun> when call 'erlang':'is_function' (NOutFun,1) -> apply 'fun_wterms'/1 (NOutFun)
<Else> when 'true' -> Else end end-|[{'id',{0,0,'-fun_wterms/1-fun-0-'}}] )
'to_bin'/2 = fun (_0,_1) -> case <_0,_1> of <[E|Es],L> when 'true' -> let <_2> = call 'erlang':'term_to_binary' (E) in apply 'to_bin'/2 (Es,[_2|L])
<[],L> when 'true' -> call 'lists':'reverse' (L)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'to_bin',2}}] )-|['compiler_generated'] ) end
'wterms_arg'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> apply 'to_term'/2 (L,[])
<Value> when 'true' -> Value end
'to_term'/2 = fun (_0,_1) -> case <_0,_1> of <[B|Bs],L> when 'true' -> let <_2> = call 'erlang':'binary_to_term' (B) in apply 'to_term'/2 (Bs,[_2|L])
<[],L> when 'true' -> call 'lists':'reverse' (L)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'to_term',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('file_sorter')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('file_sorter',_0) end