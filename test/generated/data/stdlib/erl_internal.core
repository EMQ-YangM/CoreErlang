module 'erl_internal' ['add_predefined_functions'/1,'arith_op'/2,'bif'/2,'bif'/3,'bool_op'/2,'comp_op'/2,'guard_bif'/2,'is_type'/2,'list_op'/2,'module_info'/0,'module_info'/1,'new_type_test'/2,'old_bif'/2,'old_type_test'/2,'op_type'/2,'send_op'/2,'type_test'/2] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[105|[110|[116|[101|[114|[110|[97|[108|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]],1}]
, 'spec' = [{{'guard_bif',2},[{'type',62,'bounded_fun',[{'type',62,'fun',[{'type',62,'product',[{'var',62,'Name'}|[{'var',62,'Arity'}]]}|[{'type',62,'boolean',[]}]]}|[[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'Name'}|[{'type',63,'atom',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'Arity'}|[{'type',64,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'type_test',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Name'}|[{'var',92,'Arity'}]]}|[{'type',92,'boolean',[]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Name'}|[{'type',93,'atom',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Arity'}|[{'type',94,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'new_type_test',2},[{'type',100,'fun',[{'type',100,'product',[{'ann_type',100,[{'var',100,'Name'}|[{'type',100,'atom',[]}]]}|[{'ann_type',100,[{'var',100,'Arity'}|[{'type',100,'arity',[]}]]}]]}|[{'type',100,'boolean',[]}]]}]}]
, 'spec' = [{{'old_type_test',2},[{'type',123,'fun',[{'type',123,'product',[{'ann_type',123,[{'var',123,'Name'}|[{'type',123,'atom',[]}]]}|[{'ann_type',123,[{'var',123,'Arity'}|[{'type',123,'arity',[]}]]}]]}|[{'type',123,'boolean',[]}]]}]}]
, 'spec' = [{{'arith_op',2},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'OpName'}|[{'var',139,'Arity'}]]}|[{'type',139,'boolean',[]}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'OpName'}|[{'type',140,'atom',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Arity'}|[{'type',141,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'bool_op',2},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'OpName'}|[{'var',159,'Arity'}]]}|[{'type',159,'boolean',[]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'OpName'}|[{'type',160,'atom',[]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Arity'}|[{'type',161,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'comp_op',2},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'OpName'}|[{'var',169,'Arity'}]]}|[{'type',169,'boolean',[]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'OpName'}|[{'type',170,'atom',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Arity'}|[{'type',171,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'list_op',2},[{'type',183,'bounded_fun',[{'type',183,'fun',[{'type',183,'product',[{'var',183,'OpName'}|[{'var',183,'Arity'}]]}|[{'type',183,'boolean',[]}]]}|[[{'type',184,'constraint',[{'atom',184,'is_subtype'}|[[{'var',184,'OpName'}|[{'type',184,'atom',[]}]]]]}|[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Arity'}|[{'type',185,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'send_op',2},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'OpName'}|[{'var',191,'Arity'}]]}|[{'type',191,'boolean',[]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'OpName'}|[{'type',192,'atom',[]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Arity'}|[{'type',193,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'op_type',2},[{'type',198,'bounded_fun',[{'type',198,'fun',[{'type',198,'product',[{'var',198,'OpName'}|[{'var',198,'Arity'}]]}|[{'var',198,'Type'}]]}|[[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'OpName'}|[{'type',199,'atom',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Arity'}|[{'type',200,'arity',[]}]]]]}|[{'type',201,'constraint',[{'atom',201,'is_subtype'}|[[{'var',201,'Type'}|[{'type',201,'union',[{'atom',201,'arith'}|[{'atom',201,'bool'}|[{'atom',201,'comp'}|[{'atom',201,'list'}|[{'atom',201,'send'}]]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'bif',3},[{'type',233,'fun',[{'type',233,'product',[{'ann_type',233,[{'var',233,'Mod'}|[{'type',233,'atom',[]}]]}|[{'ann_type',233,[{'var',233,'Name'}|[{'type',233,'atom',[]}]]}|[{'ann_type',233,[{'var',233,'Arity'}|[{'type',233,'arity',[]}]]}]]]}|[{'type',233,'boolean',[]}]]}]}]
, 'spec' = [{{'bif',2},[{'type',238,'bounded_fun',[{'type',238,'fun',[{'type',238,'product',[{'var',238,'Name'}|[{'var',238,'Arity'}]]}|[{'type',238,'boolean',[]}]]}|[[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Name'}|[{'type',239,'atom',[]}]]]]}|[{'type',240,'constraint',[{'atom',240,'is_subtype'}|[[{'var',240,'Arity'}|[{'type',240,'arity',[]}]]]]}]]]]}]}]
, 'spec' = [{{'old_bif',2},[{'type',420,'fun',[{'type',420,'product',[{'ann_type',420,[{'var',420,'Name'}|[{'type',420,'atom',[]}]]}|[{'ann_type',420,[{'var',420,'Arity'}|[{'type',420,'arity',[]}]]}]]}|[{'type',420,'boolean',[]}]]}]}]
, 'spec' = [{{'is_type',2},[{'type',550,'bounded_fun',[{'type',550,'fun',[{'type',550,'product',[{'var',550,'Name'}|[{'var',550,'NumberOfTypeVariables'}]]}|[{'type',550,'boolean',[]}]]}|[[{'type',551,'constraint',[{'atom',551,'is_subtype'}|[[{'var',551,'Name'}|[{'type',551,'atom',[]}]]]]}|[{'type',552,'constraint',[{'atom',552,'is_subtype'}|[[{'var',552,'NumberOfTypeVariables'}|[{'type',552,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'add_predefined_functions',1},[{'type',608,'bounded_fun',[{'type',608,'fun',[{'type',608,'product',[{'var',608,'Forms'}]}|[{'var',608,'UpdatedForms'}]]}|[[{'type',609,'constraint',[{'atom',609,'is_subtype'}|[[{'var',609,'Forms'}|[{'type',609,'list',[{'type',609,'union',[{'remote_type',609,[{'atom',609,'erl_parse'}|[{'atom',609,'abstract_form'}|[[]]]]}|[{'remote_type',609,[{'atom',609,'erl_parse'}|[{'atom',609,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',610,'constraint',[{'atom',610,'is_subtype'}|[[{'var',610,'UpdatedForms'}|[{'type',610,'list',[{'type',610,'union',[{'remote_type',610,[{'atom',610,'erl_parse'}|[{'atom',610,'abstract_form'}|[[]]]]}|[{'remote_type',610,[{'atom',610,'erl_parse'}|[{'atom',610,'form_info'}|[[]]]]}]]}]}]]]]}]]]]}]}] ] 'guard_bif'/2 = fun (_0,_1) -> case <_0,_1> of <'abs',1> when 'true' -> 'true'
<'binary_part',2> when 'true' -> 'true'
<'binary_part',3> when 'true' -> 'true'
<'bit_size',1> when 'true' -> 'true'
<'byte_size',1> when 'true' -> 'true'
<'ceil',1> when 'true' -> 'true'
<'element',2> when 'true' -> 'true'
<'float',1> when 'true' -> 'true'
<'floor',1> when 'true' -> 'true'
<'hd',1> when 'true' -> 'true'
<'is_map_key',2> when 'true' -> 'true'
<'length',1> when 'true' -> 'true'
<'map_size',1> when 'true' -> 'true'
<'map_get',2> when 'true' -> 'true'
<'node',0> when 'true' -> 'true'
<'node',1> when 'true' -> 'true'
<'round',1> when 'true' -> 'true'
<'self',0> when 'true' -> 'true'
<'size',1> when 'true' -> 'true'
<'tl',1> when 'true' -> 'true'
<'trunc',1> when 'true' -> 'true'
<'tuple_size',1> when 'true' -> 'true'
<Name,A> when 'true' -> apply 'new_type_test'/2 (Name,A) end
'type_test'/2 = fun (_0,_1) -> (case apply 'new_type_test'/2 (_0,_1) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> apply 'old_type_test'/2 (_0,_1)-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'new_type_test'/2 = fun (_0,_1) -> case <_0,_1> of <'is_atom',1> when 'true' -> 'true'
<'is_binary',1> when 'true' -> 'true'
<'is_bitstring',1> when 'true' -> 'true'
<'is_boolean',1> when 'true' -> 'true'
<'is_float',1> when 'true' -> 'true'
<'is_function',1> when 'true' -> 'true'
<'is_function',2> when 'true' -> 'true'
<'is_integer',1> when 'true' -> 'true'
<'is_list',1> when 'true' -> 'true'
<'is_map',1> when 'true' -> 'true'
<'is_number',1> when 'true' -> 'true'
<'is_pid',1> when 'true' -> 'true'
<'is_port',1> when 'true' -> 'true'
<'is_record',2> when 'true' -> 'true'
<'is_record',3> when 'true' -> 'true'
<'is_reference',1> when 'true' -> 'true'
<'is_tuple',1> when 'true' -> 'true'
<Name,A> when let <_2> = call 'erlang':'is_atom' (Name) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'new_type_test',2}}] )-|['compiler_generated'] ) end
'old_type_test'/2 = fun (_0,_1) -> case <_0,_1> of <'integer',1> when 'true' -> 'true'
<'float',1> when 'true' -> 'true'
<'number',1> when 'true' -> 'true'
<'atom',1> when 'true' -> 'true'
<'list',1> when 'true' -> 'true'
<'tuple',1> when 'true' -> 'true'
<'pid',1> when 'true' -> 'true'
<'reference',1> when 'true' -> 'true'
<'port',1> when 'true' -> 'true'
<'binary',1> when 'true' -> 'true'
<'record',2> when 'true' -> 'true'
<'function',1> when 'true' -> 'true'
<Name,A> when let <_2> = call 'erlang':'is_atom' (Name) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'old_type_test',2}}] )-|['compiler_generated'] ) end
'arith_op'/2 = fun (_0,_1) -> case <_0,_1> of <'+',1> when 'true' -> 'true'
<'-',1> when 'true' -> 'true'
<'*',2> when 'true' -> 'true'
<'/',2> when 'true' -> 'true'
<'+',2> when 'true' -> 'true'
<'-',2> when 'true' -> 'true'
<'bnot',1> when 'true' -> 'true'
<'div',2> when 'true' -> 'true'
<'rem',2> when 'true' -> 'true'
<'band',2> when 'true' -> 'true'
<'bor',2> when 'true' -> 'true'
<'bxor',2> when 'true' -> 'true'
<'bsl',2> when 'true' -> 'true'
<'bsr',2> when 'true' -> 'true'
<Op,A> when let <_2> = call 'erlang':'is_atom' (Op) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'arith_op',2}}] )-|['compiler_generated'] ) end
'bool_op'/2 = fun (_0,_1) -> case <_0,_1> of <'not',1> when 'true' -> 'true'
<'and',2> when 'true' -> 'true'
<'or',2> when 'true' -> 'true'
<'xor',2> when 'true' -> 'true'
<Op,A> when let <_2> = call 'erlang':'is_atom' (Op) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'bool_op',2}}] )-|['compiler_generated'] ) end
'comp_op'/2 = fun (_0,_1) -> case <_0,_1> of <'==',2> when 'true' -> 'true'
<'/=',2> when 'true' -> 'true'
<'=<',2> when 'true' -> 'true'
<'<',2> when 'true' -> 'true'
<'>=',2> when 'true' -> 'true'
<'>',2> when 'true' -> 'true'
<'=:=',2> when 'true' -> 'true'
<'=/=',2> when 'true' -> 'true'
<Op,A> when let <_2> = call 'erlang':'is_atom' (Op) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'comp_op',2}}] )-|['compiler_generated'] ) end
'list_op'/2 = fun (_0,_1) -> case <_0,_1> of <'++',2> when 'true' -> 'true'
<'--',2> when 'true' -> 'true'
<Op,A> when let <_2> = call 'erlang':'is_atom' (Op) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'list_op',2}}] )-|['compiler_generated'] ) end
'send_op'/2 = fun (_0,_1) -> case <_0,_1> of <'!',2> when 'true' -> 'true'
<Op,A> when let <_2> = call 'erlang':'is_atom' (Op) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'send_op',2}}] )-|['compiler_generated'] ) end
'op_type'/2 = fun (_0,_1) -> case <_0,_1> of <'+',1> when 'true' -> 'arith'
<'-',1> when 'true' -> 'arith'
<'*',2> when 'true' -> 'arith'
<'/',2> when 'true' -> 'arith'
<'+',2> when 'true' -> 'arith'
<'-',2> when 'true' -> 'arith'
<'bnot',1> when 'true' -> 'arith'
<'div',2> when 'true' -> 'arith'
<'rem',2> when 'true' -> 'arith'
<'band',2> when 'true' -> 'arith'
<'bor',2> when 'true' -> 'arith'
<'bxor',2> when 'true' -> 'arith'
<'bsl',2> when 'true' -> 'arith'
<'bsr',2> when 'true' -> 'arith'
<'not',1> when 'true' -> 'bool'
<'and',2> when 'true' -> 'bool'
<'or',2> when 'true' -> 'bool'
<'xor',2> when 'true' -> 'bool'
<'==',2> when 'true' -> 'comp'
<'/=',2> when 'true' -> 'comp'
<'=<',2> when 'true' -> 'comp'
<'<',2> when 'true' -> 'comp'
<'>=',2> when 'true' -> 'comp'
<'>',2> when 'true' -> 'comp'
<'=:=',2> when 'true' -> 'comp'
<'=/=',2> when 'true' -> 'comp'
<'++',2> when 'true' -> 'list'
<'--',2> when 'true' -> 'list'
<'!',2> when 'true' -> 'send'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'op_type',2}}] )-|['compiler_generated'] ) end
'bif'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'erlang',Name,Arity> when 'true' -> apply 'bif'/2 (Name,Arity)
<M,F,A> when try let <_3> = call 'erlang':'is_atom' (M) in let <_4> = call 'erlang':'is_atom' (F) in let <_5> = call 'erlang':'is_integer' (A) in let <_6> = call 'erlang':'and' (_4,_5) in call 'erlang':'and' (_3,_6) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'bif',3}}] )-|['compiler_generated'] ) end
'bif'/2 = fun (_0,_1) -> case <_0,_1> of <'abs',1> when 'true' -> 'true'
<'apply',2> when 'true' -> 'true'
<'apply',3> when 'true' -> 'true'
<'atom_to_binary',1> when 'true' -> 'true'
<'atom_to_binary',2> when 'true' -> 'true'
<'atom_to_list',1> when 'true' -> 'true'
<'binary_part',2> when 'true' -> 'true'
<'binary_part',3> when 'true' -> 'true'
<'binary_to_atom',1> when 'true' -> 'true'
<'binary_to_atom',2> when 'true' -> 'true'
<'binary_to_existing_atom',1> when 'true' -> 'true'
<'binary_to_existing_atom',2> when 'true' -> 'true'
<'binary_to_integer',1> when 'true' -> 'true'
<'binary_to_integer',2> when 'true' -> 'true'
<'binary_to_float',1> when 'true' -> 'true'
<'binary_to_list',1> when 'true' -> 'true'
<'binary_to_list',3> when 'true' -> 'true'
<'binary_to_term',1> when 'true' -> 'true'
<'binary_to_term',2> when 'true' -> 'true'
<'bitsize',1> when 'true' -> 'true'
<'bit_size',1> when 'true' -> 'true'
<'bitstring_to_list',1> when 'true' -> 'true'
<'byte_size',1> when 'true' -> 'true'
<'ceil',1> when 'true' -> 'true'
<'check_old_code',1> when 'true' -> 'true'
<'check_process_code',2> when 'true' -> 'true'
<'check_process_code',3> when 'true' -> 'true'
<'date',0> when 'true' -> 'true'
<'delete_module',1> when 'true' -> 'true'
<'demonitor',1> when 'true' -> 'true'
<'demonitor',2> when 'true' -> 'true'
<'disconnect_node',1> when 'true' -> 'true'
<'element',2> when 'true' -> 'true'
<'erase',0> when 'true' -> 'true'
<'erase',1> when 'true' -> 'true'
<'error',1> when 'true' -> 'true'
<'error',2> when 'true' -> 'true'
<'exit',1> when 'true' -> 'true'
<'exit',2> when 'true' -> 'true'
<'float',1> when 'true' -> 'true'
<'float_to_list',1> when 'true' -> 'true'
<'float_to_list',2> when 'true' -> 'true'
<'float_to_binary',1> when 'true' -> 'true'
<'float_to_binary',2> when 'true' -> 'true'
<'floor',1> when 'true' -> 'true'
<'garbage_collect',0> when 'true' -> 'true'
<'garbage_collect',1> when 'true' -> 'true'
<'garbage_collect',2> when 'true' -> 'true'
<'get',0> when 'true' -> 'true'
<'get',1> when 'true' -> 'true'
<'get_keys',0> when 'true' -> 'true'
<'get_keys',1> when 'true' -> 'true'
<'group_leader',0> when 'true' -> 'true'
<'group_leader',2> when 'true' -> 'true'
<'halt',0> when 'true' -> 'true'
<'halt',1> when 'true' -> 'true'
<'halt',2> when 'true' -> 'true'
<'hd',1> when 'true' -> 'true'
<'integer_to_binary',1> when 'true' -> 'true'
<'integer_to_binary',2> when 'true' -> 'true'
<'integer_to_list',1> when 'true' -> 'true'
<'integer_to_list',2> when 'true' -> 'true'
<'iolist_size',1> when 'true' -> 'true'
<'iolist_to_binary',1> when 'true' -> 'true'
<'is_alive',0> when 'true' -> 'true'
<'is_process_alive',1> when 'true' -> 'true'
<'is_atom',1> when 'true' -> 'true'
<'is_boolean',1> when 'true' -> 'true'
<'is_binary',1> when 'true' -> 'true'
<'is_bitstr',1> when 'true' -> 'true'
<'is_bitstring',1> when 'true' -> 'true'
<'is_float',1> when 'true' -> 'true'
<'is_function',1> when 'true' -> 'true'
<'is_function',2> when 'true' -> 'true'
<'is_integer',1> when 'true' -> 'true'
<'is_list',1> when 'true' -> 'true'
<'is_map',1> when 'true' -> 'true'
<'is_map_key',2> when 'true' -> 'true'
<'is_number',1> when 'true' -> 'true'
<'is_pid',1> when 'true' -> 'true'
<'is_port',1> when 'true' -> 'true'
<'is_reference',1> when 'true' -> 'true'
<'is_tuple',1> when 'true' -> 'true'
<'is_record',2> when 'true' -> 'true'
<'is_record',3> when 'true' -> 'true'
<'length',1> when 'true' -> 'true'
<'link',1> when 'true' -> 'true'
<'list_to_atom',1> when 'true' -> 'true'
<'list_to_binary',1> when 'true' -> 'true'
<'list_to_bitstring',1> when 'true' -> 'true'
<'list_to_existing_atom',1> when 'true' -> 'true'
<'list_to_float',1> when 'true' -> 'true'
<'list_to_integer',1> when 'true' -> 'true'
<'list_to_integer',2> when 'true' -> 'true'
<'list_to_pid',1> when 'true' -> 'true'
<'list_to_port',1> when 'true' -> 'true'
<'list_to_ref',1> when 'true' -> 'true'
<'list_to_tuple',1> when 'true' -> 'true'
<'load_module',2> when 'true' -> 'true'
<'make_ref',0> when 'true' -> 'true'
<'map_size',1> when 'true' -> 'true'
<'map_get',2> when 'true' -> 'true'
<'max',2> when 'true' -> 'true'
<'min',2> when 'true' -> 'true'
<'module_loaded',1> when 'true' -> 'true'
<'monitor',2> when 'true' -> 'true'
<'monitor',3> when 'true' -> 'true'
<'monitor_node',2> when 'true' -> 'true'
<'node',0> when 'true' -> 'true'
<'node',1> when 'true' -> 'true'
<'nodes',0> when 'true' -> 'true'
<'nodes',1> when 'true' -> 'true'
<'now',0> when 'true' -> 'true'
<'open_port',2> when 'true' -> 'true'
<'pid_to_list',1> when 'true' -> 'true'
<'port_to_list',1> when 'true' -> 'true'
<'port_close',1> when 'true' -> 'true'
<'port_command',2> when 'true' -> 'true'
<'port_command',3> when 'true' -> 'true'
<'port_connect',2> when 'true' -> 'true'
<'port_control',3> when 'true' -> 'true'
<'pre_loaded',0> when 'true' -> 'true'
<'process_flag',2> when 'true' -> 'true'
<'process_flag',3> when 'true' -> 'true'
<'process_info',1> when 'true' -> 'true'
<'process_info',2> when 'true' -> 'true'
<'processes',0> when 'true' -> 'true'
<'purge_module',1> when 'true' -> 'true'
<'put',2> when 'true' -> 'true'
<'ref_to_list',1> when 'true' -> 'true'
<'register',2> when 'true' -> 'true'
<'registered',0> when 'true' -> 'true'
<'round',1> when 'true' -> 'true'
<'self',0> when 'true' -> 'true'
<'setelement',3> when 'true' -> 'true'
<'size',1> when 'true' -> 'true'
<'spawn',1> when 'true' -> 'true'
<'spawn',2> when 'true' -> 'true'
<'spawn',3> when 'true' -> 'true'
<'spawn',4> when 'true' -> 'true'
<'spawn_link',1> when 'true' -> 'true'
<'spawn_link',2> when 'true' -> 'true'
<'spawn_link',3> when 'true' -> 'true'
<'spawn_link',4> when 'true' -> 'true'
<'spawn_request',1> when 'true' -> 'true'
<'spawn_request',2> when 'true' -> 'true'
<'spawn_request',3> when 'true' -> 'true'
<'spawn_request',4> when 'true' -> 'true'
<'spawn_request',5> when 'true' -> 'true'
<'spawn_request_abandon',1> when 'true' -> 'true'
<'spawn_monitor',1> when 'true' -> 'true'
<'spawn_monitor',2> when 'true' -> 'true'
<'spawn_monitor',3> when 'true' -> 'true'
<'spawn_monitor',4> when 'true' -> 'true'
<'spawn_opt',2> when 'true' -> 'true'
<'spawn_opt',3> when 'true' -> 'true'
<'spawn_opt',4> when 'true' -> 'true'
<'spawn_opt',5> when 'true' -> 'true'
<'split_binary',2> when 'true' -> 'true'
<'statistics',1> when 'true' -> 'true'
<'term_to_binary',1> when 'true' -> 'true'
<'term_to_binary',2> when 'true' -> 'true'
<'term_to_iovec',1> when 'true' -> 'true'
<'term_to_iovec',2> when 'true' -> 'true'
<'throw',1> when 'true' -> 'true'
<'time',0> when 'true' -> 'true'
<'tl',1> when 'true' -> 'true'
<'trunc',1> when 'true' -> 'true'
<'tuple_size',1> when 'true' -> 'true'
<'tuple_to_list',1> when 'true' -> 'true'
<'unlink',1> when 'true' -> 'true'
<'unregister',1> when 'true' -> 'true'
<'whereis',1> when 'true' -> 'true'
<Name,A> when let <_2> = call 'erlang':'is_atom' (Name) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'bif',2}}] )-|['compiler_generated'] ) end
'old_bif'/2 = fun (_0,_1) -> case <_0,_1> of <'abs',1> when 'true' -> 'true'
<'apply',2> when 'true' -> 'true'
<'apply',3> when 'true' -> 'true'
<'atom_to_binary',2> when 'true' -> 'true'
<'atom_to_list',1> when 'true' -> 'true'
<'binary_to_atom',2> when 'true' -> 'true'
<'binary_to_existing_atom',2> when 'true' -> 'true'
<'binary_to_list',1> when 'true' -> 'true'
<'binary_to_list',3> when 'true' -> 'true'
<'binary_to_term',1> when 'true' -> 'true'
<'bitsize',1> when 'true' -> 'true'
<'bit_size',1> when 'true' -> 'true'
<'bitstring_to_list',1> when 'true' -> 'true'
<'byte_size',1> when 'true' -> 'true'
<'check_process_code',2> when 'true' -> 'true'
<'date',0> when 'true' -> 'true'
<'delete_module',1> when 'true' -> 'true'
<'disconnect_node',1> when 'true' -> 'true'
<'element',2> when 'true' -> 'true'
<'erase',0> when 'true' -> 'true'
<'erase',1> when 'true' -> 'true'
<'exit',1> when 'true' -> 'true'
<'exit',2> when 'true' -> 'true'
<'float',1> when 'true' -> 'true'
<'float_to_list',1> when 'true' -> 'true'
<'garbage_collect',0> when 'true' -> 'true'
<'garbage_collect',1> when 'true' -> 'true'
<'get',0> when 'true' -> 'true'
<'get',1> when 'true' -> 'true'
<'get_keys',1> when 'true' -> 'true'
<'group_leader',0> when 'true' -> 'true'
<'group_leader',2> when 'true' -> 'true'
<'halt',0> when 'true' -> 'true'
<'halt',1> when 'true' -> 'true'
<'hd',1> when 'true' -> 'true'
<'integer_to_list',1> when 'true' -> 'true'
<'iolist_size',1> when 'true' -> 'true'
<'iolist_to_binary',1> when 'true' -> 'true'
<'is_alive',0> when 'true' -> 'true'
<'is_process_alive',1> when 'true' -> 'true'
<'is_atom',1> when 'true' -> 'true'
<'is_boolean',1> when 'true' -> 'true'
<'is_binary',1> when 'true' -> 'true'
<'is_bitstr',1> when 'true' -> 'true'
<'is_bitstring',1> when 'true' -> 'true'
<'is_float',1> when 'true' -> 'true'
<'is_function',1> when 'true' -> 'true'
<'is_function',2> when 'true' -> 'true'
<'is_integer',1> when 'true' -> 'true'
<'is_list',1> when 'true' -> 'true'
<'is_number',1> when 'true' -> 'true'
<'is_pid',1> when 'true' -> 'true'
<'is_port',1> when 'true' -> 'true'
<'is_reference',1> when 'true' -> 'true'
<'is_tuple',1> when 'true' -> 'true'
<'is_record',2> when 'true' -> 'true'
<'is_record',3> when 'true' -> 'true'
<'length',1> when 'true' -> 'true'
<'link',1> when 'true' -> 'true'
<'list_to_atom',1> when 'true' -> 'true'
<'list_to_binary',1> when 'true' -> 'true'
<'list_to_bitstring',1> when 'true' -> 'true'
<'list_to_existing_atom',1> when 'true' -> 'true'
<'list_to_float',1> when 'true' -> 'true'
<'list_to_integer',1> when 'true' -> 'true'
<'list_to_pid',1> when 'true' -> 'true'
<'list_to_tuple',1> when 'true' -> 'true'
<'load_module',2> when 'true' -> 'true'
<'make_ref',0> when 'true' -> 'true'
<'module_loaded',1> when 'true' -> 'true'
<'monitor_node',2> when 'true' -> 'true'
<'node',0> when 'true' -> 'true'
<'node',1> when 'true' -> 'true'
<'nodes',0> when 'true' -> 'true'
<'nodes',1> when 'true' -> 'true'
<'now',0> when 'true' -> 'true'
<'open_port',2> when 'true' -> 'true'
<'pid_to_list',1> when 'true' -> 'true'
<'port_close',1> when 'true' -> 'true'
<'port_command',2> when 'true' -> 'true'
<'port_connect',2> when 'true' -> 'true'
<'port_control',3> when 'true' -> 'true'
<'pre_loaded',0> when 'true' -> 'true'
<'process_flag',2> when 'true' -> 'true'
<'process_flag',3> when 'true' -> 'true'
<'process_info',1> when 'true' -> 'true'
<'process_info',2> when 'true' -> 'true'
<'processes',0> when 'true' -> 'true'
<'purge_module',1> when 'true' -> 'true'
<'put',2> when 'true' -> 'true'
<'register',2> when 'true' -> 'true'
<'registered',0> when 'true' -> 'true'
<'round',1> when 'true' -> 'true'
<'self',0> when 'true' -> 'true'
<'setelement',3> when 'true' -> 'true'
<'size',1> when 'true' -> 'true'
<'spawn',1> when 'true' -> 'true'
<'spawn',2> when 'true' -> 'true'
<'spawn',3> when 'true' -> 'true'
<'spawn',4> when 'true' -> 'true'
<'spawn_link',1> when 'true' -> 'true'
<'spawn_link',2> when 'true' -> 'true'
<'spawn_link',3> when 'true' -> 'true'
<'spawn_link',4> when 'true' -> 'true'
<'spawn_monitor',1> when 'true' -> 'true'
<'spawn_monitor',3> when 'true' -> 'true'
<'spawn_opt',2> when 'true' -> 'true'
<'spawn_opt',3> when 'true' -> 'true'
<'spawn_opt',4> when 'true' -> 'true'
<'spawn_opt',5> when 'true' -> 'true'
<'split_binary',2> when 'true' -> 'true'
<'statistics',1> when 'true' -> 'true'
<'term_to_binary',1> when 'true' -> 'true'
<'term_to_binary',2> when 'true' -> 'true'
<'throw',1> when 'true' -> 'true'
<'time',0> when 'true' -> 'true'
<'tl',1> when 'true' -> 'true'
<'trunc',1> when 'true' -> 'true'
<'tuple_size',1> when 'true' -> 'true'
<'tuple_to_list',1> when 'true' -> 'true'
<'unlink',1> when 'true' -> 'true'
<'unregister',1> when 'true' -> 'true'
<'whereis',1> when 'true' -> 'true'
<Name,A> when let <_2> = call 'erlang':'is_atom' (Name) in let <_3> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'old_bif',2}}] )-|['compiler_generated'] ) end
'is_type'/2 = fun (_0,_1) -> case <_0,_1> of <'any',0> when 'true' -> 'true'
<'arity',0> when 'true' -> 'true'
<'atom',0> when 'true' -> 'true'
<'binary',0> when 'true' -> 'true'
<'bitstring',0> when 'true' -> 'true'
<'bool',0> when 'true' -> 'true'
<'boolean',0> when 'true' -> 'true'
<'byte',0> when 'true' -> 'true'
<'char',0> when 'true' -> 'true'
<'float',0> when 'true' -> 'true'
<'function',0> when 'true' -> 'true'
<'identifier',0> when 'true' -> 'true'
<'integer',0> when 'true' -> 'true'
<'iodata',0> when 'true' -> 'true'
<'iolist',0> when 'true' -> 'true'
<'list',0> when 'true' -> 'true'
<'list',1> when 'true' -> 'true'
<'map',0> when 'true' -> 'true'
<'maybe_improper_list',0> when 'true' -> 'true'
<'maybe_improper_list',2> when 'true' -> 'true'
<'mfa',0> when 'true' -> 'true'
<'module',0> when 'true' -> 'true'
<'neg_integer',0> when 'true' -> 'true'
<'nil',0> when 'true' -> 'true'
<'no_return',0> when 'true' -> 'true'
<'node',0> when 'true' -> 'true'
<'non_neg_integer',0> when 'true' -> 'true'
<'none',0> when 'true' -> 'true'
<'nonempty_improper_list',2> when 'true' -> 'true'
<'nonempty_list',0> when 'true' -> 'true'
<'nonempty_list',1> when 'true' -> 'true'
<'nonempty_maybe_improper_list',0> when 'true' -> 'true'
<'nonempty_maybe_improper_list',2> when 'true' -> 'true'
<'nonempty_string',0> when 'true' -> 'true'
<'number',0> when 'true' -> 'true'
<'pid',0> when 'true' -> 'true'
<'port',0> when 'true' -> 'true'
<'pos_integer',0> when 'true' -> 'true'
<'reference',0> when 'true' -> 'true'
<'string',0> when 'true' -> 'true'
<'term',0> when 'true' -> 'true'
<'timeout',0> when 'true' -> 'true'
<'tuple',0> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'add_predefined_functions'/1 = fun (_0) -> let <_1> = apply 'predefined_functions'/1 (_0) in call 'erlang':'++' (_0,_1)
'predefined_functions'/1 = fun (_0) -> let <_5> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'attribute',_32,Name,Val}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([{Name,Val}|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_35> when 'true' -> (primop 'match_fail' ({'function_clause',_35})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in case call 'lists':'keyfind' ('module',1,_5) of <{'module',Mod}> when 'true' -> let <_12> = letrec 'lc$^1'/1 = fun (_10) -> case _10 of <[{'callback',Callback}|_9]> when 'true' -> let <_11> = apply 'lc$^1'/1 (_9) in ([Callback|_11]-|['compiler_generated'] )
(<[_8|_9]> when 'true' -> apply 'lc$^1'/1 (_9)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_36> when 'true' -> (primop 'match_fail' ({'function_clause',_36})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (_5) in let <OptionalCallbacks> = apply 'get_optional_callbacks'/1 (_5) in let <Mpf1> = apply 'module_predef_func_beh_info'/2 (_12,OptionalCallbacks) in let <Mpf2> = apply 'module_predef_funcs_mod_info'/1 (Mod) in let <_23> = letrec 'lc$^2'/1 = fun (_20) -> case _20 of <[F|_18]> when 'true' -> let <_21> = call 'erl_parse':'new_anno' (F) in let <_22> = apply 'lc$^2'/1 (_18) in ([_21|_22]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_37> when 'true' -> (primop 'match_fail' ({'function_clause',_37})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_19> = call 'erlang':'++' (Mpf1,Mpf2) in apply 'lc$^2'/1 (_19) in let <_29> = letrec 'lc$^3'/1 = fun (_27) -> case _27 of <[{'function',_33,F,A,_34}|_26]> when 'true' -> let <_28> = apply 'lc$^3'/1 (_26) in ([{F,A}|_28]-|['compiler_generated'] )
(<[_25|_26]> when 'true' -> apply 'lc$^3'/1 (_26)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_38> when 'true' -> (primop 'match_fail' ({'function_clause',_38})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in apply 'lc$^3'/1 (_23) in [{'attribute',0,'export',_29}|_23]
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'get_optional_callbacks'/1 = fun (_0) -> let <_6> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'optional_callbacks',O}|_2]> when 'true' -> (case apply 'is_fa_list'/1 (O) of <'true'> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([O|_4]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in call 'lists':'append' (_6)
'is_fa_list'/1 = fun (_0) -> case _0 of <[{FuncName,Arity}|L]> when try let <_1> = call 'erlang':'is_atom' (FuncName) in let <_2> = call 'erlang':'is_integer' (Arity) in let <_3> = call 'erlang':'>=' (Arity,0) in let <_4> = call 'erlang':'and' (_2,_3) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> apply 'is_fa_list'/1 (L)
<[]> when 'true' -> 'true'
<_6> when 'true' -> 'false' end
'module_predef_func_beh_info'/2 = fun (_0,_1) -> case <_0,_1> of <[],_12> when 'true' -> []
<Callbacks0,OptionalCallbacks> when 'true' -> let <_6> = letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[{FA = {_13,_14},_15}|_3]> when 'true' -> let <_5> = apply 'lc$^0'/1 (_3) in ([FA|_5]-|['compiler_generated'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Callbacks0) in let <List> = apply 'make_list'/1 (_6) in let <OptionalList> = apply 'make_list'/1 (OptionalCallbacks) in [{'function',0,'behaviour_info',1,[{'clause',0,[{'atom',0,'callbacks'}],[],[List|[]]}|[{'clause',0,[{'atom',0,'optional_callbacks'}],[],[OptionalList|[]]}|[]]]}|[]] end
'make_list'/1 = fun (_0) -> case _0 of <[]> when 'true' -> {'nil',0}
<[{Name,Arity}|Rest]> when 'true' -> let <_1> = apply 'make_list'/1 (Rest) in {'cons',0,{'tuple',0,[{'atom',0,Name}|[{'integer',0,Arity}|[]]]},_1}
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'make_list',1}}] )-|['compiler_generated'] ) end
'module_predef_funcs_mod_info'/1 = fun (_0) -> let <ModAtom> = {'atom',0,_0} in [{'function',0,'module_info',0,[{'clause',0,[],[],[{'call',0,{'remote',0,{'atom',0,'erlang'},{'atom',0,'get_module_info'}},[ModAtom|[]]}|[]]}|[]]}|[{'function',0,'module_info',1,[{'clause',0,[{'var',0,'X'}],[],[{'call',0,{'remote',0,{'atom',0,'erlang'},{'atom',0,'get_module_info'}},[ModAtom|[{'var',0,'X'}]]}|[]]}|[]]}|[]]]
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('erl_internal')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('erl_internal',_0) end