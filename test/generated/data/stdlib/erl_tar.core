module 'erl_tar' ['add'/3,'add'/4,'close'/1,'create'/2,'create'/3,'extract'/1,'extract'/2,'format_error'/1,'init'/3,'module_info'/0,'module_info'/1,'open'/2,'t'/1,'table'/1,'table'/2,'tt'/1] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[107|[101|[114|[110|[101|[108|[45|[54|[46|[53|[46|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[102|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'record' = [{'file_info',[{'typed_record_field',{'record_field',26,{'atom',26,'size'}},{'type',26,'union',[{'type',26,'non_neg_integer',[]}|[{'atom',26,'undefined'}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'type'}},{'type',27,'union',[{'atom',27,'device'}|[{'atom',27,'directory'}|[{'atom',27,'other'}|[{'atom',27,'regular'}|[{'atom',27,'symlink'}|[{'atom',28,'undefined'}]]]]]]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'access'}},{'type',29,'union',[{'atom',29,'read'}|[{'atom',29,'write'}|[{'atom',29,'read_write'}|[{'atom',29,'none'}|[{'atom',29,'undefined'}]]]]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'atime'}},{'type',30,'union',[{'remote_type',30,[{'atom',30,'file'}|[{'atom',30,'date_time'}|[[]]]]}|[{'type',30,'non_neg_integer',[]}|[{'atom',30,'undefined'}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'mtime'}},{'type',34,'union',[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}|[{'atom',34,'undefined'}]]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'ctime'}},{'type',36,'union',[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'date_time'}|[[]]]]}|[{'type',36,'non_neg_integer',[]}|[{'atom',36,'undefined'}]]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'mode'}},{'type',42,'union',[{'type',42,'non_neg_integer',[]}|[{'atom',42,'undefined'}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'links'}},{'type',46,'union',[{'type',46,'non_neg_integer',[]}|[{'atom',46,'undefined'}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'major_device'}},{'type',49,'union',[{'type',49,'non_neg_integer',[]}|[{'atom',49,'undefined'}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'minor_device'}},{'type',55,'union',[{'type',55,'non_neg_integer',[]}|[{'atom',55,'undefined'}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'inode'}},{'type',57,'union',[{'type',57,'non_neg_integer',[]}|[{'atom',57,'undefined'}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'uid'}},{'type',58,'union',[{'type',58,'non_neg_integer',[]}|[{'atom',58,'undefined'}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'gid'}},{'type',59,'union',[{'type',59,'non_neg_integer',[]}|[{'atom',59,'undefined'}]]}}]]]]]]]]]]]]]}]
, 'record' = [{'file_descriptor',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'module',[]}}|[{'typed_record_field',{'record_field',64,{'atom',64,'data'}},{'type',64,'term',[]}}]]}]
, 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],41}]
, 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[104|[114|[108]]]]]]]]]]]]]]],1}]
, 'record' = [{'add_opts',[{'record_field',22,{'atom',22,'read_info'}}|[{'record_field',23,{'atom',23,'chunk_size'},{'integer',23,0}}|[{'record_field',24,{'atom',24,'verbose'},{'atom',24,'false'}}|[{'record_field',25,{'atom',25,'atime'},{'atom',25,'undefined'}}|[{'record_field',26,{'atom',26,'mtime'},{'atom',26,'undefined'}}|[{'record_field',27,{'atom',27,'ctime'},{'atom',27,'undefined'}}|[{'record_field',28,{'atom',28,'uid'},{'integer',28,0}}|[{'record_field',29,{'atom',29,'gid'},{'integer',29,0}}]]]]]]]]}]
, 'type' = [{'add_opts',{'type',30,'record',[{'atom',30,'add_opts'}]},[]}]
, 'record' = [{'read_opts',[{'typed_record_field',{'record_field',34,{'atom',34,'cwd'}},{'type',34,'string',[]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'keep_old_files'},{'atom',35,'false'}},{'type',35,'boolean',[]}}|[{'record_field',36,{'atom',36,'files'},{'atom',36,'all'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'output'},{'atom',37,'file'}},{'type',37,'union',[{'atom',37,'file'}|[{'atom',37,'memory'}]]}}|[{'record_field',38,{'atom',38,'open_mode'},{'nil',38}}|[{'typed_record_field',{'record_field',39,{'atom',39,'verbose'},{'atom',39,'false'}},{'type',39,'boolean',[]}}]]]]]]}]
, 'type' = [{'read_opts',{'type',40,'record',[{'atom',40,'read_opts'}]},[]}]
, 'type' = [{'add_opt',{'type',42,'union',[{'atom',42,'dereference'}|[{'atom',43,'verbose'}|[{'type',44,'tuple',[{'atom',44,'chunks'}|[{'type',44,'pos_integer',[]}]]}|[{'type',45,'tuple',[{'atom',45,'atime'}|[{'type',45,'non_neg_integer',[]}]]}|[{'type',46,'tuple',[{'atom',46,'mtime'}|[{'type',46,'non_neg_integer',[]}]]}|[{'type',47,'tuple',[{'atom',47,'ctime'}|[{'type',47,'non_neg_integer',[]}]]}|[{'type',48,'tuple',[{'atom',48,'uid'}|[{'type',48,'non_neg_integer',[]}]]}|[{'type',49,'tuple',[{'atom',49,'gid'}|[{'type',49,'non_neg_integer',[]}]]}]]]]]]]]},[]}]
, 'type' = [{'name_in_archive',{'type',51,'string',[]},[]}]
, 'type' = [{'extract_opt',{'type',53,'union',[{'type',53,'tuple',[{'atom',53,'cwd'}|[{'type',53,'string',[]}]]}|[{'type',54,'tuple',[{'atom',54,'files'}|[{'type',54,'list',[{'user_type',54,'name_in_archive',[]}]}]]}|[{'atom',55,'compressed'}|[{'atom',56,'cooked'}|[{'atom',57,'memory'}|[{'atom',58,'keep_old_files'}|[{'atom',59,'verbose'}]]]]]]]},[]}]
, 'type' = [{'create_opt',{'type',61,'union',[{'atom',61,'compressed'}|[{'atom',62,'cooked'}|[{'atom',63,'dereference'}|[{'atom',64,'verbose'}]]]]},[]}]
, 'type' = [{'filelist',{'type',66,'list',[{'type',66,'union',[{'remote_type',66,[{'atom',66,'file'}|[{'atom',66,'filename'}|[[]]]]}|[{'type',67,'tuple',[{'user_type',67,'name_in_archive',[]}|[{'remote_type',67,[{'atom',67,'file'}|[{'atom',67,'filename_all'}|[[]]]]}]]}]]}]},[]}]
, 'type' = [{'tar_time',{'type',69,'non_neg_integer',[]},[]}]
, 'record' = [{'tar_header',[{'typed_record_field',{'record_field',73,{'atom',73,'name'},{'string',73,[]}},{'user_type',73,'name_in_archive',[]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'mode'},{'integer',74,33188}},{'type',74,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'uid'},{'integer',75,0}},{'type',75,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'gid'},{'integer',76,0}},{'type',76,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'size'},{'integer',77,0}},{'type',77,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'mtime'}},{'user_type',78,'tar_time',[]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'typeflag'}},{'type',79,'char',[]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'linkname'},{'string',80,[]}},{'user_type',80,'name_in_archive',[]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'uname'},{'string',81,[]}},{'type',81,'string',[]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'gname'},{'string',82,[]}},{'type',82,'string',[]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'devmajor'},{'integer',83,0}},{'type',83,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',84,{'atom',84,'devminor'},{'integer',84,0}},{'type',84,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'atime'}},{'user_type',85,'tar_time',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'ctime'}},{'user_type',86,'tar_time',[]}}]]]]]]]]]]]]]]}]
, 'type' = [{'tar_header',{'type',88,'record',[{'atom',88,'tar_header'}]},[]}]
, 'record' = [{'sparse_entry',[{'typed_record_field',{'record_field',92,{'atom',92,'offset'},{'integer',92,0}},{'type',92,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',93,{'atom',93,'num_bytes'},{'integer',93,0}},{'type',93,'non_neg_integer',[]}}]]}]
, 'type' = [{'sparse_entry',{'type',94,'record',[{'atom',94,'sparse_entry'}]},[]}]
, 'record' = [{'sparse_array',[{'typed_record_field',{'record_field',97,{'atom',97,'entries'},{'nil',97}},{'type',97,'list',[{'user_type',97,'sparse_entry',[]}]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'is_extended'},{'atom',98,'false'}},{'type',98,'boolean',[]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'max_entries'},{'integer',99,0}},{'type',99,'non_neg_integer',[]}}]]]}]
, 'type' = [{'sparse_array',{'type',100,'record',[{'atom',100,'sparse_array'}]},[]}]
, 'record' = [{'header_v7',[{'typed_record_field',{'record_field',103,{'atom',103,'name'}},{'type',103,'binary',[]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'mode'}},{'type',104,'binary',[]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'uid'}},{'type',105,'binary',[]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'gid'}},{'type',106,'binary',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'size'}},{'type',107,'binary',[]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'mtime'}},{'type',108,'binary',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'checksum'}},{'type',109,'binary',[]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'typeflag'}},{'type',110,'byte',[]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'linkname'}},{'type',111,'binary',[]}}]]]]]]]]]}]
, 'type' = [{'header_v7',{'type',112,'record',[{'atom',112,'header_v7'}]},[]}]
, 'record' = [{'header_gnu',[{'typed_record_field',{'record_field',115,{'atom',115,'header_v7'}},{'user_type',115,'header_v7',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'magic'}},{'type',116,'binary',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'version'}},{'type',117,'binary',[]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'uname'}},{'type',118,'binary',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'gname'}},{'type',119,'binary',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'devmajor'}},{'type',120,'binary',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'devminor'}},{'type',121,'binary',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'atime'}},{'type',122,'binary',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'ctime'}},{'type',123,'binary',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'sparse'}},{'user_type',124,'sparse_array',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'real_size'}},{'type',125,'binary',[]}}]]]]]]]]]]]}]
, 'type' = [{'header_gnu',{'type',126,'record',[{'atom',126,'header_gnu'}]},[]}]
, 'record' = [{'header_star',[{'typed_record_field',{'record_field',129,{'atom',129,'header_v7'}},{'user_type',129,'header_v7',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'magic'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'version'}},{'type',131,'binary',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'uname'}},{'type',132,'binary',[]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'gname'}},{'type',133,'binary',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'devmajor'}},{'type',134,'binary',[]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'devminor'}},{'type',135,'binary',[]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'prefix'}},{'type',136,'binary',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'atime'}},{'type',137,'binary',[]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'ctime'}},{'type',138,'binary',[]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'trailer'}},{'type',139,'binary',[]}}]]]]]]]]]]]}]
, 'type' = [{'header_star',{'type',140,'record',[{'atom',140,'header_star'}]},[]}]
, 'record' = [{'header_ustar',[{'typed_record_field',{'record_field',143,{'atom',143,'header_v7'}},{'user_type',143,'header_v7',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'magic'}},{'type',144,'binary',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'version'}},{'type',145,'binary',[]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'uname'}},{'type',146,'binary',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'gname'}},{'type',147,'binary',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'devmajor'}},{'type',148,'binary',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'devminor'}},{'type',149,'binary',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'prefix'}},{'type',150,'binary',[]}}]]]]]]]]}]
, 'type' = [{'header_ustar',{'type',151,'record',[{'atom',151,'header_ustar'}]},[]}]
, 'type' = [{'header_fields',{'type',153,'union',[{'user_type',153,'header_v7',[]}|[{'user_type',154,'header_gnu',[]}|[{'user_type',155,'header_star',[]}|[{'user_type',156,'header_ustar',[]}]]]]},[]}]
, 'record' = [{'reader',[{'typed_record_field',{'record_field',161,{'atom',161,'handle'}},{'user_type',161,'user_data',[]}}|[{'typed_record_field',{'record_field',162,{'atom',162,'access'}},{'type',162,'union',[{'atom',162,'read'}|[{'atom',162,'write'}|[{'atom',162,'ram'}]]]}}|[{'typed_record_field',{'record_field',163,{'atom',163,'pos'},{'integer',163,0}},{'type',163,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',164,{'atom',164,'func'}},{'user_type',164,'file_op',[]}}]]]]}]
, 'opaque' = [{'tar_descriptor',{'type',166,'record',[{'atom',166,'reader'}]},[]}]
, 'export_type' = [{'tar_descriptor',0}]
, 'record' = [{'reg_file_reader',[{'typed_record_field',{'record_field',172,{'atom',172,'handle'}},{'user_type',172,'tar_descriptor',[]}}|[{'record_field',173,{'atom',173,'num_bytes'},{'integer',173,0}}|[{'record_field',174,{'atom',174,'pos'},{'integer',174,0}}|[{'record_field',175,{'atom',175,'size'},{'integer',175,0}}]]]]}]
, 'type' = [{'reg_file_reader',{'type',177,'record',[{'atom',177,'reg_file_reader'}]},[]}]
, 'record' = [{'sparse_file_reader',[{'typed_record_field',{'record_field',181,{'atom',181,'handle'}},{'user_type',181,'tar_descriptor',[]}}|[{'record_field',182,{'atom',182,'num_bytes'},{'integer',182,0}}|[{'record_field',183,{'atom',183,'pos'},{'integer',183,0}}|[{'record_field',184,{'atom',184,'size'},{'integer',184,0}}|[{'record_field',185,{'atom',185,'sparse_map'},{'record',185,'sparse_array',[]}}]]]]]}]
, 'type' = [{'sparse_file_reader',{'type',187,'record',[{'atom',187,'sparse_file_reader'}]},[]}]
, 'type' = [{'descriptor_type',{'type',190,'union',[{'user_type',190,'tar_descriptor',[]}|[{'user_type',190,'reg_file_reader',[]}|[{'user_type',190,'sparse_file_reader',[]}]]]},[]}]
, 'type' = [{'user_data',{'type',191,'term',[]},[]}]
, 'type' = [{'file_op',{'type',194,'fun',[{'type',194,'product',[{'type',194,'union',[{'atom',194,'write'}|[{'atom',194,'close'}|[{'atom',194,'read2'}|[{'atom',194,'position'}]]]]}|[{'type',195,'union',[{'type',195,'tuple',[{'user_type',195,'user_data',[]}|[{'type',195,'iodata',[]}]]}|[{'user_type',195,'user_data',[]}|[{'type',195,'tuple',[{'user_type',195,'user_data',[]}|[{'type',195,'non_neg_integer',[]}]]}|[{'type',196,'tuple',[{'user_type',196,'user_data',[]}|[{'type',196,'non_neg_integer',[]}]]}]]]]}]]}|[{'type',197,'union',[{'atom',197,'ok'}|[{'atom',197,'eof'}|[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'union',[{'type',197,'string',[]}|[{'type',197,'binary',[]}]]}]]}|[{'type',197,'tuple',[{'atom',197,'ok'}|[{'type',197,'non_neg_integer',[]}]]}|[{'type',198,'tuple',[{'atom',198,'error'}|[{'type',198,'term',[]}]]}]]]]]}]]},[]}]
, 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[116|[97|[114|[46|[101|[114|[108]]]]]]]]]]]]]]],42}]
, 'spec' = [{{'format_error',1},[{'type',44,'fun',[{'type',44,'product',[{'type',44,'term',[]}]}|[{'type',44,'string',[]}]]}]}]
, 'spec' = [{{'init',3},[{'type',82,'fun',[{'type',82,'product',[{'ann_type',82,[{'var',82,'UserData'}|[{'user_type',82,'user_data',[]}]]}|[{'type',82,'union',[{'atom',82,'write'}|[{'atom',82,'read'}]]}|[{'user_type',82,'file_op',[]}]]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'user_type',83,'tar_descriptor',[]}]]}|[{'type',83,'tuple',[{'atom',83,'error'}|[{'atom',83,'badarg'}]]}]]}]]}]}]
, 'spec' = [{{'extract',1},[{'type',93,'fun',[{'type',93,'product',[{'ann_type',93,[{'var',93,'Open'}|[{'user_type',93,'open_type',[]}]]}]}|[{'type',93,'union',[{'atom',93,'ok'}|[{'type',93,'tuple',[{'atom',93,'error'}|[{'type',93,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'extract',2},[{'type',106,'fun',[{'type',106,'product',[{'ann_type',106,[{'var',106,'Open'}|[{'user_type',106,'open_type',[]}]]}|[{'type',106,'list',[{'user_type',106,'extract_opt',[]}]}]]}|[{'type',107,'union',[{'type',107,'tuple',[{'atom',107,'ok'}|[{'type',107,'list',[{'type',107,'tuple',[{'type',107,'string',[]}|[{'type',107,'binary',[]}]]}]}]]}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'type',108,'term',[]}]]}|[{'atom',109,'ok'}]]]}]]}]}]
, 'type' = [{'typeflag',{'type',169,'union',[{'atom',169,'regular'}|[{'atom',169,'link'}|[{'atom',169,'symlink'}|[{'atom',170,'char'}|[{'atom',170,'block'}|[{'atom',170,'directory'}|[{'atom',171,'fifo'}|[{'atom',171,'reserved'}|[{'atom',171,'unknown'}]]]]]]]]]},[]}]
, 'type' = [{'mode',{'type',172,'non_neg_integer',[]},[]}]
, 'type' = [{'uid',{'type',173,'non_neg_integer',[]},[]}]
, 'type' = [{'gid',{'type',174,'non_neg_integer',[]},[]}]
, 'type' = [{'tar_entry',{'type',176,'tuple',[{'ann_type',176,[{'var',176,'Name'}|[{'user_type',176,'name_in_archive',[]}]]}|[{'ann_type',177,[{'var',177,'Type'}|[{'user_type',177,'typeflag',[]}]]}|[{'ann_type',178,[{'var',178,'Size'}|[{'type',178,'non_neg_integer',[]}]]}|[{'ann_type',179,[{'var',179,'MTime'}|[{'user_type',179,'tar_time',[]}]]}|[{'ann_type',180,[{'var',180,'Mode'}|[{'user_type',180,'mode',[]}]]}|[{'ann_type',181,[{'var',181,'Uid'}|[{'user_type',181,'uid',[]}]]}|[{'ann_type',182,[{'var',182,'Gid'}|[{'user_type',182,'gid',[]}]]}]]]]]]]},[]}]
, 'spec' = [{{'table',1},[{'type',185,'fun',[{'type',185,'product',[{'ann_type',185,[{'var',185,'Open'}|[{'user_type',185,'open_type',[]}]]}]}|[{'type',185,'union',[{'type',185,'tuple',[{'atom',185,'ok'}|[{'type',185,'list',[{'user_type',185,'name_in_archive',[]}]}]]}|[{'type',185,'tuple',[{'atom',185,'error'}|[{'type',185,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'table',2},[{'type',191,'fun',[{'type',191,'product',[{'ann_type',191,[{'var',191,'Open'}|[{'user_type',191,'open_type',[]}]]}|[{'type',191,'list',[{'type',191,'union',[{'atom',191,'compressed'}|[{'atom',191,'verbose'}|[{'atom',191,'cooked'}]]]}]}]]}|[{'type',192,'union',[{'type',192,'tuple',[{'atom',192,'ok'}|[{'type',192,'list',[{'type',192,'union',[{'user_type',192,'name_in_archive',[]}|[{'user_type',192,'tar_entry',[]}]]}]}]]}|[{'type',192,'tuple',[{'atom',192,'error'}|[{'type',192,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'t',1},[{'type',232,'fun',[{'type',232,'product',[{'remote_type',232,[{'atom',232,'file'}|[{'atom',232,'filename'}|[[]]]]}]}|[{'type',232,'union',[{'atom',232,'ok'}|[{'type',232,'tuple',[{'atom',232,'error'}|[{'type',232,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'tt',1},[{'type',242,'fun',[{'type',242,'product',[{'user_type',242,'open_type',[]}]}|[{'type',242,'union',[{'atom',242,'ok'}|[{'type',242,'tuple',[{'atom',242,'error'}|[{'type',242,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'print_header',1},[{'type',252,'fun',[{'type',252,'product',[{'user_type',252,'tar_entry',[]}]}|[{'atom',252,'ok'}]]}]}]
, 'type' = [{'open_type',{'type',304,'union',[{'remote_type',304,[{'atom',304,'file'}|[{'atom',304,'filename_all'}|[[]]]]}|[{'type',305,'tuple',[{'atom',305,'binary'}|[{'type',305,'binary',[]}]]}|[{'type',306,'tuple',[{'atom',306,'file'}|[{'remote_type',306,[{'atom',306,'file'}|[{'atom',306,'io_device'}|[[]]]]}]]}]]]},[]}]
, 'spec' = [{{'open',2},[{'type',307,'fun',[{'type',307,'product',[{'ann_type',307,[{'var',307,'Open'}|[{'user_type',307,'open_type',[]}]]}|[{'type',307,'list',[{'type',307,'union',[{'atom',307,'write'}|[{'atom',307,'compressed'}|[{'atom',307,'cooked'}]]]}]}]]}|[{'type',308,'union',[{'type',308,'tuple',[{'atom',308,'ok'}|[{'user_type',308,'tar_descriptor',[]}]]}|[{'type',308,'tuple',[{'atom',308,'error'}|[{'type',308,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'close',1},[{'type',385,'fun',[{'type',385,'product',[{'ann_type',385,[{'var',385,'TarDescriptor'}|[{'user_type',385,'tar_descriptor',[]}]]}]}|[{'type',385,'union',[{'atom',385,'ok'}|[{'type',385,'tuple',[{'atom',385,'error'}|[{'type',385,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'create',2},[{'type',406,'fun',[{'type',406,'product',[{'remote_type',406,[{'atom',406,'file'}|[{'atom',406,'filename_all'}|[[]]]]}|[{'user_type',406,'filelist',[]}]]}|[{'type',406,'union',[{'atom',406,'ok'}|[{'type',406,'tuple',[{'atom',406,'error'}|[{'type',406,'tuple',[{'type',406,'string',[]}|[{'type',406,'term',[]}]]}]]}]]}]]}]}]
, 'spec' = [{{'create',3},[{'type',412,'fun',[{'type',412,'product',[{'remote_type',412,[{'atom',412,'file'}|[{'atom',412,'filename_all'}|[[]]]]}|[{'user_type',412,'filelist',[]}|[{'type',412,'list',[{'user_type',412,'create_opt',[]}]}]]]}|[{'type',413,'union',[{'atom',413,'ok'}|[{'type',413,'tuple',[{'atom',413,'error'}|[{'type',413,'term',[]}]]}|[{'type',413,'tuple',[{'atom',413,'error'}|[{'type',413,'tuple',[{'type',413,'string',[]}|[{'type',413,'term',[]}]]}]]}]]]}]]}]}]
, 'type' = [{'add_type',{'type',444,'union',[{'user_type',444,'name_in_archive',[]}|[{'type',445,'tuple',[{'user_type',445,'name_in_archive',[]}|[{'remote_type',445,[{'atom',445,'file'}|[{'atom',445,'filename_all'}|[[]]]]}]]}]]},[]}]
, 'spec' = [{{'add',3},[{'type',446,'bounded_fun',[{'type',446,'fun',[{'type',446,'product',[{'var',446,'TarDescriptor'}|[{'var',446,'AddType'}|[{'var',446,'Options'}]]]}|[{'type',446,'union',[{'atom',446,'ok'}|[{'type',446,'tuple',[{'atom',446,'error'}|[{'type',446,'term',[]}]]}]]}]]}|[[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'TarDescriptor'}|[{'user_type',447,'tar_descriptor',[]}]]]]}|[{'type',448,'constraint',[{'atom',448,'is_subtype'}|[[{'var',448,'AddType'}|[{'user_type',448,'add_type',[]}]]]]}|[{'type',449,'constraint',[{'atom',449,'is_subtype'}|[[{'var',449,'Options'}|[{'type',449,'list',[{'user_type',449,'add_opt',[]}]}]]]]}]]]]]}]}]
, 'spec' = [{{'add',4},[{'type',459,'bounded_fun',[{'type',459,'fun',[{'type',459,'product',[{'var',459,'TarDescriptor'}|[{'var',459,'Filename'}|[{'var',459,'NameInArchive'}|[{'var',459,'Options'}]]]]}|[{'type',460,'union',[{'atom',460,'ok'}|[{'type',460,'tuple',[{'atom',460,'error'}|[{'type',460,'term',[]}]]}]]}]]}|[[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'TarDescriptor'}|[{'user_type',461,'tar_descriptor',[]}]]]]}|[{'type',462,'constraint',[{'atom',462,'is_subtype'}|[[{'var',462,'Filename'}|[{'remote_type',462,[{'atom',462,'file'}|[{'atom',462,'filename_all'}|[[]]]]}]]]]}|[{'type',463,'constraint',[{'atom',463,'is_subtype'}|[[{'var',463,'NameInArchive'}|[{'user_type',463,'name_in_archive',[]}]]]]}|[{'type',464,'constraint',[{'atom',464,'is_subtype'}|[[{'var',464,'Options'}|[{'type',464,'list',[{'user_type',464,'add_opt',[]}]}]]]]}]]]]]]}]}]
, 'spec' = [{{'get_format',1},[{'type',1001,'fun',[{'type',1001,'product',[{'type',1001,'binary',[]}]}|[{'type',1001,'union',[{'type',1001,'tuple',[{'atom',1001,'ok'}|[{'type',1001,'pos_integer',[]}|[{'user_type',1001,'header_v7',[]}]]]}|[{'integer',1002,0}|[{'type',1003,'tuple',[{'atom',1003,'error'}|[{'type',1003,'term',[]}]]}]]]}]]}]}]
, 'spec' = [{{'parse_sparse_map',2},[{'type',1155,'fun',[{'type',1155,'product',[{'user_type',1155,'header_gnu',[]}|[{'user_type',1155,'descriptor_type',[]}]]}|[{'type',1156,'tuple',[{'type',1156,'list',[{'user_type',1156,'sparse_entry',[]}]}|[{'user_type',1156,'descriptor_type',[]}]]}]]}]}]
, 'spec' = [{{'parse_numeric',1},[{'type',1205,'fun',[{'type',1205,'product',[{'type',1205,'binary',[]}]}|[{'type',1205,'non_neg_integer',[]}]]}]}]
, 'spec' = [{{'merge_pax',2},[{'type',1434,'fun',[{'type',1434,'product',[{'user_type',1434,'tar_header',[]}|[{'type',1434,'map',[{'type',1434,'map_field_assoc',[{'type',1434,'binary',[]}|[{'type',1434,'binary',[]}]]}]}]]}|[{'user_type',1434,'tar_header',[]}]]}]}]
, 'spec' = [{{'parse_pax_time',1},[{'type',1472,'fun',[{'type',1472,'product',[{'type',1472,'binary',[]}]}|[{'user_type',1472,'tar_time',[]}]]}]}]
, 'spec' = [{{'do_close',1},[{'type',1919,'fun',[{'type',1919,'product',[{'user_type',1919,'tar_descriptor',[]}]}|[{'type',1919,'union',[{'atom',1919,'ok'}|[{'type',1919,'tuple',[{'atom',1919,'error'}|[{'type',1919,'term',[]}]]}]]}]]}]}] ] 'format_error'/1 = fun (_0) -> case _0 of <'invalid_tar_checksum'> when 'true' -> [67|[104|[101|[99|[107|[115|[117|[109|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]
<'bad_header'> when 'true' -> [85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[116|[97|[114|[32|[104|[101|[97|[100|[101|[114|[32|[102|[111|[114|[109|[97|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'bad_header',Reason}> when 'true' -> let <_1> = call 'io_lib':'format' ([85|[110|[114|[101|[99|[111|[103|[110|[105|[122|[101|[100|[32|[116|[97|[114|[32|[104|[101|[97|[100|[101|[114|[32|[102|[111|[114|[109|[97|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Reason|[]]) in call 'lists':'flatten' (_1)
<{'invalid_header','negative_size'}> when 'true' -> [73|[110|[118|[97|[108|[105|[100|[32|[104|[101|[97|[100|[101|[114|[58|[32|[110|[101|[103|[97|[116|[105|[118|[101|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'invalid_sparse_header_size'> when 'true' -> [73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[104|[101|[97|[100|[101|[114|[58|[32|[110|[101|[103|[97|[116|[105|[118|[101|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'invalid_sparse_map_entry'> when 'true' -> [73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[101|[110|[116|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]
<{'invalid_sparse_map_entry',Reason}> when 'true' -> let <_2> = call 'io_lib':'format' ([73|[110|[118|[97|[108|[105|[100|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[101|[110|[116|[114|[121|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Reason|[]]) in call 'lists':'flatten' (_2)
<'invalid_end_of_archive'> when 'true' -> [73|[110|[118|[97|[108|[105|[100|[32|[101|[110|[100|[32|[111|[102|[32|[97|[114|[99|[104|[105|[118|[101]]]]]]]]]]]]]]]]]]]]]]
<'eof'> when 'true' -> [85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]
<'integer_overflow'> when 'true' -> [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[112|[97|[114|[115|[101|[32|[110|[117|[109|[101|[114|[105|[99|[58|[32|[105|[110|[116|[101|[103|[101|[114|[32|[111|[118|[101|[114|[102|[108|[111|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'misaligned_read',Pos}> when 'true' -> let <_3> = call 'io_lib':'format' ([82|[101|[97|[100|[32|[97|[32|[98|[108|[111|[99|[107|[32|[119|[104|[105|[99|[104|[32|[119|[97|[115|[32|[109|[105|[115|[97|[108|[105|[103|[110|[101|[100|[58|[32|[98|[108|[111|[99|[107|[95|[115|[105|[122|[101|[61|[126|[112|[32|[112|[111|[115|[61|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[512|[Pos|[]]]) in call 'lists':'flatten' (_3)
<'invalid_gnu_1_0_sparsemap'> when 'true' -> [73|[110|[118|[97|[108|[105|[100|[32|[71|[78|[85|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[40|[118|[101|[114|[115|[105|[111|[110|[32|[49|[46|[48|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'invalid_gnu_0_1_sparsemap',Format}> when 'true' -> let <_4> = call 'io_lib':'format' ([73|[110|[118|[97|[108|[105|[100|[32|[71|[78|[85|[32|[115|[112|[97|[114|[115|[101|[32|[109|[97|[112|[32|[40|[118|[101|[114|[115|[105|[111|[110|[32|[126|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Format|[]]) in call 'lists':'flatten' (_4)
<'unsafe_path'> when 'true' -> [84|[104|[101|[32|[112|[97|[116|[104|[32|[112|[111|[105|[110|[116|[115|[32|[97|[98|[111|[118|[101|[32|[116|[104|[101|[32|[99|[117|[114|[114|[101|[110|[116|[32|[119|[111|[114|[107|[105|[110|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{Name,Reason}> when 'true' -> let <_5> = apply 'format_error'/1 (Reason) in let <_6> = call 'io_lib':'format' ([126|[116|[115|[58|[32|[126|[116|[115]]]]]]]],[Name|[_5|[]]]) in call 'lists':'flatten' (_6)
<Atom> when call 'erlang':'is_atom' (_0) -> call 'file':'format_error' (Atom)
<Term> when 'true' -> let <_7> = call 'io_lib':'format' ([126|[116|[112]]],[Term|[]]) in call 'lists':'flatten' (_7) end
'init'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <UserData,AccessMode,Fun> when call 'erlang':'is_function' (Fun,2) -> let <Reader> = {'reader',UserData,AccessMode,0,Fun} in case apply 'do_position'/2 (Reader,{'cur',0}) of <{'ok',Pos,Reader2}> when 'true' -> case Reader2 of <{'reader',_11,_12,_13,_14}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,Reader2,Pos) in {'ok',_7}
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<_X_UserData,_X_AccessMode,_X_Fun> when 'true' -> {'error','badarg'} end
'extract'/1 = fun (_0) -> apply 'extract'/2 (_0,[])
'extract'/2 = fun (_0,_1) -> case <_0,_1> of <_@r0 = {'binary',Bin},Opts> when call 'erlang':'is_list' (Opts) -> apply 'do_extract'/2 (_@r0,Opts)
<_@r1 = {'file',Fd},Opts> when call 'erlang':'is_list' (Opts) -> apply 'do_extract'/2 (_@r1,Opts)
<Reader = {'reader',_8,_9,_10,_11},Opts> when call 'erlang':'is_list' (Opts) -> apply 'do_extract'/2 (Reader,Opts)
<Name,Opts> when let <_2> = call 'erlang':'is_list' (Name) in let <_3> = call 'erlang':'is_binary' (Name) in let <_4> = call 'erlang':'is_list' (Opts) in let <_5> = call 'erlang':'and' (_3,_4) in call 'erlang':'or' (_2,_5) -> apply 'do_extract'/2 (Name,Opts)
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'extract',2}}] )-|['compiler_generated'] ) end
'do_extract'/2 = fun (_0,_1) -> case <_0,_1> of <Handle,Opts> when call 'erlang':'is_list' (Opts) -> let <Opts2> = apply 'extract_opts'/1 (Opts) in let <_9> = case <> of <> when (try (let <_5> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Opts2,('read_opts'-|['compiler_generated'] ),(7-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_3-|['compiler_generated'] )> when 'true' -> (_3-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_6> = call 'erlang':'=:=' ((_5-|['compiler_generated'] ),'true') in let <_7> = call 'erlang':'element' (5,Opts2) in let <_8> = call 'erlang':'=:=' (_7,'memory') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_6,_8)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> []
<> when 'true' -> 'ok' end in let <_11> = 'extract1'/4 in apply 'foldl_read'/4 (Handle,_11,_9,Opts2)
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'do_extract',2}}] )-|['compiler_generated'] ) end
'extract1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'eof',Reader,_13,Acc> when call 'erlang':'is_list' (Acc) -> let <_4> = call 'lists':'reverse' (Acc) in {'ok',{'ok',_4},Reader}
<'eof',Reader,_14,'leading_slash'> when 'true' -> do call 'error_logger':'info_msg' ([101|[114|[108|[95|[116|[97|[114|[58|[32|[114|[101|[109|[111|[118|[101|[100|[32|[108|[101|[97|[100|[105|[110|[103|[32|[39|[47|[39|[32|[102|[114|[111|[109|[32|[109|[101|[109|[98|[101|[114|[32|[110|[97|[109|[101|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) {'ok','ok',Reader}
<'eof',Reader,_15,Acc> when 'true' -> {'ok',Acc,Reader}
<Header = {'tar_header',Name,_16,_17,_18,Size,_19,_20,_21,_22,_23,_24,_25,_26,_27},Reader0,Opts,Acc0> when 'true' -> case apply 'check_extract'/2 (Name,Opts) of <'true'> when 'true' -> case apply 'do_read'/2 (Reader0,Size) of <{'ok',Bin,Reader1}> when 'true' -> let <Acc> = apply 'extract2'/4 (Header,Bin,Opts,Acc0) in {'ok',Acc,Reader1}
<Err = {'error',_28}> when 'true' -> call 'erlang':'throw' (Err)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<'false'> when 'true' -> let <_7> = apply 'skip_file'/1 (Reader0) in {'ok',Acc0,_7}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9})-|[{'function_name',{'extract1',4}}] )-|['compiler_generated'] ) end
'extract2'/4 = fun (_0,_1,_2,_3) -> case apply 'write_extracted_element'/3 (_0,_1,_2) of <'ok'> when 'true' -> case _0 of <{'tar_header',[47|_10],_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}> when 'true' -> 'leading_slash'
<{'tar_header',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> _3
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<{'ok',NameBin}> when call 'erlang':'is_list' (_3) -> [NameBin|_3]
<Err = {'error',_38}> when 'true' -> call 'erlang':'throw' (Err)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'check_extract'/2 = fun (_0,_1) -> case <_0,_1> of <_4,{'read_opts',_5,_6,'all',_7,_8,_9}> when 'true' -> 'true'
<Name,{'read_opts',_10,_11,Files,_12,_13,_14}> when 'true' -> call 'ordsets':'is_element' (Name,Files)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'check_extract',2}}] )-|['compiler_generated'] ) end
'table'/1 = fun (_0) -> apply 'table'/2 (_0,[])
'table'/2 = fun (_0,_1) -> case <_0,_1> of <Name,Opts> when call 'erlang':'is_list' (Opts) -> let <_3> = 'table1'/4 in let <_2> = apply 'table_opts'/1 (Opts) in apply 'foldl_read'/4 (Name,_3,[],_2)
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'table',2}}] )-|['compiler_generated'] ) end
'table1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'eof',Reader,_11,Result> when 'true' -> let <_4> = call 'lists':'reverse' (Result) in {'ok',{'ok',_4},Reader}
<Header = {'tar_header',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25},Reader,{'read_opts',_26,_27,_28,_29,_30,Verbose},Result> when 'true' -> let <Attrs> = apply 'table1_attrs'/2 (Header,Verbose) in let <Reader2> = apply 'skip_file'/1 (Reader) in {'ok',[Attrs|Result],Reader2}
(<_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|[{'function_name',{'table1',4}}] )-|['compiler_generated'] ) end
'table1_attrs'/2 = fun (_0,_1) -> case <_0,_1> of <Header = {'tar_header',_20,Mode,_21,_22,_23,_24,Typeflag,_25,_26,_27,_28,_29,_30,_31},'true'> when 'true' -> let <Type> = apply 'typeflag'/1 (Typeflag) in (case Header of (<({'tar_header',_rec1,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_46,_47,_48,_49,_50,_rec2,_51,_52,_53,_54,_55,_56,_57,_58}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_60,_61,_rec3,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_74,_75,_76,_rec4,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_88,_89,_90,_91,_rec5,_92,_93,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> {_rec1,Type,_rec5,_rec2,Mode,_rec3,_rec4}-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_87> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'tar_header',Name,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_X_Verbose> when 'true' -> Name
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'table1_attrs',2}}] )-|['compiler_generated'] ) end
'typeflag'/1 = fun (_0) -> case _0 of <48> when 'true' -> 'regular'
<0> when 'true' -> 'regular'
<83> when 'true' -> 'regular'
<55> when 'true' -> 'regular'
<49> when 'true' -> 'link'
<50> when 'true' -> 'symlink'
<51> when 'true' -> 'char'
<52> when 'true' -> 'block'
<53> when 'true' -> 'directory'
<54> when 'true' -> 'fifo'
<_2> when 'true' -> 'unknown' end
't'/1 = fun (_0) -> case _0 of <Name> when let <_1> = call 'erlang':'is_list' (_0) in let <_2> = call 'erlang':'is_binary' (_0) in call 'erlang':'or' (_1,_2) -> case apply 'table'/1 (Name) of <{'ok',List}> when 'true' -> let <_6> = fun (_4) -> let <_9> = call 'io':'format' ([126|[116|[115|[10]]]],[_4|[]]) in case _9 of <'ok'> when 'true' -> (_9-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end in call 'lists':'foreach' (_6,List)
<Error> when 'true' -> Error end
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'t',1}}] )-|['compiler_generated'] ) end
'tt'/1 = fun (_0) -> case apply 'table'/2 (_0,['verbose']) of <{'ok',List}> when 'true' -> let <_1> = 'print_header'/1 in call 'lists':'foreach' (_1,List)
<Error> when 'true' -> Error end
'print_header'/1 = fun (_0) -> case _0 of <{Name,Type,Size,Mtime,Mode,Uid,Gid}> when 'true' -> let <_1> = apply 'type_to_string'/1 (Type) in let <_2> = apply 'mode_to_string'/1 (Mode) in let <_3> = apply 'time_to_string'/1 (Mtime) in call 'io':'format' ([126|[115|[126|[115|[32|[126|[52|[119|[47|[126|[45|[52|[119|[32|[126|[55|[119|[32|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]],[_1|[_2|[Uid|[Gid|[Size|[_3|[Name|[]]]]]]]])
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'print_header',1}}] )-|['compiler_generated'] ) end
'type_to_string'/1 = fun (_0) -> case _0 of <'regular'> when 'true' -> [45]
<'directory'> when 'true' -> [100]
<'link'> when 'true' -> [108]
<'symlink'> when 'true' -> [115]
<'char'> when 'true' -> [99]
<'block'> when 'true' -> [98]
<'fifo'> when 'true' -> [102]
<'unknown'> when 'true' -> [63]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'type_to_string',1}}] )-|['compiler_generated'] ) end
'mode_to_string'/1 = fun (_0) -> apply 'mode_to_string'/3 (_0,[120|[119|[114|[120|[119|[114|[120|[119|[114]]]]]]]]],[])
'mode_to_string'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Mode,[C|T],Acc> when try let <_3> = call 'erlang':'band' (Mode,1) in call 'erlang':'=:=' (_3,1) of <Try> -> Try catch <T,R> -> 'false' -> let <_4> = call 'erlang':'bsr' (Mode,1) in apply 'mode_to_string'/3 (_4,T,[C|Acc])
<Mode,[_9|T],Acc> when 'true' -> let <_5> = call 'erlang':'bsr' (Mode,1) in apply 'mode_to_string'/3 (_5,T,[45|Acc])
<_10,[],Acc> when 'true' -> Acc
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'mode_to_string',3}}] )-|['compiler_generated'] ) end
'time_to_string'/1 = fun (_0) -> let <Epoch> = call 'calendar':'datetime_to_gregorian_seconds' ({{1970,1,1},{0,0,0}}) in let <Secs> = call 'erlang':'+' (Epoch,_0) in let <DateTime0> = call 'calendar':'gregorian_seconds_to_datetime' (Secs) in case call 'calendar':'universal_time_to_local_time' (DateTime0) of <{{Y,Mon,Day},{H,Min,_10}}> when 'true' -> let <_6> = apply 'month'/1 (Mon) in let <_7> = apply 'two_d'/1 (H) in let <_8> = apply 'two_d'/1 (Min) in call 'io_lib':'format' ([126|[115|[32|[126|[50|[119|[32|[126|[115|[58|[126|[115|[32|[126|[119]]]]]]]]]]]]]]],[_6|[Day|[_7|[_8|[Y|[]]]]]])
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'two_d'/1 = fun (_0) -> let <_1> = call 'erlang':'+' (_0,100) in let <_2> = call 'erlang':'integer_to_list' (_1) in call 'erlang':'tl' (_2)
'month'/1 = fun (_0) -> case _0 of <1> when 'true' -> [74|[97|[110]]]
<2> when 'true' -> [70|[101|[98]]]
<3> when 'true' -> [77|[97|[114]]]
<4> when 'true' -> [65|[112|[114]]]
<5> when 'true' -> [77|[97|[121]]]
<6> when 'true' -> [74|[117|[110]]]
<7> when 'true' -> [74|[117|[108]]]
<8> when 'true' -> [65|[117|[103]]]
<9> when 'true' -> [83|[101|[112]]]
<10> when 'true' -> [79|[99|[116]]]
<11> when 'true' -> [78|[111|[118]]]
<12> when 'true' -> [68|[101|[99]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'month',1}}] )-|['compiler_generated'] ) end
'open'/2 = fun (_0,_1) -> case <_0,_1> of <_@r0 = {'binary',Bin},Mode> when call 'erlang':'is_binary' (Bin) -> apply 'do_open'/2 (_@r0,Mode)
<_@r1 = {'file',Fd},Mode> when 'true' -> apply 'do_open'/2 (_@r1,Mode)
<Name,Mode> when let <_2> = call 'erlang':'is_list' (Name) in let <_3> = call 'erlang':'is_binary' (Name) in call 'erlang':'or' (_2,_3) -> apply 'do_open'/2 (Name,Mode)
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'open',2}}] )-|['compiler_generated'] ) end
'do_open'/2 = fun (_0,_1) -> case <_0,_1> of <Name,Mode> when call 'erlang':'is_list' (Mode) -> case apply 'open_mode'/1 (Mode) of <{'ok',Access,Raw,Opts}> when 'true' -> apply 'open1'/4 (Name,Access,Raw,Opts)
<{'error',Reason}> when 'true' -> {'error',{Name,Reason}}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'do_open',2}}] )-|['compiler_generated'] ) end
'open1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Handle = {'binary',Bin},'read',_X_Raw,Opts> when call 'erlang':'is_binary' (Bin) -> case call 'file':'open' (Bin,['ram'|['binary'|['read']]]) of <{'ok',File}> when 'true' -> do (case (call ('lists'-|['result_not_wanted'] ):('member'-|['result_not_wanted'] ) (('compressed'-|['result_not_wanted'] ),Opts)-|['result_not_wanted'] ) of <'true'> when 'true' -> (call ('ram_file'-|['result_not_wanted'] ):('uncompress'-|['result_not_wanted'] ) (File)-|['result_not_wanted'] )
(<'false'> when 'true' -> []-|['compiler_generated'] )
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['list_comprehension'] ) let <_8> = 'file_op'/2 in {'ok',{'reader',File,'read',0,_8}}
<{'error',Reason}> when 'true' -> {'error',{Handle,Reason}}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<Handle = {'file',Fd},'read',['raw'],Opts> when 'true' -> case call 'lists':'member' ('compressed',Opts) of <'false'> when 'true' -> let <_11> = 'file_op'/2 in let <Reader> = {'reader',Fd,'read',0,_11} in case apply 'do_position'/2 (Reader,{'cur',0}) of <{'ok',Pos,Reader2}> when 'true' -> case Reader2 of <{'reader',_27,_28,_29,_30}> when 'true' -> let <_15> = call 'erlang':'setelement' (4,Reader2,Pos) in {'ok',_15}
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> {'error',{Handle,Reason}}
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
<'true'> when 'true' -> {'error',{Handle,{'incompatible_option','compressed'}}}
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end
<Handle = {'file',_X_Fd},'read',[],_X_Opts> when 'true' -> {'error',{Handle,{'incompatible_option','cooked'}}}
<Name,Access,Raw,Opts> when let <_18> = call 'erlang':'is_list' (Name) in let <_19> = call 'erlang':'is_binary' (Name) in call 'erlang':'or' (_18,_19) -> let <_20> = call 'erlang':'++' (Raw,['binary'|[Access|Opts]]) in case call 'file':'open' (Name,_20) of <{'ok',File}> when 'true' -> let <_21> = 'file_op'/2 in {'ok',{'reader',File,Access,0,_21}}
<{'error',Reason}> when 'true' -> {'error',{Name,Reason}}
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end
(<_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25,_24,_23})-|[{'function_name',{'open1',4}}] )-|['compiler_generated'] ) end
'open_mode'/1 = fun (_0) -> apply 'open_mode'/4 (_0,'false',['raw'],[])
'open_mode'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'read',_8,Raw,_9> when 'true' -> {'ok','read',Raw,[]}
<'write',_10,Raw,_11> when 'true' -> {'ok','write',Raw,[]}
<['read'|Rest],'false',Raw,Opts> when 'true' -> apply 'open_mode'/4 (Rest,'read',Raw,Opts)
<['write'|Rest],'false',Raw,Opts> when 'true' -> apply 'open_mode'/4 (Rest,'write',Raw,Opts)
<['compressed'|Rest],Access,Raw,Opts> when 'true' -> apply 'open_mode'/4 (Rest,Access,Raw,['compressed'|['read_ahead'|Opts]])
<['cooked'|Rest],Access,_X_Raw,Opts> when 'true' -> apply 'open_mode'/4 (Rest,Access,[],Opts)
<[],Access,Raw,Opts> when 'true' -> {'ok',Access,Raw,Opts}
<_12,_13,_14,_15> when 'true' -> {'error','einval'} end
'file_op'/2 = fun (_0,_1) -> case <_0,_1> of <'write',{Fd,Data}> when 'true' -> call 'file':'write' (Fd,Data)
<'position',{Fd,Pos}> when 'true' -> call 'file':'position' (Fd,Pos)
<'read2',{Fd,Size}> when 'true' -> call 'file':'read' (Fd,Size)
<'close',Fd> when 'true' -> call 'file':'close' (Fd)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'file_op',2}}] )-|['compiler_generated'] ) end
'close'/1 = fun (_0) -> case _0 of <Reader = {'reader',_5,'read',_6,_7}> when 'true' -> let <_8> = apply 'do_close'/1 (Reader) in case _8 of <'ok'> when 'true' -> (_8-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<Reader = {'reader',_9,'write',_10,_11}> when 'true' -> case apply 'pad_file'/1 (Reader) of <{'ok',Reader2}> when 'true' -> case apply 'do_close'/1 (Reader2) of <'ok'> when 'true' -> 'ok'
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<_12> when 'true' -> {'error','einval'} end
'pad_file'/1 = fun (_0) -> case _0 of <Reader = {'reader',_5,_6,Pos,_7}> when 'true' -> let <_1> = call 'erlang':'+' (Pos,512) in let <PadCurrent> = apply 'skip_padding'/1 (_1) in let <Padding> = #{#<0>(PadCurrent,8,'integer',['unsigned'|['big']])}# in apply 'do_write'/2 (Reader,[Padding|[#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#|[#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#]]])
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'pad_file',1}}] )-|['compiler_generated'] ) end
'create'/2 = fun (_0,_1) -> case <_0,_1> of <Name,FileList> when let <_2> = call 'erlang':'is_list' (Name) in let <_3> = call 'erlang':'is_binary' (Name) in call 'erlang':'or' (_2,_3) -> apply 'create'/3 (Name,FileList,[])
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'create',2}}] )-|['compiler_generated'] ) end
'create'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Name,FileList,Options> when let <_3> = call 'erlang':'is_list' (Name) in let <_4> = call 'erlang':'is_binary' (Name) in call 'erlang':'or' (_3,_4) -> let <_9> = fun (_7) -> let <_6> = call 'erlang':'=:=' (_7,'compressed') in let <_5> = call 'erlang':'=:=' (_7,'cooked') in call 'erlang':'or' (_6,_5) in let <Mode> = call 'lists':'filter' (_9,Options) in case apply 'open'/2 (Name,['write'|Mode]) of <{'ok',TarFile}> when 'true' -> apply 'do_create'/3 (TarFile,FileList,Options)
<Err = {'error',_15}> when 'true' -> Err
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12})-|[{'function_name',{'create',3}}] )-|['compiler_generated'] ) end
'do_create'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <TarFile,[],_X_Opts> when 'true' -> apply 'close'/1 (TarFile)
<TarFile,[{NameInArchive,NameOrBin}|Rest],Opts> when 'true' -> case apply 'add'/4 (TarFile,NameOrBin,NameInArchive,Opts) of <'ok'> when 'true' -> apply 'do_create'/3 (TarFile,Rest,Opts)
<Err = {'error',_10}> when 'true' -> do apply 'close'/1 (TarFile) Err
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<TarFile,[Name|Rest],Opts> when 'true' -> case apply 'add'/4 (TarFile,Name,Name,Opts) of <'ok'> when 'true' -> apply 'do_create'/3 (TarFile,Rest,Opts)
<Err = {'error',_11}> when 'true' -> do apply 'close'/1 (TarFile) Err
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'do_create',3}}] )-|['compiler_generated'] ) end
'add'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader,{NameInArchive,Name},Opts> when let <_3> = call 'erlang':'is_list' (NameInArchive) in let <_4> = call 'erlang':'is_list' (Name) in call 'erlang':'and' (_3,_4) -> apply 'do_add'/4 (Reader,Name,NameInArchive,Opts)
<Reader,{NameInArchive,Bin},Opts> when let <_5> = call 'erlang':'is_list' (NameInArchive) in let <_6> = call 'erlang':'is_binary' (Bin) in call 'erlang':'and' (_5,_6) -> apply 'do_add'/4 (Reader,Bin,NameInArchive,Opts)
<Reader,Name,Opts> when call 'erlang':'is_list' (Name) -> apply 'do_add'/4 (Reader,Name,Name,Opts)
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'add',3}}] )-|['compiler_generated'] ) end
'add'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reader,NameOrBin,NameInArchive,Options> when let <_4> = call 'erlang':'is_list' (NameOrBin) in let <_9> = try let <_5> = call 'erlang':'is_binary' (NameOrBin) in let <_6> = call 'erlang':'is_list' (NameInArchive) in let <_7> = call 'erlang':'is_list' (Options) in let <_8> = call 'erlang':'and' (_6,_7) in call 'erlang':'and' (_5,_8) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'or' (_4,_9) -> apply 'do_add'/4 (Reader,NameOrBin,NameInArchive,Options)
(<_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10})-|[{'function_name',{'add',4}}] )-|['compiler_generated'] ) end
'do_add'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reader = {'reader',_13,'write',_14,_15},Name,NameInArchive,Options> when let <_4> = call 'erlang':'is_list' (NameInArchive) in let <_5> = call 'erlang':'is_list' (Options) in call 'erlang':'and' (_4,_5) -> let <RF> = apply 'apply_file_info_opts_fun'/2 (Options,'read_link_info') in let <Opts> = {'add_opts',RF,0,'false','undefined','undefined','undefined',0,0} in let <_8> = apply 'add_opts'/3 (Options,Options,Opts) in apply 'add1'/4 (Reader,Name,NameInArchive,_8)
<{'reader',_16,'read',_17,_18},_19,_20,_21> when 'true' -> {'error','eacces'}
<Reader,_22,_23,_24> when 'true' -> {'error',{'badarg',Reader}} end
'add_opts'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <['dereference'|T],AllOptions,Opts> when 'true' -> let <RF> = apply 'apply_file_info_opts_fun'/2 (AllOptions,'read_file_info') in case Opts of <{'add_opts',_31,_32,_33,_34,_35,_36,_37,_38}> when 'true' -> let <_6> = call 'erlang':'setelement' (2,Opts,RF) in apply 'add_opts'/3 (T,AllOptions,_6)
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['verbose'|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' -> let <_9> = call 'erlang':'setelement' (4,Opts,'true') in apply 'add_opts'/3 (T,AllOptions,_9)
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'chunks',N}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_49,_50,_51,_52,_53,_54,_55,_56}> when 'true' -> let <_12> = call 'erlang':'setelement' (3,Opts,N) in apply 'add_opts'/3 (T,AllOptions,_12)
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'atime',Value}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_58,_59,_60,_61,_62,_63,_64,_65}> when 'true' -> let <_15> = call 'erlang':'setelement' (5,Opts,Value) in apply 'add_opts'/3 (T,AllOptions,_15)
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'mtime',Value}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_67,_68,_69,_70,_71,_72,_73,_74}> when 'true' -> let <_18> = call 'erlang':'setelement' (6,Opts,Value) in apply 'add_opts'/3 (T,AllOptions,_18)
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'ctime',Value}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' -> let <_21> = call 'erlang':'setelement' (7,Opts,Value) in apply 'add_opts'/3 (T,AllOptions,_21)
(<_84> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'uid',Value}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_85,_86,_87,_88,_89,_90,_91,_92}> when 'true' -> let <_24> = call 'erlang':'setelement' (8,Opts,Value) in apply 'add_opts'/3 (T,AllOptions,_24)
(<_93> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'gid',Value}|T],AllOptions,Opts> when 'true' -> case Opts of <{'add_opts',_94,_95,_96,_97,_98,_99,_100,_101}> when 'true' -> let <_27> = call 'erlang':'setelement' (9,Opts,Value) in apply 'add_opts'/3 (T,AllOptions,_27)
(<_102> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[_103|T],AllOptions,Opts> when 'true' -> apply 'add_opts'/3 (T,AllOptions,Opts)
<[],_X_AllOptions,Opts> when 'true' -> Opts
(<_30,_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29,_28})-|[{'function_name',{'add_opts',3}}] )-|['compiler_generated'] ) end
'apply_file_info_opts'/2 = fun (_0,_1) -> case <_0,_1> of <Opts,{'ok',FileInfo}> when 'true' -> let <_2> = apply 'do_apply_file_info_opts'/2 (Opts,FileInfo) in {'ok',_2}
<_X_Opts,Other> when 'true' -> Other end
'do_apply_file_info_opts'/2 = fun (_0,_1) -> case <_0,_1> of <[{'atime',Value}|T],FileInfo> when 'true' -> case FileInfo of <{'file_info',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' -> let <_4> = call 'erlang':'setelement' (5,FileInfo,Value) in apply 'do_apply_file_info_opts'/2 (T,_4)
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'mtime',Value}|T],FileInfo> when 'true' -> case FileInfo of <{'file_info',_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' -> let <_7> = call 'erlang':'setelement' (6,FileInfo,Value) in apply 'do_apply_file_info_opts'/2 (T,_7)
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'ctime',Value}|T],FileInfo> when 'true' -> case FileInfo of <{'file_info',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}> when 'true' -> let <_10> = call 'erlang':'setelement' (7,FileInfo,Value) in apply 'do_apply_file_info_opts'/2 (T,_10)
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'uid',Value}|T],FileInfo> when 'true' -> case FileInfo of <{'file_info',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}> when 'true' -> let <_13> = call 'erlang':'setelement' (13,FileInfo,Value) in apply 'do_apply_file_info_opts'/2 (T,_13)
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'gid',Value}|T],FileInfo> when 'true' -> case FileInfo of <{'file_info',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' -> let <_16> = call 'erlang':'setelement' (14,FileInfo,Value) in apply 'do_apply_file_info_opts'/2 (T,_16)
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[_89|T],FileInfo> when 'true' -> apply 'do_apply_file_info_opts'/2 (T,FileInfo)
<[],FileInfo> when 'true' -> FileInfo
(<_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17})-|[{'function_name',{'do_apply_file_info_opts',2}}] )-|['compiler_generated'] ) end
'apply_file_info_opts_fun'/2 = fun (_0,_1) -> (fun (_3) -> let <_2> = call 'file':_1 (_3,[{'time','posix'}]) in apply 'apply_file_info_opts'/2 (_0,_2)-|[{'id',{0,0,'-apply_file_info_opts_fun/2-fun-0-'}}] )
'add1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reader = {'reader',_45,_46,_47,_48},Name,NameInArchive,Opts = {'add_opts',ReadInfo,_49,_50,_51,_52,_53,_54,_55}> when call 'erlang':'is_list' (Name) -> let <_16> = case apply ReadInfo (Name) of <{'error',Reason0}> when 'true' -> {'error',{Name,Reason0}}
<{'ok',Fi = {'file_info',_56,'symlink',_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) case call 'file':'read_link' (Name) of <{'ok',Linkname}> when 'true' -> let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,Linkname) in apply 'add_header'/3 (Reader,Header,Opts)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{'ok',Fi = {'file_info',_68,'regular',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,'false') in case apply 'add_header'/3 (Reader,Header,Opts) of <{'ok',Reader2}> when 'true' -> (case Header of (<({'tar_header',_80,_81,_82,_83,_rec20,_84,_85,_86,_87,_88,_89,_90,_91,_92}-|['compiler_generated'] )> when 'true' -> case apply 'do_copy'/3 (Reader2,Name,Opts) of <{'ok',_94,Reader3}> when call 'erlang':'=:=' (_94,_rec20) -> let <Padding> = apply 'skip_padding'/1 (_rec20) in let <Pad> = #{#<0>(Padding,8,'integer',['unsigned'|['big']])}# in apply 'do_write'/2 (Reader3,Pad)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_93> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{'ok',Fi = {'file_info',_95,'directory',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106}}> when 'true' -> apply 'add_directory'/5 (Reader,Name,NameInArchive,Fi,Opts)
<{'ok',Fi = {'file_info',_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,'false') in apply 'add_header'/3 (Reader,Header,Opts)
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end in case _16 of <'ok'> when 'true' -> 'ok'
<{'ok',_X_Reader}> when 'true' -> 'ok'
<Err = {'error',_X_Reason}> when 'true' -> Err
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
<Reader,Bin,NameInArchive,Opts> when call 'erlang':'is_binary' (Bin) -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) let <Now> = call 'os':'system_time' ('seconds') in (case Opts of (<({'add_opts',_120,_121,_122,_123,_124,_125,_rec21,_126}-|['compiler_generated'] )> when 'true' -> (case Opts of (<({'add_opts',_128,_129,_130,_131,_132,_133,_134,_rec22}-|['compiler_generated'] )> when 'true' -> let <_29> = call 'erlang':'byte_size' (Bin) in (case Opts of (<({'add_opts',_136,_137,_138,_139,_rec23,_140,_141,_142}-|['compiler_generated'] )> when 'true' -> let <_28> = apply 'add_opts_time'/2 (_rec23,Now) in (case Opts of (<({'add_opts',_144,_145,_146,_rec24,_147,_148,_149,_150}-|['compiler_generated'] )> when 'true' -> let <_25> = apply 'add_opts_time'/2 (_rec24,Now) in (case Opts of (<({'add_opts',_152,_153,_154,_155,_156,_rec25,_157,_158}-|['compiler_generated'] )> when 'true' -> let <_22> = apply 'add_opts_time'/2 (_rec25,Now) in let <Header> = {'tar_header',NameInArchive,33188,_rec21,_rec22,_29,_28,48,[],[],[],0,0,_25,_22} in case apply 'add_header'/3 (Reader,Header,Opts) of <{'ok',Reader2}> when 'true' -> let <_36> = call 'erlang':'byte_size' (Bin) in let <Padding> = apply 'skip_padding'/1 (_36) in let <_38> = #{#<0>(Padding,8,'integer',['unsigned'|['big']])}# in let <Data> = [Bin|[_38|[]]] in case apply 'do_write'/2 (Reader2,Data) of <{'ok',_X_Reader3}> when 'true' -> 'ok'
<{'error',Reason}> when 'true' -> {'error',{NameInArchive,Reason}}
(<_40> when 'true' -> primop 'match_fail' ({'case_clause',_40})-|['compiler_generated'] ) end
(<_35> when 'true' -> primop 'match_fail' ({'badmatch',_35})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_159> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_151> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_143> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_135> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_127> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_44,_43,_42,_41> when 'true' -> (primop 'match_fail' ({'function_clause',_44,_43,_42,_41})-|[{'function_name',{'add1',4}}] )-|['compiler_generated'] ) end
'add_opts_time'/2 = fun (_0,_1) -> case <_0,_1> of <'undefined',Now> when 'true' -> Now
<Time,_X_Now> when 'true' -> Time end
'add_directory'/5 = fun (_0,_1,_2,_3,_4) -> case call 'file':'list_dir' (_1) of <{'ok',[]}> when 'true' -> do apply 'add_verbose'/3 (_4,[97|[32|[126|[116|[115|[126|[110]]]]]]],[_2|[]]) let <Header> = apply 'fileinfo_to_header'/3 (_2,_3,'false') in apply 'add_header'/3 (_0,Header,_4)
<{'ok',Files}> when 'true' -> do apply 'add_verbose'/3 (_4,[97|[32|[126|[116|[115|[126|[110]]]]]]],[_2|[]]) try apply 'add_files'/5 (_0,Files,_1,_2,_4) of <_6> -> case _6 of <'ok'> when 'true' -> 'ok'
<Err = {'error',_17}> when 'true' -> Err
(<_7> when 'true' -> primop 'match_fail' ({'try_clause',_7})-|['compiler_generated'] ) end catch <_10,_9,_8> -> case <_10,_9,_8> of <('throw'-|['compiler_generated'] ),Err = ({('error'-|['compiler_generated'] ),({_X_Name,_X_Reason}-|['compiler_generated'] )}-|['compiler_generated'] ),_18> when 'true' -> Err
<('throw'-|['compiler_generated'] ),({('error'-|['compiler_generated'] ),Reason}-|['compiler_generated'] ),_19> when 'true' -> {'error',{_1,Reason}}
(<_20,_21,_22> when 'true' -> primop 'raise' (_22,_21)-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> {'error',{_1,Reason}}
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'add_files'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Reader,[],_X_Dir,_X_DirInArchive,_X_Opts> when 'true' -> 'ok'
<Reader,[Name|Rest],Dir,DirInArchive,Opts = {'add_opts',Info,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> let <FullName> = call 'filename':'join' (Dir,Name) in let <NameInArchive> = call 'filename':'join' (DirInArchive,Name) in let <_19> = case apply Info (FullName) of <{'error',Reason}> when 'true' -> {'error',{FullName,Reason}}
<{'ok',Fi = {'file_info',_34,'directory',_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}}> when 'true' -> apply 'add_directory'/5 (Reader,FullName,NameInArchive,Fi,Opts)
<{'ok',Fi = {'file_info',_46,'symlink',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) case call 'file':'read_link' (FullName) of <{'ok',Linkname}> when 'true' -> let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,Linkname) in apply 'add_header'/3 (Reader,Header,Opts)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{'ok',Fi = {'file_info',_58,'regular',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,'false') in case apply 'add_header'/3 (Reader,Header,Opts) of <{'ok',Reader2}> when 'true' -> (case Header of (<({'tar_header',_70,_71,_72,_73,_rec26,_74,_75,_76,_77,_78,_79,_80,_81,_82}-|['compiler_generated'] )> when 'true' -> case apply 'do_copy'/3 (Reader2,FullName,Opts) of <{'ok',_84,Reader3}> when call 'erlang':'=:=' (_84,_rec26) -> let <Padding> = apply 'skip_padding'/1 (_rec26) in let <Pad> = #{#<0>(Padding,8,'integer',['unsigned'|['big']])}# in apply 'do_write'/2 (Reader3,Pad)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<{'ok',Fi = {'file_info',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}}> when 'true' -> do apply 'add_verbose'/3 (Opts,[97|[32|[126|[116|[115|[126|[110]]]]]]],[NameInArchive|[]]) let <Header> = apply 'fileinfo_to_header'/3 (NameInArchive,Fi,'false') in apply 'add_header'/3 (Reader,Header,Opts)
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end in case _19 of <'ok'> when 'true' -> apply 'add_files'/5 (Reader,Rest,Dir,DirInArchive,Opts)
<{'ok',ReaderNext}> when 'true' -> apply 'add_files'/5 (ReaderNext,Rest,Dir,DirInArchive,Opts)
<Err = {'error',_98}> when 'true' -> Err
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
(<_26,_25,_24,_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25,_24,_23,_22})-|[{'function_name',{'add_files',5}}] )-|['compiler_generated'] ) end
'format_string'/2 = fun (_0,_1) -> case <_0,_1> of <String,Size> when try let <_2> = call 'erlang':'length' (String) in call 'erlang':'>' (_2,Size) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error',{'write_string','field_too_long'}})
<String,Size> when 'true' -> let <Ascii> = apply 'to_ascii'/1 (String) in case <> of <> when try let <_4> = call 'erlang':'byte_size' (Ascii) in call 'erlang':'<' (_4,Size) of <Try> -> Try catch <T,R> -> 'false' -> [Ascii|[0]]
<> when 'true' -> Ascii end end
'format_octal'/1 = fun (_0) -> let <_1> = call 'io_lib':'fwrite' ([126|[46|[56|[66]]]],[_0|[]]) in call 'erlang':'iolist_to_binary' (_1)
'add_header'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader = {'reader',_7,_8,_9,_10},Header = {'tar_header',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24},Opts> when 'true' -> case apply 'build_header'/2 (Header,Opts) of <{'ok',Iodata}> when 'true' -> apply 'do_write'/2 (Reader,Iodata)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'add_header',3}}] )-|['compiler_generated'] ) end
'write_to_block'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Block,IoData,Start> when call 'erlang':'is_list' (IoData) -> let <_3> = call 'erlang':'iolist_to_binary' (IoData) in apply 'write_to_block'/3 (Block,_3,Start)
<Block,Bin,Start> when call 'erlang':'is_binary' (Bin) -> let <Size> = call 'erlang':'byte_size' (Bin) in case Block of <#{#<Head>(Start,8,'integer',['unsigned'|['big']]),#<_9>(Size,8,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> #{#<Head>(Start,8,'integer',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'write_to_block',3}}] )-|['compiler_generated'] ) end
'build_header'/2 = fun (_0,_1) -> case <_0,_1> of <Header = {'tar_header',_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41},Opts> when 'true' -> case Header of <{'tar_header',Name,Mode,Uid,Gid,Size,_42,Type,Linkname,Uname,Gname,Devmaj,Devmin,_43,_44}> when 'true' -> (case Header of (<({'tar_header',_45,_46,_47,_48,_49,_rec27,_50,_51,_52,_53,_54,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> case apply 'write_string'/6 (#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,0,100,Name,#{#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,~{}~) of <{Block1,Pax0}> when 'true' -> let <Block2> = apply 'write_octal'/4 (Block1,100,8,Mode) in case apply 'write_numeric'/6 (Block2,108,8,Uid,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,Pax0) of <{Block3,Pax1}> when 'true' -> case apply 'write_numeric'/6 (Block3,116,8,Gid,#{#<103>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,Pax1) of <{Block4,Pax2}> when 'true' -> case apply 'write_numeric'/6 (Block4,124,12,Size,#{#<115>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<122>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Pax2) of <{Block5,Pax3}> when 'true' -> case apply 'write_numeric'/6 (Block5,136,12,_rec27,#{}#,Pax3) of <{Block6,Pax4}> when 'true' -> let <_13> = #{#<Type>(8,1,'integer',['unsigned'|['big']])}# in case apply 'write_string'/6 (Block6,156,1,_13,#{}#,Pax4) of <{Block7,Pax5}> when 'true' -> case apply 'write_string'/6 (Block7,157,100,Linkname,#{#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,Pax5) of <{Block8,Pax6}> when 'true' -> case apply 'write_string'/6 (Block8,265,32,Uname,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Pax6) of <{Block9,Pax7}> when 'true' -> case apply 'write_string'/6 (Block9,297,32,Gname,#{#<103>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Pax7) of <{Block10,Pax8}> when 'true' -> case apply 'write_numeric'/6 (Block10,329,8,Devmaj,#{}#,Pax8) of <{Block11,Pax9}> when 'true' -> case apply 'write_numeric'/6 (Block11,337,8,Devmin,#{}#,Pax9) of <{Block12,Pax10}> when 'true' -> case apply 'set_path'/2 (Block12,Pax10) of <{Block13,Pax11}> when 'true' -> let <_22> = case call 'maps':'size' (Pax11) of <0> when 'true' -> []
<_59> when 'true' -> apply 'build_pax_entry'/3 (Header,Pax11,Opts) end in let <Block14> = apply 'set_format'/2 (Block13,4) in let <Block15> = apply 'set_checksum'/1 (Block14) in {'ok',[_22|[Block15|[]]]}
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26})-|[{'function_name',{'build_header',2}}] )-|['compiler_generated'] ) end
'set_path'/2 = fun (_0,_1) -> case call 'maps':'get' (#{#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,_1,'nil') of <'nil'> when 'true' -> {_0,_1}
<PaxPath> when 'true' -> case apply 'split_ustar_path'/1 (PaxPath) of <{'ok',UstarName,UstarPrefix}> when 'true' -> case apply 'write_string'/6 (_0,0,100,UstarName,#{}#,~{}~) of <{Block1,_9}> when 'true' -> case apply 'write_string'/6 (Block1,345,155,UstarPrefix,#{}#,~{}~) of <{Block2,_10}> when 'true' -> let <_4> = call 'maps':'remove' (#{#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,_1) in {Block2,_4}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<'false'> when 'true' -> {_0,_1}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end end
'set_format'/2 = fun (_0,_1) -> case <_0,_1> of <Block0,Format> when let <_2> = call 'erlang':'=:=' (Format,4) in let <_3> = call 'erlang':'=:=' (Format,5) in call 'erlang':'or' (_2,_3) -> let <Block1> = apply 'write_to_block'/3 (Block0,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,257) in apply 'write_to_block'/3 (Block1,#{#<48>(8,1,'integer',['unsigned'|['big']]),#<48>(8,1,'integer',['unsigned'|['big']])}#,263)
<_X_Block,Format> when 'true' -> call 'erlang':'throw' ({'error',{'invalid_format',Format}}) end
'set_checksum'/1 = fun (_0) -> let <Checksum> = apply 'compute_checksum'/1 (_0) in apply 'write_octal'/4 (_0,148,8,Checksum)
'build_pax_entry'/3 = fun (_0,_1,_2) -> (case _0 of (<({'tar_header',_rec28,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> let <Filename> = call 'filename':'basename' (_rec28) in let <Dir> = call 'filename':'dirname' (_rec28) in let <Path2> = call 'filename':'join' ([Dir|[[80|[97|[120|[72|[101|[97|[100|[101|[114|[115|[46|[48]]]]]]]]]]]]|[Filename|[]]]]) in let <AsciiPath> = apply 'to_ascii'/1 (Path2) in let <_12> = case <> of <> when try let <_10> = call 'erlang':'byte_size' (AsciiPath) in call 'erlang':'>' (_10,100) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'binary_part' (AsciiPath,0,99)
<> when 'true' -> AsciiPath end in let <Keys> = call 'maps':'keys' (_1) in let <SortedKeys> = call 'lists':'sort' (Keys) in let <PaxFile> = apply 'build_pax_file'/2 (SortedKeys,_1) in let <Size> = call 'erlang':'byte_size' (PaxFile) in let <_18> = call 'erlang':'byte_size' (PaxFile) in let <_19> = call 'erlang':'rem' (_18,512) in let <_20> = call 'erlang':'-' (512,_19) in let <Padding> = call 'erlang':'rem' (_20,512) in let <Pad> = #{#<0>(Padding,8,'integer',['unsigned'|['big']])}# in let <_29> = call 'unicode':'characters_to_list' (_12) in (case _0 of (<({'tar_header',_49,_50,_51,_52,_53,_rec29,_54,_55,_56,_57,_58,_59,_60,_61}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'tar_header',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec30,_75}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'tar_header',_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_rec31}-|['compiler_generated'] )> when 'true' -> let <PaxHeader> = {'tar_header',_29,33188,0,0,Size,_rec29,120,[],[],[],0,0,_rec30,_rec31} in case apply 'build_header'/2 (PaxHeader,_2) of <{'ok',PaxHeaderData}> when 'true' -> [PaxHeaderData|[PaxFile|[Pad|[]]]]
(<_31> when 'true' -> primop 'match_fail' ({'badmatch',_31})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'build_pax_file'/2 = fun (_0,_1) -> apply 'build_pax_file'/3 (_0,_1,[])
'build_pax_file'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],_20,Acc> when 'true' -> call 'unicode':'characters_to_binary' (Acc)
<[K|Rest],Attrs,Acc> when 'true' -> let <V> = call 'maps':'get' (K,Attrs) in let <_5> = apply 'sizeof'/1 (K) in let <_4> = apply 'sizeof'/1 (V) in let <_6> = call 'erlang':'+' (_5,_4) in let <Size> = call 'erlang':'+' (_6,3) in let <_8> = apply 'sizeof'/1 (Size) in let <Size2> = call 'erlang':'+' (_8,Size) in let <Key> = apply 'to_string'/1 (K) in let <Value> = apply 'to_string'/1 (V) in let <_12> = call 'io_lib':'format' ([126|[66|[32|[126|[116|[115|[61|[126|[116|[115|[10]]]]]]]]]]],[Size2|[Key|[Value|[]]]]) in let <Record> = call 'unicode':'characters_to_binary' (_12) in case <> of <> when try let <_14> = call 'erlang':'byte_size' (Record) in call 'erlang':'=/=' (_14,Size2) of <Try> -> Try catch <T,R> -> 'false' -> let <Size3> = call 'erlang':'byte_size' (Record) in let <Record2> = call 'io_lib':'format' ([126|[66|[32|[126|[116|[115|[61|[126|[116|[115|[10]]]]]]]]]]],[Size3|[Key|[Value|[]]]]) in apply 'build_pax_file'/3 (Rest,Attrs,[Acc|[Record2|[]]])
<> when 'true' -> apply 'build_pax_file'/3 (Rest,Attrs,[Acc|[Record|[]]]) end
(<_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17})-|[{'function_name',{'build_pax_file',3}}] )-|['compiler_generated'] ) end
'sizeof'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> call 'erlang':'byte_size' (Bin)
<List> when call 'erlang':'is_list' (_0) -> call 'erlang':'length' (List)
<N> when call 'erlang':'is_integer' (_0) -> let <_1> = call 'erlang':'integer_to_binary' (N) in call 'erlang':'byte_size' (_1)
<N> when call 'erlang':'is_float' (_0) -> let <_2> = call 'erlang':'float_to_binary' (N) in call 'erlang':'byte_size' (_2)
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'sizeof',1}}] )-|['compiler_generated'] ) end
'to_string'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> call 'unicode':'characters_to_list' (Bin)
<List> when call 'erlang':'is_list' (_0) -> List
<N> when call 'erlang':'is_integer' (_0) -> call 'erlang':'integer_to_list' (N)
<N> when call 'erlang':'is_float' (_0) -> call 'erlang':'float_to_list' (N)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'to_string',1}}] )-|['compiler_generated'] ) end
'split_ustar_path'/1 = fun (_0) -> let <Len> = call 'erlang':'length' (_0) in let <_2> = apply 'is_ascii'/1 (_0) in let <NotAscii> = call 'erlang':'not' (_2) in case <> of <> when let <_4> = call 'erlang':'=<' (Len,100) in call 'erlang':'or' (_4,NotAscii) -> 'false'
<> when 'true' -> let <PathBin> = call 'binary':'list_to_bin' (_0) in case call 'binary':'split' (PathBin,[#{#<47>(8,1,'integer',['unsigned'|['big']])}#],['global'|['trim_all']]) of <[Part|[]]> when try let <_7> = call 'erlang':'byte_size' (Part) in call 'erlang':'>=' (_7,100) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<Parts> when 'true' -> case call 'lists':'last' (Parts) of <Name> when try let <_8> = call 'erlang':'byte_size' (Name) in call 'erlang':'>=' (_8,100) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<Name> when 'true' -> let <_9> = call 'erlang':'length' (Parts) in let <_10> = call 'erlang':'-' (_9,1) in let <Parts2> = call 'lists':'sublist' (Parts,_10) in apply 'join_split_ustar_path'/2 (Parts2,{'ok',Name,'nil'}) end end end
'join_split_ustar_path'/2 = fun (_0,_1) -> case <_0,_1> of <[],Acc> when 'true' -> Acc
<[Part|_9],{'ok',_10,'nil'}> when try let <_2> = call 'erlang':'byte_size' (Part) in call 'erlang':'>' (_2,155) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<[Part|_11],{'ok',_X_Name,Acc}> when try let <_4> = call 'erlang':'byte_size' (Part) in let <_3> = call 'erlang':'byte_size' (Acc) in let <_5> = call 'erlang':'+' (_4,_3) in call 'erlang':'>' (_5,155) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<[Part|Rest],{'ok',Name,'nil'}> when 'true' -> apply 'join_split_ustar_path'/2 (Rest,{'ok',Name,Part})
<[Part|Rest],{'ok',Name,Acc}> when 'true' -> let <_6> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<Part>('all',8,'binary',['unsigned'|['big']])}# in apply 'join_split_ustar_path'/2 (Rest,{'ok',Name,_6})
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'join_split_ustar_path',2}}] )-|['compiler_generated'] ) end
'write_octal'/4 = fun (_0,_1,_2,_3) -> let <_5> = apply 'format_octal'/1 (_3) in let <_4> = call 'erlang':'-' (_2,1) in let <Octal> = apply 'zero_pad'/2 (_5,_4) in case <> of <> when try let <_7> = call 'erlang':'byte_size' (Octal) in call 'erlang':'<' (_7,_2) of <Try> -> Try catch <T,R> -> 'false' -> apply 'write_to_block'/3 (_0,Octal,_1)
<> when 'true' -> call 'erlang':'throw' ({'error',{'write_failed','octal_field_too_long'}}) end
'write_string'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = apply 'is_ascii'/1 (_3) in let <NotAscii> = call 'erlang':'not' (_6) in case <> of <> when try (let <_13> = case call 'erlang':'=/=' (_4,#{}#) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_10> = call 'erlang':'length' (_3) in (case call 'erlang':'>' (_10,_2) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> NotAscii-|['compiler_generated'] )
(<_9> when 'true' -> _9-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_13-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <Pax1> = call 'maps':'put' (_4,_3,_5) in {_0,Pax1}
<> when 'true' -> let <Formatted> = apply 'format_string'/2 (_3,_2) in let <_16> = apply 'write_to_block'/3 (_0,Formatted,_1) in {_16,_5} end
'write_numeric'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_7> = apply 'format_octal'/1 (_3) in let <_6> = call 'erlang':'-' (_2,1) in let <Octal> = apply 'zero_pad'/2 (_7,_6) in case <> of <> when try let <_9> = call 'erlang':'byte_size' (Octal) in call 'erlang':'<' (_9,_2) of <Try> -> Try catch <T,R> -> 'false' -> let <_10> = apply 'write_to_block'/3 (_0,[Octal|[0]],_1) in {_10,_5}
<> when call 'erlang':'=/=' (_4,#{}#) -> let <Pax1> = call 'maps':'put' (_4,_3,_5) in {_0,Pax1}
<> when 'true' -> call 'erlang':'throw' ({'error',{'write_failed','numeric_field_too_long'}}) end
'zero_pad'/2 = fun (_0,_1) -> case <_0,_1> of <Str,Size> when try let <_2> = call 'erlang':'byte_size' (Str) in call 'erlang':'>=' (_2,Size) of <Try> -> Try catch <T,R> -> 'false' -> Str
<Str,Size> when 'true' -> let <_3> = call 'erlang':'byte_size' (Str) in let <Padding> = call 'erlang':'-' (Size,_3) in let <Pad> = call 'binary':'copy' (#{#<48>(8,1,'integer',['unsigned'|['big']])}#,Padding) in #{#<Pad>('all',8,'binary',['unsigned'|['big']]),#<Str>('all',8,'binary',['unsigned'|['big']])}# end
'read_block'/1 = fun (_0) -> case apply 'do_read'/2 (_0,512) of <'eof'> when 'true' -> call 'erlang':'throw' ({'error','eof'})
<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,Reader1}> when 'true' -> case apply 'do_read'/2 (Reader1,512) of <'eof'> when 'true' -> 'eof'
<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,_X_Reader2}> when 'true' -> 'eof'
<{'ok',_X_Block,_X_Reader2}> when 'true' -> call 'erlang':'throw' ({'error','invalid_end_of_archive'})
<Err = {'error',_4}> when 'true' -> call 'erlang':'throw' (Err)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
<_@r0 = {'ok',Block,Reader1}> when call 'erlang':'is_binary' (Block) -> _@r0
<Err = {'error',_5}> when 'true' -> call 'erlang':'throw' (Err)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'get_header'/1 = fun (_0) -> case _0 of <Reader = {'reader',_3,_4,_5,_6}> when 'true' -> case apply 'read_block'/1 (Reader) of <'eof'> when 'true' -> 'eof'
<{'ok',Block,Reader1}> when 'true' -> apply 'convert_header'/2 (Block,Reader1)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'get_header',1}}] )-|['compiler_generated'] ) end
'to_v7'/1 = fun (_0) -> case _0 of <Bin> when try let <_1> = call 'erlang':'is_binary' (_0) in let <_2> = call 'erlang':'byte_size' (_0) in let <_3> = call 'erlang':'=:=' (_2,512) in call 'erlang':'and' (_1,_3) of <Try> -> Try catch <T,R> -> 'false' -> let <_12> = call 'erlang':'binary_part' (Bin,0,100) in let <_11> = call 'erlang':'binary_part' (Bin,100,8) in let <_10> = call 'erlang':'binary_part' (Bin,108,8) in let <_9> = call 'erlang':'binary_part' (Bin,116,8) in let <_8> = call 'erlang':'binary_part' (Bin,124,12) in let <_7> = call 'erlang':'binary_part' (Bin,136,12) in let <_6> = call 'erlang':'binary_part' (Bin,148,8) in let <_5> = call 'binary':'at' (Bin,156) in let <_4> = call 'erlang':'binary_part' (Bin,157,100) in {'header_v7',_12,_11,_10,_9,_8,_7,_6,_5,_4}
<_14> when 'true' -> {'error','header_block_too_small'} end
'to_gnu'/2 = fun (_0,_1) -> case <_0,_1> of <V7 = {'header_v7',_20,_21,_22,_23,_24,_25,_26,_27,_28},Bin> when try let <_2> = call 'erlang':'is_binary' (Bin) in let <_3> = call 'erlang':'byte_size' (Bin) in let <_4> = call 'erlang':'=:=' (_3,512) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_17> = call 'erlang':'binary_part' (Bin,257,6) in let <_16> = call 'erlang':'binary_part' (Bin,263,2) in let <_15> = call 'erlang':'binary_part' (Bin,265,32) in let <_14> = call 'erlang':'binary_part' (Bin,297,32) in let <_13> = call 'erlang':'binary_part' (Bin,329,8) in let <_12> = call 'erlang':'binary_part' (Bin,337,8) in let <_11> = call 'erlang':'binary_part' (Bin,345,12) in let <_10> = call 'erlang':'binary_part' (Bin,357,12) in let <_8> = call 'erlang':'binary_part' (Bin,386,97) in let <_9> = apply 'to_sparse_array'/1 (_8) in let <_5> = call 'erlang':'binary_part' (Bin,483,12) in {'header_gnu',V7,_17,_16,_15,_14,_13,_12,_11,_10,_9,_5}
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'to_gnu',2}}] )-|['compiler_generated'] ) end
'to_star'/2 = fun (_0,_1) -> case <_0,_1> of <V7 = {'header_v7',_17,_18,_19,_20,_21,_22,_23,_24,_25},Bin> when try let <_2> = call 'erlang':'is_binary' (Bin) in let <_3> = call 'erlang':'byte_size' (Bin) in let <_4> = call 'erlang':'=:=' (_3,512) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_14> = call 'erlang':'binary_part' (Bin,257,6) in let <_13> = call 'erlang':'binary_part' (Bin,263,2) in let <_12> = call 'erlang':'binary_part' (Bin,265,32) in let <_11> = call 'erlang':'binary_part' (Bin,297,32) in let <_10> = call 'erlang':'binary_part' (Bin,329,8) in let <_9> = call 'erlang':'binary_part' (Bin,337,8) in let <_8> = call 'erlang':'binary_part' (Bin,345,131) in let <_7> = call 'erlang':'binary_part' (Bin,476,12) in let <_6> = call 'erlang':'binary_part' (Bin,488,12) in let <_5> = call 'erlang':'binary_part' (Bin,508,4) in {'header_star',V7,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5}
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'to_star',2}}] )-|['compiler_generated'] ) end
'to_ustar'/2 = fun (_0,_1) -> case <_0,_1> of <V7 = {'header_v7',_14,_15,_16,_17,_18,_19,_20,_21,_22},Bin> when try let <_2> = call 'erlang':'is_binary' (Bin) in let <_3> = call 'erlang':'byte_size' (Bin) in let <_4> = call 'erlang':'=:=' (_3,512) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> let <_11> = call 'erlang':'binary_part' (Bin,257,6) in let <_10> = call 'erlang':'binary_part' (Bin,263,2) in let <_9> = call 'erlang':'binary_part' (Bin,265,32) in let <_8> = call 'erlang':'binary_part' (Bin,297,32) in let <_7> = call 'erlang':'binary_part' (Bin,329,8) in let <_6> = call 'erlang':'binary_part' (Bin,337,8) in let <_5> = call 'erlang':'binary_part' (Bin,345,155) in {'header_ustar',V7,_11,_10,_9,_8,_7,_6,_5}
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'to_ustar',2}}] )-|['compiler_generated'] ) end
'to_sparse_array'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> let <_1> = call 'erlang':'byte_size' (Bin) in let <MaxEntries> = call 'erlang':'div' (_1,24) in let <_3> = call 'erlang':'*' (24,MaxEntries) in let <_4> = call 'binary':'at' (Bin,_3) in let <IsExtended> = call 'erlang':'=:=' (1,_4) in let <_6> = call 'erlang':'-' (MaxEntries,1) in let <Entries> = apply 'parse_sparse_entries'/3 (Bin,_6,[]) in {'sparse_array',Entries,IsExtended,MaxEntries}
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'to_sparse_array',1}}] )-|['compiler_generated'] ) end
'parse_sparse_entries'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <#{}#,_11,Acc> when 'true' -> Acc
<_12,-1,Acc> when 'true' -> Acc
<Bin,N,Acc> when 'true' -> let <_3> = call 'erlang':'*' (N,24) in let <_4> = call 'erlang':'binary_part' (Bin,_3,24) in case apply 'to_sparse_entry'/1 (_4) of <'nil'> when 'true' -> let <_5> = call 'erlang':'-' (N,1) in apply 'parse_sparse_entries'/3 (Bin,_5,Acc)
<Entry = {'sparse_entry',_13,_14}> when 'true' -> let <_6> = call 'erlang':'-' (N,1) in apply 'parse_sparse_entries'/3 (Bin,_6,[Entry|Acc])
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end end
'to_sparse_entry'/1 = fun (_0) -> case _0 of <Bin> when try let <_1> = call 'erlang':'is_binary' (_0) in let <_2> = call 'erlang':'byte_size' (_0) in let <_3> = call 'erlang':'=:=' (_2,24) in call 'erlang':'and' (_1,_3) of <Try> -> Try catch <T,R> -> 'false' -> let <OffsetBin> = call 'erlang':'binary_part' (Bin,0,12) in let <NumBytesBin> = call 'erlang':'binary_part' (Bin,12,12) in case <OffsetBin,NumBytesBin> of <(#{(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] ),(#{(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<(0-|['compiler_generated'] )>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )> when 'true' -> 'nil'
<(_11-|['compiler_generated'] ),(_12-|['compiler_generated'] )> when 'true' -> let <_7> = apply 'parse_numeric'/1 (OffsetBin) in let <_6> = apply 'parse_numeric'/1 (NumBytesBin) in {'sparse_entry',_7,_6} end
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'to_sparse_entry',1}}] )-|['compiler_generated'] ) end
'get_format'/1 = fun (_0) -> case _0 of <Bin> when try let <_1> = call 'erlang':'is_binary' (_0) in let <_2> = call 'erlang':'byte_size' (_0) in let <_3> = call 'erlang':'=:=' (_2,512) in call 'erlang':'and' (_1,_3) of <Try> -> Try catch <T,R> -> 'false' -> let <_4> = apply 'to_v7'/1 (Bin) in apply 'do_get_format'/2 (_4,Bin)
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'get_format',1}}] )-|['compiler_generated'] ) end
'do_get_format'/2 = fun (_0,_1) -> case <_0,_1> of <Err = {'error',_32},_X_Bin> when 'true' -> Err
<V7 = {'header_v7',_33,_34,_35,_36,_37,_38,_39,_40,_41},Bin> when try let <_2> = call 'erlang':'is_binary' (Bin) in let <_3> = call 'erlang':'byte_size' (Bin) in let <_4> = call 'erlang':'=:=' (_3,512) in call 'erlang':'and' (_2,_4) of <Try> -> Try catch <T,R> -> 'false' -> (case V7 of (<({'header_v7',_42,_43,_44,_45,_46,_47,_rec32,_48,_49}-|['compiler_generated'] )> when 'true' -> let <Checksum> = apply 'parse_octal'/1 (_rec32) in let <Chk1> = apply 'compute_checksum'/1 (Bin) in let <Chk2> = apply 'compute_signed_checksum'/1 (Bin) in case <> of <> when try (let <_12> = case call 'erlang':'=/=' (Checksum,Chk1) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=/=' (Checksum,Chk2)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> _10-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_12-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 0
<> when 'true' -> let <Ustar> = apply 'to_ustar'/2 (V7,Bin) in let <Star> = apply 'to_star'/2 (V7,Bin) in (case Ustar of (<({'header_ustar',_51,_rec33,_52,_53,_54,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> (case Ustar of (<({'header_ustar',_59,_60,_rec34,_61,_62,_63,_64,_65}-|['compiler_generated'] )> when 'true' -> (case Star of (<({'header_star',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_rec35}-|['compiler_generated'] )> when 'true' -> let <_28> = case <> of <> when let <_24> = call 'erlang':'=:=' (_rec33,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#) in let <_25> = call 'erlang':'=:=' (_rec35,#{#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#) in call 'erlang':'and' (_24,_25) -> 3
<> when call 'erlang':'=:=' (_rec33,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#) -> 4
<> when let <_26> = call 'erlang':'=:=' (_rec33,#{#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#) in let <_27> = call 'erlang':'=:=' (_rec34,#{#<32>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#) in call 'erlang':'and' (_26,_27) -> 2
<> when 'true' -> 1 end in {'ok',_28,V7}-|['compiler_generated'] )
(<_77> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_star'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31,_30> when 'true' -> (primop 'match_fail' ({'function_clause',_31,_30})-|[{'function_name',{'do_get_format',2}}] )-|['compiler_generated'] ) end
'unpack_format'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Format,V7 = {'header_v7',_66,_67,_68,_69,_70,_71,_72,_73,_74},Bin,Reader> when try let <_4> = call 'erlang':'is_binary' (Bin) in let <_5> = call 'erlang':'byte_size' (Bin) in let <_6> = call 'erlang':'=:=' (_5,512) in call 'erlang':'and' (_4,_6) of <Try> -> Try catch <T,R> -> 'false' -> (case V7 of (<({'header_v7',_75,_76,_77,_78,_79,_rec36,_80,_81,_82}-|['compiler_generated'] )> when 'true' -> let <Mtime> = apply 'parse_numeric'/1 (_rec36) in (case V7 of (<({'header_v7',_rec37,_84,_85,_86,_87,_88,_89,_90,_91}-|['compiler_generated'] )> when 'true' -> let <_29> = apply 'parse_string'/1 (_rec37) in (case V7 of (<({'header_v7',_93,_rec38,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> let <_26> = apply 'parse_numeric'/1 (_rec38) in (case V7 of (<({'header_v7',_102,_103,_rec39,_104,_105,_106,_107,_108,_109}-|['compiler_generated'] )> when 'true' -> let <_23> = apply 'parse_numeric'/1 (_rec39) in (case V7 of (<({'header_v7',_111,_112,_113,_rec40,_114,_115,_116,_117,_118}-|['compiler_generated'] )> when 'true' -> let <_20> = apply 'parse_numeric'/1 (_rec40) in (case V7 of (<({'header_v7',_120,_121,_122,_123,_rec41,_124,_125,_126,_127}-|['compiler_generated'] )> when 'true' -> let <_17> = apply 'parse_numeric'/1 (_rec41) in (case V7 of (<({'header_v7',_129,_130,_131,_132,_133,_134,_135,_rec42,_136}-|['compiler_generated'] )> when 'true' -> (case V7 of (<({'header_v7',_138,_139,_140,_141,_142,_143,_144,_145,_rec43}-|['compiler_generated'] )> when 'true' -> let <_12> = apply 'parse_string'/1 (_rec43) in let <Header0> = {'tar_header',_29,_26,_23,_20,_17,Mtime,_rec42,_12,[],[],0,0,Mtime,Mtime} in let <_40> = case <> of <> when call 'erlang':'>' (Format,1) -> apply 'unpack_modern'/4 (Format,V7,Bin,Header0)
<> when 'true' -> let <_rec46> = apply 'safe_join_path'/2 ([],_29) in call 'erlang':'setelement' (2,Header0,_rec46) end in let <HeaderOnly> = apply 'is_header_only_type'/1 (_rec42) in let <_45> = case <> of <> when (call 'erlang':'=:=' (HeaderOnly,'true')-|['compiler_generated'] ) -> case _40 of <{'tar_header',_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203}> when 'true' -> call 'erlang':'setelement' (6,_40,0)
(<_204> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> _40 end in case <> of <> when call 'erlang':'=:=' (_rec42,83) -> let <Gnu> = apply 'to_gnu'/2 (V7,Bin) in (case Gnu of (<({'header_gnu',_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_rec49}-|['compiler_generated'] )> when 'true' -> let <RealSize> = apply 'parse_numeric'/1 (_rec49) in case apply 'parse_sparse_map'/2 (Gnu,Reader) of <{Sparsemap,Reader2}> when 'true' -> case _45 of <{'tar_header',_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229}> when 'true' -> let <_54> = call 'erlang':'setelement' (6,_45,RealSize) in let <_56> = apply 'new_sparse_file_reader'/3 (Reader2,Sparsemap,RealSize) in {_54,_56}
(<_230> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_51> when 'true' -> primop 'match_fail' ({'badmatch',_51})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_215> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_gnu'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> (case _45 of (<({'tar_header',_231,_232,_233,_234,_rec51,_235,_236,_237,_238,_239,_240,_241,_242,_243}-|['compiler_generated'] )> when 'true' -> (case _45 of (<({'tar_header',_245,_246,_247,_248,_rec52,_249,_250,_251,_252,_253,_254,_255,_256,_257}-|['compiler_generated'] )> when 'true' -> let <FileReader> = {'reg_file_reader',Reader,_rec51,0,_rec52} in {_45,FileReader}-|['compiler_generated'] )
(<_258> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_244> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_146> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_137> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_128> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_119> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_v7'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_65,_64,_63,_62> when 'true' -> (primop 'match_fail' ({'function_clause',_65,_64,_63,_62})-|[{'function_name',{'unpack_format',4}}] )-|['compiler_generated'] ) end
'unpack_modern'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Format,V7 = {'header_v7',_65,_66,_67,_68,_69,_70,_71,_72,_73},Bin,Header0 = {'tar_header',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when call 'erlang':'is_binary' (Bin) -> (case Header0 of (<({'tar_header',_88,_89,_90,_91,_92,_93,_rec53,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> let <Ustar> = apply 'to_ustar'/2 (V7,Bin) in (case Ustar of (<({'header_ustar',_102,_103,_104,_rec57,_105,_106,_107,_108}-|['compiler_generated'] )> when 'true' -> let <_rec54> = apply 'parse_string'/1 (_rec57) in (case Ustar of (<({'header_ustar',_110,_111,_112,_113,_rec58,_114,_115,_116}-|['compiler_generated'] )> when 'true' -> let <_rec55> = apply 'parse_string'/1 (_rec58) in case Header0 of <{'tar_header',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}> when 'true' -> let <_15> = call 'erlang':'setelement' (11,Header0,_rec55) in let <_17> = call 'erlang':'setelement' (10,_15,_rec54) in let <_31> = case <> of <> when try (let <_21> = case call 'erlang':'=:=' (_rec53,51) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (_rec53,52)-|['compiler_generated'] )
(<_19> when 'true' -> _19-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_21-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case Ustar of (<({'header_ustar',_133,_134,_135,_136,_137,_rec59,_138,_139}-|['compiler_generated'] )> when 'true' -> let <Ma> = apply 'parse_numeric'/1 (_rec59) in (case Ustar of (<({'header_ustar',_141,_142,_143,_144,_145,_146,_rec60,_147}-|['compiler_generated'] )> when 'true' -> let <Mi> = apply 'parse_numeric'/1 (_rec60) in case _17 of <{'tar_header',_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when 'true' -> let <_29> = call 'erlang':'setelement' (13,_17,Mi) in call 'erlang':'setelement' (12,_29,Ma)
(<_163> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_148> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_140> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> _17 end in let <_250,_251> = case Format of <4> when 'true' -> (case Ustar of (<({'header_ustar',_164,_165,_166,_167,_168,_169,_170,_rec62}-|['compiler_generated'] )> when 'true' -> let <_35> = apply 'parse_string'/1 (_rec62) in <_35,_31>-|['compiler_generated'] )
(<_171> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<3> when 'true' -> let <Star> = apply 'to_star'/2 (V7,Bin) in (case Star of (<({'header_star',_172,_173,_174,_175,_176,_177,_178,_rec63,_179,_180,_181}-|['compiler_generated'] )> when 'true' -> let <Prefix0> = apply 'parse_string'/1 (_rec63) in (case Star of (<({'header_star',_183,_184,_185,_186,_187,_188,_189,_190,_rec64,_191,_192}-|['compiler_generated'] )> when 'true' -> let <Atime> = apply 'parse_numeric'/1 (_rec64) in (case Star of (<({'header_star',_194,_195,_196,_197,_198,_199,_200,_201,_202,_rec65,_203}-|['compiler_generated'] )> when 'true' -> let <Ctime> = apply 'parse_numeric'/1 (_rec65) in case _31 of <{'tar_header',_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}> when 'true' -> let <_49> = call 'erlang':'setelement' (15,_31,Ctime) in let <_51> = call 'erlang':'setelement' (14,_49,Atime) in <Prefix0,_51>
(<_219> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_204> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_star'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_193> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_star'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_182> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_star'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_220> when 'true' -> <[],_31> end in (case (_251-|['compiler_generated'] ) of (<({'tar_header',_rec67,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233}-|['compiler_generated'] )> when 'true' -> let <_rec68> = apply 'safe_join_path'/2 ((_250-|['compiler_generated'] ),_rec67) in case (_251-|['compiler_generated'] ) of <{'tar_header',_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248}> when 'true' -> call 'erlang':'setelement' (2,(_251-|['compiler_generated'] ),_rec68)
(<_249> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_234> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_132> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_117> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','header_ustar'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_64,_63,_62,_61> when 'true' -> (primop 'match_fail' ({'function_clause',_64,_63,_62,_61})-|[{'function_name',{'unpack_modern',4}}] )-|['compiler_generated'] ) end
'safe_join_path'/2 = fun (_0,_1) -> case <_0,_1> of <[],Name> when 'true' -> call 'filename':'join' ([Name|[]])
<Prefix,[]> when 'true' -> call 'filename':'join' ([Prefix|[]])
<Prefix,Name> when 'true' -> call 'filename':'join' (Prefix,Name) end
'new_sparse_file_reader'/3 = fun (_0,_1,_2) -> case apply 'validate_sparse_entries'/2 (_1,_2) of <'true'> when 'true' -> {'sparse_file_reader',_0,_2,0,_2,_1}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'validate_sparse_entries'/2 = fun (_0,_1) -> apply 'validate_sparse_entries'/4 (_0,_1,0,0)
'validate_sparse_entries'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[],_X_RealSize,_X_I,_X_LastOffset> when 'true' -> 'true'
<[Entry = {'sparse_entry',_23,_24}|Rest],RealSize,I,LastOffset> when 'true' -> (case Entry of (<({'sparse_entry',_rec70,_25}-|['compiler_generated'] )> when 'true' -> (case Entry of (<({'sparse_entry',_27,_rec71}-|['compiler_generated'] )> when 'true' -> do case <> of <> when try let <_12> = call 'erlang':'-' (9223372036854775807,_rec71) in call 'erlang':'>' (_rec70,_12) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error',{'invalid_sparse_map_entry','offset_too_large'}})
<> when try let <_13> = call 'erlang':'+' (_rec70,_rec71) in call 'erlang':'>' (_13,RealSize) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error',{'invalid_sparse_map_entry','offset_too_large'}})
<> when try (let <_16> = case call 'erlang':'>' (I,0) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'>' (LastOffset,_rec70)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_14> when 'true' -> _14-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_16-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error',{'invalid_sparse_map_entry','overlapping_offsets'}})
<> when 'true' -> 'ok' end let <_18> = call 'erlang':'+' (I,1) in let <_17> = call 'erlang':'+' (_rec70,_rec71) in apply 'validate_sparse_entries'/4 (Rest,RealSize,_18,_17)-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_entry'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_26> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_entry'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_22,_21,_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20,_19})-|[{'function_name',{'validate_sparse_entries',4}}] )-|['compiler_generated'] ) end
'parse_sparse_map'/2 = fun (_0,_1) -> case <_0,_1> of <{'header_gnu',_12,_13,_14,_15,_16,_17,_18,_19,_20,Sparse = {'sparse_array',_21,_22,_23},_24},Reader> when (try let <_6> = call 'erlang':'element' (3,Sparse) in (call 'erlang':'=:=' (_6,'true')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'parse_sparse_map'/3 (Sparse,Reader,[])
<{'header_gnu',_25,_26,_27,_28,_29,_30,_31,_32,_33,Sparse,_34},Reader> when 'true' -> (case Sparse of (<({'sparse_array',_rec72,_35,_36}-|['compiler_generated'] )> when 'true' -> {_rec72,Reader}-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_array'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'parse_sparse_map',2}}] )-|['compiler_generated'] ) end
'parse_sparse_map'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'sparse_array',Entries,'true',_16},Reader,Acc> when 'true' -> case apply 'read_block'/1 (Reader) of <'eof'> when 'true' -> call 'erlang':'throw' ({'error','eof'})
<{'ok',Block,Reader2}> when 'true' -> let <Sparse2> = apply 'to_sparse_array'/1 (Block) in let <_4> = call 'erlang':'++' (Entries,Acc) in apply 'parse_sparse_map'/3 (Sparse2,Reader2,_4)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<{'sparse_array',Entries,_17,_18},Reader,Acc> when 'true' -> let <_11> = fun (_8,_7) -> case <_8,_7> of <{'sparse_entry',A,_19},{'sparse_entry',B,_20}> when 'true' -> call 'erlang':'=<' (A,B)
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'-parse_sparse_map/3-fun-0-',2}}] )-|['compiler_generated'] ) end in let <_6> = call 'erlang':'++' (Entries,Acc) in let <Sorted> = call 'lists':'sort' (_11,_6) in {Sorted,Reader}
(<_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13})-|[{'function_name',{'parse_sparse_map',3}}] )-|['compiler_generated'] ) end
'compute_checksum'/1 = fun (_0) -> case _0 of <#{#<H1>(148,8,'binary',['unsigned'|['big']]),#<H2>(8,8,'binary',['unsigned'|['big']]),#<Rest>(356,8,'binary',['unsigned'|['big']]),#<_7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_3> = apply 'checksum'/1 (H1) in let <_1> = call 'erlang':'byte_size' (H2) in let <_2> = call 'erlang':'*' (_1,32) in let <C0> = call 'erlang':'+' (_3,_2) in let <C1> = apply 'checksum'/1 (Rest) in call 'erlang':'+' (C0,C1)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'compute_checksum',1}}] )-|['compiler_generated'] ) end
'compute_signed_checksum'/1 = fun (_0) -> case _0 of <#{#<H1>(148,8,'binary',['unsigned'|['big']]),#<H2>(8,8,'binary',['unsigned'|['big']]),#<Rest>(356,8,'binary',['unsigned'|['big']]),#<_7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_3> = apply 'signed_checksum'/1 (H1) in let <_1> = call 'erlang':'byte_size' (H2) in let <_2> = call 'erlang':'*' (_1,32) in let <C0> = call 'erlang':'+' (_3,_2) in let <C1> = apply 'signed_checksum'/1 (Rest) in call 'erlang':'+' (C0,C1)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'compute_signed_checksum',1}}] )-|['compiler_generated'] ) end
'checksum'/1 = fun (_0) -> apply 'checksum'/2 (_0,0)
'checksum'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<A>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' -> let <_2> = call 'erlang':'+' (Sum,A) in apply 'checksum'/2 (Rest,_2)
<#{}#,Sum> when 'true' -> Sum
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'checksum',2}}] )-|['compiler_generated'] ) end
'signed_checksum'/1 = fun (_0) -> apply 'signed_checksum'/2 (_0,0)
'signed_checksum'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<A>(8,1,'integer',['signed'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Sum> when 'true' -> let <_2> = call 'erlang':'+' (Sum,A) in apply 'signed_checksum'/2 (Rest,_2)
<#{}#,Sum> when 'true' -> Sum
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'signed_checksum',2}}] )-|['compiler_generated'] ) end
'parse_numeric'/1 = fun (_0) -> case _0 of <#{}#> when 'true' -> 0
<Bin = #{#<First>(8,1,'integer',['unsigned'|['big']]),#<_22>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case <> of <> when try let <_1> = call 'erlang':'band' (First,128) in call 'erlang':'=/=' (_1,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_3> = case <> of <> when try let <_2> = call 'erlang':'band' (First,64) in call 'erlang':'=/=' (_2,0) of <Try> -> Try catch <T,R> -> 'false' -> 0
<> when 'true' -> 255 end in let <Bytes> = call 'binary':'bin_to_list' (Bin) in let <Reducer> = fun (_14,_13) -> case <_14,_13> of <C,{I,X}> when 'true' -> let <C1> = call 'erlang':'bxor' (C,_3) in let <_7> = case <> of <> when call 'erlang':'=:=' (I,0) -> call 'erlang':'band' (C1,127)
<> when 'true' -> C1 end in case <> of <> when try let <_9> = call 'erlang':'bsr' (X,56) in call 'erlang':'>' (_9,0) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error','integer_overflow'})
<> when 'true' -> let <_12> = call 'erlang':'+' (I,1) in let <_10> = call 'erlang':'bsl' (X,8) in let <_11> = call 'erlang':'bor' (_10,_7) in {_12,_11} end
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'-parse_numeric/1-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (Reducer,{0,0},Bytes) of <{_23,N}> when 'true' -> case <> of <> when try let <_19> = call 'erlang':'bsr' (N,63) in call 'erlang':'>' (_19,0) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error','integer_overflow'})
<> when 'true' -> case <> of <> when call 'erlang':'=:=' (_3,255) -> call 'erlang':'bxor' (-1,N)
<> when 'true' -> N end end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
<> when 'true' -> apply 'parse_octal'/1 (Bin) end
(<_21> when 'true' -> (primop 'match_fail' ({'function_clause',_21})-|[{'function_name',{'parse_numeric',1}}] )-|['compiler_generated'] ) end
'parse_octal'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> apply 'do_parse_octal'/2 (Bin,#{}#)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'parse_octal',1}}] )-|['compiler_generated'] ) end
'do_parse_octal'/2 = fun (_0,_1) -> case <_0,_1> of <#{}#,#{}#> when 'true' -> 0
<#{}#,Acc> when 'true' -> let <_2> = call 'binary':'bin_to_list' (Acc) in case call 'io_lib':'fread' ([126|[56|[117]]],_2) of <{'error',_7}> when 'true' -> call 'erlang':'throw' ({'error','invalid_tar_checksum'})
<{'ok',[Octal|[]],[]}> when 'true' -> Octal
<{'ok',_8,_9}> when 'true' -> call 'erlang':'throw' ({'error','invalid_tar_checksum'})
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<#{#<32>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> apply 'do_parse_octal'/2 (Rest,Acc)
<#{#<0>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> apply 'do_parse_octal'/2 (Rest,Acc)
<#{#<C>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> let <_4> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}# in apply 'do_parse_octal'/2 (Rest,_4)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'do_parse_octal',2}}] )-|['compiler_generated'] ) end
'parse_string'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> apply 'do_parse_string'/2 (Bin,#{}#)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'parse_string',1}}] )-|['compiler_generated'] ) end
'do_parse_string'/2 = fun (_0,_1) -> case <_0,_1> of <#{}#,Acc> when 'true' -> case call 'unicode':'characters_to_list' (Acc) of <Str> when call 'erlang':'is_list' (Str) -> Str
<{'incomplete',_X_Str,_X_Rest}> when 'true' -> call 'binary':'bin_to_list' (Acc)
<{'error',_X_Str,_X_Rest}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_header','invalid_string'}})
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<#{#<0>(8,1,'integer',['unsigned'|['big']]),#<_6>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> apply 'do_parse_string'/2 (#{}#,Acc)
<#{#<C>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> let <_3> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}# in apply 'do_parse_string'/2 (Rest,_3)
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'do_parse_string',2}}] )-|['compiler_generated'] ) end
'convert_header'/2 = fun (_0,_1) -> case <_0,_1> of <Bin,Reader = {'reader',_11,_12,Pos,_13}> when try let <_2> = call 'erlang':'byte_size' (Bin) in let <_3> = call 'erlang':'=:=' (_2,512) in let <_4> = call 'erlang':'rem' (Pos,512) in let <_5> = call 'erlang':'=:=' (_4,0) in call 'erlang':'and' (_3,_5) of <Try> -> Try catch <T,R> -> 'false' -> case apply 'get_format'/1 (Bin) of <0> when 'true' -> call 'erlang':'throw' ({'error','bad_header'})
<{'ok',Format,V7}> when 'true' -> apply 'unpack_format'/4 (Format,V7,Bin,Reader)
<{'error',Reason}> when 'true' -> call 'erlang':'throw' ({'error',{'bad_header',Reason}})
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<Bin,{'reader',_14,_15,Pos,_16}> when try let <_7> = call 'erlang':'byte_size' (Bin) in call 'erlang':'=:=' (_7,512) of <Try> -> Try catch <T,R> -> 'false' -> call 'erlang':'throw' ({'error','misaligned_read',Pos})
<Bin,_X_Reader> when try let <_8> = call 'erlang':'byte_size' (Bin) in call 'erlang':'=:=' (_8,0) of <Try> -> Try catch <T,R> -> 'false' -> 'eof'
<_X_Bin,_X_Reader> when 'true' -> call 'erlang':'throw' ({'error','eof'}) end
'fileinfo_to_header'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Name,Fi = {'file_info',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31},Link> when call 'erlang':'is_list' (Name) -> (case Fi of (<({'file_info',_32,_33,_34,_35,_36,_37,_rec73,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec74,_56}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_rec75}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_71,_72,_73,_74,_rec76,_75,_76,_77,_78,_79,_80,_81,_82}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_84,_85,_86,_rec77,_87,_88,_89,_90,_91,_92,_93,_94,_95}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_97,_98,_99,_100,_101,_rec78,_102,_103,_104,_105,_106,_107,_108}-|['compiler_generated'] )> when 'true' -> let <BaseHeader> = {'tar_header',Name,_rec73,_rec74,_rec75,0,_rec76,48,[],[],[],0,0,_rec77,_rec78} in apply 'do_fileinfo_to_header'/3 (BaseHeader,Fi,Link)-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_96> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16})-|[{'function_name',{'fileinfo_to_header',3}}] )-|['compiler_generated'] ) end
'do_fileinfo_to_header'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Header,{'file_info',Size,'regular',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53},_X_Link> when 'true' -> case Header of <{'tar_header',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' -> let <_4> = call 'erlang':'setelement' (8,Header,48) in call 'erlang':'setelement' (6,_4,Size)
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header = {'tar_header',Name,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81},{'file_info',_82,'directory',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93},_X_Link> when 'true' -> let <_rec80> = call 'erlang':'++' (Name,[47]) in case Header of <{'tar_header',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' -> let <_8> = call 'erlang':'setelement' (8,Header,53) in call 'erlang':'setelement' (2,_8,_rec80)
(<_108> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,{'file_info',_109,'symlink',_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120},Link> when 'true' -> case Header of <{'tar_header',_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134}> when 'true' -> let <_11> = call 'erlang':'setelement' (9,Header,Link) in call 'erlang':'setelement' (8,_11,50)
(<_135> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,Fi = {'file_info',_136,'device',_137,_138,_139,_140,Mode,_141,_142,_143,_144,_145,_146},_X_Link> when try let <_13> = call 'erlang':'band' (Mode,61440) in call 'erlang':'=:=' (_13,8192) of <Try> -> Try catch <T,R> -> 'false' -> (case Fi of (<({'file_info',_147,_148,_149,_150,_151,_152,_153,_154,_rec86,_155,_156,_157,_158}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec87,_169,_170,_171}-|['compiler_generated'] )> when 'true' -> case Header of <{'tar_header',_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186}> when 'true' -> let <_21> = call 'erlang':'setelement' (13,Header,_rec87) in let <_22> = call 'erlang':'setelement' (12,_21,_rec86) in call 'erlang':'setelement' (8,_22,51)
(<_187> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_172> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_159> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Header,Fi = {'file_info',_188,'device',_189,_190,_191,_192,Mode,_193,_194,_195,_196,_197,_198},_X_Link> when try let <_24> = call 'erlang':'band' (Mode,61440) in call 'erlang':'=:=' (_24,24576) of <Try> -> Try catch <T,R> -> 'false' -> (case Fi of (<({'file_info',_199,_200,_201,_202,_203,_204,_205,_206,_rec91,_207,_208,_209,_210}-|['compiler_generated'] )> when 'true' -> (case Fi of (<({'file_info',_212,_213,_214,_215,_216,_217,_218,_219,_220,_rec92,_221,_222,_223}-|['compiler_generated'] )> when 'true' -> case Header of <{'tar_header',_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238}> when 'true' -> let <_32> = call 'erlang':'setelement' (13,Header,_rec92) in let <_33> = call 'erlang':'setelement' (12,_32,_rec91) in call 'erlang':'setelement' (8,_33,52)
(<_239> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_224> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_211> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','file_info'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Header,{'file_info',_240,'other',_241,_242,_243,_244,Mode,_245,_246,_247,_248,_249,_250},_X_Link> when try let <_35> = call 'erlang':'band' (Mode,61440) in call 'erlang':'=:=' (_35,4096) of <Try> -> Try catch <T,R> -> 'false' -> case Header of <{'tar_header',_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264}> when 'true' -> call 'erlang':'setelement' (8,Header,54)
(<_265> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,Fi,_X_Link> when 'true' -> (case Header of (<({'tar_header',_rec94,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278}-|['compiler_generated'] )> when 'true' -> {'error',{'invalid_file_type',_rec94,Fi}}-|['compiler_generated'] )
(<_279> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'is_ascii'/1 = fun (_0) -> case _0 of <Str> when call 'erlang':'is_list' (_0) -> let <_3> = fun (_1) -> call 'erlang':'>=' (_1,128) in let <_4> = call 'lists':'any' (_3,Str) in call 'erlang':'not' (_4)
<Bin> when call 'erlang':'is_binary' (_0) -> apply 'is_ascii1'/1 (Bin)
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'is_ascii',1}}] )-|['compiler_generated'] ) end
'is_ascii1'/1 = fun (_0) -> case _0 of <#{}#> when 'true' -> 'true'
<#{#<C>(8,1,'integer',['unsigned'|['big']]),#<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#> when call 'erlang':'>=' (C,128) -> 'false'
<#{#<_2>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'is_ascii1'/1 (Rest)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'is_ascii1',1}}] )-|['compiler_generated'] ) end
'to_ascii'/1 = fun (_0) -> case _0 of <Str> when call 'erlang':'is_list' (_0) -> case apply 'is_ascii'/1 (Str) of <'true'> when 'true' -> call 'unicode':'characters_to_binary' (Str)
<'false'> when 'true' -> let <_3> = fun (_1) -> call 'erlang':'<' (_1,128) in let <Chars> = call 'lists':'filter' (_3,Str) in call 'unicode':'characters_to_binary' (Chars)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Bin> when call 'erlang':'is_binary' (_0) -> apply 'to_ascii'/2 (Bin,#{}#)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'to_ascii',1}}] )-|['compiler_generated'] ) end
'to_ascii'/2 = fun (_0,_1) -> case <_0,_1> of <#{}#,Acc> when 'true' -> Acc
<#{#<C>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when call 'erlang':'<' (C,128) -> let <_2> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<C>(8,1,'integer',['unsigned'|['big']])}# in apply 'to_ascii'/2 (Rest,_2)
<#{#<_5>(8,1,'integer',['unsigned'|['big']]),#<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' -> apply 'to_ascii'/2 (Rest,Acc)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'to_ascii',2}}] )-|['compiler_generated'] ) end
'is_header_only_type'/1 = fun (_0) -> case _0 of <50> when 'true' -> 'true'
<49> when 'true' -> 'true'
<53> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'foldl_read'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reader = {'reader',_21,'read',_22,_23},Fun,Accu,Opts = {'read_opts',_24,_25,_26,_27,_28,_29}> when call 'erlang':'is_function' (Fun,4) -> case apply 'foldl_read0'/4 (Reader,Fun,Accu,Opts) of <{'ok',Result,_X_Reader2}> when 'true' -> Result
<Err = {'error',_30}> when 'true' -> Err
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<{'reader',_31,Access,_32,_33},_X_Fun,_X_Accu,_X_Opts> when 'true' -> {'error',{'read_mode_expected',Access}}
<TarName,Fun,Accu,Opts = {'read_opts',_34,_35,_36,_37,_38,_39}> when call 'erlang':'is_function' (Fun,4) -> try (case Opts of (<({'read_opts',_40,_41,_42,_43,_rec95,_44}-|['compiler_generated'] )> when 'true' -> apply 'open'/2 (TarName,['read'|_rec95])-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <_7> -> case _7 of <{'ok',Reader = {'reader',_46,'read',_47,_48}}> when 'true' -> letrec 'after$^0'/0 = fun () -> apply 'close'/1 (Reader) in try apply 'foldl_read'/4 (Reader,Fun,Accu,Opts) of <_9> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _9 catch <_12,_11,_10> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_10,_11)
<Err = {'error',_49}> when 'true' -> Err
(<_13> when 'true' -> primop 'match_fail' ({'try_clause',_13})-|['compiler_generated'] ) end catch <_16,_15,_14> -> case <_16,_15,_14> of <('throw'-|['compiler_generated'] ),Err,_50> when 'true' -> Err
(<_57,_58,_59> when 'true' -> primop 'raise' (_59,_58)-|['compiler_generated'] ) end
(<_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17})-|[{'function_name',{'foldl_read',4}}] )-|['compiler_generated'] ) end
'foldl_read0'/4 = fun (_0,_1,_2,_3) -> try apply 'foldl_read1'/5 (_1,_2,_0,_3,~{}~) of <_4> -> case _4 of <Ok = {'ok',_13,_14}> when 'true' -> Ok
(<_5> when 'true' -> primop 'match_fail' ({'try_clause',_5})-|['compiler_generated'] ) end catch <_8,_7,_6> -> case <_8,_7,_6> of <('throw'-|['compiler_generated'] ),({('error'-|['compiler_generated'] ),({Reason,Format,Args}-|['compiler_generated'] )}-|['compiler_generated'] ),_15> when 'true' -> do apply 'read_verbose'/3 (_3,Format,Args) {'error',Reason}
<('throw'-|['compiler_generated'] ),Err,_16> when 'true' -> Err
(<_17,_18,_19> when 'true' -> primop 'raise' (_19,_18)-|['compiler_generated'] ) end
'foldl_read1'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'skip_unread'/1 (_2) of <{'ok',Reader1}> when 'true' -> case apply 'get_header'/1 (Reader1) of <'eof'> when 'true' -> apply _0 ('eof',Reader1,_3,_1)
<{Header,Reader2}> when 'true' -> (case Header of (<({'tar_header',_25,_26,_27,_28,_29,_30,_rec96,_31,_32,_33,_34,_35,_36,_37}-|['compiler_generated'] )> when 'true' -> case _rec96 of <120> when 'true' -> case apply 'parse_pax'/1 (Reader2) of <{ExtraHeaders2,Reader3}> when 'true' -> let <ExtraHeaders3> = call 'maps':'merge' (_4,ExtraHeaders2) in apply 'foldl_read1'/5 (_0,_1,Reader3,_3,ExtraHeaders3)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<76> when 'true' -> case apply 'get_real_name'/1 (Reader2) of <{RealName,Reader3}> when 'true' -> let <_11> = apply 'parse_string'/1 (RealName) in let <ExtraHeaders2> = call 'maps':'put' (#{#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,_11,_4) in apply 'foldl_read1'/5 (_0,_1,Reader3,_3,ExtraHeaders2)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<75> when 'true' -> case apply 'get_real_name'/1 (Reader2) of <{RealName,Reader3}> when 'true' -> let <_14> = apply 'parse_string'/1 (RealName) in let <ExtraHeaders2> = call 'maps':'put' (#{#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,_14,_4) in apply 'foldl_read1'/5 (_0,_1,Reader3,_3,ExtraHeaders2)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<_39> when 'true' -> let <Header1> = apply 'merge_pax'/2 (Header,_4) in case apply _0 (Header1,Reader2,_3,_1) of <{'ok',NewAccu,Reader3}> when 'true' -> apply 'foldl_read1'/5 (_0,NewAccu,Reader3,_3,~{}~)
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'merge_pax'/2 = fun (_0,_1) -> case <_0,_1> of <Header,ExtraHeaders> when call 'erlang':'is_map' (ExtraHeaders) -> let <_2> = call 'maps':'to_list' (ExtraHeaders) in apply 'do_merge_pax'/2 (Header,_2)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'merge_pax',2}}] )-|['compiler_generated'] ) end
'do_merge_pax'/2 = fun (_0,_1) -> case <_0,_1> of <Header,[]> when 'true' -> Header
<Header,[{#{#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,Path}|Rest]> when 'true' -> let <_rec97> = call 'unicode':'characters_to_list' (Path) in case Header of <{'tar_header',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' -> let <_5> = call 'erlang':'setelement' (2,Header,_rec97) in apply 'do_merge_pax'/2 (_5,Rest)
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<107>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']])}#,LinkPath}|Rest]> when 'true' -> let <_rec99> = call 'unicode':'characters_to_list' (LinkPath) in case Header of <{'tar_header',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}> when 'true' -> let <_9> = call 'erlang':'setelement' (9,Header,_rec99) in apply 'do_merge_pax'/2 (_9,Rest)
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<103>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Gname}|Rest]> when 'true' -> let <_rec101> = call 'unicode':'characters_to_list' (Gname) in case Header of <{'tar_header',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}> when 'true' -> let <_13> = call 'erlang':'setelement' (11,Header,_rec101) in apply 'do_merge_pax'/2 (_13,Rest)
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Uname}|Rest]> when 'true' -> let <_rec103> = call 'unicode':'characters_to_list' (Uname) in case Header of <{'tar_header',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102}> when 'true' -> let <_17> = call 'erlang':'setelement' (10,Header,_rec103) in apply 'do_merge_pax'/2 (_17,Rest)
(<_103> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<117>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,Uid}|Rest]> when 'true' -> let <Uid2> = call 'erlang':'binary_to_integer' (Uid) in case Header of <{'tar_header',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' -> let <_21> = call 'erlang':'setelement' (4,Header,Uid2) in apply 'do_merge_pax'/2 (_21,Rest)
(<_118> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<103>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,Gid}|Rest]> when 'true' -> let <Gid2> = call 'erlang':'binary_to_integer' (Gid) in case Header of <{'tar_header',_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132}> when 'true' -> let <_25> = call 'erlang':'setelement' (5,Header,Gid2) in apply 'do_merge_pax'/2 (_25,Rest)
(<_133> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Atime}|Rest]> when 'true' -> let <Atime2> = apply 'parse_pax_time'/1 (Atime) in case Header of <{'tar_header',_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147}> when 'true' -> let <_29> = call 'erlang':'setelement' (14,Header,Atime2) in apply 'do_merge_pax'/2 (_29,Rest)
(<_148> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<109>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Mtime}|Rest]> when 'true' -> let <Mtime2> = apply 'parse_pax_time'/1 (Mtime) in case Header of <{'tar_header',_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162}> when 'true' -> let <_33> = call 'erlang':'setelement' (7,Header,Mtime2) in apply 'do_merge_pax'/2 (_33,Rest)
(<_163> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Ctime}|Rest]> when 'true' -> let <Ctime2> = apply 'parse_pax_time'/1 (Ctime) in case Header of <{'tar_header',_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177}> when 'true' -> let <_37> = call 'erlang':'setelement' (15,Header,Ctime2) in apply 'do_merge_pax'/2 (_37,Rest)
(<_178> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<115>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<122>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#,Size}|Rest]> when 'true' -> let <Size2> = call 'erlang':'binary_to_integer' (Size) in case Header of <{'tar_header',_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192}> when 'true' -> let <_41> = call 'erlang':'setelement' (6,Header,Size2) in apply 'do_merge_pax'/2 (_41,Rest)
(<_193> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Header,[{#{#<83>(8,1,'integer',['unsigned'|['big']]),#<67>(8,1,'integer',['unsigned'|['big']]),#<72>(8,1,'integer',['unsigned'|['big']]),#<73>(8,1,'integer',['unsigned'|['big']]),#<76>(8,1,'integer',['unsigned'|['big']]),#<89>(8,1,'integer',['unsigned'|['big']]),#<46>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<46>(8,1,'integer',['unsigned'|['big']]),#<_X_Key>('all',8,'binary',['unsigned'|['big']])}#,_X_Value}|Rest]> when 'true' -> apply 'do_merge_pax'/2 (Header,Rest)
<Header,[_X_Ignore|Rest]> when 'true' -> apply 'do_merge_pax'/2 (Header,Rest)
(<_43,_42> when 'true' -> (primop 'match_fail' ({'function_clause',_43,_42})-|[{'function_name',{'do_merge_pax',2}}] )-|['compiler_generated'] ) end
'parse_pax_time'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> let <_17> = case call 'binary':'split' (Bin,[#{#<46>(8,1,'integer',['unsigned'|['big']])}#]) of <[SecondsStr|[NanoStr0|[]]]> when 'true' -> let <Seconds> = call 'erlang':'binary_to_integer' (SecondsStr) in case <> of <> when try let <_2> = call 'erlang':'byte_size' (NanoStr0) in call 'erlang':'<' (_2,9) of <Try> -> Try catch <T,R> -> 'false' -> let <_3> = call 'erlang':'byte_size' (NanoStr0) in let <PaddingN> = call 'erlang':'-' (9,_3) in let <Padding> = call 'binary':'copy' (#{#<48>(8,1,'integer',['unsigned'|['big']])}#,PaddingN) in let <NanoStr1> = #{#<NanoStr0>('all',8,'binary',['unsigned'|['big']]),#<Padding>('all',8,'binary',['unsigned'|['big']])}# in let <Nano> = call 'erlang':'binary_to_integer' (NanoStr1) in let <_8> = call 'erlang':'*' (Seconds,1000000000) in call 'erlang':'+' (_8,Nano)
<> when try let <_9> = call 'erlang':'byte_size' (NanoStr0) in call 'erlang':'>' (_9,9) of <Try> -> Try catch <T,R> -> 'false' -> let <NanoStr1> = call 'erlang':'binary_part' (NanoStr0,0,9) in let <Nano> = call 'erlang':'binary_to_integer' (NanoStr1) in let <_12> = call 'erlang':'*' (Seconds,1000000000) in call 'erlang':'+' (_12,Nano)
<> when 'true' -> let <_14> = call 'erlang':'*' (Seconds,1000000000) in let <_13> = call 'erlang':'binary_to_integer' (NanoStr0) in call 'erlang':'+' (_14,_13) end
<[SecondsStr|[]]> when 'true' -> let <_15> = call 'erlang':'binary_to_integer' (SecondsStr) in call 'erlang':'*' (_15,1000000000)
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end in let <Micro> = call 'erlang':'div' (_17,1000) in let <Mega> = call 'erlang':'div' (Micro,1000000000000) in let <_22> = call 'erlang':'div' (Micro,1000000) in let <_21> = call 'erlang':'*' (Mega,1000000) in call 'erlang':'-' (_22,_21)
(<_24> when 'true' -> (primop 'match_fail' ({'function_clause',_24})-|[{'function_name',{'parse_pax_time',1}}] )-|['compiler_generated'] ) end
'parse_pax'/1 = fun (_0) -> case _0 of <{'reg_file_reader',Handle,0,_3,_4}> when 'true' -> {~{}~,Handle}
<{'reg_file_reader',Handle0,NumBytes,_5,_6}> when 'true' -> case apply 'do_read'/2 (Handle0,NumBytes) of <{'ok',Bytes,Handle1}> when 'true' -> apply 'do_parse_pax'/3 (Handle1,Bytes,~{}~)
<Err = {'error',_7}> when 'true' -> call 'erlang':'throw' (Err)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'parse_pax',1}}] )-|['compiler_generated'] ) end
'do_parse_pax'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader,#{}#,Headers> when 'true' -> {Headers,Reader}
<Reader,Bin,Headers> when 'true' -> case apply 'parse_pax_record'/1 (Bin) of <{Key,Value,Residual}> when 'true' -> let <NewHeaders> = call 'maps':'put' (Key,Value,Headers) in apply 'do_parse_pax'/3 (Reader,Residual,NewHeaders)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end end
'parse_pax_record'/1 = fun (_0) -> case _0 of <Bin> when call 'erlang':'is_binary' (_0) -> case call 'binary':'split' (Bin,[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]) of <[Record|[Residual|[]]]> when 'true' -> case call 'binary':'split' (Record,[#{#<32>(8,1,'integer',['unsigned'|['big']])}#],['trim_all']) of <[_X_Len|[Record1|[]]]> when 'true' -> case call 'binary':'split' (Record1,[#{#<61>(8,1,'integer',['unsigned'|['big']])}#],['trim_all']) of <[AttrName|[AttrValue|[]]]> when 'true' -> {AttrName,AttrValue,Residual}
<_X_Other> when 'true' -> call 'erlang':'throw' ({'error','malformed_pax_record'}) end
<_X_Other> when 'true' -> call 'erlang':'throw' ({'error','malformed_pax_record'}) end
<_X_Other> when 'true' -> call 'erlang':'throw' ({'error','malformed_pax_record'}) end
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'parse_pax_record',1}}] )-|['compiler_generated'] ) end
'get_real_name'/1 = fun (_0) -> case _0 of <{'reg_file_reader',Handle,0,_4,_5}> when 'true' -> {[],Handle}
<{'reg_file_reader',Handle0,NumBytes,_6,_7}> when 'true' -> case apply 'do_read'/2 (Handle0,NumBytes) of <{'ok',RealName,Handle1}> when 'true' -> {RealName,Handle1}
<Err = {'error',_8}> when 'true' -> call 'erlang':'throw' (Err)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
<Reader0 = {'sparse_file_reader',_9,NumBytes,_10,_11,_12}> when 'true' -> case apply 'do_read'/2 (Reader0,NumBytes) of <{'ok',RealName,Reader1}> when 'true' -> {RealName,Reader1}
<Err = {'error',_13}> when 'true' -> call 'erlang':'throw' (Err)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'get_real_name',1}}] )-|['compiler_generated'] ) end
'skip_file'/1 = fun (_0) -> case _0 of <Reader = {'reg_file_reader',Handle0,_13,Pos,Size}> when 'true' -> let <Padding> = apply 'skip_padding'/1 (Size) in (case Handle0 of (<({'reader',_14,_15,_rec111,_16}-|['compiler_generated'] )> when 'true' -> let <_2> = call 'erlang':'-' (Size,Pos) in let <_5> = call 'erlang':'+' (_rec111,_2) in let <AbsPos> = call 'erlang':'+' (_5,Padding) in case apply 'do_position'/2 (Handle0,AbsPos) of <{'ok',_18,Handle1}> when 'true' -> case Reader of <{'reg_file_reader',_rec113,_rec114,_rec115,_rec116}> when 'true' -> {'reg_file_reader',Handle1,0,Size,_rec116}
(<_19> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reg_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Err> when 'true' -> call 'erlang':'throw' (Err) end-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Reader = {'sparse_file_reader',_20,_21,Pos,Size,_22}> when 'true' -> let <_10> = call 'erlang':'-' (Size,Pos) in case apply 'do_read'/2 (Reader,_10) of <{'ok',_23,Reader2}> when 'true' -> Reader2
<Err> when 'true' -> call 'erlang':'throw' (Err) end
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'skip_file',1}}] )-|['compiler_generated'] ) end
'skip_padding'/1 = fun (_0) -> case _0 of <0> when 'true' -> 0
<Size> when try let <_1> = call 'erlang':'rem' (_0,512) in call 'erlang':'=:=' (_1,0) of <Try> -> Try catch <T,R> -> 'false' -> 0
<Size> when call 'erlang':'=<' (_0,512) -> call 'erlang':'-' (512,Size)
<Size> when 'true' -> let <_2> = call 'erlang':'rem' (Size,512) in call 'erlang':'-' (512,_2) end
'skip_unread'/1 = fun (_0) -> case _0 of <Reader0 = {'reader',_9,_10,Pos,_11}> when try let <_1> = call 'erlang':'rem' (Pos,512) in call 'erlang':'>' (_1,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_2> = call 'erlang':'+' (Pos,512) in let <Padding> = apply 'skip_padding'/1 (_2) in let <AbsPos> = call 'erlang':'+' (Pos,Padding) in case apply 'do_position'/2 (Reader0,AbsPos) of <{'ok',_12,Reader1}> when 'true' -> {'ok',Reader1}
<Err> when 'true' -> call 'erlang':'throw' (Err) end
<Reader = {'reader',_13,_14,_15,_16}> when 'true' -> {'ok',Reader}
<{'reg_file_reader',Handle,0,_17,_18}> when 'true' -> apply 'skip_unread'/1 (Handle)
<Reader = {'reg_file_reader',_19,_20,_21,_22}> when 'true' -> case apply 'skip_file'/1 (Reader) of <{'reg_file_reader',Handle,_23,_24,_25}> when 'true' -> {'ok',Handle}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'sparse_file_reader',Handle,0,_26,_27,_28}> when 'true' -> apply 'skip_unread'/1 (Handle)
<Reader = {'sparse_file_reader',_29,_30,_31,_32,_33}> when 'true' -> case apply 'skip_file'/1 (Reader) of <{'sparse_file_reader',Handle,_34,_35,_36,_37}> when 'true' -> {'ok',Handle}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'skip_unread',1}}] )-|['compiler_generated'] ) end
'write_extracted_element'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'tar_header',Name,_18,_19,_20,_21,_22,Type,_23,_24,_25,_26,_27,_28,_29},Bin,Opts = {'read_opts',_30,_31,_32,'memory',_33,_34}> when 'true' -> case apply 'typeflag'/1 (Type) of <'regular'> when 'true' -> do apply 'read_verbose'/3 (Opts,[120|[32|[126|[116|[115|[126|[110]]]]]]],[Name|[]]) {'ok',{Name,Bin}}
<_35> when 'true' -> 'ok' end
<Header = {'tar_header',Name0,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48},Bin,Opts> when 'true' -> let <Name1> = apply 'make_safe_path'/2 (Name0,Opts) in (case Header of (<({'tar_header',_49,_50,_51,_52,_53,_54,_rec117,_55,_56,_57,_58,_59,_60,_61}-|['compiler_generated'] )> when 'true' -> let <_12> = case apply 'typeflag'/1 (_rec117) of <'regular'> when 'true' -> apply 'create_regular'/4 (Name1,Name0,Bin,Opts)
<'directory'> when 'true' -> do apply 'read_verbose'/3 (Opts,[120|[32|[126|[116|[115|[126|[110]]]]]]],[Name0|[]]) apply 'create_extracted_dir'/2 (Name1,Opts)
<'symlink'> when 'true' -> do apply 'read_verbose'/3 (Opts,[120|[32|[126|[116|[115|[126|[110]]]]]]],[Name0|[]]) let <LinkName> = apply 'safe_link_name'/2 (Header,Opts) in apply 'create_symlink'/3 (Name1,LinkName,Opts)
<Device> when try (let <_10> = case call 'erlang':'=:=' (Device,'char') of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Device,'block')-|['compiler_generated'] )
(<_8> when 'true' -> _8-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'create_regular'/4 (Name1,Name0,#{}#,Opts)
<'fifo'> when 'true' -> apply 'create_regular'/4 (Name1,Name0,#{}#,Opts)
<Other> when 'true' -> do apply 'read_verbose'/3 (Opts,[120|[32|[126|[116|[115|[32|[45|[32|[117|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name0|[Other|[]]]) 'not_written' end in case _12 of <'ok'> when 'true' -> apply 'set_extracted_file_info'/2 (Name1,Header)
<'not_written'> when 'true' -> 'ok'
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_17,_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16,_15})-|[{'function_name',{'write_extracted_element',3}}] )-|['compiler_generated'] ) end
'make_safe_path'/2 = fun (_0,_1) -> case <_0,_1> of <[47|Path],Opts> when 'true' -> apply 'make_safe_path'/2 (Path,Opts)
<Path0,{'read_opts',Cwd,_5,_6,_7,_8,_9}> when 'true' -> case call 'filelib':'safe_relative_path' (Path0,Cwd) of <'unsafe'> when 'true' -> call 'erlang':'throw' ({'error',{Path0,'unsafe_path'}})
<Path> when 'true' -> call 'filename':'absname' (Path,Cwd) end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'make_safe_path',2}}] )-|['compiler_generated'] ) end
'safe_link_name'/2 = fun (_0,_1) -> case <_0,_1> of <{'tar_header',_5,_6,_7,_8,_9,_10,_11,Path0,_12,_13,_14,_15,_16,_17},{'read_opts',Cwd,_18,_19,_20,_21,_22}> when 'true' -> case call 'filelib':'safe_relative_path' (Path0,Cwd) of <'unsafe'> when 'true' -> call 'erlang':'throw' ({'error',{Path0,'unsafe_symlink'}})
<Path> when 'true' -> Path end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'safe_link_name',2}}] )-|['compiler_generated'] ) end
'create_regular'/4 = fun (_0,_1,_2,_3) -> case apply 'write_extracted_file'/3 (_0,_2,_3) of <'not_written'> when 'true' -> do apply 'read_verbose'/3 (_3,[120|[32|[126|[116|[115|[32|[45|[32|[101|[120|[105|[115|[116|[115|[44|[32|[110|[111|[116|[32|[99|[114|[101|[97|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[]]) 'not_written'
<Ok> when 'true' -> do apply 'read_verbose'/3 (_3,[120|[32|[126|[116|[115|[126|[110]]]]]]],[_1|[]]) Ok end
'create_extracted_dir'/2 = fun (_0,_1) -> case call 'file':'make_dir' (_0) of <'ok'> when 'true' -> 'ok'
<{'error','enotsup'}> when 'true' -> 'not_written'
<{'error','eexist'}> when 'true' -> 'not_written'
<{'error','enoent'}> when 'true' -> apply 'make_dirs'/2 (_0,'dir')
<_@r0 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r0)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'create_symlink'/3 = fun (_0,_1,_2) -> case call 'file':'make_symlink' (_1,_0) of <'ok'> when 'true' -> 'ok'
<{'error','enoent'}> when 'true' -> case apply 'make_dirs'/2 (_0,'file') of <'ok'> when 'true' -> apply 'create_symlink'/3 (_0,_1,_2)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<{'error','eexist'}> when 'true' -> 'not_written'
<{'error','enotsup'}> when 'true' -> do apply 'read_verbose'/3 (_2,[120|[32|[126|[116|[115|[32|[45|[32|[115|[121|[109|[98|[111|[108|[105|[99|[32|[108|[105|[110|[107|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_0|[]]) 'not_written'
<_@r0 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r0)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'write_extracted_file'/3 = fun (_0,_1,_2) -> (case _2 of (<({'read_opts',_13,_rec118,_14,_15,_16,_17}-|['compiler_generated'] )> when 'true' -> let <_7> = case _rec118 of <'true'> when 'true' -> case call 'file':'read_file_info' (_0) of <{'ok',_19}> when 'true' -> 'false'
<_20> when 'true' -> 'true' end
<'false'> when 'true' -> 'true'
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in case _7 of <'true'> when 'true' -> apply 'write_file'/2 (_0,_1)
<'false'> when 'true' -> 'not_written'
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'write_file'/2 = fun (_0,_1) -> case call 'file':'write_file' (_0,_1) of <'ok'> when 'true' -> 'ok'
<{'error','enoent'}> when 'true' -> case apply 'make_dirs'/2 (_0,'file') of <'ok'> when 'true' -> apply 'write_file'/2 (_0,_1)
<_@r0 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r0)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<_@r1 = {'error',Reason}> when 'true' -> call 'erlang':'throw' (_@r1)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'set_extracted_file_info'/2 = fun (_0,_1) -> case <_0,_1> of <_5,{'tar_header',_6,_7,_8,_9,_10,_11,50,_12,_13,_14,_15,_16,_17,_18}> when 'true' -> 'ok'
<_19,{'tar_header',_20,_21,_22,_23,_24,_25,49,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> 'ok'
<Name,Header = {'tar_header',_33,_34,_35,_36,_37,_38,51,_39,_40,_41,_42,_43,_44,_45}> when 'true' -> apply 'set_device_info'/2 (Name,Header)
<Name,Header = {'tar_header',_46,_47,_48,_49,_50,_51,52,_52,_53,_54,_55,_56,_57,_58}> when 'true' -> apply 'set_device_info'/2 (Name,Header)
<Name,{'tar_header',_59,Mode,_60,_61,_62,Mtime,_63,_64,_65,_66,_67,_68,_69,_70}> when 'true' -> let <Info> = {'file_info','undefined','undefined','undefined','undefined',Mtime,'undefined',Mode,'undefined','undefined','undefined','undefined','undefined','undefined'} in call 'file':'write_file_info' (Name,Info,[{'time','posix'}])
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'set_extracted_file_info',2}}] )-|['compiler_generated'] ) end
'set_device_info'/2 = fun (_0,_1) -> case <_0,_1> of <Name,Header = {'tar_header',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' -> (case Header of (<({'tar_header',_31,_32,_33,_34,_35,_rec119,_36,_37,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_45,_rec120,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec121,_69,_70,_71}-|['compiler_generated'] )> when 'true' -> (case Header of (<({'tar_header',_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_rec122,_84,_85}-|['compiler_generated'] )> when 'true' -> let <Info> = {'file_info','undefined','undefined','undefined','undefined',_rec119,'undefined',_rec120,'undefined',_rec121,_rec122,'undefined','undefined','undefined'} in call 'file':'write_file_info' (Name,Info)-|['compiler_generated'] )
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_72> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tar_header'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'set_device_info',2}}] )-|['compiler_generated'] ) end
'make_dirs'/2 = fun (_0,_1) -> case <_0,_1> of <Name,'file'> when 'true' -> call 'filelib':'ensure_dir' (Name)
<Name,'dir'> when 'true' -> let <_2> = call 'filename':'join' (Name,[42]) in call 'filelib':'ensure_dir' (_2)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'make_dirs',2}}] )-|['compiler_generated'] ) end
'read_verbose'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'read_opts',_6,_7,_8,_9,_10,'true'},Format,Args> when 'true' -> call 'io':'format' (Format,Args)
<_11,_12,_13> when 'true' -> 'ok' end
'add_verbose'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'add_opts',_6,_7,'true',_8,_9,_10,_11,_12},Format,Args> when 'true' -> call 'io':'format' (Format,Args)
<_13,_14,_15> when 'true' -> 'ok' end
'do_write'/2 = fun (_0,_1) -> case <_0,_1> of <Reader0 = {'reader',Handle,_9,_10,Fun},Data> when call 'erlang':'is_function' (Fun,2) -> case apply Fun ('write',{Handle,Data}) of <'ok'> when 'true' -> case apply 'do_position'/2 (Reader0,{'cur',0}) of <{'ok',Pos,Reader1}> when 'true' -> case Reader1 of <{'reader',_11,_12,_13,_14}> when 'true' -> let <_5> = call 'erlang':'setelement' (4,Reader1,Pos) in {'ok',_5}
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<Err = {'error',_16}> when 'true' -> Err
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'do_write',2}}] )-|['compiler_generated'] ) end
'do_copy'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader = {'reader',_13,_14,_15,Fun},Source,Opts = {'add_opts',_16,0,_17,_18,_19,_20,_21,_22}> when call 'erlang':'is_function' (Fun,2) -> case Opts of <{'add_opts',_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' -> let <_5> = call 'erlang':'setelement' (3,Opts,65536) in apply 'do_copy'/3 (Reader,Source,_5)
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','add_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Reader = {'reader',_32,_33,_34,Fun},Source,{'add_opts',_35,ChunkSize,_36,_37,_38,_39,_40,_41}> when call 'erlang':'is_function' (Fun,2) -> case call 'file':'open' (Source,['read'|['binary']]) of <{'ok',SourceFd}> when 'true' -> case apply 'copy_chunked'/4 (Reader,SourceFd,ChunkSize,0) of <Ok = {'ok',_X_Copied,_X_Reader2}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (SourceFd)-|['result_not_wanted'] ) Ok
<Err> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (SourceFd)-|['result_not_wanted'] ) call 'erlang':'throw' (Err) end
<Err> when 'true' -> call 'erlang':'throw' (Err) end
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'do_copy',3}}] )-|['compiler_generated'] ) end
'copy_chunked'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reader = {'reader',_12,_13,_14,_15},Source,ChunkSize,Copied> when 'true' -> case call 'file':'read' (Source,ChunkSize) of <{'ok',Bin}> when 'true' -> case apply 'do_write'/2 (Reader,Bin) of <{'ok',Reader2}> when 'true' -> let <_5> = call 'erlang':'byte_size' (Bin) in let <_6> = call 'erlang':'+' (Copied,_5) in apply 'copy_chunked'/4 (Reader2,Source,ChunkSize,_6)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<'eof'> when 'true' -> {'ok',Copied,Reader}
<Other> when 'true' -> Other end
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'copy_chunked',4}}] )-|['compiler_generated'] ) end
'do_position'/2 = fun (_0,_1) -> case <_0,_1> of <Reader = {'reader',Handle,_9,_10,Fun},Pos> when call 'erlang':'is_function' (Fun,2) -> case apply Fun ('position',{Handle,Pos}) of <{'ok',NewPos}> when 'true' -> case apply Fun ('position',{Handle,{'cur',0}}) of <{'ok',AbsPos}> when 'true' -> case Reader of <{'reader',_11,_12,_13,_14}> when 'true' -> let <_5> = call 'erlang':'setelement' (4,Reader,AbsPos) in {'ok',NewPos,_5}
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<Other> when 'true' -> Other end
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'do_position',2}}] )-|['compiler_generated'] ) end
'do_read'/2 = fun (_0,_1) -> case <_0,_1> of <Reader = {'reg_file_reader',Handle,_27,Pos,Size},Len> when 'true' -> let <NumBytes> = call 'erlang':'-' (Size,Pos) in let <_4> = case <> of <> when try let <_3> = call 'erlang':'-' (NumBytes,Len) in call 'erlang':'<' (_3,0) of <Try> -> Try catch <T,R> -> 'false' -> NumBytes
<> when 'true' -> Len end in case apply 'do_read'/2 (Handle,_4) of <{'ok',Bin,Handle2}> when 'true' -> let <NewPos> = call 'erlang':'+' (Pos,_4) in let <NumBytes2> = call 'erlang':'-' (Size,NewPos) in case Reader of <{'reg_file_reader',_rec127,_rec128,_rec129,_rec130}> when 'true' -> let <_10> = {'reg_file_reader',Handle2,NumBytes2,NewPos,_rec130} in {'ok',Bin,_10}
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reg_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Other> when 'true' -> Other end
<Reader = {'sparse_file_reader',_29,_30,_31,_32,_33},Len> when 'true' -> apply 'do_sparse_read'/2 (Reader,Len)
<Reader = {'reader',Handle,_34,Pos,Fun},Len> when call 'erlang':'is_function' (Fun,2) -> case apply Fun ('read2',{Handle,Len}) of <{'ok',List}> when call 'erlang':'is_list' (List) -> let <Bin> = call 'erlang':'list_to_binary' (List) in let <_14> = call 'erlang':'byte_size' (Bin) in let <NewPos> = call 'erlang':'+' (Pos,_14) in case Reader of <{'reader',_35,_36,_37,_38}> when 'true' -> let <_18> = call 'erlang':'setelement' (4,Reader,NewPos) in {'ok',Bin,_18}
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',Bin}> when call 'erlang':'is_binary' (Bin) -> let <_19> = call 'erlang':'byte_size' (Bin) in let <NewPos> = call 'erlang':'+' (Pos,_19) in case Reader of <{'reader',_40,_41,_42,_43}> when 'true' -> let <_23> = call 'erlang':'setelement' (4,Reader,NewPos) in {'ok',Bin,_23}
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Other> when 'true' -> Other end
(<_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25})-|[{'function_name',{'do_read',2}}] )-|['compiler_generated'] ) end
'do_sparse_read'/2 = fun (_0,_1) -> apply 'do_sparse_read'/3 (_0,_1,#{}#)
'do_sparse_read'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader0 = {'sparse_file_reader',_47,_48,_49,_50,[{'sparse_entry',_51,0}|Entries]},Len,Acc> when 'true' -> case Reader0 of <{'sparse_file_reader',_52,_53,_54,_55,_56}> when 'true' -> let <_5> = call 'erlang':'setelement' (6,Reader0,Entries) in apply 'do_sparse_read'/3 (_5,Len,Acc)
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Reader0 = {'sparse_file_reader',_58,_59,Pos,Size,[]},Len,Acc> when call 'erlang':'<' (Pos,Size) -> case apply 'read_sparse_hole'/3 (Reader0,Size,Len) of <{'ok',Bin,Reader1}> when 'true' -> let <_9> = call 'erlang':'byte_size' (Bin) in let <_10> = call 'erlang':'-' (Len,_9) in let <_8> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}# in apply 'do_sparse_read'/3 (Reader1,_10,_8)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<Reader = {'sparse_file_reader',_60,_61,_62,_63,[]},_X_Len,Acc> when 'true' -> {'ok',Acc,Reader}
<Reader = {'sparse_file_reader',_64,_65,_66,_67,_68},0,Acc> when 'true' -> {'ok',Acc,Reader}
<Reader0 = {'sparse_file_reader',_69,_70,Pos,_71,[{'sparse_entry',Offset,_72}|_73]},Len,Acc> when call 'erlang':'<' (Pos,Offset) -> let <_11> = call 'erlang':'-' (Offset,Pos) in case apply 'read_sparse_hole'/3 (Reader0,Offset,_11) of <{'ok',Bin,Reader1}> when 'true' -> let <_14> = call 'erlang':'byte_size' (Bin) in let <_15> = call 'erlang':'-' (Len,_14) in let <_13> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}# in apply 'do_sparse_read'/3 (Reader1,_15,_13)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<Reader0 = {'sparse_file_reader',_74,_75,Pos,_76,[Entry|Entries]},Len,Acc> when 'true' -> (case Entry of (<({'sparse_entry',_rec134,_77}-|['compiler_generated'] )> when 'true' -> (case Entry of (<({'sparse_entry',_79,_rec135}-|['compiler_generated'] )> when 'true' -> let <EndPos> = call 'erlang':'+' (_rec134,_rec135) in let <NumBytes> = call 'erlang':'-' (EndPos,Pos) in let <_22> = case <> of <> when call 'erlang':'>' (Len,NumBytes) -> NumBytes
<> when 'true' -> Len end in (case Reader0 of (<({'sparse_file_reader',_rec136,_81,_82,_83,_84}-|['compiler_generated'] )> when 'true' -> case apply 'do_read'/2 (_rec136,_22) of <{'ok',Bin,Handle}> when 'true' -> let <BytesRead> = call 'erlang':'byte_size' (Bin) in let <ActualEndPos> = call 'erlang':'+' (Pos,BytesRead) in let <_30> = case <> of <> when call 'erlang':'=:=' (ActualEndPos,EndPos) -> case Reader0 of <{'sparse_file_reader',_86,_87,_88,_89,_90}> when 'true' -> call 'erlang':'setelement' (6,Reader0,Entries)
(<_91> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> Reader0 end in (case _30 of (<({'sparse_file_reader',_92,_93,_94,_rec138,_95}-|['compiler_generated'] )> when 'true' -> let <NumBytes2> = call 'erlang':'-' (_rec138,ActualEndPos) in case _30 of <{'sparse_file_reader',_rec140,_rec141,_rec142,_rec143,_rec144}> when 'true' -> let <_38> = {'sparse_file_reader',Handle,NumBytes2,ActualEndPos,_rec143,_rec144} in let <_41> = call 'erlang':'byte_size' (Bin) in let <_42> = call 'erlang':'-' (Len,_41) in let <_40> = #{#<Acc>('all',8,'binary',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}# in apply 'do_sparse_read'/3 (_38,_42,_40)
(<_97> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_96> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Other> when 'true' -> Other end-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_entry'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_entry'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_46,_45,_44> when 'true' -> (primop 'match_fail' ({'function_clause',_46,_45,_44})-|[{'function_name',{'do_sparse_read',3}}] )-|['compiler_generated'] ) end
'read_sparse_hole'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reader = {'sparse_file_reader',_19,_20,Pos,_21,_22},Offset,Len> when 'true' -> let <N> = call 'erlang':'-' (Offset,Pos) in let <_4> = case <> of <> when call 'erlang':'>' (N,Len) -> Len
<> when 'true' -> N end in let <Bin> = #{#<0>(_4,8,'integer',['unsigned'|['big']])}# in (case Reader of (<({'sparse_file_reader',_23,_24,_25,_rec145,_26}-|['compiler_generated'] )> when 'true' -> let <_7> = call 'erlang':'+' (Pos,_4) in let <NumBytes> = call 'erlang':'-' (_rec145,_7) in let <_rec146> = call 'erlang':'+' (Pos,_4) in case Reader of <{'sparse_file_reader',_28,_29,_30,_31,_32}> when 'true' -> let <_13> = call 'erlang':'setelement' (4,Reader,_rec146) in let <_15> = call 'erlang':'setelement' (3,_13,NumBytes) in {'ok',Bin,_15}
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','sparse_file_reader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16})-|[{'function_name',{'read_sparse_hole',3}}] )-|['compiler_generated'] ) end
'do_close'/1 = fun (_0) -> case _0 of <{'reader',Handle,_2,_3,Fun}> when call 'erlang':'is_function' (Fun,2) -> apply Fun ('close',Handle)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'do_close',1}}] )-|['compiler_generated'] ) end
'extract_opts'/1 = fun (_0) -> let <_1> = apply 'default_options'/0 () in apply 'extract_opts'/2 (_0,_1)
'table_opts'/1 = fun (_0) -> let <_1> = apply 'default_options'/0 () in apply 'read_opts'/2 (_0,_1)
'default_options'/0 = fun () -> case call 'file':'get_cwd' () of <{'ok',Cwd}> when 'true' -> {'read_opts',Cwd,'false','all','file',[],'false'}
(<_0> when 'true' -> primop 'match_fail' ({'badmatch',_0})-|['compiler_generated'] ) end
'extract_opts'/2 = fun (_0,_1) -> case <_0,_1> of <['keep_old_files'|Rest],Opts> when 'true' -> case Opts of <{'read_opts',_29,_30,_31,_32,_33,_34}> when 'true' -> let <_4> = call 'erlang':'setelement' (3,Opts,'true') in apply 'extract_opts'/2 (Rest,_4)
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'cwd',Cwd}|Rest],Opts> when 'true' -> case Opts of <{'read_opts',_36,_37,_38,_39,_40,_41}> when 'true' -> let <_7> = call 'erlang':'setelement' (2,Opts,Cwd) in apply 'extract_opts'/2 (Rest,_7)
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'files',Files}|Rest],Opts> when 'true' -> let <Set> = call 'ordsets':'from_list' (Files) in case Opts of <{'read_opts',_43,_44,_45,_46,_47,_48}> when 'true' -> let <_11> = call 'erlang':'setelement' (4,Opts,Set) in apply 'extract_opts'/2 (Rest,_11)
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['memory'|Rest],Opts> when 'true' -> case Opts of <{'read_opts',_50,_51,_52,_53,_54,_55}> when 'true' -> let <_14> = call 'erlang':'setelement' (5,Opts,'memory') in apply 'extract_opts'/2 (Rest,_14)
(<_56> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['compressed'|Rest],Opts = {'read_opts',_57,_58,_59,_60,OpenMode,_61}> when 'true' -> let <_rec152> = ['compressed'|OpenMode] in case Opts of <{'read_opts',_62,_63,_64,_65,_66,_67}> when 'true' -> let <_18> = call 'erlang':'setelement' (6,Opts,_rec152) in apply 'extract_opts'/2 (Rest,_18)
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['cooked'|Rest],Opts = {'read_opts',_69,_70,_71,_72,OpenMode,_73}> when 'true' -> let <_rec154> = ['cooked'|OpenMode] in case Opts of <{'read_opts',_74,_75,_76,_77,_78,_79}> when 'true' -> let <_22> = call 'erlang':'setelement' (6,Opts,_rec154) in apply 'extract_opts'/2 (Rest,_22)
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['verbose'|Rest],Opts> when 'true' -> case Opts of <{'read_opts',_81,_82,_83,_84,_85,_86}> when 'true' -> let <_25> = call 'erlang':'setelement' (7,Opts,'true') in apply 'extract_opts'/2 (Rest,_25)
(<_87> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[Other|Rest],Opts> when 'true' -> let <_26> = apply 'read_opts'/2 ([Other|[]],Opts) in apply 'extract_opts'/2 (Rest,_26)
<[],Opts> when 'true' -> Opts
(<_28,_27> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27})-|[{'function_name',{'extract_opts',2}}] )-|['compiler_generated'] ) end
'read_opts'/2 = fun (_0,_1) -> case <_0,_1> of <['compressed'|Rest],Opts = {'read_opts',_15,_16,_17,_18,OpenMode,_19}> when 'true' -> let <_rec157> = ['compressed'|OpenMode] in case Opts of <{'read_opts',_20,_21,_22,_23,_24,_25}> when 'true' -> let <_5> = call 'erlang':'setelement' (6,Opts,_rec157) in apply 'read_opts'/2 (Rest,_5)
(<_26> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['cooked'|Rest],Opts = {'read_opts',_27,_28,_29,_30,OpenMode,_31}> when 'true' -> let <_rec159> = ['cooked'|OpenMode] in case Opts of <{'read_opts',_32,_33,_34,_35,_36,_37}> when 'true' -> let <_9> = call 'erlang':'setelement' (6,Opts,_rec159) in apply 'read_opts'/2 (Rest,_9)
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<['verbose'|Rest],Opts> when 'true' -> case Opts of <{'read_opts',_39,_40,_41,_42,_43,_44}> when 'true' -> let <_12> = call 'erlang':'setelement' (7,Opts,'true') in apply 'read_opts'/2 (Rest,_12)
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','read_opts'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[_46|Rest],Opts> when 'true' -> apply 'read_opts'/2 (Rest,Opts)
<[],Opts> when 'true' -> Opts
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'read_opts',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('erl_tar')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('erl_tar',_0) end