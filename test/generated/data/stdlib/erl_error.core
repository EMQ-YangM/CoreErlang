module 'erl_error' ['format_call'/4,'format_call'/5,'format_exception'/6,'format_exception'/7,'format_exception'/8,'format_fun'/1,'format_fun'/2,'format_stacktrace'/4,'format_stacktrace'/5,'module_info'/0,'module_info'/1] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[101|[114|[114|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]],1}] ] 'format_exception'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'format_exception'/7 (_0,_1,_2,_3,_4,_5,'latin1')
'format_exception'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <FF> = apply 'wrap_format_fun_2'/1 (_5) in apply 'format_exception'/8 (_0,_1,_2,_3,_4,FF,_6,-1)
'format_exception'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <I,Class,Reason,StackTrace,StackFun,FormatFun,Encoding,CharsLimit> when try let <_8> = call 'erlang':'is_integer' (I) in let <_9> = call 'erlang':'>=' (I,1) in let <_10> = call 'erlang':'is_function' (StackFun,3) in let <_11> = call 'erlang':'is_function' (FormatFun,3) in let <_12> = call 'erlang':'is_integer' (CharsLimit) in let <_13> = call 'erlang':'and' (_11,_12) in let <_14> = call 'erlang':'and' (_10,_13) in let <_15> = call 'erlang':'and' (_9,_14) in call 'erlang':'and' (_8,_15) of <Try> -> Try catch <T,R> -> 'false' -> let <_16> = call 'erlang':'-' (I,1) in let <S> = apply 'n_spaces'/1 (_16) in case apply 'analyze_exception'/3 (Class,Reason,StackTrace) of <{Term,Trace1,Trace}> when 'true' -> let <_19> = case <> of <> when call 'erlang':'<' (CharsLimit,0) -> CharsLimit
<> when 'true' -> call 'erlang':'div' (CharsLimit,3) end in let <St> = apply 'format_stacktrace1'/6 (S,Trace,FormatFun,StackFun,Encoding,_19) in let <_22> = apply 'exited'/1 (Class) in let <_23> = apply 'sub'/3 (CharsLimit,_22,'latin1') in let <Lim> = apply 'sub'/3 (_23,St,Encoding) in let <Expl0> = apply 'explain_reason'/7 (Term,Class,Trace1,FormatFun,S,Encoding,Lim) in let <_27> = case Encoding of <'latin1'> when 'true' -> [126|[115|[126|[115]]]]
<_40> when 'true' -> [126|[115|[126|[116|[115]]]]] end in let <_29> = apply 'exited'/1 (Class) in let <Expl> = call 'io_lib':'fwrite' (_27,[_29|[Expl0|[]]]) in case St of <[]> when 'true' -> Expl
<_41> when 'true' -> [Expl|[10|[St|[]]]] end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_39,_38,_37,_36,_35,_34,_33,_32> when 'true' -> (primop 'match_fail' ({'function_clause',_39,_38,_37,_36,_35,_34,_33,_32})-|[{'function_name',{'format_exception',8}}] )-|['compiler_generated'] ) end
'format_stacktrace'/4 = fun (_0,_1,_2,_3) -> apply 'format_stacktrace'/5 (_0,_1,_2,_3,'latin1')
'format_stacktrace'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <I,StackTrace,StackFun,FormatFun,Encoding> when try let <_5> = call 'erlang':'is_integer' (I) in let <_6> = call 'erlang':'>=' (I,1) in let <_7> = call 'erlang':'is_function' (StackFun,3) in let <_8> = call 'erlang':'is_function' (FormatFun,2) in let <_9> = call 'erlang':'and' (_7,_8) in let <_10> = call 'erlang':'and' (_6,_9) in call 'erlang':'and' (_5,_10) of <Try> -> Try catch <T,R> -> 'false' -> let <_11> = call 'erlang':'-' (I,1) in let <S> = apply 'n_spaces'/1 (_11) in let <FF> = apply 'wrap_format_fun_2'/1 (FormatFun) in apply 'format_stacktrace1'/6 (S,StackTrace,FF,StackFun,Encoding,-1)
(<_19,_18,_17,_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15})-|[{'function_name',{'format_stacktrace',5}}] )-|['compiler_generated'] ) end
'format_call'/4 = fun (_0,_1,_2,_3) -> apply 'format_call'/5 (_0,_1,_2,_3,'latin1')
'format_call'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <I,ForMForFun,As,FormatFun,Enc> when try let <_5> = call 'erlang':'is_integer' (I) in let <_6> = call 'erlang':'>=' (I,1) in let <_7> = call 'erlang':'is_list' (As) in let <_8> = call 'erlang':'is_function' (FormatFun,2) in let <_9> = call 'erlang':'and' (_7,_8) in let <_10> = call 'erlang':'and' (_6,_9) in call 'erlang':'and' (_5,_10) of <Try> -> Try catch <T,R> -> 'false' -> let <FF> = apply 'wrap_format_fun_2'/1 (FormatFun) in let <_12> = call 'erlang':'-' (I,1) in let <_13> = apply 'n_spaces'/1 (_12) in apply 'format_call'/6 ([],_13,ForMForFun,As,FF,Enc)
(<_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15,_14})-|[{'function_name',{'format_call',5}}] )-|['compiler_generated'] ) end
'format_fun'/1 = fun (_0) -> apply 'format_fun'/2 (_0,'latin1')
'format_fun'/2 = fun (_0,_1) -> case <_0,_1> of <Fun,Enc> when call 'erlang':'is_function' (Fun) -> case call 'erlang':'fun_info' (Fun,'module') of <{'module',M}> when 'true' -> case call 'erlang':'fun_info' (Fun,'name') of <{'name',F}> when 'true' -> case call 'erlang':'fun_info' (Fun,'arity') of <{'arity',A}> when 'true' -> case call 'erlang':'fun_info' (Fun,'type') of <{'type','local'}> when call 'erlang':'=:=' (F,[]) -> call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[Fun|[]])
<{'type','local'}> when call 'erlang':'=:=' (M,'erl_eval') -> call 'io_lib':'fwrite' (#{#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[A|[]])
<{'type','local'}> when 'true' -> apply 'mfa_to_string'/4 (M,F,A,Enc)
<{'type','external'}> when 'true' -> apply 'mfa_to_string'/4 (M,F,A,Enc)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'format_fun',2}}] )-|['compiler_generated'] ) end
'wrap_format_fun_2'/1 = fun (_0) -> (fun (_4,_3,_2) -> let <_1> = apply _0 (_4,_3) in {_1,_2}-|[{'id',{0,0,'-wrap_format_fun_2/1-fun-0-'}}] )
'analyze_exception'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'error',Term,Stack> when 'true' -> let <_3> = apply 'is_stacktrace'/1 (Stack) in case <_3,Stack,Term> of <('true'-|['compiler_generated'] ),([MFAL = ({_9,_10,As,_11}-|['compiler_generated'] )|MFAs]-|['compiler_generated'] ),('function_clause'-|['compiler_generated'] )> when call 'erlang':'is_list' (As) -> {Term,[MFAL|[]],MFAs}
<('true'-|['compiler_generated'] ),([({('shell'-|['compiler_generated'] ),F,A,_12}-|['compiler_generated'] )|([]-|['compiler_generated'] )]-|['compiler_generated'] ),('function_clause'-|['compiler_generated'] )> when call 'erlang':'is_integer' (A) -> {Term,[{F,A}|[]],[]}
<('true'-|['compiler_generated'] ),([MFAL = ({_13,_14,_15,_16}-|['compiler_generated'] )|MFAs]-|['compiler_generated'] ),('undef'-|['compiler_generated'] )> when 'true' -> {Term,[MFAL|[]],MFAs}
<('true'-|['compiler_generated'] ),_17,_18> when 'true' -> {Term,[],Stack}
<('false'-|['compiler_generated'] ),_19,_20> when 'true' -> {{Term,Stack},[],[]}
(<(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] ),(_23-|['compiler_generated'] )> when 'true' -> let <_4> = {(_21-|['compiler_generated'] ),(_22-|['compiler_generated'] ),(_23-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<_X_Class,Term,Stack> when 'true' -> case apply 'is_stacktrace'/1 (Stack) of <'true'> when 'true' -> {Term,[],Stack}
<'false'> when 'true' -> {{Term,Stack},[],[]}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end end
'is_stacktrace'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'true'
<[{M,F,A,I}|Fs]> when try let <_1> = call 'erlang':'is_atom' (M) in let <_2> = call 'erlang':'is_atom' (F) in let <_3> = call 'erlang':'is_integer' (A) in let <_4> = call 'erlang':'is_list' (I) in let <_5> = call 'erlang':'and' (_3,_4) in let <_6> = call 'erlang':'and' (_2,_5) in call 'erlang':'and' (_1,_6) of <Try> -> Try catch <T,R> -> 'false' -> apply 'is_stacktrace'/1 (Fs)
<[{M,F,As,I}|Fs]> when try let <_7> = call 'erlang':'is_atom' (M) in let <_8> = call 'erlang':'is_atom' (F) in let <_9> = call 'erlang':'length' (As) in let <_10> = call 'erlang':'>=' (_9,0) in let <_11> = call 'erlang':'is_list' (I) in let <_12> = call 'erlang':'and' (_10,_11) in let <_13> = call 'erlang':'and' (_8,_12) in call 'erlang':'and' (_7,_13) of <Try> -> Try catch <T,R> -> 'false' -> apply 'is_stacktrace'/1 (Fs)
<_15> when 'true' -> 'false' end
'explain_reason'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <'badarg','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#
<{'badarg',V},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<'badarith','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#
<{'badarity',{Fun,As}},'error',[],_X_PF,_X_S,Enc,_X_CL> when call 'erlang':'is_function' (Fun) -> let <_7> = apply 'format_fun'/2 (Fun,Enc) in let <_8> = call 'erlang':'length' (As) in let <_9> = apply 'argss'/1 (_8) in call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[_7|[_9|[]]])
<{'badfun',Term},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (Term,#{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<{'badmatch',Term},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (Term,#{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<{'case_clause',V},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<'function_clause','error',[{F,A}|[]],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> let <FAs> = call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[F|[A|[]]]) in [#{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#|FAs]
<'function_clause',Cl = 'error',[{M,F,As,Loc}|[]],PF,S,Enc,CL> when 'true' -> let <_13> = apply 'format_errstr_call'/8 (#{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,{M,F},As,PF,S,Enc,CL) in let <_14> = apply 'location'/1 (Loc) in [_13|[32|_14]]
<'if_clause','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']])}#
<'noproc','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#
<'notalive','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']])}#
<'system_limit','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<97>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#
<'timeout_value','error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']])}#
<{'try_clause',V},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<121>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<'undef','error',[{M,F,A,_33}|[]],_X_PF,_X_S,Enc,_X_CL> when 'true' -> let <_15> = apply 'n_args'/1 (A) in let <_16> = apply 'mfa_to_string'/4 (M,F,_15,Enc) in call 'io_lib':'fwrite' (#{#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[_16|[]])
<{'shell_undef',F,A,_34},'error',[],_X_PF,_X_S,Enc,_X_CL> when 'true' -> let <FS> = apply 'to_string'/2 (F,Enc) in let <_18> = apply 'n_args'/1 (A) in call 'io_lib':'fwrite' (#{#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[FS|[_18|[]]])
<{'argument_limit',_X_Fun},'error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> call 'io_lib':'fwrite' (#{#<108>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,[])
<{'bad_filter',V},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<{'bad_generator',V},Cl = 'error',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<{'unbound',V},'error',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> call 'io_lib':'fwrite' (#{#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#,[V|[]])
<{'restricted_shell_bad_return',V},Cl = 'exit',[],PF,S,_X_Enc,CL> when 'true' -> apply 'format_value'/6 (V,#{#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<98>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<118>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,PF,S,CL)
<{'restricted_shell_disallowed',{ForMF,As}},Cl = 'exit',[],PF,S,Enc,CL> when 'true' -> apply 'format_errstr_call'/8 (#{#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,Cl,ForMF,As,PF,S,Enc,CL)
<'restricted_shell_started','exit',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#
<'restricted_shell_stopped','exit',[],_X_PF,_X_S,_X_Enc,_X_CL> when 'true' -> #{#<114>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']])}#
<Reason,Class,[],PF,S,_X_Enc,CL> when 'true' -> let <_22> = call 'erlang':'iolist_size' (S) in let <_23> = call 'erlang':'+' (_22,1) in let <_21> = apply 'exited_size'/1 (Class) in let <_24> = call 'erlang':'+' (_23,_21) in case apply PF (Reason,_24,CL) of <{L,_35}> when 'true' -> L
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
(<_32,_31,_30,_29,_28,_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_32,_31,_30,_29,_28,_27,_26})-|[{'function_name',{'explain_reason',7}}] )-|['compiler_generated'] ) end
'n_args'/1 = fun (_0) -> case _0 of <A> when call 'erlang':'is_integer' (_0) -> A
<As> when call 'erlang':'is_list' (_0) -> call 'erlang':'length' (As)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'n_args',1}}] )-|['compiler_generated'] ) end
'argss'/1 = fun (_0) -> case _0 of <0> when 'true' -> #{#<110>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#
<1> when 'true' -> #{#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']])}#
<2> when 'true' -> #{#<116>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#
<I> when 'true' -> call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<103>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[I|[]]) end
'format_stacktrace1'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_9> = fun (_7) -> case _7 of <{M,F,A,_19}> when 'true' -> apply _3 (M,F,A)
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'-format_stacktrace1/6-fun-0-',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'reverse' (_1) in let <Stack1> = call 'lists':'dropwhile' (_9,_6) in let <S> = [[32|[32]]|_0] in let <Stack> = call 'lists':'reverse' (Stack1) in apply 'format_stacktrace2'/6 (S,Stack,1,_2,_4,_5)
'format_stacktrace2'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_S,_X_Stack,_X_N,_X_PF,_X_Enc,_X_CL = 0> when 'true' -> []
<S,[{M,F,A,L}|Fs],N,PF,Enc,CL> when call 'erlang':'is_integer' (A) -> let <_6> = apply 'sep'/2 (N,S) in let <_7> = apply 'origin'/4 (N,M,F,A) in let <_8> = apply 'mfa_to_string'/4 (M,F,A,Enc) in let <_9> = apply 'location'/1 (L) in let <Cs> = call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[_6|[_7|[_8|[_9|[]]]]]) in let <CL1> = apply 'sub'/3 (CL,Cs,Enc) in let <_12> = call 'erlang':'+' (N,1) in let <_13> = apply 'format_stacktrace2'/6 (S,Fs,_12,PF,Enc,CL1) in [Cs|_13]
<S,[{M,F,As,_30}|Fs],N,PF,Enc,CL> when call 'erlang':'is_list' (As) -> let <A> = call 'erlang':'length' (As) in let <CalledAs> = [S|[#{#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<100>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#]] in let <C> = apply 'format_call'/7 ([],CalledAs,{M,F},As,PF,Enc,CL) in let <_17> = apply 'sep'/2 (N,S) in let <_18> = apply 'origin'/4 (N,M,F,A) in let <_19> = apply 'mfa_to_string'/4 (M,F,A,Enc) in let <Cs> = call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<10>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[_17|[_18|[_19|[CalledAs|[C|[]]]]]]) in let <CL1> = apply 'sub'/3 (CL,Enc,Cs) in let <_22> = call 'erlang':'+' (N,1) in let <_23> = apply 'format_stacktrace2'/6 (S,Fs,_22,PF,Enc,CL1) in [Cs|_23]
<_X_S,[],_X_N,_X_PF,_X_Enc,_X_CL> when 'true' -> []
(<_29,_28,_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28,_27,_26,_25,_24})-|[{'function_name',{'format_stacktrace2',6}}] )-|['compiler_generated'] ) end
'location'/1 = fun (_0) -> let <File> = call 'proplists':'get_value' ('file',_0) in let <Line> = call 'proplists':'get_value' ('line',_0) in case <> of <> when let <_3> = call 'erlang':'=/=' (File,'undefined') in let <_4> = call 'erlang':'=/=' (Line,'undefined') in call 'erlang':'and' (_3,_4) -> call 'io_lib':'format' ([40|[126|[116|[115|[44|[32|[108|[105|[110|[101|[32|[126|[119|[41]]]]]]]]]]]]]],[File|[Line|[]]])
<> when 'true' -> [] end
'sep'/2 = fun (_0,_1) -> case <_0,_1> of <1,S> when 'true' -> S
<_4,S> when 'true' -> [10|S] end
'origin'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <1,M,F,A> when 'true' -> let <_4> = apply 'n_args'/1 (A) in case apply 'is_op'/2 ({M,F},_4) of <{'yes',_10}> when call 'erlang':'=:=' (_10,F) -> #{#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#
<'no'> when 'true' -> #{#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<117>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<_X_N,_X_M,_X_F,_X_A> when 'true' -> #{#<105>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<97>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<108>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<102>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<109>(8,1,'integer',['unsigned'|['big']])}# end
'format_errstr_call'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <_8> = apply 'exited_size'/1 (_1) in let <_9> = apply 'n_spaces'/1 (_8) in let <Pre1> = [_5|_9] in apply 'format_call'/7 (_0,Pre1,_2,_3,_4,_6,_7)
'format_call'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'format_call'/7 (_0,_1,_2,_3,_4,_5,-1)
'format_call'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <Arity> = call 'erlang':'length' (_3) in let <_21> = case apply 'is_op'/2 (_2,Arity) of <{'yes',Op}> when 'true' -> apply 'format_op'/7 (_0,_1,Op,_3,_4,_5,_6)
<'no'> when 'true' -> let <MFs> = apply 'mf_to_string'/3 (_2,Arity,_5) in let <I1> = call 'string':'length' ([_1|[_0|MFs]]) in let <S1> = apply 'pp_arguments'/5 (_4,_3,I1,_5,_6) in let <_11> = call 'string':'length' ([_1|MFs]) in let <S2> = apply 'pp_arguments'/5 (_4,_3,_11,_5,_6) in let <S3> = apply 'pp_arguments'/5 (_4,['a2345'|['b2345']],I1,_5,_6) in let <_14> = apply 'count_nl'/1 (S3) in let <Long> = call 'erlang':'>' (_14,0) in let <_17> = apply 'count_nl'/1 (S2) in let <_16> = apply 'count_nl'/1 (S1) in let <_18> = call 'erlang':'<' (_17,_16) in case call 'erlang':'or' (Long,_18) of <'true'> when 'true' -> [10|[_1|[MFs|[S2|[]]]]]
<'false'> when 'true' -> [MFs|[S1|[]]] end
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end in [_0|_21]
'format_op'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <ErrStr,Pre,Op,[A1|[]],PF,_X_Enc,CL> when 'true' -> let <OpS> = call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,[Op|[]]) in let <I1> = call 'erlang':'iolist_size' ([ErrStr|[Pre|[OpS|[]]]]) in let <_9> = call 'erlang':'+' (I1,1) in case apply PF (A1,_9,CL) of <{S,_37}> when 'true' -> [OpS|S]
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<ErrStr,Pre,Op,[A1|[A2|[]]],PF,Enc,CL> when 'true' -> let <I1> = call 'erlang':'iolist_size' ([ErrStr|[Pre|[]]]) in let <_12> = call 'erlang':'+' (I1,1) in case apply PF (A1,_12,CL) of <{S1,CL1}> when 'true' -> let <_14> = call 'erlang':'+' (I1,1) in case apply PF (A2,_14,CL1) of <{S2,_38}> when 'true' -> let <OpS> = call 'erlang':'atom_to_list' (Op) in let <_17> = apply 'n_spaces'/1 (I1) in let <Pre1> = [10|_17] in let <_19> = apply 'count_nl'/1 (S1) in case <> of <> when call 'erlang':'>' (_19,0) -> [S1|[Pre1|[OpS|[Pre1|S2]]]]
<> when 'true' -> let <OpS2> = call 'io_lib':'fwrite' (#{#<32>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#,[Op|[]]) in let <Size1> = call 'erlang':'iolist_size' ([ErrStr|[Pre|OpS2]]) in let <Size2> = apply 'size'/2 (Enc,S1) in let <_23> = call 'erlang':'+' (Size1,Size2) in let <_24> = call 'erlang':'+' (_23,1) in case apply PF (A2,_24,CL1) of <{S2_2,_39}> when 'true' -> let <_27> = apply 'count_nl'/1 (S2) in let <_26> = apply 'count_nl'/1 (S2_2) in case <> of <> when call 'erlang':'<' (_27,_26) -> [S1|[Pre1|[OpS|[Pre1|S2]]]]
<> when 'true' -> [S1|[OpS2|S2_2]] end
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_36,_35,_34,_33,_32,_31,_30> when 'true' -> (primop 'match_fail' ({'function_clause',_36,_35,_34,_33,_32,_31,_30})-|[{'function_name',{'format_op',7}}] )-|['compiler_generated'] ) end
'pp_arguments'/5 = fun (_0,_1,_2,_3,_4) -> let <_5> = apply 'printable_list'/2 (_3,_1) in case <_1,_5> of <([Int|T]-|['compiler_generated'] ),('true'-|['compiler_generated'] )> when 'true' -> let <L> = call 'erlang':'integer_to_list' (Int) in let <Ll> = call 'erlang':'length' (L) in let <_8> = call 'lists':'duplicate' (Ll,97) in let <A> = call 'erlang':'list_to_atom' (_8) in let <_10> = call 'erlang':'+' (_2,1) in case apply _0 ([A|T],_10,_4) of <{S0,_23}> when 'true' -> let <S> = call 'unicode':'characters_to_list' (S0,_3) in let <_13> = call 'erlang':'+' (1,Ll) in let <_14> = call 'string':'slice' (S,_13) in apply 'brackets_to_parens'/2 ([91|[L|[_14|[]]]],_3)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<(_25-|['compiler_generated'] ),(_26-|['compiler_generated'] )> when 'true' -> let <_15> = call 'erlang':'+' (_2,1) in case apply _0 (_1,_15,_4) of <{S,_X_CL1}> when 'true' -> apply 'brackets_to_parens'/2 (S,_3)
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end end
'brackets_to_parens'/2 = fun (_0,_1) -> let <B> = call 'unicode':'characters_to_binary' (_0,_1) in let <_3> = call 'erlang':'byte_size' (B) in let <Sz> = call 'erlang':'-' (_3,2) in case B of <#{#<91>(8,1,'integer',['unsigned'|['big']]),#<R>(Sz,8,'binary',['unsigned'|['big']]),#<93>(8,1,'integer',['unsigned'|['big']])}#> when 'true' -> [40|[R|[41]]]
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'printable_list'/2 = fun (_0,_1) -> case <_0,_1> of <'latin1',As> when 'true' -> call 'io_lib':'printable_latin1_list' (As)
<_4,As> when 'true' -> call 'io_lib':'printable_list' (As) end
'mfa_to_string'/4 = fun (_0,_1,_2,_3) -> let <_4> = apply 'mf_to_string'/3 ({_0,_1},_2,_3) in call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']]),#<47>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[_4|[_2|[]]])
'mf_to_string'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_@r0 = {M,F},A,Enc> when 'true' -> case call 'erl_internal':'bif' (M,F,A) of <'true'> when 'true' -> call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[F|[]])
<'false'> when 'true' -> case apply 'is_op'/2 (_@r0,A) of <{'yes','/'}> when 'true' -> call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']])}#,[F|[]])
<{'yes',_10}> when call 'erlang':'=:=' (_10,F) -> call 'erlang':'atom_to_list' (F)
<'no'> when 'true' -> let <FS> = apply 'to_string'/2 (F,Enc) in call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[M|[FS|[]]])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Fun,_X_A,Enc> when call 'erlang':'is_function' (Fun) -> apply 'format_fun'/2 (Fun,Enc)
<F,_X_A,Enc> when 'true' -> let <FS> = apply 'to_string'/2 (F,Enc) in call 'io_lib':'fwrite' (#{#<126>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<115>(8,1,'integer',['unsigned'|['big']])}#,[FS|[]]) end
'format_value'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <Pre1Sz> = apply 'exited_size'/1 (_2) in let <_7> = call 'erlang':'iolist_size' ([_4|[_1|[]]]) in let <_8> = call 'erlang':'+' (Pre1Sz,_7) in let <_9> = call 'erlang':'+' (_8,1) in case apply _3 (_0,_9,_5) of <{S1,_26}> when 'true' -> let <_19> = case apply 'count_nl'/1 (S1) of <N1> when call 'erlang':'>' (N1,1) -> let <_11> = call 'erlang':'iolist_size' (_4) in let <_12> = call 'erlang':'+' (_11,1) in let <_13> = call 'erlang':'+' (_12,Pre1Sz) in case apply _3 (_0,_13,_5) of <{S2,_27}> when 'true' -> let <_15> = apply 'count_nl'/1 (S2) in case <> of <> when call 'erlang':'<' (_15,N1) -> let <_16> = apply 'n_spaces'/1 (Pre1Sz) in [10|[_4|[_16|S2]]]
<> when 'true' -> S1 end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<_28> when 'true' -> S1 end in [_1|_19]
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
'count_nl'/1 = fun (_0) -> case _0 of <[E|Es]> when 'true' -> let <_2> = apply 'count_nl'/1 (E) in let <_1> = apply 'count_nl'/1 (Es) in call 'erlang':'+' (_2,_1)
<10> when 'true' -> 1
<Bin> when call 'erlang':'is_binary' (_0) -> let <_3> = call 'erlang':'binary_to_list' (Bin) in apply 'count_nl'/1 (_3)
<_5> when 'true' -> 0 end
'n_spaces'/1 = fun (_0) -> call 'lists':'duplicate' (_0,32)
'is_op'/2 = fun (_0,_1) -> try case _0 of <{'erlang',F}> when 'true' -> do (call ('erl_internal'-|['result_not_wanted'] ):('op_type'-|['result_not_wanted'] ) (F,_1)-|['result_not_wanted'] ) {'yes',F}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end of <_4> -> _4 catch <_7,_6,_5> -> case <_7,_6,_5> of <('error'-|['compiler_generated'] ),_10,_11> when 'true' -> 'no'
(<_12,_13,_14> when 'true' -> primop 'raise' (_14,_13)-|['compiler_generated'] ) end
'exited_size'/1 = fun (_0) -> let <_1> = apply 'exited'/1 (_0) in call 'erlang':'iolist_size' (_1)
'exited'/1 = fun (_0) -> case _0 of <'error'> when 'true' -> #{#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#
<'exit'> when 'true' -> #{#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#
<'throw'> when 'true' -> #{#<101>(8,1,'integer',['unsigned'|['big']]),#<120>(8,1,'integer',['unsigned'|['big']]),#<99>(8,1,'integer',['unsigned'|['big']]),#<101>(8,1,'integer',['unsigned'|['big']]),#<112>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<105>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<110>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']]),#<116>(8,1,'integer',['unsigned'|['big']]),#<104>(8,1,'integer',['unsigned'|['big']]),#<114>(8,1,'integer',['unsigned'|['big']]),#<111>(8,1,'integer',['unsigned'|['big']]),#<119>(8,1,'integer',['unsigned'|['big']]),#<58>(8,1,'integer',['unsigned'|['big']]),#<32>(8,1,'integer',['unsigned'|['big']])}#
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'exited',1}}] )-|['compiler_generated'] ) end
'to_string'/2 = fun (_0,_1) -> case <_0,_1> of <A,'latin1'> when 'true' -> call 'io_lib':'write_atom_as_latin1' (A)
<A,_4> when 'true' -> call 'io_lib':'write_atom' (A) end
'sub'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <T,_7,_X_Enc> when call 'erlang':'<' (T,0) -> T
<T,S,Enc> when 'true' -> let <_3> = apply 'size'/2 (Enc,S) in apply 'sub'/2 (T,_3) end
'sub'/2 = fun (_0,_1) -> case <_0,_1> of <T,Sz> when call 'erlang':'>=' (T,Sz) -> call 'erlang':'-' (T,Sz)
<_X_T,_X_Sz> when 'true' -> 0 end
'size'/2 = fun (_0,_1) -> case <_0,_1> of <'latin1',S> when 'true' -> call 'erlang':'iolist_size' (S)
<_4,S> when 'true' -> call 'string':'length' (S) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('erl_error')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('erl_error',_0) end