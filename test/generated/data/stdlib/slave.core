module 'slave' ['module_info'/0,'module_info'/1,'pseudo'/1,'pseudo'/2,'relay'/1,'slave_start'/1,'start'/1,'start'/2,'start'/3,'start'/5,'start_link'/1,'start_link'/2,'start_link'/3,'stop'/1,'wait_for_master_to_die'/2,'wait_for_slave'/7] attributes [ 'file' = [{[115|[114|[99|[47|[115|[108|[97|[118|[101|[46|[101|[114|[108]]]]]]]]]]]]],1}]
, 'spec' = [{{'pseudo',2},[{'type',58,'bounded_fun',[{'type',58,'fun',[{'type',58,'product',[{'var',58,'Master'}|[{'var',58,'ServerList'}]]}|[{'atom',58,'ok'}]]}|[[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Master'}|[{'type',59,'node',[]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'ServerList'}|[{'type',60,'list',[{'type',60,'atom',[]}]}]]]]}]]]]}]}]
, 'spec' = [{{'relay',1},[{'type',76,'bounded_fun',[{'type',76,'fun',[{'type',76,'product',[{'var',76,'Pid'}]}|[{'type',76,'no_return',[]}]]}|[[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Pid'}|[{'type',77,'pid',[]}]]]]}]]]}]}]
, 'spec' = [{{'start',1},[{'type',130,'bounded_fun',[{'type',130,'fun',[{'type',130,'product',[{'var',130,'Host'}]}|[{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'ok'}|[{'var',130,'Node'}]]}|[{'type',130,'tuple',[{'atom',130,'error'}|[{'var',130,'Reason'}]]}]]}]]}|[[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'Host'}|[{'remote_type',131,[{'atom',131,'inet'}|[{'atom',131,'hostname'}|[[]]]]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Node'}|[{'type',132,'node',[]}]]]]}|[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Reason'}|[{'type',133,'union',[{'atom',133,'timeout'}|[{'atom',133,'no_rsh'}|[{'type',133,'tuple',[{'atom',133,'already_running'}|[{'var',133,'Node'}]]}]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'start',2},[{'type',140,'bounded_fun',[{'type',140,'fun',[{'type',140,'product',[{'var',140,'Host'}|[{'var',140,'Name'}]]}|[{'type',140,'union',[{'type',140,'tuple',[{'atom',140,'ok'}|[{'var',140,'Node'}]]}|[{'type',140,'tuple',[{'atom',140,'error'}|[{'var',140,'Reason'}]]}]]}]]}|[[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Host'}|[{'remote_type',141,[{'atom',141,'inet'}|[{'atom',141,'hostname'}|[[]]]]}]]]]}|[{'type',142,'constraint',[{'atom',142,'is_subtype'}|[[{'var',142,'Name'}|[{'type',142,'union',[{'type',142,'atom',[]}|[{'type',142,'string',[]}]]}]]]]}|[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'Node'}|[{'type',143,'node',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'Reason'}|[{'type',144,'union',[{'atom',144,'timeout'}|[{'atom',144,'no_rsh'}|[{'type',144,'tuple',[{'atom',144,'already_running'}|[{'var',144,'Node'}]]}]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'start',3},[{'type',149,'bounded_fun',[{'type',149,'fun',[{'type',149,'product',[{'var',149,'Host'}|[{'var',149,'Name'}|[{'var',149,'Args'}]]]}|[{'type',149,'union',[{'type',149,'tuple',[{'atom',149,'ok'}|[{'var',149,'Node'}]]}|[{'type',149,'tuple',[{'atom',149,'error'}|[{'var',149,'Reason'}]]}]]}]]}|[[{'type',150,'constraint',[{'atom',150,'is_subtype'}|[[{'var',150,'Host'}|[{'remote_type',150,[{'atom',150,'inet'}|[{'atom',150,'hostname'}|[[]]]]}]]]]}|[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Name'}|[{'type',151,'union',[{'type',151,'atom',[]}|[{'type',151,'string',[]}]]}]]]]}|[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Args'}|[{'type',152,'string',[]}]]]]}|[{'type',153,'constraint',[{'atom',153,'is_subtype'}|[[{'var',153,'Node'}|[{'type',153,'node',[]}]]]]}|[{'type',154,'constraint',[{'atom',154,'is_subtype'}|[[{'var',154,'Reason'}|[{'type',154,'union',[{'atom',154,'timeout'}|[{'atom',154,'no_rsh'}|[{'type',154,'tuple',[{'atom',154,'already_running'}|[{'var',154,'Node'}]]}]]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'start_link',1},[{'type',159,'bounded_fun',[{'type',159,'fun',[{'type',159,'product',[{'var',159,'Host'}]}|[{'type',159,'union',[{'type',159,'tuple',[{'atom',159,'ok'}|[{'var',159,'Node'}]]}|[{'type',159,'tuple',[{'atom',159,'error'}|[{'var',159,'Reason'}]]}]]}]]}|[[{'type',160,'constraint',[{'atom',160,'is_subtype'}|[[{'var',160,'Host'}|[{'remote_type',160,[{'atom',160,'inet'}|[{'atom',160,'hostname'}|[[]]]]}]]]]}|[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Node'}|[{'type',161,'node',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Reason'}|[{'type',162,'union',[{'atom',162,'timeout'}|[{'atom',162,'no_rsh'}|[{'type',162,'tuple',[{'atom',162,'already_running'}|[{'var',162,'Node'}]]}]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'start_link',2},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'Host'}|[{'var',169,'Name'}]]}|[{'type',169,'union',[{'type',169,'tuple',[{'atom',169,'ok'}|[{'var',169,'Node'}]]}|[{'type',169,'tuple',[{'atom',169,'error'}|[{'var',169,'Reason'}]]}]]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'Host'}|[{'remote_type',170,[{'atom',170,'inet'}|[{'atom',170,'hostname'}|[[]]]]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Name'}|[{'type',171,'union',[{'type',171,'atom',[]}|[{'type',171,'string',[]}]]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Node'}|[{'type',172,'node',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Reason'}|[{'type',173,'union',[{'atom',173,'timeout'}|[{'atom',173,'no_rsh'}|[{'type',173,'tuple',[{'atom',173,'already_running'}|[{'var',173,'Node'}]]}]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'start_link',3},[{'type',178,'bounded_fun',[{'type',178,'fun',[{'type',178,'product',[{'var',178,'Host'}|[{'var',178,'Name'}|[{'var',178,'Args'}]]]}|[{'type',178,'union',[{'type',178,'tuple',[{'atom',178,'ok'}|[{'var',178,'Node'}]]}|[{'type',178,'tuple',[{'atom',178,'error'}|[{'var',178,'Reason'}]]}]]}]]}|[[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Host'}|[{'remote_type',179,[{'atom',179,'inet'}|[{'atom',179,'hostname'}|[[]]]]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Name'}|[{'type',180,'union',[{'type',180,'atom',[]}|[{'type',180,'string',[]}]]}]]]]}|[{'type',181,'constraint',[{'atom',181,'is_subtype'}|[[{'var',181,'Args'}|[{'type',181,'string',[]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Node'}|[{'type',182,'node',[]}]]]]}|[{'type',183,'constraint',[{'atom',183,'is_subtype'}|[[{'var',183,'Reason'}|[{'type',183,'union',[{'atom',183,'timeout'}|[{'atom',183,'no_rsh'}|[{'type',183,'tuple',[{'atom',183,'already_running'}|[{'var',183,'Node'}]]}]]]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'stop',1},[{'type',209,'bounded_fun',[{'type',209,'fun',[{'type',209,'product',[{'var',209,'Node'}]}|[{'atom',209,'ok'}]]}|[[{'type',210,'constraint',[{'atom',210,'is_subtype'}|[[{'var',210,'Node'}|[{'type',210,'node',[]}]]]]}]]]}]}] ] 'pseudo'/1 = fun (_0) -> case _0 of <[Master|ServerList]> when 'true' -> apply 'pseudo'/2 (Master,ServerList)
<_2> when 'true' -> call 'error_logger':'error_msg' ([78|[111|[32|[109|[97|[115|[116|[101|[114|[32|[110|[111|[100|[101|[32|[103|[105|[118|[101|[110|[32|[116|[111|[32|[115|[108|[97|[118|[101|[58|[112|[115|[101|[117|[100|[111|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]) end
'pseudo'/2 = fun (_0,_1) -> case <_0,_1> of <_5,[]> when 'true' -> 'ok'
<Master,[S|Tail]> when 'true' -> let <_2> = call 'erlang':'whereis' (S) in do apply 'start_pseudo'/3 (S,_2,Master) apply 'pseudo'/2 (Master,Tail)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'pseudo',2}}] )-|['compiler_generated'] ) end
'start_pseudo'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Name,'undefined',Master> when 'true' -> let <X> = call 'rpc':'call' (Master,'erlang','whereis',[Name|[]]) in let <_4> = call 'erlang':'spawn' ('slave','relay',[X|[]]) in call 'erlang':'register' (Name,_4)
<_8,_9,_10> when 'true' -> 'ok' end
'relay'/1 = fun (_0) -> case _0 of <{'badrpc',Reason}> when 'true' -> let <_1> = call 'erlang':'self' () in do call 'error_logger':'error_msg' ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[58|[126|[116|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[Reason|[]]]) call 'erlang':'exit' (Reason)
<'undefined'> when 'true' -> let <_2> = call 'erlang':'self' () in do call 'error_logger':'error_msg' ([32|[42|[42|[32|[101|[120|[105|[116|[105|[110|[103|[32|[114|[101|[108|[97|[121|[32|[115|[101|[114|[118|[101|[114|[32|[126|[119|[32|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[]]) call 'erlang':'exit' ('undefined')
<Pid> when call 'erlang':'is_pid' (_0) -> apply 'relay1'/1 (Pid)
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'relay',1}}] )-|['compiler_generated'] ) end
'relay1'/1 = fun (_0) -> do receive <X> when 'true' -> call 'erlang':'!' (_0,X) after 'infinity' -> 'ok' apply 'relay1'/1 (_0)
'start'/1 = fun (_0) -> let <_1> = call 'erlang':'node' () in let <L> = call 'erlang':'atom_to_list' (_1) in let <Name> = apply 'upto'/2 (64,L) in apply 'start'/4 (_0,Name,[],'no_link')
'start'/2 = fun (_0,_1) -> apply 'start'/3 (_0,_1,[])
'start'/3 = fun (_0,_1,_2) -> apply 'start'/4 (_0,_1,_2,'no_link')
'start_link'/1 = fun (_0) -> let <_1> = call 'erlang':'node' () in let <L> = call 'erlang':'atom_to_list' (_1) in let <Name> = apply 'upto'/2 (64,L) in let <_4> = call 'erlang':'self' () in apply 'start'/4 (_0,Name,[],_4)
'start_link'/2 = fun (_0,_1) -> apply 'start_link'/3 (_0,_1,[])
'start_link'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'self' () in apply 'start'/4 (_0,_1,_2,_3)
'start'/4 = fun (_0,_1,_2,_3) -> let <Prog> = apply 'progname'/0 () in apply 'start'/5 (_0,_1,_2,_3,Prog)
'start'/5 = fun (_0,_1,_2,_3,_4) -> let <_7> = case call 'net_kernel':'longnames' () of <'true'> when 'true' -> apply 'dns'/1 (_0)
<'false'> when 'true' -> let <_5> = apply 'to_list'/1 (_0) in apply 'strip_host_name'/1 (_5)
<'ignored'> when 'true' -> call 'erlang':'exit' ('not_alive')
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_9> = call 'lists':'concat' ([_1|[[64]|[_7|[]]]]) in let <Node> = call 'erlang':'list_to_atom' (_9) in case call 'net_adm':'ping' (Node) of <'pang'> when 'true' -> apply 'start_it'/6 (_7,_1,Node,_2,_3,_4)
<'pong'> when 'true' -> {'error',{'already_running',Node}}
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'stop'/1 = fun (_0) -> do call 'rpc':'call' (_0,'erlang','halt',[]) 'ok'
'start_it'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = call 'erlang':'self' () in do call 'erlang':'spawn' ('slave','wait_for_slave',[_6|[_0|[_1|[_2|[_3|[_4|[_5|[]]]]]]]]) receive <{'result',Result}> when 'true' -> Result after 'infinity' -> 'true'
'wait_for_slave'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <Waiter> = apply 'register_unique_name'/1 (0) in case apply 'mk_cmd'/5 (_1,_2,_4,Waiter,_6) of <{'ok',Cmd}> when 'true' -> do call 'erlang':'open_port' ({'spawn',Cmd},['stream']) receive <{SlavePid,'slave_started'}> when 'true' -> do call 'erlang':'unregister' (Waiter) apply 'slave_started'/3 (_0,_5,SlavePid) after 32000 -> let <_8> = call 'lists':'concat' ([_2|[[64]|[_1|[]]]]) in case call 'erlang':'list_to_atom' (_8) of <_19> when call 'erlang':'=:=' (_19,_3) -> do case call 'net_adm':'ping' (_3) of <'pong'> when 'true' -> call 'erlang':'spawn' (_3,'erlang','halt',[])
<_20> when 'true' -> 'ok' end call 'erlang':'!' (_0,{'result',{'error','timeout'}})
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<Other> when 'true' -> call 'erlang':'!' (_0,{'result',Other}) end
'slave_started'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <ReplyTo,'no_link',Slave> when call 'erlang':'is_pid' (Slave) -> let <_3> = call 'erlang':'node' (Slave) in call 'erlang':'!' (ReplyTo,{'result',{'ok',_3}})
<ReplyTo,Master,Slave> when let <_4> = call 'erlang':'is_pid' (Master) in let <_5> = call 'erlang':'is_pid' (Slave) in call 'erlang':'and' (_4,_5) -> do call 'erlang':'process_flag' ('trap_exit','true') do call 'erlang':'link' (Master) do call 'erlang':'link' (Slave) let <_6> = call 'erlang':'node' (Slave) in do call 'erlang':'!' (ReplyTo,{'result',{'ok',_6}}) apply 'one_way_link'/2 (Master,Slave)
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'slave_started',3}}] )-|['compiler_generated'] ) end
'one_way_link'/2 = fun (_0,_1) -> receive <{'EXIT',_5,_X_Reason}> when call 'erlang':'=:=' (_5,_0) -> do call 'erlang':'unlink' (_1) let <_2> = call 'erlang':'node' () in call 'erlang':'!' (_1,{'nodedown',_2})
<{'EXIT',_6,_X_Reason}> when call 'erlang':'=:=' (_6,_1) -> call 'erlang':'unlink' (_0)
<_X_Other> when 'true' -> apply 'one_way_link'/2 (_0,_1) after 'infinity' -> 'true'
'register_unique_name'/1 = fun (_0) -> let <_1> = call 'lists':'concat' ([[115|[108|[97|[118|[101|[95|[119|[97|[105|[116|[101|[114|[95]]]]]]]]]]]]]|[_0|[]]]) in let <Name> = call 'erlang':'list_to_atom' (_1) in let <_4> = catch let <_3> = call 'erlang':'self' () in call 'erlang':'register' (Name,_3) in case _4 of <'true'> when 'true' -> Name
<{'EXIT',{'badarg',_8}}> when 'true' -> let <_5> = call 'erlang':'+' (_0,1) in apply 'register_unique_name'/1 (_5)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'mk_cmd'/5 = fun (_0,_1,_2,_3,_4) -> let <Prog> = apply 'quote_progname'/1 (_4) in let <_6> = call 'erlang':'node' () in let <_7> = apply 'long_or_short'/0 () in let <_8> = call 'erlang':'node' () in let <BasicCmd> = call 'lists':'concat' ([Prog|[[32|[45|[100|[101|[116|[97|[99|[104|[101|[100|[32|[45|[110|[111|[105|[110|[112|[117|[116|[32|[45|[109|[97|[115|[116|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_6|[[32]|[_7|[_1|[[64]|[_0|[[32|[45|[115|[32|[115|[108|[97|[118|[101|[32|[115|[108|[97|[118|[101|[95|[115|[116|[97|[114|[116|[32]]]]]]]]]]]]]]]]]]]]]]|[_8|[[32]|[_3|[[32]|[_2|[]]]]]]]]]]]]]]]) in let <_10> = call 'erlang':'node' () in let <_11> = call 'erlang':'atom_to_list' (_10) in case apply 'after_char'/2 (64,_11) of <_20> when call 'erlang':'=:=' (_20,_0) -> {'ok',BasicCmd}
<_21> when 'true' -> case apply 'rsh'/0 () of <{'ok',Rsh}> when 'true' -> let <_12> = call 'lists':'concat' ([Rsh|[[32]|[_0|[[32]|[BasicCmd|[]]]]]]) in {'ok',_12}
<Other> when 'true' -> Other end end
'progname'/0 = fun () -> case call 'init':'get_argument' ('progname') of <{'ok',[[Prog|[]]|[]]}> when 'true' -> Prog
<_X_Other> when 'true' -> [110|[111|[95|[112|[114|[111|[103|[95|[110|[97|[109|[101]]]]]]]]]]]] end
'quote_progname'/1 = fun (_0) -> let <_1> = apply 'to_list'/1 (_0) in let <_2> = call 'string':'lexemes' (_1,[32]) in apply 'do_quote_progname'/1 (_2)
'do_quote_progname'/1 = fun (_0) -> case _0 of <[Prog|[]]> when 'true' -> let <_1> = call 'erlang':'++' (Prog,[34]) in [34|_1]
<[Prog|_@r0 = [Arg|Args]]> when 'true' -> case call 'os':'find_executable' (Prog) of <'false'> when 'true' -> let <_2> = [32|Arg] in let <_3> = call 'erlang':'++' (Prog,_2) in apply 'do_quote_progname'/1 ([_3|Args])
<_13> when 'true' -> let <_6> = fun (_4) -> [[32]|[_4|[]]] in let <_7> = call 'lists':'map' (_6,_@r0) in let <_8> = call 'lists':'flatten' (_7) in let <_9> = [34|_8] in let <_10> = call 'erlang':'++' (Prog,_9) in [34|_10] end
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'do_quote_progname',1}}] )-|['compiler_generated'] ) end
'rsh'/0 = fun () -> let <_1> = case call 'init':'get_argument' ('rsh') of <{'ok',[[Prog|[]]|[]]}> when 'true' -> Prog
<_4> when 'true' -> [115|[115|[104]]] end in case call 'os':'find_executable' (_1) of <'false'> when 'true' -> {'error','no_rsh'}
<Path> when 'true' -> {'ok',Path} end
'long_or_short'/0 = fun () -> case call 'net_kernel':'longnames' () of <'true'> when 'true' -> [32|[45|[110|[97|[109|[101|[32]]]]]]]
<'false'> when 'true' -> [32|[45|[115|[110|[97|[109|[101|[32]]]]]]]]
(<_0> when 'true' -> primop 'match_fail' ({'case_clause',_0})-|['compiler_generated'] ) end
'slave_start'/1 = fun (_0) -> case _0 of <_@r0 = [Master|[Waiter|[]]]> when 'true' -> call 'erlang':'spawn' ('slave','wait_for_master_to_die',_@r0)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'slave_start',1}}] )-|['compiler_generated'] ) end
'wait_for_master_to_die'/2 = fun (_0,_1) -> do call 'erlang':'process_flag' ('trap_exit','true') do call 'erlang':'monitor_node' (_0,'true') let <_2> = call 'erlang':'self' () in do call 'erlang':'!' ({_1,_0},{_2,'slave_started'}) apply 'wloop'/1 (_0)
'wloop'/1 = fun (_0) -> receive <{'nodedown',_2}> when call 'erlang':'=:=' (_2,_0) -> call 'erlang':'halt' ()
<_X_Other> when 'true' -> apply 'wloop'/1 (_0) after 'infinity' -> 'true'
'strip_host_name'/1 = fun (_0) -> case _0 of <[]> when 'true' -> []
<[46|_3]> when 'true' -> []
<[H|T]> when 'true' -> let <_1> = apply 'strip_host_name'/1 (T) in [H|_1]
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'strip_host_name',1}}] )-|['compiler_generated'] ) end
'dns'/1 = fun (_0) -> case call 'net_adm':'dns_hostname' (_0) of <{'ok',Host}> when 'true' -> Host
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'to_list'/1 = fun (_0) -> case _0 of <X> when call 'erlang':'is_list' (_0) -> X
<X> when call 'erlang':'is_atom' (_0) -> call 'erlang':'atom_to_list' (X)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'to_list',1}}] )-|['compiler_generated'] ) end
'upto'/2 = fun (_0,_1) -> case <_0,_1> of <_5,[]> when 'true' -> []
<Char,[_6|_7]> when call 'erlang':'=:=' (_6,Char) -> []
<Char,[H|T]> when 'true' -> let <_2> = apply 'upto'/2 (Char,T) in [H|_2]
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'upto',2}}] )-|['compiler_generated'] ) end
'after_char'/2 = fun (_0,_1) -> case <_0,_1> of <_4,[]> when 'true' -> []
<Char,[_5|Rest]> when call 'erlang':'=:=' (_5,Char) -> Rest
<Char,[_6|Rest]> when 'true' -> apply 'after_char'/2 (Char,Rest)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'after_char',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('slave')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('slave',_0) end