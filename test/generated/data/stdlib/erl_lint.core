module 'erl_lint' ['bool_option'/4,'exprs'/2,'exprs_opt'/3,'format_error'/1,'is_guard_expr'/1,'is_guard_test'/1,'is_guard_test'/2,'is_guard_test'/3,'is_pattern_expr'/1,'module'/1,'module'/2,'module'/3,'module_info'/0,'module_info'/1,'used_vars'/2,'value_option'/3,'value_option'/7] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[108|[105|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]],1}]
, 'removed' = [{'modify_line',2,[117|[115|[101|[32|[101|[114|[108|[95|[112|[97|[114|[115|[101|[58|[109|[97|[112|[95|[97|[110|[110|[111|[47|[50|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'spec' = [{{'bool_option',4},[{'type',46,'fun',[{'type',46,'product',[{'type',46,'atom',[]}|[{'type',46,'atom',[]}|[{'type',46,'boolean',[]}|[{'type',46,'list',[{'remote_type',46,[{'atom',46,'compile'}|[{'atom',46,'option'}|[[]]]]}]}]]]]}|[{'type',46,'boolean',[]}]]}]}]
, 'file' = [{[47|[117|[115|[114|[47|[108|[111|[99|[97|[108|[47|[67|[101|[108|[108|[97|[114|[47|[101|[114|[108|[97|[110|[103|[47|[50|[50|[46|[50|[47|[108|[105|[98|[47|[101|[114|[108|[97|[110|[103|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[45|[51|[46|[49|[49|[47|[105|[110|[99|[108|[117|[100|[101|[47|[101|[114|[108|[95|[98|[105|[116|[115|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'type' = [{'bt_endian',{'type',23,'union',[{'atom',23,'big'}|[{'atom',23,'little'}|[{'atom',23,'native'}]]]},[]}]
, 'type' = [{'bt_sign',{'type',24,'union',[{'atom',24,'signed'}|[{'atom',24,'unsigned'}]]},[]}]
, 'type' = [{'bt_type',{'type',25,'union',[{'atom',25,'integer'}|[{'atom',25,'float'}|[{'atom',25,'binary'}|[{'atom',25,'utf8'}|[{'atom',25,'utf16'}|[{'atom',25,'utf32'}]]]]]]},[]}]
, 'type' = [{'bt_unit',{'type',26,'range',[{'integer',26,1}|[{'integer',26,256}]]},[]}]
, 'record' = [{'bittype',[{'typed_record_field',{'record_field',29,{'atom',29,'type'}},{'type',29,'union',[{'user_type',29,'bt_type',[]}|[{'atom',29,'undefined'}]]}}|[{'typed_record_field',{'record_field',30,{'atom',30,'unit'}},{'type',30,'union',[{'user_type',30,'bt_unit',[]}|[{'atom',30,'undefined'}]]}}|[{'typed_record_field',{'record_field',31,{'atom',31,'sign'}},{'type',31,'union',[{'user_type',31,'bt_sign',[]}|[{'atom',31,'undefined'}]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'endian'}},{'type',32,'union',[{'user_type',32,'bt_endian',[]}|[{'atom',32,'undefined'}]]}}]]]]}]
, 'record' = [{'bitdefault',[{'record_field',36,{'atom',36,'integer'}}|[{'record_field',37,{'atom',37,'float'}}|[{'record_field',38,{'atom',38,'binary'}}]]]}]
, 'file' = [{[115|[114|[99|[47|[101|[114|[108|[95|[108|[105|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]],78}]
, 'type' = [{'line',{'remote_type',82,[{'atom',82,'erl_anno'}|[{'atom',82,'anno'}|[[]]]]},[]}]
, 'type' = [{'fa',{'type',83,'tuple',[{'type',83,'atom',[]}|[{'type',83,'arity',[]}]]},[]}]
, 'type' = [{'ta',{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'arity',[]}]]},[]}]
, 'type' = [{'module_or_mfa',{'type',86,'union',[{'type',86,'module',[]}|[{'type',86,'mfa',[]}]]},[]}]
, 'type' = [{'gexpr_context',{'type',88,'union',[{'atom',88,'guard'}|[{'atom',88,'bin_seg_size'}|[{'atom',88,'map_key'}]]]},[]}]
, 'record' = [{'typeinfo',[{'record_field',90,{'atom',90,'attr'}}|[{'record_field',90,{'atom',90,'line'}}]]}]
, 'record' = [{'usage',[{'record_field',95,{'atom',95,'calls'},{'call',95,{'remote',95,{'atom',95,'maps'},{'atom',95,'new'}},[]}}|[{'record_field',96,{'atom',96,'imported'},{'nil',96}}|[{'typed_record_field',{'record_field',97,{'atom',97,'used_records'},{'call',97,{'remote',97,{'atom',97,'gb_sets'},{'atom',97,'new'}},[]}},{'remote_type',98,[{'atom',98,'gb_sets'}|[{'atom',98,'set'}|[[{'type',98,'atom',[]}]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'used_types'},{'call',99,{'remote',99,{'atom',99,'maps'},{'atom',99,'new'}},[]}},{'type',100,'map',[{'type',100,'map_field_exact',[{'user_type',100,'ta',[]}|[{'user_type',100,'line',[]}]]}]}}]]]]}]
, 'record' = [{'lint',[{'typed_record_field',{'record_field',107,{'atom',107,'state'},{'atom',107,'start'}},{'type',107,'union',[{'atom',107,'start'}|[{'atom',107,'attribute'}|[{'atom',107,'function'}]]]}}|[{'record_field',108,{'atom',108,'module'},{'atom',108,''}}|[{'record_field',109,{'atom',109,'behaviour'},{'nil',109}}|[{'typed_record_field',{'record_field',110,{'atom',110,'exports'},{'call',110,{'remote',110,{'atom',110,'gb_sets'},{'atom',110,'empty'}},[]}},{'remote_type',110,[{'atom',110,'gb_sets'}|[{'atom',110,'set'}|[[{'user_type',110,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'imports'},{'nil',111}},{'remote_type',111,[{'atom',111,'orddict'}|[{'atom',111,'orddict'}|[[{'user_type',111,'fa',[]}|[{'type',111,'module',[]}]]]]]}}|[{'record_field',112,{'atom',112,'compile'},{'nil',112}}|[{'typed_record_field',{'record_field',113,{'atom',113,'records'},{'call',113,{'remote',113,{'atom',113,'maps'},{'atom',113,'new'}},[]}},{'type',114,'map',[{'type',114,'map_field_assoc',[{'type',114,'atom',[]}|[{'type',114,'tuple',[{'user_type',114,'line',[]}|[{'ann_type',114,[{'var',114,'Fields'}|[{'type',114,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'locals'},{'call',115,{'remote',115,{'atom',115,'gb_sets'},{'atom',115,'empty'}},[]}},{'remote_type',116,[{'atom',116,'gb_sets'}|[{'atom',116,'set'}|[[{'user_type',116,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'no_auto'},{'call',117,{'remote',117,{'atom',117,'gb_sets'},{'atom',117,'empty'}},[]}},{'type',118,'union',[{'remote_type',118,[{'atom',118,'gb_sets'}|[{'atom',118,'set'}|[[{'user_type',118,'fa',[]}]]]]}|[{'atom',118,'all'}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'defined'},{'call',119,{'remote',119,{'atom',119,'gb_sets'},{'atom',119,'empty'}},[]}},{'remote_type',120,[{'atom',120,'gb_sets'}|[{'atom',120,'set'}|[[{'user_type',120,'fa',[]}]]]]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'on_load'},{'nil',121}},{'type',121,'list',[{'user_type',121,'fa',[]}]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'on_load_line'},{'call',122,{'remote',122,{'atom',122,'erl_anno'},{'atom',122,'new'}},[{'integer',122,0}]}},{'remote_type',123,[{'atom',123,'erl_anno'}|[{'atom',123,'anno'}|[[]]]]}}|[{'record_field',124,{'atom',124,'clashes'},{'nil',124}}|[{'record_field',125,{'atom',125,'not_deprecated'},{'nil',125}}|[{'typed_record_field',{'record_field',126,{'atom',126,'not_removed'},{'call',126,{'remote',126,{'atom',126,'gb_sets'},{'atom',126,'empty'}},[]}},{'remote_type',127,[{'atom',127,'gb_sets'}|[{'atom',127,'set'}|[[{'user_type',127,'module_or_mfa',[]}]]]]}}|[{'record_field',128,{'atom',128,'func'},{'nil',128}}|[{'record_field',129,{'atom',129,'warn_format'},{'integer',129,0}}|[{'record_field',130,{'atom',130,'enabled_warnings'},{'nil',130}}|[{'record_field',131,{'atom',131,'nowarn_bif_clash'},{'nil',131}}|[{'record_field',132,{'atom',132,'errors'},{'nil',132}}|[{'record_field',133,{'atom',133,'warnings'},{'nil',133}}|[{'typed_record_field',{'record_field',134,{'atom',134,'file'},{'string',134,[]}},{'type',134,'string',[]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'recdef_top'},{'atom',135,'false'}},{'type',135,'boolean',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'xqlc'},{'atom',137,'false'}},{'type',137,'boolean',[]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'called'},{'nil',138}},{'type',138,'list',[{'type',138,'tuple',[{'user_type',138,'fa',[]}|[{'user_type',138,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'usage'},{'record',139,'usage',[]}},{'type',139,'record',[{'atom',139,'usage'}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'specs'},{'call',140,{'remote',140,{'atom',140,'maps'},{'atom',140,'new'}},[]}},{'type',141,'map',[{'type',141,'map_field_assoc',[{'type',141,'mfa',[]}|[{'user_type',141,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'callbacks'},{'call',142,{'remote',142,{'atom',142,'maps'},{'atom',142,'new'}},[]}},{'type',143,'map',[{'type',143,'map_field_assoc',[{'type',143,'mfa',[]}|[{'user_type',143,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'optional_callbacks'},{'call',144,{'remote',144,{'atom',144,'maps'},{'atom',144,'new'}},[]}},{'type',145,'map',[{'type',145,'map_field_assoc',[{'type',145,'mfa',[]}|[{'user_type',145,'line',[]}]]}]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'types'},{'call',146,{'remote',146,{'atom',146,'maps'},{'atom',146,'new'}},[]}},{'type',147,'map',[{'type',147,'map_field_assoc',[{'user_type',147,'ta',[]}|[{'type',147,'record',[{'atom',147,'typeinfo'}]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'exp_types'},{'call',148,{'remote',148,{'atom',148,'gb_sets'},{'atom',148,'empty'}},[]}},{'remote_type',149,[{'atom',149,'gb_sets'}|[{'atom',149,'set'}|[[{'user_type',149,'ta',[]}]]]]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'in_try_head'},{'atom',150,'false'}},{'type',150,'boolean',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'bvt'},{'atom',151,'none'}},{'type',151,'union',[{'atom',151,'none'}|[{'type',151,'list',[{'type',151,'any',[]}]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'gexpr_context'},{'atom',152,'guard'}},{'user_type',153,'gexpr_context',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'type' = [{'lint_state',{'type',156,'record',[{'atom',156,'lint'}]},[]}]
, 'type' = [{'error_description',{'type',157,'term',[]},[]}]
, 'type' = [{'error_info',{'type',158,'tuple',[{'remote_type',158,[{'atom',158,'erl_anno'}|[{'atom',158,'line'}|[[]]]]}|[{'type',158,'module',[]}|[{'user_type',158,'error_description',[]}]]]},[]}]
, 'spec' = [{{'format_error',1},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'ErrorDescriptor'}]}|[{'remote_type',163,[{'atom',163,'io_lib'}|[{'atom',163,'chars'}|[[]]]]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'ErrorDescriptor'}|[{'user_type',164,'error_description',[]}]]]]}]]]}]}]
, 'spec' = [{{'module',1},[{'type',514,'bounded_fun',[{'type',514,'fun',[{'type',514,'product',[{'var',514,'AbsForms'}]}|[{'type',514,'union',[{'type',514,'tuple',[{'atom',514,'ok'}|[{'var',514,'Warnings'}]]}|[{'type',514,'tuple',[{'atom',514,'error'}|[{'var',514,'Errors'}|[{'var',514,'Warnings'}]]]}]]}]]}|[[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'AbsForms'}|[{'type',515,'list',[{'type',515,'union',[{'remote_type',515,[{'atom',515,'erl_parse'}|[{'atom',515,'abstract_form'}|[[]]]]}|[{'remote_type',515,[{'atom',515,'erl_parse'}|[{'atom',515,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'Warnings'}|[{'type',516,'list',[{'type',516,'tuple',[{'remote_type',516,[{'atom',516,'file'}|[{'atom',516,'filename'}|[[]]]]}|[{'type',516,'list',[{'var',516,'ErrorInfo'}]}]]}]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'Errors'}|[{'type',517,'list',[{'type',517,'tuple',[{'ann_type',517,[{'var',517,'FileName2'}|[{'remote_type',517,[{'atom',517,'file'}|[{'atom',517,'filename'}|[[]]]]}]]}|[{'type',517,'list',[{'var',517,'ErrorInfo'}]}]]}]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'ErrorInfo'}|[{'user_type',518,'error_info',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'module',2},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'AbsForms'}|[{'var',525,'FileName'}]]}|[{'type',526,'union',[{'type',526,'tuple',[{'atom',526,'ok'}|[{'var',526,'Warnings'}]]}|[{'type',526,'tuple',[{'atom',526,'error'}|[{'var',526,'Errors'}|[{'var',526,'Warnings'}]]]}]]}]]}|[[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'AbsForms'}|[{'type',527,'list',[{'type',527,'union',[{'remote_type',527,[{'atom',527,'erl_parse'}|[{'atom',527,'abstract_form'}|[[]]]]}|[{'remote_type',527,[{'atom',527,'erl_parse'}|[{'atom',527,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'FileName'}|[{'type',528,'union',[{'type',528,'atom',[]}|[{'type',528,'string',[]}]]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Warnings'}|[{'type',529,'list',[{'type',529,'tuple',[{'remote_type',529,[{'atom',529,'file'}|[{'atom',529,'filename'}|[[]]]]}|[{'type',529,'list',[{'var',529,'ErrorInfo'}]}]]}]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Errors'}|[{'type',530,'list',[{'type',530,'tuple',[{'ann_type',530,[{'var',530,'FileName2'}|[{'remote_type',530,[{'atom',530,'file'}|[{'atom',530,'filename'}|[[]]]]}]]}|[{'type',530,'list',[{'var',530,'ErrorInfo'}]}]]}]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'ErrorInfo'}|[{'user_type',531,'error_info',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'module',3},[{'type',538,'bounded_fun',[{'type',538,'fun',[{'type',538,'product',[{'var',538,'AbsForms'}|[{'var',538,'FileName'}|[{'var',538,'CompileOptions'}]]]}|[{'type',539,'union',[{'type',539,'tuple',[{'atom',539,'ok'}|[{'var',539,'Warnings'}]]}|[{'type',539,'tuple',[{'atom',539,'error'}|[{'var',539,'Errors'}|[{'var',539,'Warnings'}]]]}]]}]]}|[[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'AbsForms'}|[{'type',540,'list',[{'type',540,'union',[{'remote_type',540,[{'atom',540,'erl_parse'}|[{'atom',540,'abstract_form'}|[[]]]]}|[{'remote_type',540,[{'atom',540,'erl_parse'}|[{'atom',540,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'FileName'}|[{'type',541,'union',[{'type',541,'atom',[]}|[{'type',541,'string',[]}]]}]]]]}|[{'type',542,'constraint',[{'atom',542,'is_subtype'}|[[{'var',542,'CompileOptions'}|[{'type',542,'list',[{'remote_type',542,[{'atom',542,'compile'}|[{'atom',542,'option'}|[[]]]]}]}]]]]}|[{'type',543,'constraint',[{'atom',543,'is_subtype'}|[[{'var',543,'Warnings'}|[{'type',543,'list',[{'type',543,'tuple',[{'remote_type',543,[{'atom',543,'file'}|[{'atom',543,'filename'}|[[]]]]}|[{'type',543,'list',[{'var',543,'ErrorInfo'}]}]]}]}]]]]}|[{'type',544,'constraint',[{'atom',544,'is_subtype'}|[[{'var',544,'Errors'}|[{'type',544,'list',[{'type',544,'tuple',[{'ann_type',544,[{'var',544,'FileName2'}|[{'remote_type',544,[{'atom',544,'file'}|[{'atom',544,'filename'}|[[]]]]}]]}|[{'type',544,'list',[{'var',544,'ErrorInfo'}]}]]}]}]]]]}|[{'type',545,'constraint',[{'atom',545,'is_subtype'}|[[{'var',545,'ErrorInfo'}|[{'user_type',545,'error_info',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'export',3},[{'type',1376,'fun',[{'type',1376,'product',[{'user_type',1376,'line',[]}|[{'type',1376,'list',[{'user_type',1376,'fa',[]}]}|[{'user_type',1376,'lint_state',[]}]]]}|[{'user_type',1376,'lint_state',[]}]]}]}]
, 'spec' = [{{'export_type',3},[{'type',1394,'fun',[{'type',1394,'product',[{'user_type',1394,'line',[]}|[{'type',1394,'list',[{'user_type',1394,'ta',[]}]}|[{'user_type',1394,'lint_state',[]}]]]}|[{'user_type',1394,'lint_state',[]}]]}]}]
, 'spec' = [{{'exports',1},[{'type',1417,'fun',[{'type',1417,'product',[{'user_type',1417,'lint_state',[]}]}|[{'remote_type',1417,[{'atom',1417,'gb_sets'}|[{'atom',1417,'set'}|[[{'user_type',1417,'fa',[]}]]]]}]]}]}]
, 'type' = [{'import',{'type',1425,'union',[{'type',1425,'tuple',[{'type',1425,'module',[]}|[{'type',1425,'list',[{'user_type',1425,'fa',[]}]}]]}|[{'type',1425,'module',[]}]]},[]}]
, 'spec' = [{{'import',3},[{'type',1426,'fun',[{'type',1426,'product',[{'user_type',1426,'line',[]}|[{'user_type',1426,'import',[]}|[{'user_type',1426,'lint_state',[]}]]]}|[{'user_type',1426,'lint_state',[]}]]}]}]
, 'spec' = [{{'imported',3},[{'type',1489,'fun',[{'type',1489,'product',[{'type',1489,'atom',[]}|[{'type',1489,'arity',[]}|[{'user_type',1489,'lint_state',[]}]]]}|[{'type',1489,'union',[{'type',1489,'tuple',[{'atom',1489,'yes'}|[{'type',1489,'module',[]}]]}|[{'atom',1489,'no'}]]}]]}]}]
, 'spec' = [{{'on_load',3},[{'type',1497,'fun',[{'type',1497,'product',[{'remote_type',1497,[{'atom',1497,'erl_anno'}|[{'atom',1497,'anno'}|[[]]]]}|[{'user_type',1497,'fa',[]}|[{'user_type',1497,'lint_state',[]}]]]}|[{'user_type',1497,'lint_state',[]}]]}]}]
, 'spec' = [{{'call_function',4},[{'type',1529,'fun',[{'type',1529,'product',[{'user_type',1529,'line',[]}|[{'type',1529,'atom',[]}|[{'type',1529,'arity',[]}|[{'user_type',1529,'lint_state',[]}]]]]}|[{'user_type',1529,'lint_state',[]}]]}]}]
, 'spec' = [{{'define_function',4},[{'type',1549,'fun',[{'type',1549,'product',[{'user_type',1549,'line',[]}|[{'type',1549,'atom',[]}|[{'type',1549,'arity',[]}|[{'user_type',1549,'lint_state',[]}]]]]}|[{'user_type',1549,'lint_state',[]}]]}]}]
, 'spec' = [{{'is_guard_test',1},[{'type',2187,'bounded_fun',[{'type',2187,'fun',[{'type',2187,'product',[{'var',2187,'Expr'}]}|[{'type',2187,'boolean',[]}]]}|[[{'type',2188,'constraint',[{'atom',2188,'is_subtype'}|[[{'var',2188,'Expr'}|[{'remote_type',2188,[{'atom',2188,'erl_parse'}|[{'atom',2188,'abstract_expr'}|[[]]]]}]]]]}]]]}]}]
, 'spec' = [{{'is_guard_test',3},[{'type',2208,'bounded_fun',[{'type',2208,'fun',[{'type',2208,'product',[{'var',2208,'Expr'}|[{'var',2208,'Forms'}|[{'var',2208,'IsOverridden'}]]]}|[{'type',2208,'boolean',[]}]]}|[[{'type',2209,'constraint',[{'atom',2209,'is_subtype'}|[[{'var',2209,'Expr'}|[{'remote_type',2209,[{'atom',2209,'erl_parse'}|[{'atom',2209,'abstract_expr'}|[[]]]]}]]]]}|[{'type',2210,'constraint',[{'atom',2210,'is_subtype'}|[[{'var',2210,'Forms'}|[{'type',2210,'list',[{'type',2210,'union',[{'remote_type',2210,[{'atom',2210,'erl_parse'}|[{'atom',2210,'abstract_form'}|[[]]]]}|[{'remote_type',2210,[{'atom',2210,'erl_parse'}|[{'atom',2210,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',2211,'constraint',[{'atom',2211,'is_subtype'}|[[{'var',2211,'IsOverridden'}|[{'type',2211,'fun',[{'type',2211,'product',[{'user_type',2211,'fa',[]}]}|[{'type',2211,'boolean',[]}]]}]]]]}]]]]]}]}]
, 'dialyzer' = [{'no_match',{'type_def',6}}]
, 'dialyzer' = [{'no_match',{'deprecated_function',5}}]
, 'dialyzer' = [{'no_match',{'deprecated_type',5}}] ] 'bool_option'/4 = fun (_0,_1,_2,_3) -> let <_8> = fun (_5,_4) -> case <_5,_4> of <Opt,_X_Def> when call 'erlang':'=:=' (Opt,_0) -> 'true'
<Opt,_X_Def> when call 'erlang':'=:=' (Opt,_1) -> 'false'
<_X_Opt,Def> when 'true' -> Def end in call 'lists':'foldl' (_8,_2,_3)
'value_option'/3 = fun (_0,_1,_2) -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{Opt,Val},_X_Def> when call 'erlang':'=:=' (Opt,_0) -> Val
<_X_Opt,Def> when 'true' -> Def end in call 'lists':'foldl' (_7,_1,_2)
'value_option'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <_11> = fun (_8,_7) -> case <_8,_7> of <{Opt,Val},_X_Def> when call 'erlang':'=:=' (Opt,_0) -> Val
<Opt,_X_Def> when call 'erlang':'=:=' (Opt,_2) -> _3
<Opt,_X_Def> when call 'erlang':'=:=' (Opt,_4) -> _5
<_X_Opt,Def> when 'true' -> Def end in call 'lists':'foldl' (_11,_1,_6)
'format_error'/1 = fun (_0) -> case _0 of <'undefined_module'> when 'true' -> [110|[111|[32|[109|[111|[100|[117|[108|[101|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]
<'redefine_module'> when 'true' -> [114|[101|[100|[101|[102|[105|[110|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101]]]]]]]]]]]]]]]]]
<'pmod_unsupported'> when 'true' -> [112|[97|[114|[97|[109|[101|[116|[101|[114|[105|[122|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[32|[97|[114|[101|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'non_latin1_module_unsupported'> when 'true' -> [109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[119|[105|[116|[104|[32|[110|[111|[110|[45|[108|[97|[116|[105|[110|[49|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[115|[32|[97|[114|[101|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'invalid_call'> when 'true' -> [105|[110|[118|[97|[108|[105|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]
<'invalid_record'> when 'true' -> [105|[110|[118|[97|[108|[105|[100|[32|[114|[101|[99|[111|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]
<{'attribute',A}> when 'true' -> call 'io_lib':'format' ([97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119|[32|[97|[102|[116|[101|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[A|[]])
<{'missing_qlc_hrl',A}> when 'true' -> call 'io_lib':'format' ([113|[108|[99|[58|[113|[47|[126|[119|[32|[99|[97|[108|[108|[101|[100|[44|[32|[98|[117|[116|[32|[34|[113|[108|[99|[46|[104|[114|[108|[34|[32|[110|[111|[116|[32|[105|[110|[99|[108|[117|[100|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[A|[]])
<{'redefine_import',{{F,A},M}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[M|[]]]])
<{'bad_inline',{F,A}}> when 'true' -> call 'io_lib':'format' ([105|[110|[108|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'invalid_deprecated',D}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[D|[]])
<{'bad_deprecated',{F,A}}> when 'true' -> call 'io_lib':'format' ([100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[111|[114|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'invalid_removed',D}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[114|[101|[109|[111|[118|[101|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[D|[]])
<{'bad_removed',{F,A}}> when let <_1> = call 'erlang':'=:=' (F,'_') in let <_2> = call 'erlang':'=:=' (A,'_') in call 'erlang':'or' (_1,_2) -> call 'io_lib':'format' ([97|[116|[32|[108|[101|[97|[115|[116|[32|[111|[110|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[115|[116|[105|[108|[108|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'bad_removed',{F,A}}> when 'true' -> call 'io_lib':'format' ([114|[101|[109|[111|[118|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[115|[116|[105|[108|[108|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'bad_nowarn_unused_function',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'bad_nowarn_bif_clash',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<'disallowed_nowarn_bif_clash'> when 'true' -> call 'io_lib':'format' ([99|[111|[109|[112|[105|[108|[101|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[110|[111|[119|[97|[114|[110|[95|[98|[105|[102|[95|[99|[108|[97|[115|[104|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[97|[108|[108|[111|[119|[101|[100|[44|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[120|[112|[108|[105|[99|[105|[116|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[115|[32|[111|[114|[32|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[32|[91|[70|[47|[65|[93|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
<{'bad_on_load',Term}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Term|[]])
<'multiple_on_loads'> when 'true' -> [109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[111|[110|[95|[108|[111|[97|[100|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'bad_on_load_arity',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121|[32|[40|[109|[117|[115|[116|[32|[98|[101|[32|[48|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'undefined_on_load',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<'export_all'> when 'true' -> [101|[120|[112|[111|[114|[116|[95|[97|[108|[108|[32|[102|[108|[97|[103|[32|[101|[110|[97|[98|[108|[101|[100|[32|[45|[32|[97|[108|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[119|[105|[108|[108|[32|[98|[101|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'duplicated_export',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'unused_import',{{F,A},M}}> when 'true' -> call 'io_lib':'format' ([105|[109|[112|[111|[114|[116|[32|[126|[119|[58|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[F|[A|[]]]])
<{'undefined_function',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'redefine_function',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'define_import',{F,A}}> when 'true' -> call 'io_lib':'format' ([100|[101|[102|[105|[110|[105|[110|[103|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'unused_function',{F,A}}> when 'true' -> call 'io_lib':'format' ([102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'call_to_redefined_bif',{F,A}}> when 'true' -> call 'io_lib':'format' ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[F|[A|[F|[A|[]]]]]]])
<{'call_to_redefined_old_bif',{F,A}}> when 'true' -> call 'io_lib':'format' ([97|[109|[98|[105|[103|[117|[111|[117|[115|[32|[99|[97|[108|[108|[32|[111|[102|[32|[111|[118|[101|[114|[114|[105|[100|[100|[101|[110|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[101|[114|[108|[97|[110|[103|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[F|[A|[F|[A|[]]]]]]])
<{'redefine_old_bif_import',{F,A}}> when 'true' -> call 'io_lib':'format' ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[112|[114|[101|[32|[82|[49|[52|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[F|[A|[]]]]])
<{'redefine_bif_import',{F,A}}> when 'true' -> call 'io_lib':'format' ([105|[109|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[111|[118|[101|[114|[114|[105|[100|[101|[115|[32|[97|[117|[116|[111|[45|[105|[109|[112|[111|[114|[116|[101|[100|[32|[66|[73|[70|[32|[126|[119|[47|[126|[119|[126|[110|[32|[45|[32|[117|[115|[101|[32|[34|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[110|[111|[95|[97|[117|[116|[111|[95|[105|[109|[112|[111|[114|[116|[44|[91|[126|[119|[47|[126|[119|[93|[125|[41|[46|[34|[32|[116|[111|[32|[114|[101|[115|[111|[108|[118|[101|[32|[110|[97|[109|[101|[32|[99|[108|[97|[115|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[F|[A|[]]]]])
<{'deprecated',MFA,ReplacementMFA,Rel}> when 'true' -> let <_3> = apply 'format_mfa'/1 (MFA) in let <_4> = apply 'format_mfa'/1 (ReplacementMFA) in call 'io_lib':'format' ([126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_3|[Rel|[_4|[]]]])
<{'deprecated',MFA,String}> when call 'erlang':'is_list' (String) -> let <_5> = apply 'format_mfa'/1 (MFA) in call 'io_lib':'format' ([126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]],[_5|[String|[]]])
<{'deprecated_type',{M1,F1,A1},String}> when call 'erlang':'is_list' (String) -> let <_6> = apply 'gen_type_paren'/1 (A1) in call 'io_lib':'format' ([116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[112|[58|[126|[112|[126|[115|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M1|[F1|[_6|[String|[]]]]])
<{'removed',MFA,ReplacementMFA,Rel}> when 'true' -> let <_7> = apply 'format_mfa'/1 (MFA) in let <_8> = apply 'format_mfa'/1 (ReplacementMFA) in call 'io_lib':'format' ([99|[97|[108|[108|[32|[116|[111|[32|[126|[115|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[44|[32|[115|[105|[110|[99|[101|[32|[105|[116|[32|[119|[97|[115|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_7|[Rel|[_8|[]]]])
<{'removed',MFA,String}> when call 'erlang':'is_list' (String) -> let <_9> = apply 'format_mfa'/1 (MFA) in call 'io_lib':'format' ([126|[115|[32|[105|[115|[32|[114|[101|[109|[111|[118|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]],[_9|[String|[]]])
<{'removed_type',MNA,String}> when 'true' -> let <_10> = apply 'format_mna'/1 (MNA) in call 'io_lib':'format' ([116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[115|[32|[105|[115|[32|[114|[101|[109|[111|[118|[101|[100|[59|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]],[_10|[String|[]]])
<{'obsolete_guard',{F,A}}> when 'true' -> call 'io_lib':'format' ([126|[112|[47|[126|[112|[32|[111|[98|[115|[111|[108|[101|[116|[101|[32|[40|[117|[115|[101|[32|[105|[115|[95|[126|[112|[47|[126|[112|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[F|[A|[]]]]])
<{'obsolete_guard_overridden',Test}> when 'true' -> call 'io_lib':'format' ([111|[98|[115|[111|[108|[101|[116|[101|[32|[126|[115|[47|[49|[32|[40|[109|[101|[97|[110|[105|[110|[103|[32|[105|[115|[95|[126|[115|[47|[49|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[119|[104|[101|[110|[32|[116|[104|[101|[114|[101|[32|[105|[115|[32|[97|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[110|[97|[109|[101|[100|[32|[105|[115|[95|[126|[112|[47|[49|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Test|[Test|[Test|[]]]])
<{'too_many_arguments',Arity}> when 'true' -> call 'io_lib':'format' ([116|[111|[111|[32|[109|[97|[110|[121|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[40|[126|[119|[41|[32|[45|[32|[109|[97|[120|[105|[109|[117|[109|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[115|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Arity|[255]])
<'illegal_pattern'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]
<'illegal_map_key'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[109|[97|[112|[32|[107|[101|[121|[32|[105|[110|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]]]]]]]]]]
<'illegal_bin_pattern'> when 'true' -> [98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[109|[97|[116|[99|[104|[101|[100|[32|[105|[110|[32|[112|[97|[114|[97|[108|[108|[101|[108|[32|[117|[115|[105|[110|[103|[32|[39|[61|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'illegal_expr'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]
<{'illegal_guard_local_call',{F,A}}> when 'true' -> call 'io_lib':'format' ([99|[97|[108|[108|[32|[116|[111|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[103|[117|[97|[114|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<'illegal_guard_expr'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[103|[117|[97|[114|[100|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]
<'illegal_map_construction'> when 'true' -> [111|[110|[108|[121|[32|[97|[115|[115|[111|[99|[105|[97|[116|[105|[111|[110|[32|[111|[112|[101|[114|[97|[116|[111|[114|[115|[32|[39|[61|[62|[39|[32|[97|[114|[101|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[109|[97|[112|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'undefined_record',T}> when 'true' -> call 'io_lib':'format' ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]],[T|[]])
<{'redefine_record',T}> when 'true' -> call 'io_lib':'format' ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]],[T|[]])
<{'redefine_field',T,F}> when 'true' -> call 'io_lib':'format' ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[T|[]]])
<{'undefined_field',T,F}> when 'true' -> call 'io_lib':'format' ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[T|[]]])
<'illegal_record_info'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[114|[101|[99|[111|[114|[100|[32|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]
<{'field_name_is_variable',T,F}> when 'true' -> call 'io_lib':'format' ([102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[97|[116|[111|[109|[32|[111|[114|[32|[95|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[T|[]]])
<{'wildcard_in_update',T}> when 'true' -> call 'io_lib':'format' ([109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115|[32|[117|[115|[101|[32|[111|[102|[32|[95|[32|[105|[110|[32|[117|[112|[100|[97|[116|[101|[32|[111|[102|[32|[114|[101|[99|[111|[114|[100|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[T|[]])
<{'unused_record',T}> when 'true' -> call 'io_lib':'format' ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]],[T|[]])
<{'untyped_record',T}> when 'true' -> call 'io_lib':'format' ([114|[101|[99|[111|[114|[100|[32|[126|[116|[119|[32|[104|[97|[115|[32|[102|[105|[101|[108|[100|[40|[115|[41|[32|[119|[105|[116|[104|[111|[117|[116|[32|[116|[121|[112|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[T|[]])
<{'unbound_var',V}> when 'true' -> call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]],[V|[]])
<{'unsafe_var',V,{What,Where}}> when 'true' -> let <_11> = apply 'format_where'/1 (Where) in call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[117|[110|[115|[97|[102|[101|[32|[105|[110|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[What|[_11|[]]]])
<{'exported_var',V,{What,Where}}> when 'true' -> let <_12> = apply 'format_where'/1 (Where) in call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[114|[111|[109|[32|[126|[119|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[What|[_12|[]]]])
<{'shadowed_var',V,In}> when 'true' -> call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[In|[]]])
<{'unused_var',V}> when 'true' -> call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]],[V|[]])
<{'variable_in_record_def',V}> when 'true' -> call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[]])
<{'stacktrace_guard',V}> when 'true' -> call 'io_lib':'format' ([115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[110|[32|[97|[32|[103|[117|[97|[114|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[]])
<{'stacktrace_bound',V}> when 'true' -> call 'io_lib':'format' ([115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[112|[114|[101|[118|[105|[111|[117|[115|[108|[121|[32|[98|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[V|[]])
<{'undefined_bittype',Type}> when 'true' -> call 'io_lib':'format' ([98|[105|[116|[32|[116|[121|[112|[101|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]],[Type|[]])
<{'bittype_mismatch',Val1,Val2,What}> when 'true' -> call 'io_lib':'format' ([99|[111|[110|[102|[108|[105|[99|[116|[32|[105|[110|[32|[126|[115|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[98|[105|[116|[32|[102|[105|[101|[108|[100|[58|[32|[39|[126|[112|[39|[32|[97|[110|[100|[32|[39|[126|[112|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[What|[Val1|[Val2|[]]]])
<'bittype_unit'> when 'true' -> [97|[32|[98|[105|[116|[32|[117|[110|[105|[116|[32|[115|[105|[122|[101|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[117|[110|[108|[101|[115|[115|[32|[97|[32|[115|[105|[122|[101|[32|[105|[115|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[116|[111|[111]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'illegal_bitsize'> when 'true' -> [105|[108|[108|[101|[103|[97|[108|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]
<{'illegal_bitsize_local_call',{F,A}}> when 'true' -> call 'io_lib':'format' ([99|[97|[108|[108|[32|[116|[111|[32|[108|[111|[99|[97|[108|[47|[105|[109|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[97|[32|[115|[105|[122|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[102|[111|[114|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[115|[101|[103|[109|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<'non_integer_bitsize'> when 'true' -> [97|[32|[115|[105|[122|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[105|[110|[32|[97|[32|[112|[97|[116|[116|[101|[114|[110|[32|[101|[118|[97|[108|[117|[97|[116|[101|[115|[32|[116|[111|[32|[97|[32|[110|[111|[110|[45|[105|[110|[116|[101|[103|[101|[114|[32|[118|[97|[108|[117|[101|[59|[32|[116|[104|[105|[115|[32|[112|[97|[116|[116|[101|[114|[110|[32|[99|[97|[110|[110|[111|[116|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'unsized_binary_not_at_end'> when 'true' -> [97|[32|[98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[105|[115|[32|[111|[110|[108|[121|[32|[97|[108|[108|[111|[119|[101|[100|[32|[97|[116|[32|[116|[104|[101|[32|[101|[110|[100|[32|[111|[102|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'typed_literal_string'> when 'true' -> [97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[32|[97|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[97|[32|[116|[121|[112|[101|[32|[111|[114|[32|[97|[32|[115|[105|[122|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<'utf_bittype_size_or_unit'> when 'true' -> [110|[101|[105|[116|[104|[101|[114|[32|[115|[105|[122|[101|[32|[110|[111|[114|[32|[117|[110|[105|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[103|[105|[118|[101|[110|[32|[102|[111|[114|[32|[115|[101|[103|[109|[101|[110|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[117|[116|[102|[56|[47|[117|[116|[102|[49|[54|[47|[117|[116|[102|[51|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'bad_bitsize',Type}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[32|[126|[115|[32|[98|[105|[116|[32|[115|[105|[122|[101]]]]]]]]]]]]]]],[Type|[]])
<'unsized_binary_in_bin_gen_pattern'> when 'true' -> [98|[105|[110|[97|[114|[121|[32|[102|[105|[101|[108|[100|[115|[32|[119|[105|[116|[104|[111|[117|[116|[32|[115|[105|[122|[101|[32|[97|[114|[101|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[111|[102|[32|[98|[105|[116|[32|[115|[116|[114|[105|[110|[103|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{'conflicting_behaviours',{Name,Arity},B,FirstL,FirstB}> when 'true' -> let <_13> = apply 'format_where'/1 (FirstL) in call 'io_lib':'format' ([99|[111|[110|[102|[108|[105|[99|[116|[105|[110|[103|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[115|[32|[45|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[114|[101|[113|[117|[105|[114|[101|[100|[32|[98|[121|[32|[98|[111|[116|[104|[32|[39|[126|[112|[39|[32|[97|[110|[100|[32|[39|[126|[112|[39|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Arity|[B|[FirstB|[_13|[]]]]]])
<{'undefined_behaviour_func',{Func,Arity},Behaviour}> when 'true' -> call 'io_lib':'format' ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119|[32|[40|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[39|[126|[119|[39|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Func|[Arity|[Behaviour|[]]]])
<{'undefined_behaviour',Behaviour}> when 'true' -> call 'io_lib':'format' ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[116|[119|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]],[Behaviour|[]])
<{'undefined_behaviour_callbacks',Behaviour}> when 'true' -> call 'io_lib':'format' ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[97|[114|[101|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Behaviour|[]])
<{'ill_defined_behaviour_callbacks',Behaviour}> when 'true' -> call 'io_lib':'format' ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Behaviour|[]])
<{'ill_defined_optional_callbacks',Behaviour}> when 'true' -> call 'io_lib':'format' ([98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119|[32|[111|[112|[116|[105|[111|[110|[97|[108|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[108|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Behaviour|[]])
<{'behaviour_info',{_X_M,F,A}}> when 'true' -> call 'io_lib':'format' ([99|[97|[110|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[97|[116|[116|[105|[98|[117|[116|[101|[32|[102|[111|[114|[32|[126|[116|[119|[47|[126|[119|[32|[119|[104|[101|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[95|[105|[110|[102|[111|[32|[105|[115|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'redefine_optional_callback',{F,A}}> when 'true' -> call 'io_lib':'format' ([111|[112|[116|[105|[111|[110|[97|[108|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[100|[117|[112|[108|[105|[99|[97|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'undefined_callback',{_X_M,F,A}}> when 'true' -> call 'io_lib':'format' ([99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[105|[115|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'singleton_typevar',Name}> when 'true' -> call 'io_lib':'format' ([116|[121|[112|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[105|[115|[32|[111|[110|[108|[121|[32|[117|[115|[101|[100|[32|[111|[110|[99|[101|[32|[40|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[]])
<{'bad_export_type',_X_ETs}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[32|[101|[120|[112|[111|[114|[116|[95|[116|[121|[112|[101|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
<{'duplicated_export_type',{T,A}}> when 'true' -> call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]],[T|[A|[]]])
<{'undefined_type',{TypeName,Arity}}> when 'true' -> let <_14> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]],[TypeName|[_14|[]]])
<{'unused_type',{TypeName,Arity}}> when 'true' -> let <_15> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[117|[110|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]],[TypeName|[_15|[]]])
<{'new_builtin_type',{TypeName,Arity}}> when 'true' -> let <_16> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[110|[101|[119|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[115|[32|[40|[114|[101|[41|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[32|[105|[115|[32|[97|[108|[108|[111|[119|[101|[100|[32|[111|[110|[108|[121|[32|[117|[110|[116|[105|[108|[32|[116|[104|[101|[32|[110|[101|[120|[116|[32|[114|[101|[108|[101|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[TypeName|[_16|[]]])
<{'builtin_type',{TypeName,Arity}}> when 'true' -> let <_17> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[98|[117|[105|[108|[116|[105|[110|[32|[116|[121|[112|[101|[59|[32|[105|[116|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[114|[101|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[TypeName|[_17|[]]])
<{'renamed_type',OldName,NewName}> when 'true' -> call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[119|[40|[41|[32|[105|[115|[32|[110|[111|[119|[32|[99|[97|[108|[108|[101|[100|[32|[126|[119|[40|[41|[59|[32|[112|[108|[101|[97|[115|[101|[32|[117|[115|[101|[32|[116|[104|[101|[32|[110|[101|[119|[32|[110|[97|[109|[101|[32|[105|[110|[115|[116|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[OldName|[NewName|[]]])
<{'redefine_type',{TypeName,Arity}}> when 'true' -> let <_18> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]],[TypeName|[_18|[]]])
<{'type_syntax',Constr}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[32|[126|[116|[119|[32|[116|[121|[112|[101]]]]]]]]]]]],[Constr|[]])
<'old_abstract_code'> when 'true' -> call 'io_lib':'format' ([97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[101|[102|[111|[114|[101|[32|[69|[114|[108|[97|[110|[103|[47|[79|[84|[80|[32|[49|[57|[46|[48|[32|[97|[110|[100|[32|[104|[97|[118|[105|[110|[103|[32|[116|[121|[112|[101|[100|[32|[114|[101|[99|[111|[114|[100|[32|[102|[105|[101|[108|[100|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[99|[111|[109|[112|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[])
<{'redefine_spec',{M,F,A}}> when 'true' -> call 'io_lib':'format' ([115|[112|[101|[99|[32|[102|[111|[114|[32|[126|[116|[119|[58|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[F|[A|[]]]])
<{'redefine_spec',{F,A}}> when 'true' -> call 'io_lib':'format' ([115|[112|[101|[99|[32|[102|[111|[114|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'redefine_callback',{F,A}}> when 'true' -> call 'io_lib':'format' ([99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'bad_callback',{M,F,A}}> when 'true' -> call 'io_lib':'format' ([101|[120|[112|[108|[105|[99|[105|[116|[32|[109|[111|[100|[117|[108|[101|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[102|[111|[114|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[116|[119|[58|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[F|[A|[]]]])
<{'bad_module',{M,F,A}}> when 'true' -> call 'io_lib':'format' ([115|[112|[101|[99|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[116|[119|[47|[126|[119|[32|[102|[114|[111|[109|[32|[111|[116|[104|[101|[114|[32|[109|[111|[100|[117|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[M|[F|[A|[]]]])
<{'spec_fun_undefined',{F,A}}> when 'true' -> call 'io_lib':'format' ([115|[112|[101|[99|[32|[102|[111|[114|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<{'missing_spec',{F,A}}> when 'true' -> call 'io_lib':'format' ([109|[105|[115|[115|[105|[110|[103|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[116|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]])
<'spec_wrong_arity'> when 'true' -> [115|[112|[101|[99|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]
<'callback_wrong_arity'> when 'true' -> [99|[97|[108|[108|[98|[97|[99|[107|[32|[104|[97|[115|[32|[119|[114|[111|[110|[103|[32|[97|[114|[105|[116|[121]]]]]]]]]]]]]]]]]]]]]]]]
<{'deprecated_builtin_type',{Name,Arity},Replacement,Rel}> when 'true' -> let <_20> = case Replacement of <{Mod,NewName}> when 'true' -> call 'io_lib':'format' ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]],[Mod|[NewName|[Arity|[]]]])
<{Mod,NewName,NewArity}> when 'true' -> call 'io_lib':'format' ([117|[115|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[111|[114|[32|[112|[114|[101|[102|[101|[114|[97|[98|[108|[121|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Mod|[NewName|[Arity|[Mod|[NewName|[NewArity|[]]]]]]])
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end in call 'io_lib':'format' ([116|[121|[112|[101|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[100|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[97|[110|[100|[32|[119|[105|[108|[108|[32|[98|[101|[32|[114|[101|[109|[111|[118|[101|[100|[32|[105|[110|[32|[126|[115|[59|[32|[117|[115|[101|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Arity|[Rel|[_20|[]]]]])
<{'not_exported_opaque',{TypeName,Arity}}> when 'true' -> let <_22> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[TypeName|[_22|[]]])
<{'underspecified_opaque',{TypeName,Arity}}> when 'true' -> let <_23> = apply 'gen_type_paren'/1 (Arity) in call 'io_lib':'format' ([111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[116|[119|[126|[115|[32|[105|[115|[32|[117|[110|[100|[101|[114|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[110|[100|[32|[116|[104|[101|[114|[101|[102|[111|[114|[101|[32|[109|[101|[97|[110|[105|[110|[103|[108|[101|[115|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[TypeName|[_23|[]]])
<{'bad_dialyzer_attribute',Term}> when 'true' -> call 'io_lib':'format' ([98|[97|[100|[108|[121|[32|[102|[111|[114|[109|[101|[100|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Term|[]])
<{'bad_dialyzer_option',Term}> when 'true' -> call 'io_lib':'format' ([117|[110|[107|[110|[111|[119|[110|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[119|[97|[114|[110|[105|[110|[103|[32|[111|[112|[116|[105|[111|[110|[58|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Term|[]])
<{'format_error',{Fmt,Args}}> when 'true' -> call 'io_lib':'format' (Fmt,Args)
(<_24> when 'true' -> (primop 'match_fail' ({'function_clause',_24})-|[{'function_name',{'format_error',1}}] )-|['compiler_generated'] ) end
'gen_type_paren'/1 = fun (_0) -> case _0 of <Arity> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>=' (_0,0) in call 'erlang':'and' (_1,_2) -> apply 'gen_type_paren_1'/2 (Arity,[41])
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'gen_type_paren',1}}] )-|['compiler_generated'] ) end
'gen_type_paren_1'/2 = fun (_0,_1) -> case <_0,_1> of <0,Acc> when 'true' -> [40|Acc]
<1,Acc> when 'true' -> [40|[95|Acc]]
<N,Acc> when 'true' -> let <_3> = call 'erlang':'-' (N,1) in let <_2> = [44|[95|Acc]] in apply 'gen_type_paren_1'/2 (_3,_2) end
'format_mfa'/1 = fun (_0) -> case _0 of <{M,F,As = [_10|_11]}> when 'true' -> let <_6> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[A|_2]> when 'true' -> let <_4> = call 'erlang':'integer_to_list' (A) in let <_5> = apply 'lc$^0'/1 (_2) in ([[44|_4]|_5]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (As) in case call 'lists':'append' (_6) of <[44|ArityString]> when 'true' -> apply 'format_mf'/3 (M,F,ArityString)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{M,F,A}> when call 'erlang':'is_integer' (A) -> let <_8> = call 'erlang':'integer_to_list' (A) in apply 'format_mf'/3 (M,F,_8)
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'format_mfa',1}}] )-|['compiler_generated'] ) end
'format_mf'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <M,F,ArityString> when let <_3> = call 'erlang':'is_atom' (M) in let <_4> = call 'erlang':'is_atom' (F) in call 'erlang':'and' (_3,_4) -> let <_9> = call 'erlang':'atom_to_list' (M) in let <_6> = call 'erlang':'atom_to_list' (F) in let <_5> = [47|ArityString] in let <_7> = call 'erlang':'++' (_6,_5) in let <_8> = [58|_7] in call 'erlang':'++' (_9,_8)
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'format_mf',3}}] )-|['compiler_generated'] ) end
'format_mna'/1 = fun (_0) -> case _0 of <{M,N,A}> when call 'erlang':'is_integer' (A) -> let <_5> = call 'erlang':'atom_to_list' (M) in let <_2> = call 'erlang':'atom_to_list' (N) in let <_1> = apply 'gen_type_paren'/1 (A) in let <_3> = call 'erlang':'++' (_2,_1) in let <_4> = [58|_3] in call 'erlang':'++' (_5,_4)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'format_mna',1}}] )-|['compiler_generated'] ) end
'format_where'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_integer' (_0) -> call 'io_lib':'format' ([40|[108|[105|[110|[101|[32|[126|[112|[41]]]]]]]]],[L|[]])
<{L,C}> when let <_1> = call 'erlang':'is_integer' (L) in let <_2> = call 'erlang':'is_integer' (C) in call 'erlang':'and' (_1,_2) -> call 'io_lib':'format' ([40|[108|[105|[110|[101|[32|[126|[112|[44|[32|[99|[111|[108|[117|[109|[110|[32|[126|[112|[41]]]]]]]]]]]]]]]]]]]],[L|[C|[]]])
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'format_where',1}}] )-|['compiler_generated'] ) end
'pseudolocals'/0 = fun () -> [{'module_info',0}|[{'module_info',1}|[{'record_info',2}]]]
'exprs'/2 = fun (_0,_1) -> apply 'exprs_opt'/3 (_0,_1,[])
'exprs_opt'/3 = fun (_0,_1,_2) -> let <_10> = fun (_7,_6) -> case <_7,_6> of <{{'record',_X_SequenceNumber,_X_Name},Attr0},{St1,Vs1}> when 'true' -> let <Attr> = apply 'set_file'/2 (Attr0,[110|[111|[110|[101]]]]) in let <_5> = apply 'attribute_state'/2 (Attr,St1) in {_5,Vs1}
<{V,_18},{St1,Vs1}> when 'true' -> {St1,[{V,{'bound','unused',[]}}|Vs1]}
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'-exprs_opt/3-fun-0-',2}}] )-|['compiler_generated'] ) end in let <_3> = apply 'start'/2 ([110|[111|[102|[105|[108|[101]]]]]],_2) in case call 'lists':'foldl' (_10,{_3,[]},_1) of <{St0,Vs}> when 'true' -> let <Vt> = call 'orddict':'from_list' (Vs) in let <_13> = apply 'set_file'/2 (_0,[110|[111|[102|[105|[108|[101]]]]]]) in case apply 'exprs'/3 (_13,Vt,St0) of <{_X_Evt,St}> when 'true' -> apply 'return_status'/1 (St)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
'used_vars'/2 = fun (_0,_1) -> let <_6> = fun (_3,_2) -> case <_3,_2> of <{{'record',_X_SequenceNumber,_X_Name},_X_Attr},Vs0> when 'true' -> Vs0
<{V,_X_Val},Vs0> when 'true' -> [{V,{'bound','unused',[]}}|Vs0]
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'-used_vars/2-fun-0-',2}}] )-|['compiler_generated'] ) end in let <Vs> = call 'lists':'foldl' (_6,[],_1) in let <Vt> = call 'orddict':'from_list' (Vs) in let <_10> = apply 'set_file'/2 (_0,[110|[111|[102|[105|[108|[101]]]]]]) in let <_9> = apply 'start'/0 () in case apply 'exprs'/3 (_10,Vt,_9) of <{Evt,_X_St}> when 'true' -> let <_16> = fun (_13,_12) -> case <_13,_12> of <{V,{_20,'used',_21}},L> when 'true' -> [V|L]
<_22,L> when 'true' -> L end in let <_17> = call 'lists':'foldl' (_16,[],Evt) in {'ok',_17}
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
'module'/1 = fun (_0) -> let <Opts> = apply 'compiler_options'/1 (_0) in let <_2> = apply 'start'/2 ([110|[111|[102|[105|[108|[101]]]]]],Opts) in let <St> = apply 'forms'/2 (_0,_2) in apply 'return_status'/1 (St)
'module'/2 = fun (_0,_1) -> let <Opts> = apply 'compiler_options'/1 (_0) in let <_3> = apply 'start'/2 (_1,Opts) in let <St> = apply 'forms'/2 (_0,_3) in apply 'return_status'/1 (St)
'module'/3 = fun (_0,_1,_2) -> let <_3> = apply 'compiler_options'/1 (_0) in let <Opts> = call 'erlang':'++' (_3,_2) in let <_5> = apply 'start'/2 (_1,Opts) in let <St> = apply 'forms'/2 (_0,_5) in apply 'return_status'/1 (St)
'compiler_options'/1 = fun (_0) -> let <_5> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'attribute',_7,'compile',C}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([C|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in call 'lists':'flatten' (_5)
'start'/0 = fun () -> apply 'start'/2 ([110|[111|[102|[105|[108|[101]]]]]],[])
'start'/2 = fun (_0,_1) -> let <_2> = apply 'bool_option'/4 ('warn_unused_vars','nowarn_unused_vars','true',_1) in let <_3> = apply 'bool_option'/4 ('warn_export_all','nowarn_export_all','true',_1) in let <_4> = apply 'bool_option'/4 ('warn_export_vars','nowarn_export_vars','false',_1) in let <_5> = apply 'bool_option'/4 ('warn_shadow_vars','nowarn_shadow_vars','true',_1) in let <_6> = apply 'bool_option'/4 ('warn_unused_import','nowarn_unused_import','false',_1) in let <_7> = apply 'bool_option'/4 ('warn_unused_function','nowarn_unused_function','true',_1) in let <_8> = apply 'bool_option'/4 ('warn_unused_type','nowarn_unused_type','true',_1) in let <_9> = apply 'bool_option'/4 ('warn_bif_clash','nowarn_bif_clash','true',_1) in let <_10> = apply 'bool_option'/4 ('warn_unused_record','nowarn_unused_record','true',_1) in let <_11> = apply 'bool_option'/4 ('warn_deprecated_function','nowarn_deprecated_function','true',_1) in let <_12> = apply 'bool_option'/4 ('warn_deprecated_type','nowarn_deprecated_type','true',_1) in let <_13> = apply 'bool_option'/4 ('warn_obsolete_guard','nowarn_obsolete_guard','true',_1) in let <_14> = apply 'bool_option'/4 ('warn_untyped_record','nowarn_untyped_record','false',_1) in let <_15> = apply 'bool_option'/4 ('warn_missing_spec','nowarn_missing_spec','false',_1) in let <_16> = apply 'bool_option'/4 ('warn_missing_spec_all','nowarn_missing_spec_all','false',_1) in let <_17> = apply 'bool_option'/4 ('warn_removed','nowarn_removed','true',_1) in let <Enabled0> = [{'unused_vars',_2}|[{'export_all',_3}|[{'export_vars',_4}|[{'shadow_vars',_5}|[{'unused_import',_6}|[{'unused_function',_7}|[{'unused_type',_8}|[{'bif_clash',_9}|[{'unused_record',_10}|[{'deprecated_function',_11}|[{'deprecated_type',_12}|[{'obsolete_guard',_13}|[{'untyped_record',_14}|[{'missing_spec',_15}|[{'missing_spec_all',_16}|[{'removed',_17}|[]]]]]]]]]]]]]]]]] in let <_23> = letrec 'lc$^0'/1 = fun (_21) -> case _21 of <[{Category,'true'}|_20]> when 'true' -> let <_22> = apply 'lc$^0'/1 (_20) in ([Category|_22]-|['compiler_generated'] )
(<[_19|_20]> when 'true' -> apply 'lc$^0'/1 (_20)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_55> when 'true' -> (primop 'match_fail' ({'function_clause',_55})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Enabled0) in let <Enabled> = call 'ordsets':'from_list' (_23) in let <_28> = case call 'ordsets':'is_element' ('unused_function',Enabled) of <'true'> when 'true' -> let <_26> = apply 'pseudolocals'/0 () in call 'maps':'from_list' ([{{'module_info',1},_26}|[]])
<'false'> when 'true' -> 'undefined'
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end in let <_52> = call 'gb_sets':'from_list' ([{'module_info',0}|[{'module_info',1}]]) in let <_51> = call 'maps':'new' () in let <_50> = call 'gb_sets':'empty' () in let <_49> = call 'gb_sets':'empty' () in let <_47> = apply 'pseudolocals'/0 () in let <_48> = call 'gb_sets':'from_list' (_47) in let <_46> = call 'erl_anno':'new' (0) in let <_45> = call 'gb_sets':'empty' () in let <_44> = apply 'value_option'/7 ('warn_format',1,'warn_format',1,'nowarn_format',0,_1) in let <_43> = apply 'nowarn_function'/2 ('nowarn_bif_clash',_1) in let <_42> = letrec 'lc$^1'/1 = fun (_40) -> case _40 of <[F|_38]> when 'true' -> let <_41> = apply 'lc$^1'/1 (_38) in ([{F,0}|_41]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_56> when 'true' -> (primop 'match_fail' ({'function_clause',_56})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_39> = apply 'pseudolocals'/0 () in apply 'lc$^1'/1 (_39) in let <_36> = call 'gb_sets':'new' () in let <_35> = call 'maps':'new' () in let <_34> = call 'maps':'new' () in let <_33> = call 'maps':'new' () in let <_32> = call 'maps':'new' () in let <_31> = call 'maps':'new' () in let <_30> = call 'gb_sets':'empty' () in {'lint','start','',[],_52,[],_1,_51,_50,_49,_48,[],_46,[],[],_45,[],_44,Enabled,_43,[],[],_0,'false','false',_42,{'usage',_28,[],_36,_35},_34,_33,_32,_31,_30,'false','none','guard'}
'is_warn_enabled'/2 = fun (_0,_1) -> case <_0,_1> of <Type,{'lint',_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,Enabled,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}> when 'true' -> call 'ordsets':'is_element' (Type,Enabled)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'is_warn_enabled',2}}] )-|['compiler_generated'] ) end
'return_status'/1 = fun (_0) -> (case _0 of (<({'lint',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_rec0,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> let <Ws> = apply 'pack_warnings'/1 (_rec0) in (case _0 of (<({'lint',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec1,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}-|['compiler_generated'] )> when 'true' -> case apply 'pack_errors'/1 (_rec1) of <[]> when 'true' -> {'ok',Ws}
<Es> when 'true' -> {'error',Es,Ws} end-|['compiler_generated'] )
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'pack_errors'/1 = fun (_0) -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{File,E},I> when 'true' -> let <_2> = call 'erlang':'-' (I,1) in {{File,{I,E}},_2}
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'-pack_errors/1-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'mapfoldl' (_7,-1,_0) of <{Es1,_18}> when 'true' -> let <_16> = fun (_14) -> case _14 of <{File,EIs}> when 'true' -> let <_12> = fun (_10) -> case _10 of <{_X_I,E}> when 'true' -> E
(<_11> when 'true' -> (primop 'match_fail' ({'function_clause',_11})-|[{'function_name',{'-pack_errors/1-fun-1-',1}}] )-|['compiler_generated'] ) end in let <_13> = call 'lists':'map' (_12,EIs) in {File,_13}
(<_15> when 'true' -> (primop 'match_fail' ({'function_clause',_15})-|[{'function_name',{'-pack_errors/1-fun-2-',1}}] )-|['compiler_generated'] ) end in let <_9> = apply 'pack_warnings'/1 (Es1) in call 'lists':'map' (_16,_9)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
'pack_warnings'/1 = fun (_0) -> (letrec 'lc$^1'/1 = fun (_9) -> case _9 of <[File|_2]> when 'true' -> let <_14> = letrec 'lc$^2'/1 = fun (_12) -> case _12 of <[{F,W}|_11]> when call 'erlang':'=:=' (F,File) -> let <_13> = apply 'lc$^2'/1 (_11) in ([W|_13]-|['compiler_generated'] )
(<[_10|_11]> when 'true' -> apply 'lc$^2'/1 (_11)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_19> when 'true' -> (primop 'match_fail' ({'function_clause',_19})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (_0) in let <_15> = call 'lists':'sort' (_14) in let <_16> = apply 'lc$^1'/1 (_2) in ([{File,_15}|_16]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_20> when 'true' -> (primop 'match_fail' ({'function_clause',_20})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_7> = letrec 'lc$^0'/1 = fun (_5) -> case _5 of <[{F,_18}|_4]> when 'true' -> let <_6> = apply 'lc$^0'/1 (_4) in ([F|_6]-|['compiler_generated'] )
(<[_3|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_21> when 'true' -> (primop 'match_fail' ({'function_clause',_21})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_8> = call 'lists':'usort' (_7) in apply 'lc$^1'/1 (_8)-|['list_comprehension'] )
'add_error'/2 = fun (_0,_1) -> (case _1 of (<({'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec2,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> apply 'add_lint_error'/3 (_0,_rec2,_1)-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'add_error'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Anno,E0,St = {'lint',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Context}> when 'true' -> let <_4> = case <E0,Context> of <'illegal_guard_expr','bin_seg_size'> when 'true' -> 'illegal_bitsize'
<({('illegal_guard_local_call'-|['compiler_generated'] ),FA}-|['compiler_generated'] ),('bin_seg_size'-|['compiler_generated'] )> when 'true' -> {'illegal_bitsize_local_call',FA}
<_43,_44> when 'true' -> E0 end in case apply 'loc'/2 (Anno,St) of <{File,Location}> when 'true' -> apply 'add_lint_error'/3 ({Location,'erl_lint',_4},File,St)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'add_error',3}}] )-|['compiler_generated'] ) end
'add_lint_error'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec5,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> let <_rec3> = [{_1,_0}|_rec5] in case _2 of <{'lint',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' -> call 'erlang':'setelement' (21,_2,_rec3)
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'add_warning'/2 = fun (_0,_1) -> (case _1 of (<({'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec6,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> apply 'add_lint_warning'/3 (_0,_rec6,_1)-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'add_warning'/3 = fun (_0,_1,_2) -> case apply 'loc'/2 (_0,_2) of <{File,Location}> when 'true' -> apply 'add_lint_warning'/3 ({Location,'erl_lint',_1},File,_2)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'add_lint_warning'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec9,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> let <_rec7> = [{_1,_0}|_rec9] in case _2 of <{'lint',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' -> call 'erlang':'setelement' (22,_2,_rec7)
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'loc'/2 = fun (_0,_1) -> let <Location> = call 'erl_anno':'location' (_0) in case call 'erl_anno':'file' (_0) of <'undefined'> when 'true' -> (case _1 of (<({'lint',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec10,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> {_rec10,Location}-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<File> when 'true' -> {File,Location} end
'forms'/2 = fun (_0,_1) -> let <Forms> = apply 'eval_file_attribute'/2 (_0,_1) in let <Locals> = apply 'local_functions'/1 (Forms) in (case _1 of (<({'lint',_21,_22,_23,_24,_25,_rec11,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> let <AutoImportSuppressed> = apply 'auto_import_suppressed'/1 (_rec11) in let <StDeprecated> = apply 'disallowed_compile_flags'/2 (Forms,_1) in case StDeprecated of <{'lint',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}> when 'true' -> let <_9> = call 'erlang':'setelement' (10,StDeprecated,AutoImportSuppressed) in let <_11> = call 'erlang':'setelement' (9,_9,Locals) in let <St1> = apply 'includes_qlc_hrl'/2 (Forms,_11) in let <St2> = apply 'bif_clashes'/2 (Forms,St1) in let <St3> = apply 'not_deprecated'/2 (Forms,St2) in let <St4> = apply 'not_removed'/2 (Forms,St3) in let <_17> = 'form'/2 in let <_16> = apply 'pre_scan'/2 (Forms,St4) in let <St5> = call 'lists':'foldl' (_17,_16,Forms) in apply 'post_traversal_check'/2 (Forms,St5)
(<_89> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'pre_scan'/2 = fun (_0,_1) -> case <_0,_1> of <[{'attribute',L,'compile',C}|Fs],St> when 'true' -> let <_5> = case apply 'is_warn_enabled'/2 ('export_all',St) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_3> = call 'lists':'flatten' ([C|[]]) in call 'lists':'member' ('export_all',_3)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _5 of <'true'> when 'true' -> let <_6> = apply 'add_warning'/3 (L,'export_all',St) in apply 'pre_scan'/2 (Fs,_6)
<'false'> when 'true' -> apply 'pre_scan'/2 (Fs,St)
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<[_10|Fs],St> when 'true' -> apply 'pre_scan'/2 (Fs,St)
<[],St> when 'true' -> St
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'pre_scan',2}}] )-|['compiler_generated'] ) end
'includes_qlc_hrl'/2 = fun (_0,_1) -> let <_8> = letrec 'lc$^0'/1 = fun (_5) -> case _5 of <[{'attribute',_15,'file',{File,_X_line}}|_3]> when 'true' -> let <_4> = call 'filename':'basename' (File) in (case <> of <> when call 'erlang':'=:=' (_4,[113|[108|[99|[46|[104|[114|[108]]]]]]]) -> let <_6> = apply 'lc$^0'/1 (_3) in ([File|_6]-|['compiler_generated'] )
(<> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_51> when 'true' -> (primop 'match_fail' ({'function_clause',_51})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_rec13> = call 'erlang':'=/=' (_8,[]) in case _1 of <{'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' -> call 'erlang':'setelement' (25,_1,_rec13)
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
'eval_file_attribute'/2 = fun (_0,_1) -> (case _1 of (<({'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec15,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> apply 'eval_file_attr'/2 (_0,_rec15)-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'eval_file_attr'/2 = fun (_0,_1) -> case <_0,_1> of <[Form = {'attribute',_X_L,'file',{File,_X_Line}}|Forms],_X_File> when 'true' -> let <_2> = apply 'eval_file_attr'/2 (Forms,File) in [Form|_2]
<[Form0|Forms],File> when 'true' -> let <Form> = apply 'set_form_file'/2 (Form0,File) in let <_4> = apply 'eval_file_attr'/2 (Forms,File) in [Form|_4]
<[],_X_File> when 'true' -> []
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'eval_file_attr',2}}] )-|['compiler_generated'] ) end
'set_form_file'/2 = fun (_0,_1) -> case <_0,_1> of <{'attribute',L,K,V},File> when 'true' -> let <_2> = call 'erl_anno':'set_file' (File,L) in {'attribute',_2,K,V}
<{'function',L,N,A,C},File> when 'true' -> let <_3> = call 'erl_anno':'set_file' (File,L) in {'function',_3,N,A,C}
<Form,_X_File> when 'true' -> Form end
'set_file'/2 = fun (_0,_1) -> case <_0,_1> of <Ts,File> when call 'erlang':'is_list' (Ts) -> (letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[T|_3]> when 'true' -> let <_5> = apply 'anno_set_file'/2 (T,File) in let <_6> = apply 'lc$^0'/1 (_3) in ([_5|_6]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Ts)-|['list_comprehension'] )
<T,File> when 'true' -> apply 'anno_set_file'/2 (T,File) end
'anno_set_file'/2 = fun (_0,_1) -> let <F> = fun (_2) -> call 'erl_anno':'set_file' (_1,_2) in call 'erl_parse':'map_anno' (F,_0)
'form'/2 = fun (_0,_1) -> case <_0,_1> of <{'error',E},St> when 'true' -> apply 'add_error'/2 (E,St)
<{'warning',W},St> when 'true' -> apply 'add_warning'/2 (W,St)
<{'attribute',_X_L,'file',{File,_X_Line}},St> when 'true' -> case St of <{'lint',_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40}> when 'true' -> call 'erlang':'setelement' (23,St,File)
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'attribute',_X_L,'compile',_42},St> when 'true' -> St
<Form,St = {'lint',State,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' -> case State of <'start'> when 'true' -> apply 'start_state'/2 (Form,St)
<'attribute'> when 'true' -> apply 'attribute_state'/2 (Form,St)
<'function'> when 'true' -> apply 'function_state'/2 (Form,St)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'form',2}}] )-|['compiler_generated'] ) end
'start_state'/2 = fun (_0,_1) -> case <_0,_1> of <Form = {'attribute',Line,'module',{_23,_24}},St0> when 'true' -> let <St1> = apply 'add_error'/3 (Line,'pmod_unsupported',St0) in case St1 of <{'lint',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' -> let <_5> = call 'erlang':'setelement' (2,St1,'attribute') in apply 'attribute_state'/2 (Form,_5)
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'attribute',Line,'module',M},St0> when 'true' -> case St0 of <{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_8> = call 'erlang':'setelement' (3,St0,M) in case _8 of <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' -> let <_12> = call 'erlang':'setelement' (2,_8,'attribute') in apply 'check_module_name'/3 (M,Line,_12)
(<_129> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Form,St> when 'true' -> let <_15> = case Form of <{'eof',L}> when 'true' -> call 'erl_anno':'new' (L)
<_130> when 'true' -> call 'erlang':'element' (2,Form) end in let <St1> = apply 'add_error'/3 (_15,'undefined_module',St) in case St1 of <{'lint',_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' -> let <_20> = call 'erlang':'setelement' (2,St1,'attribute') in apply 'attribute_state'/2 (Form,_20)
(<_165> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'attribute_state'/2 = fun (_0,_1) -> case <_0,_1> of <{'attribute',_X_L,'module',_X_M},St = {'lint',_17,'',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' -> St
<{'attribute',L,'module',_X_M},St> when 'true' -> apply 'add_error'/3 (L,'redefine_module',St)
<{'attribute',L,'export',Es},St> when 'true' -> apply 'export'/3 (L,Es,St)
<{'attribute',L,'export_type',Es},St> when 'true' -> apply 'export_type'/3 (L,Es,St)
<{'attribute',L,'import',Is},St> when 'true' -> apply 'import'/3 (L,Is,St)
<{'attribute',L,'record',{Name,Fields}},St> when 'true' -> apply 'record_def'/4 (L,Name,Fields,St)
<{'attribute',La,'behaviour',Behaviour},St> when 'true' -> (case St of (<({'lint',_50,_51,_rec23,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82}-|['compiler_generated'] )> when 'true' -> let <_rec21> = call 'erlang':'++' (_rec23,[{La,Behaviour}|[]]) in case St of <{'lint',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' -> call 'erlang':'setelement' (4,St,_rec21)
(<_118> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'attribute',La,'behavior',Behaviour},St> when 'true' -> (case St of (<({'lint',_119,_120,_rec26,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}-|['compiler_generated'] )> when 'true' -> let <_rec24> = call 'erlang':'++' (_rec26,[{La,Behaviour}|[]]) in case St of <{'lint',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186}> when 'true' -> call 'erlang':'setelement' (4,St,_rec24)
(<_187> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' -> apply 'type_def'/6 ('type',L,TypeName,TypeDef,Args,St)
<{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' -> apply 'type_def'/6 ('opaque',L,TypeName,TypeDef,Args,St)
<{'attribute',L,'spec',{Fun,Types}},St> when 'true' -> apply 'spec_decl'/4 (L,Fun,Types,St)
<{'attribute',L,'callback',{Fun,Types}},St> when 'true' -> apply 'callback_decl'/4 (L,Fun,Types,St)
<{'attribute',L,'optional_callbacks',Es},St> when 'true' -> apply 'optional_callbacks'/3 (L,Es,St)
<{'attribute',L,'on_load',Val},St> when 'true' -> apply 'on_load'/3 (L,Val,St)
<{'attribute',_X_L,_X_Other,_X_Val},St> when 'true' -> St
<Form,St> when 'true' -> case St of <{'lint',_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221}> when 'true' -> let <_14> = call 'erlang':'setelement' (2,St,'function') in apply 'function_state'/2 (Form,_14)
(<_222> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'function_state'/2 = fun (_0,_1) -> case <_0,_1> of <{'attribute',L,'record',{Name,Fields}},St> when 'true' -> apply 'record_def'/4 (L,Name,Fields,St)
<{'attribute',L,'type',{TypeName,TypeDef,Args}},St> when 'true' -> apply 'type_def'/6 ('type',L,TypeName,TypeDef,Args,St)
<{'attribute',L,'opaque',{TypeName,TypeDef,Args}},St> when 'true' -> apply 'type_def'/6 ('opaque',L,TypeName,TypeDef,Args,St)
<{'attribute',L,'spec',{Fun,Types}},St> when 'true' -> apply 'spec_decl'/4 (L,Fun,Types,St)
<{'attribute',_X_L,'dialyzer',_X_Val},St> when 'true' -> St
<{'attribute',La,Attr,_X_Val},St> when 'true' -> apply 'add_error'/3 (La,{'attribute',Attr},St)
<{'function',L,N,A,Cs},St> when 'true' -> apply 'function'/5 (L,N,A,Cs,St)
<{'eof',L},St> when 'true' -> apply 'eof'/2 (L,St)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'function_state',2}}] )-|['compiler_generated'] ) end
'eof'/2 = fun (_0,_1) -> _1
'bif_clashes'/2 = fun (_0,_1) -> case <_0,_1> of <Forms,St = {'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,Nowarn,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}> when 'true' -> let <_7> = letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[{'function',_X_L,Name,Arity,_X_Cs}|_3]> when 'true' -> (case call 'erl_internal':'bif' (Name,Arity) of <'true'> when 'true' -> let <_5> = apply 'lc$^0'/1 (_3) in ([{Name,Arity}|_5]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_83> when 'true' -> (primop 'match_fail' ({'function_clause',_83})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Forms) in let <_9> = call 'ordsets':'from_list' (_7) in let <Clashes> = call 'ordsets':'subtract' (_9,Nowarn) in case St of <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' -> call 'erlang':'setelement' (14,St,Clashes)
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'bif_clashes',2}}] )-|['compiler_generated'] ) end
'not_deprecated'/2 = fun (_0,_1) -> case <_0,_1> of <Forms,St0 = {'lint',_43,_44,_45,_46,_47,Opts,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75}> when 'true' -> let <_14> = letrec 'lc$^0'/1 = fun (_10) -> case _10 of <[{'attribute',L,'compile',Args}|_3]> when 'true' -> (letrec 'lc$^1'/1 = fun (_11) -> case _11 of <[{'nowarn_deprecated_function',MFAs0}|_5]> when 'true' -> (letrec 'lc$^2'/1 = fun (_12) -> case _12 of <[MFA|_8]> when 'true' -> let <_13> = apply 'lc$^2'/1 (_8) in ([{MFA,L}|_13]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_5)
(<_111> when 'true' -> (primop 'match_fail' ({'function_clause',_111})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_9> = call 'lists':'flatten' ([MFAs0|[]]) in apply 'lc$^2'/1 (_9)-|['list_comprehension'] )
(<[_4|_5]> when 'true' -> apply 'lc$^1'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_3)
(<_112> when 'true' -> (primop 'match_fail' ({'function_clause',_112})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'flatten' ([Args|[]]) in apply 'lc$^1'/1 (_6)-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_113> when 'true' -> (primop 'match_fail' ({'function_clause',_113})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Forms) in let <_24> = letrec 'lc$^3'/1 = fun (_21) -> case _21 of <[{'nowarn_deprecated_function',MFAs0}|_17]> when 'true' -> (letrec 'lc$^4'/1 = fun (_22) -> case _22 of <[MFA|_19]> when 'true' -> let <_23> = apply 'lc$^4'/1 (_19) in ([MFA|_23]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^3'/1 (_17)
(<_114> when 'true' -> (primop 'match_fail' ({'function_clause',_114})-|[{'function_name',{'lc$^4',1}}] )-|['compiler_generated'] ) end in let <_20> = call 'lists':'flatten' ([MFAs0|[]]) in apply 'lc$^4'/1 (_20)-|['list_comprehension'] )
(<[_16|_17]> when 'true' -> apply 'lc$^3'/1 (_17)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_115> when 'true' -> (primop 'match_fail' ({'function_clause',_115})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in apply 'lc$^3'/1 (Opts) in let <_30> = letrec 'lc$^5'/1 = fun (_28) -> case _28 of <[{{M,_X_F,_X_A},L}|_27]> when call 'erlang':'is_atom' (M) -> let <_29> = apply 'lc$^5'/1 (_27) in ([{M,L}|_29]-|['compiler_generated'] )
(<[_26|_27]> when 'true' -> apply 'lc$^5'/1 (_27)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_116> when 'true' -> (primop 'match_fail' ({'function_clause',_116})-|[{'function_name',{'lc$^5',1}}] )-|['compiler_generated'] ) end in apply 'lc$^5'/1 (_14) in let <_36> = fun (_33,_32) -> case <_33,_32> of <{M,L},St2> when 'true' -> apply 'check_module_name'/3 (M,L,St2)
(<_35,_34> when 'true' -> (primop 'match_fail' ({'function_clause',_35,_34})-|[{'function_name',{'-not_deprecated/2-fun-6-',2}}] )-|['compiler_generated'] ) end in let <St1> = call 'lists':'foldl' (_36,St0,_30) in let <_rec29> = call 'ordsets':'from_list' (_24) in case St1 of <{'lint',_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}> when 'true' -> call 'erlang':'setelement' (15,St1,_rec29)
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_42,_41> when 'true' -> (primop 'match_fail' ({'function_clause',_42,_41})-|[{'function_name',{'not_deprecated',2}}] )-|['compiler_generated'] ) end
'not_removed'/2 = fun (_0,_1) -> case <_0,_1> of <Forms,St0 = {'lint',_37,_38,_39,_40,_41,Opts,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' -> let <_14> = letrec 'lc$^0'/1 = fun (_10) -> case _10 of <[{'attribute',L,'compile',Args}|_3]> when 'true' -> (letrec 'lc$^1'/1 = fun (_11) -> case _11 of <[{'nowarn_removed',MFAs0}|_5]> when 'true' -> (letrec 'lc$^2'/1 = fun (_12) -> case _12 of <[MFA|_8]> when 'true' -> let <_13> = apply 'lc$^2'/1 (_8) in ([{MFA,L}|_13]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_5)
(<_105> when 'true' -> (primop 'match_fail' ({'function_clause',_105})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_9> = call 'lists':'flatten' ([MFAs0|[]]) in apply 'lc$^2'/1 (_9)-|['list_comprehension'] )
(<[_4|_5]> when 'true' -> apply 'lc$^1'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_3)
(<_106> when 'true' -> (primop 'match_fail' ({'function_clause',_106})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'flatten' ([Args|[]]) in apply 'lc$^1'/1 (_6)-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_107> when 'true' -> (primop 'match_fail' ({'function_clause',_107})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Forms) in let <_24> = letrec 'lc$^3'/1 = fun (_21) -> case _21 of <[{'nowarn_removed',MFAs0}|_17]> when 'true' -> (letrec 'lc$^4'/1 = fun (_22) -> case _22 of <[MFA|_19]> when 'true' -> let <_23> = apply 'lc$^4'/1 (_19) in ([MFA|_23]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^3'/1 (_17)
(<_108> when 'true' -> (primop 'match_fail' ({'function_clause',_108})-|[{'function_name',{'lc$^4',1}}] )-|['compiler_generated'] ) end in let <_20> = call 'lists':'flatten' ([MFAs0|[]]) in apply 'lc$^4'/1 (_20)-|['list_comprehension'] )
(<[_16|_17]> when 'true' -> apply 'lc$^3'/1 (_17)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_109> when 'true' -> (primop 'match_fail' ({'function_clause',_109})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in apply 'lc$^3'/1 (Opts) in let <_30> = fun (_27,_26) -> case <_27,_26> of <{{M,_X_F,_X_A},L},St2> when 'true' -> apply 'check_module_name'/3 (M,L,St2)
<{M,L},St2> when 'true' -> apply 'check_module_name'/3 (M,L,St2)
(<_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28})-|[{'function_name',{'-not_removed/2-fun-5-',2}}] )-|['compiler_generated'] ) end in let <St1> = call 'lists':'foldl' (_30,St0,_14) in let <_rec31> = call 'gb_sets':'from_list' (_24) in case St1 of <{'lint',_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' -> call 'erlang':'setelement' (16,St1,_rec31)
(<_104> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_36,_35> when 'true' -> (primop 'match_fail' ({'function_clause',_36,_35})-|[{'function_name',{'not_removed',2}}] )-|['compiler_generated'] ) end
'disallowed_compile_flags'/2 = fun (_0,_1) -> let <_12> = letrec 'lc$^0'/1 = fun (_7) -> case _7 of <[{'attribute',A,'compile','nowarn_bif_clash'}|_3]> when 'true' -> (letrec 'lc$^1'/1 = fun (_8) -> case _8 of <[{_46,L}|_5]> when 'true' -> (case _1 of (<({'lint',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_rec33,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}-|['compiler_generated'] )> when 'true' -> let <_11> = apply 'lc$^1'/1 (_5) in ([{_rec33,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_11]-|['compiler_generated'] )-|['compiler_generated'] )
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<[_4|_5]> when 'true' -> apply 'lc$^1'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_3)
(<_289> when 'true' -> (primop 'match_fail' ({'function_clause',_289})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_6> = apply 'loc'/2 (A,_1) in apply 'lc$^1'/1 ([_6|[]])-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_290> when 'true' -> (primop 'match_fail' ({'function_clause',_290})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_24> = letrec 'lc$^2'/1 = fun (_19) -> case _19 of <[{'attribute',A,'compile',{'nowarn_bif_clash',{_81,_82}}}|_15]> when 'true' -> (letrec 'lc$^3'/1 = fun (_20) -> case _20 of <[{_83,L}|_17]> when 'true' -> (case _1 of (<({'lint',_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_rec34,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}-|['compiler_generated'] )> when 'true' -> let <_23> = apply 'lc$^3'/1 (_17) in ([{_rec34,{L,'erl_lint','disallowed_nowarn_bif_clash'}}|_23]-|['compiler_generated'] )-|['compiler_generated'] )
(<_117> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<[_16|_17]> when 'true' -> apply 'lc$^3'/1 (_17)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^2'/1 (_15)
(<_291> when 'true' -> (primop 'match_fail' ({'function_clause',_291})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in let <_18> = apply 'loc'/2 (A,_1) in apply 'lc$^3'/1 ([_18|[]])-|['list_comprehension'] )
(<[_14|_15]> when 'true' -> apply 'lc$^2'/1 (_15)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_292> when 'true' -> (primop 'match_fail' ({'function_clause',_292})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (_0) in let <_26> = apply 'is_warn_enabled'/2 ('bif_clash',_1) in let <Disabled> = call 'erlang':'not' (_26) in let <_40> = case <> of <> when try (let <_30> = case Disabled of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (_12,[])-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_28> when 'true' -> _28-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_30-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case _1 of (<({'lint',_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_rec35,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150}-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'lint',_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_rec36,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184}-|['compiler_generated'] )> when 'true' -> [{_rec35,{'erl_lint','disallowed_nowarn_bif_clash'}}|_rec36]-|['compiler_generated'] )
(<_185> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_151> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when Disabled -> (case _1 of (<({'lint',_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_rec37,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}-|['compiler_generated'] )> when 'true' -> let <_37> = call 'erlang':'++' (_24,_rec37) in call 'erlang':'++' (_12,_37)-|['compiler_generated'] )
(<_219> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> (case _1 of (<({'lint',_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_rec38,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252}-|['compiler_generated'] )> when 'true' -> call 'erlang':'++' (_24,_rec38)-|['compiler_generated'] )
(<_253> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end in case _1 of <{'lint',_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_287}> when 'true' -> call 'erlang':'setelement' (21,_1,_40)
(<_288> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
'post_traversal_check'/2 = fun (_0,_1) -> let <St1> = apply 'check_behaviour'/1 (_1) in let <St2> = apply 'check_deprecated'/2 (_0,St1) in let <St3> = apply 'check_imports'/2 (_0,St2) in let <St4> = apply 'check_inlines'/2 (_0,St3) in let <St5> = apply 'check_undefined_functions'/1 (St4) in let <St6> = apply 'check_unused_functions'/2 (_0,St5) in let <St7> = apply 'check_bif_clashes'/2 (_0,St6) in let <St8> = apply 'check_specs_without_function'/1 (St7) in let <St9> = apply 'check_functions_without_spec'/2 (_0,St8) in let <StA> = apply 'check_undefined_types'/1 (St9) in let <StB> = apply 'check_unused_types'/2 (_0,StA) in let <StC> = apply 'check_untyped_records'/2 (_0,StB) in let <StD> = apply 'check_on_load'/1 (StC) in let <StE> = apply 'check_unused_records'/2 (_0,StD) in let <StF> = apply 'check_local_opaque_types'/1 (StE) in let <StG> = apply 'check_dialyzer_attribute'/2 (_0,StF) in let <StH> = apply 'check_callback_information'/1 (StG) in apply 'check_removed'/2 (_0,StH)
'check_behaviour'/1 = fun (_0) -> (case _0 of (<({'lint',_4,_5,_rec40,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}-|['compiler_generated'] )> when 'true' -> apply 'behaviour_check'/2 (_rec40,_0)-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'behaviour_check'/2 = fun (_0,_1) -> case apply 'all_behaviour_callbacks'/3 (_0,[],_1) of <{AllBfs0,St1}> when 'true' -> let <St> = apply 'behaviour_missing_callbacks'/2 (AllBfs0,St1) in let <Exports> = apply 'exports'/1 (_1) in let <F> = fun (_15,_14) -> (letrec 'lc$^0'/1 = fun (_11) -> case _11 of <[B|_6]> when 'true' -> let <_8> = call 'lists':'member' (B,_14) in let <_10> = case _8 of (<'false'> when 'true' -> 'true'-|['compiler_generated'] )
(<'true'> when 'true' -> call 'gb_sets':'is_member' (B,Exports)-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in (case _10 of <'true'> when 'true' -> let <_12> = apply 'lc$^0'/1 (_6) in ([B|_12]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^0'/1 (_6)-|['compiler_generated'] )
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end-|['list_comprehension'] )
<[]> when 'true' -> []
(<_28> when 'true' -> (primop 'match_fail' ({'function_clause',_28})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_15)-|['list_comprehension'] ) in let <_24> = letrec 'lc$^2'/1 = fun (_21) -> case _21 of <[{Item,Bfs0,OBfs0}|_20]> when 'true' -> let <_22> = apply F (Bfs0,OBfs0) in let <_23> = apply 'lc$^2'/1 (_20) in ([{Item,_22}|_23]-|['compiler_generated'] )
(<[_19|_20]> when 'true' -> apply 'lc$^2'/1 (_20)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_31> when 'true' -> (primop 'match_fail' ({'function_clause',_31})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (AllBfs0) in apply 'behaviour_conflicting'/2 (_24,St)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'all_behaviour_callbacks'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[_@r0 = {Line,B}|Bs],Acc,St0> when 'true' -> case apply 'behaviour_callbacks'/3 (Line,B,St0) of <{Bfs0,OBfs0,St}> when 'true' -> apply 'all_behaviour_callbacks'/3 (Bs,[{_@r0,Bfs0,OBfs0}|Acc],St)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<[],Acc,St> when 'true' -> let <_4> = call 'lists':'reverse' (Acc) in {_4,St}
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'all_behaviour_callbacks',3}}] )-|['compiler_generated'] ) end
'behaviour_callbacks'/3 = fun (_0,_1,_2) -> try call _1:'behaviour_info' ('callbacks') of <_3> -> case _3 of <'undefined'> when 'true' -> let <St1> = apply 'add_warning'/3 (_0,{'undefined_behaviour_callbacks',_1},_2) in {[],[],St1}
<Funcs> when 'true' -> case apply 'is_fa_list'/1 (Funcs) of <'true'> when 'true' -> try call _1:'behaviour_info' ('optional_callbacks') of <_5> -> case _5 of <'undefined'> when 'true' -> {Funcs,[],_2}
<OptFuncs> when 'true' -> case apply 'is_fa_list'/1 (OptFuncs) of <'true'> when 'true' -> {Funcs,OptFuncs,_2}
<'false'> when 'true' -> let <W> = {'ill_defined_optional_callbacks',_1} in let <St1> = apply 'add_warning'/3 (_0,W,_2) in {Funcs,[],St1}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end end catch <_12,_11,_10> -> {Funcs,[],_2}
<'false'> when 'true' -> let <St1> = apply 'add_warning'/3 (_0,{'ill_defined_behaviour_callbacks',_1},_2) in {[],[],St1}
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end end catch <_18,_17,_16> -> let <St1> = apply 'add_warning'/3 (_0,{'undefined_behaviour',_1},_2) in let <St2> = apply 'check_module_name'/3 (_1,_0,St1) in {[],[],St2}
'behaviour_missing_callbacks'/2 = fun (_0,_1) -> case <_0,_1> of <[{{Line,B},Bfs0,OBfs}|T],St0> when 'true' -> let <_3> = call 'ordsets':'from_list' (Bfs0) in let <_2> = call 'ordsets':'from_list' (OBfs) in let <Bfs> = call 'ordsets':'subtract' (_3,_2) in let <_5> = apply 'exports'/1 (St0) in let <Exports> = call 'gb_sets':'to_list' (_5) in let <Missing> = call 'ordsets':'subtract' (Bfs,Exports) in let <_14> = fun (_11,_10) -> case apply 'is_fa'/1 (_11) of <'true'> when 'true' -> let <M> = {'undefined_behaviour_func',_11,B} in apply 'add_warning'/3 (Line,M,_10)
<'false'> when 'true' -> _10
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in let <St> = call 'lists':'foldl' (_14,St0,Missing) in apply 'behaviour_missing_callbacks'/2 (T,St)
<[],St> when 'true' -> St
(<_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16})-|[{'function_name',{'behaviour_missing_callbacks',2}}] )-|['compiler_generated'] ) end
'behaviour_conflicting'/2 = fun (_0,_1) -> let <R0> = call 'sofs':'relation' (_0,[{'item',['callback']}]) in let <R1> = call 'sofs':'family_to_relation' (R0) in let <R2> = call 'sofs':'converse' (R1) in let <R3> = call 'sofs':'relation_to_family' (R2) in let <_9> = fun (_7) -> let <_6> = call 'sofs':'no_elements' (_7) in call 'erlang':'>' (_6,1) in let <R4> = call 'sofs':'family_specification' (_9,R3) in let <R> = call 'sofs':'to_external' (R4) in apply 'behaviour_add_conflicts'/2 (R,_1)
'behaviour_add_conflicts'/2 = fun (_0,_1) -> case <_0,_1> of <[{Cb,[{FirstLoc,FirstB}|Cs]}|T],St0> when 'true' -> let <_2> = apply 'loc'/2 (FirstLoc,St0) in let <FirstL> = call 'erlang':'element' (2,_2) in let <St> = apply 'behaviour_add_conflict'/5 (Cs,Cb,FirstL,FirstB,St0) in apply 'behaviour_add_conflicts'/2 (T,St)
<[],St> when 'true' -> St
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'behaviour_add_conflicts',2}}] )-|['compiler_generated'] ) end
'behaviour_add_conflict'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[{Line,B}|Cs],Cb,FirstL,FirstB,St0> when 'true' -> let <St> = apply 'add_warning'/3 (Line,{'conflicting_behaviours',Cb,B,FirstL,FirstB},St0) in apply 'behaviour_add_conflict'/5 (Cs,Cb,FirstL,FirstB,St)
<[],_11,_12,_13,St> when 'true' -> St
(<_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7,_6})-|[{'function_name',{'behaviour_add_conflict',5}}] )-|['compiler_generated'] ) end
'check_deprecated'/2 = fun (_0,_1) -> (case _1 of (<({'lint',_33,_34,_35,_36,_37,_rec41,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}-|['compiler_generated'] )> when 'true' -> let <_7> = case call 'lists':'member' ('export_all',_rec41) of <'true'> when 'true' -> (case _1 of (<({'lint',_67,_68,_69,_70,_71,_72,_73,_74,_75,_rec42,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}-|['compiler_generated'] )> when 'true' -> _rec42-|['compiler_generated'] )
(<_100> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> (case _1 of (<({'lint',_101,_102,_103,_rec43,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}-|['compiler_generated'] )> when 'true' -> _rec43-|['compiler_generated'] )
(<_134> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_9> = call 'gb_sets':'to_list' (_7) in let <X> = apply 'ignore_predefined_funcs'/1 (_9) in case _1 of <{'lint',_135,Mod,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' -> let <_24> = letrec 'lc$^0'/1 = fun (_20) -> case _20 of <[{'attribute',L,'deprecated',Depr}|_13]> when 'true' -> (letrec 'lc$^1'/1 = fun (_21) -> case _21 of <[D|_15]> when 'true' -> (letrec 'lc$^2'/1 = fun (_22) -> case _22 of <[E|_18]> when 'true' -> let <_23> = apply 'lc$^2'/1 (_18) in ([{E,L}|_23]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_15)
(<_168> when 'true' -> (primop 'match_fail' ({'function_clause',_168})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_19> = apply 'depr_cat'/3 (D,X,Mod) in apply 'lc$^2'/1 (_19)-|['list_comprehension'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_13)
(<_169> when 'true' -> (primop 'match_fail' ({'function_clause',_169})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_16> = call 'lists':'flatten' ([Depr|[]]) in apply 'lc$^1'/1 (_16)-|['list_comprehension'] )
(<[_12|_13]> when 'true' -> apply 'lc$^0'/1 (_13)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_170> when 'true' -> (primop 'match_fail' ({'function_clause',_170})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_30> = fun (_27,_26) -> case <_27,_26> of <{E,L},St1> when 'true' -> apply 'add_error'/3 (L,E,St1)
(<_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28})-|[{'function_name',{'-check_deprecated/2-fun-3-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_30,_1,_24)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'depr_cat'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <D = {F,A,Flg},X,Mod> when 'true' -> case apply 'deprecated_flag'/1 (Flg) of <'false'> when 'true' -> [{'invalid_deprecated',D}|[]]
<'true'> when 'true' -> apply 'depr_fa'/4 (F,A,X,Mod)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<{F,A},X,Mod> when 'true' -> apply 'depr_fa'/4 (F,A,X,Mod)
<'module',_X_X,_X_Mod> when 'true' -> []
<D,_X_X,_X_Mod> when 'true' -> [{'invalid_deprecated',D}|[]] end
'depr_fa'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'_','_',_X_X,_X_Mod> when 'true' -> []
<F,'_',X,_X_Mod> when call 'erlang':'is_atom' (F) -> let <_6> = fun (_4) -> case _4 of <{F1,_18}> when 'true' -> call 'erlang':'=:=' (F1,F)
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'-depr_fa/4-fun-0-',1}}] )-|['compiler_generated'] ) end in case call 'lists':'filter' (_6,X) of <[]> when 'true' -> [{'bad_deprecated',{F,'_'}}|[]]
<_19> when 'true' -> [] end
<F,A,X,Mod> when try let <_8> = call 'erlang':'is_atom' (F) in let <_9> = call 'erlang':'is_integer' (A) in let <_10> = call 'erlang':'>=' (A,0) in let <_11> = call 'erlang':'and' (_9,_10) in call 'erlang':'and' (_8,_11) of <Try> -> Try catch <T,R> -> 'false' -> case call 'lists':'member' ({F,A},X) of <'true'> when 'true' -> []
<'false'> when 'true' -> case call 'erlang':'is_builtin' (Mod,F,A) of <'true'> when 'true' -> []
<'false'> when 'true' -> [{'bad_deprecated',{F,A}}|[]]
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
<F,A,_X_X,_X_Mod> when 'true' -> [{'invalid_deprecated',{F,A}}|[]] end
'deprecated_flag'/1 = fun (_0) -> case _0 of <'next_version'> when 'true' -> 'true'
<'next_major_release'> when 'true' -> 'true'
<'eventually'> when 'true' -> 'true'
<String> when 'true' -> apply 'deprecated_desc'/1 (String) end
'deprecated_desc'/1 = fun (_0) -> case _0 of <[Char|Str]> when call 'erlang':'is_integer' (Char) -> apply 'deprecated_desc'/1 (Str)
<[]> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'check_removed'/2 = fun (_0,_1) -> (case _1 of (<({'lint',_33,_34,_35,_36,_37,_rec44,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65}-|['compiler_generated'] )> when 'true' -> let <_7> = case call 'lists':'member' ('export_all',_rec44) of <'true'> when 'true' -> (case _1 of (<({'lint',_67,_68,_69,_70,_71,_72,_73,_74,_75,_rec45,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99}-|['compiler_generated'] )> when 'true' -> _rec45-|['compiler_generated'] )
(<_100> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> (case _1 of (<({'lint',_101,_102,_103,_rec46,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133}-|['compiler_generated'] )> when 'true' -> _rec46-|['compiler_generated'] )
(<_134> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_9> = call 'gb_sets':'to_list' (_7) in let <X> = apply 'ignore_predefined_funcs'/1 (_9) in case _1 of <{'lint',_135,Mod,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167}> when 'true' -> let <_24> = letrec 'lc$^0'/1 = fun (_20) -> case _20 of <[{'attribute',L,'removed',Removed}|_13]> when 'true' -> (letrec 'lc$^1'/1 = fun (_21) -> case _21 of <[R|_15]> when 'true' -> (letrec 'lc$^2'/1 = fun (_22) -> case _22 of <[E|_18]> when 'true' -> let <_23> = apply 'lc$^2'/1 (_18) in ([{E,L}|_23]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_15)
(<_168> when 'true' -> (primop 'match_fail' ({'function_clause',_168})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_19> = apply 'removed_cat'/3 (R,X,Mod) in apply 'lc$^2'/1 (_19)-|['list_comprehension'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_13)
(<_169> when 'true' -> (primop 'match_fail' ({'function_clause',_169})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_16> = call 'lists':'flatten' ([Removed|[]]) in apply 'lc$^1'/1 (_16)-|['list_comprehension'] )
(<[_12|_13]> when 'true' -> apply 'lc$^0'/1 (_13)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_170> when 'true' -> (primop 'match_fail' ({'function_clause',_170})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_30> = fun (_27,_26) -> case <_27,_26> of <{E,L},St1> when 'true' -> apply 'add_error'/3 (L,E,St1)
(<_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28})-|[{'function_name',{'-check_removed/2-fun-3-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_30,_1,_24)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_66> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'removed_cat'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <R = {F,A,Desc},X,Mod> when 'true' -> case apply 'removed_desc'/1 (Desc) of <'false'> when 'true' -> [{'invalid_removed',R}|[]]
<'true'> when 'true' -> apply 'removed_fa'/4 (F,A,X,Mod)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<{F,A},X,Mod> when 'true' -> apply 'removed_fa'/4 (F,A,X,Mod)
<'module',X,Mod> when 'true' -> apply 'removed_fa'/4 ('_','_',X,Mod)
<R,_X_X,_X_Mod> when 'true' -> [{'invalid_removed',R}|[]] end
'removed_fa'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'_','_',X,_X_Mod> when 'true' -> case X of <[_19|_20]> when 'true' -> [{'bad_removed',{'_','_'}}]
<[]> when 'true' -> []
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<F,'_',X,_X_Mod> when call 'erlang':'is_atom' (F) -> let <_7> = fun (_5) -> case _5 of <{F1,_21}> when 'true' -> call 'erlang':'=:=' (F1,F)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-removed_fa/4-fun-0-',1}}] )-|['compiler_generated'] ) end in case call 'lists':'filter' (_7,X) of <[_22|_23]> when 'true' -> [{'bad_removed',{F,'_'}}|[]]
<_24> when 'true' -> [] end
<F,A,X,Mod> when try let <_9> = call 'erlang':'is_atom' (F) in let <_10> = call 'erlang':'is_integer' (A) in let <_11> = call 'erlang':'>=' (A,0) in let <_12> = call 'erlang':'and' (_10,_11) in call 'erlang':'and' (_9,_12) of <Try> -> Try catch <T,R> -> 'false' -> case call 'lists':'member' ({F,A},X) of <'true'> when 'true' -> [{'bad_removed',{F,A}}|[]]
<'false'> when 'true' -> case call 'erlang':'is_builtin' (Mod,F,A) of <'true'> when 'true' -> [{'bad_removed',{F,A}}|[]]
<'false'> when 'true' -> []
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
<F,A,_X_X,_X_Mod> when 'true' -> [{'invalid_removed',{F,A}}|[]] end
'removed_desc'/1 = fun (_0) -> case _0 of <[Char|Str]> when call 'erlang':'is_integer' (Char) -> apply 'removed_desc'/1 (Str)
<[]> when 'true' -> 'true'
<_2> when 'true' -> 'false' end
'ignore_predefined_funcs'/1 = fun (_0) -> case _0 of <[{'behaviour_info',1}|Fs]> when 'true' -> apply 'ignore_predefined_funcs'/1 (Fs)
<[{'module_info',0}|Fs]> when 'true' -> apply 'ignore_predefined_funcs'/1 (Fs)
<[{'module_info',1}|Fs]> when 'true' -> apply 'ignore_predefined_funcs'/1 (Fs)
<[Other|Fs]> when 'true' -> let <_1> = apply 'ignore_predefined_funcs'/1 (Fs) in [Other|_1]
<[]> when 'true' -> []
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'ignore_predefined_funcs',1}}] )-|['compiler_generated'] ) end
'check_imports'/2 = fun (_0,_1) -> case apply 'is_warn_enabled'/2 ('unused_import',_1) of <'false'> when 'true' -> _1
<'true'> when 'true' -> (case _1 of (<({'lint',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_rec47,_57,_58,_59,_60,_61,_62,_63,_64}-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'lint',_66,_67,_68,_69,_rec48,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98}-|['compiler_generated'] )> when 'true' -> (case _rec47 of (<({'usage',_100,_rec49,_101,_102}-|['compiler_generated'] )> when 'true' -> let <Unused> = call 'ordsets':'subtract' (_rec48,_rec49) in let <_18> = letrec 'lc$^0'/1 = fun (_15) -> case _15 of <[{'attribute',L,'import',{Mod,Fs}}|_11]> when 'true' -> (letrec 'lc$^1'/1 = fun (_16) -> case _16 of <[FA|_13]> when 'true' -> let <_17> = apply 'lc$^1'/1 (_13) in ([{{FA,Mod},L}|_17]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_11)
(<_104> when 'true' -> (primop 'match_fail' ({'function_clause',_104})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_14> = call 'lists':'usort' (Fs) in apply 'lc$^1'/1 (_14)-|['list_comprehension'] )
(<[_10|_11]> when 'true' -> apply 'lc$^0'/1 (_11)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_105> when 'true' -> (primop 'match_fail' ({'function_clause',_105})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_27> = letrec 'lc$^2'/1 = fun (_24) -> case _24 of <[FM|_21]> when 'true' -> (letrec 'lc$^3'/1 = fun (_25) -> case _25 of <[{FM2,L}|_23]> when call 'erlang':'=:=' (FM,FM2) -> let <_26> = apply 'lc$^3'/1 (_23) in ([{FM,L}|_26]-|['compiler_generated'] )
(<[_22|_23]> when 'true' -> apply 'lc$^3'/1 (_23)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^2'/1 (_21)
(<_106> when 'true' -> (primop 'match_fail' ({'function_clause',_106})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in apply 'lc$^3'/1 (_18)-|['list_comprehension'] )
<[]> when 'true' -> []
(<_107> when 'true' -> (primop 'match_fail' ({'function_clause',_107})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (Unused) in apply 'func_line_warning'/3 ('unused_import',_27,_1)-|['compiler_generated'] )
(<_103> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_99> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end
'check_inlines'/2 = fun (_0,_1) -> apply 'check_option_functions'/4 (_0,'inline','bad_inline',_1)
'check_unused_functions'/2 = fun (_0,_1) -> let <St1> = apply 'check_option_functions'/4 (_0,'nowarn_unused_function','bad_nowarn_unused_function',_1) in (case St1 of (<({'lint',_41,_42,_43,_44,_45,_rec50,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}-|['compiler_generated'] )> when 'true' -> let <_9> = case call 'lists':'member' ('export_all',_rec50) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> let <_7> = apply 'is_warn_enabled'/2 ('unused_function',St1) in call 'erlang':'not' (_7)-|['compiler_generated'] )
(<_6> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _9 of <'true'> when 'true' -> St1
<'false'> when 'true' -> let <Nowarn> = apply 'nowarn_function'/2 ('nowarn_unused_function',_rec50) in (case St1 of (<({'lint',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_rec51,_100,_101,_102,_103,_104,_105,_106,_107}-|['compiler_generated'] )> when 'true' -> let <_16> = apply 'initially_reached'/1 (St1) in (case _rec51 of (<({'usage',_rec52,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> let <Used> = apply 'reached_functions'/2 (_16,_rec52) in let <UsedOrNowarn> = call 'ordsets':'union' (Used,Nowarn) in (case St1 of (<({'lint',_113,_114,_115,_116,_117,_118,_119,_120,_121,_rec53,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145}-|['compiler_generated'] )> when 'true' -> let <_21> = call 'gb_sets':'to_list' (_rec53) in let <Unused> = call 'ordsets':'subtract' (_21,UsedOrNowarn) in let <_27> = letrec 'lc$^0'/1 = fun (_25) -> case _25 of <[{'function',L,N,A,_147}|_24]> when 'true' -> let <_26> = apply 'lc$^0'/1 (_24) in ([{{N,A},L}|_26]-|['compiler_generated'] )
(<[_23|_24]> when 'true' -> apply 'lc$^0'/1 (_24)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_148> when 'true' -> (primop 'match_fail' ({'function_clause',_148})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_36> = letrec 'lc$^1'/1 = fun (_33) -> case _33 of <[FA|_30]> when 'true' -> (letrec 'lc$^2'/1 = fun (_34) -> case _34 of <[{FA2,L}|_32]> when call 'erlang':'=:=' (FA,FA2) -> let <_35> = apply 'lc$^2'/1 (_32) in ([{FA,L}|_35]-|['compiler_generated'] )
(<[_31|_32]> when 'true' -> apply 'lc$^2'/1 (_32)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_30)
(<_149> when 'true' -> (primop 'match_fail' ({'function_clause',_149})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (_27)-|['list_comprehension'] )
<[]> when 'true' -> []
(<_150> when 'true' -> (primop 'match_fail' ({'function_clause',_150})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (Unused) in apply 'func_line_warning'/3 ('unused_function',_36,St1)-|['compiler_generated'] )
(<_146> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_108> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_38> when 'true' -> primop 'match_fail' ({'case_clause',_38})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'initially_reached'/1 = fun (_0) -> case _0 of <{'lint',_3,_4,_5,Exp,_6,_7,_8,_9,_10,_11,OnLoad,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' -> let <_1> = call 'gb_sets':'to_list' (Exp) in call 'erlang':'++' (OnLoad,_1)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'initially_reached',1}}] )-|['compiler_generated'] ) end
'reached_functions'/2 = fun (_0,_1) -> let <_2> = call 'gb_sets':'empty' () in apply 'reached_functions'/4 (_0,[],_1,_2)
'reached_functions'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[R|Rs],More0,Ref,Reached0> when 'true' -> case call 'gb_sets':'is_element' (R,Reached0) of <'true'> when 'true' -> apply 'reached_functions'/4 (Rs,More0,Ref,Reached0)
<'false'> when 'true' -> let <Reached> = call 'gb_sets':'add_element' (R,Reached0) in case call 'maps':'find' (R,Ref) of <{'ok',More}> when 'true' -> apply 'reached_functions'/4 (Rs,[More|More0],Ref,Reached)
<'error'> when 'true' -> apply 'reached_functions'/4 (Rs,More0,Ref,Reached)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<[],More = [_12|_13],Ref,Reached> when 'true' -> let <_7> = call 'lists':'append' (More) in apply 'reached_functions'/4 (_7,[],Ref,Reached)
<[],[],_X_Ref,Reached> when 'true' -> call 'gb_sets':'to_list' (Reached)
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'reached_functions',4}}] )-|['compiler_generated'] ) end
'check_undefined_functions'/1 = fun (_0) -> case _0 of <St0 = {'lint',_12,_13,_14,_15,_16,_17,_18,_19,_20,Def0,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,Called0,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' -> let <Called> = call 'sofs':'relation' (Called0,[{'func','location'}]) in let <_2> = call 'gb_sets':'to_list' (Def0) in let <Def> = call 'sofs':'from_external' (_2,['func']) in let <_4> = call 'sofs':'drestriction' (Called,Def) in let <Undef> = call 'sofs':'to_external' (_4) in let <_10> = fun (_7,_6) -> case <_7,_6> of <{NA,L},St> when 'true' -> apply 'add_error'/3 (L,{'undefined_function',NA},St)
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'-check_undefined_functions/1-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_10,St0,Undef)
(<_11> when 'true' -> (primop 'match_fail' ({'function_clause',_11})-|[{'function_name',{'check_undefined_functions',1}}] )-|['compiler_generated'] ) end
'check_undefined_types'/1 = fun (_0) -> case _0 of <St0 = {'lint',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,Usage,_47,_48,_49,Def,_50,_51,_52,_53}> when 'true' -> (case Usage of (<({'usage',_54,_55,_56,_rec54}-|['compiler_generated'] )> when 'true' -> let <UTAs> = call 'maps':'keys' (_rec54) in let <_14> = letrec 'lc$^0'/1 = fun (_10) -> case _10 of <[TA|_6]> when try let <_7> = call 'erlang':'is_map_key' (TA,Def) in (call 'erlang':'=:=' (_7,'false')-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case apply 'is_default_type'/1 (TA) of <'false'> when 'true' -> let <_11> = call 'erlang':'map_get' (TA,_rec54) in let <_12> = apply 'lc$^0'/1 (_6) in ([{TA,_11}|_12]-|['compiler_generated'] )
(<'true'> when 'true' -> apply 'lc$^0'/1 (_6)-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[TA|_6]> when 'true' -> apply 'lc$^0'/1 (_6)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_58> when 'true' -> (primop 'match_fail' ({'function_clause',_58})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (UTAs) in let <_20> = fun (_17,_16) -> case <_17,_16> of <{TA,L},St> when 'true' -> apply 'add_error'/3 (L,{'undefined_type',TA},St)
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'-check_undefined_types/1-fun-1-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_20,St0,_14)-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_21> when 'true' -> (primop 'match_fail' ({'function_clause',_21})-|[{'function_name',{'check_undefined_types',1}}] )-|['compiler_generated'] ) end
'check_bif_clashes'/2 = fun (_0,_1) -> apply 'check_option_functions'/4 (_0,'nowarn_bif_clash','bad_nowarn_bif_clash',_1)
'check_option_functions'/4 = fun (_0,_1,_2,_3) -> let <_16> = letrec 'lc$^0'/1 = fun (_12) -> case _12 of <[{'attribute',L,'compile',Args}|_5]> when 'true' -> (letrec 'lc$^1'/1 = fun (_13) -> case _13 of <[{Tag,FAs0}|_7]> when call 'erlang':'=:=' (_1,Tag) -> (letrec 'lc$^2'/1 = fun (_14) -> case _14 of <[FA|_10]> when 'true' -> let <_15> = apply 'lc$^2'/1 (_10) in ([{FA,L}|_15]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^1'/1 (_7)
(<_113> when 'true' -> (primop 'match_fail' ({'function_clause',_113})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_11> = call 'lists':'flatten' ([FAs0|[]]) in apply 'lc$^2'/1 (_11)-|['list_comprehension'] )
(<[_6|_7]> when 'true' -> apply 'lc$^1'/1 (_7)-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_5)
(<_114> when 'true' -> (primop 'match_fail' ({'function_clause',_114})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_8> = call 'lists':'flatten' ([Args|[]]) in apply 'lc$^1'/1 (_8)-|['list_comprehension'] )
(<[_4|_5]> when 'true' -> apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_115> when 'true' -> (primop 'match_fail' ({'function_clause',_115})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in (case _3 of (<({'lint',_44,_45,_46,_47,_48,_49,_50,_51,_52,_rec55,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}-|['compiler_generated'] )> when 'true' -> let <_29> = call 'gb_sets':'to_list' (_rec55) in let <_26> = apply 'pseudolocals'/0 () in let <_30> = call 'erlang':'--' (_29,_26) in let <_25> = letrec 'lc$^3'/1 = fun (_23) -> case _23 of <[{_@r0 = {F,A},_78}|_19]> when 'true' -> let <_24> = apply 'lc$^3'/1 (_19) in ([_@r0|_24]-|['compiler_generated'] )
(<[_18|_19]> when 'true' -> apply 'lc$^3'/1 (_19)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_116> when 'true' -> (primop 'match_fail' ({'function_clause',_116})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in (case _3 of (<({'lint',_79,_80,_81,_82,_rec56,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> let <_22> = call 'orddict':'to_list' (_rec56) in apply 'lc$^3'/1 (_22)-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in let <DefFunctions> = call 'erlang':'++' (_30,_25) in let <_38> = letrec 'lc$^4'/1 = fun (_35) -> case _35 of <[_@r1 = {FA,L}|_33]> when 'true' -> (case call 'lists':'member' (FA,DefFunctions) of <'false'> when 'true' -> let <_36> = apply 'lc$^4'/1 (_33) in ([_@r1|_36]-|['compiler_generated'] )
(<'true'> when 'true' -> apply 'lc$^4'/1 (_33)-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_32|_33]> when 'true' -> apply 'lc$^4'/1 (_33)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_117> when 'true' -> (primop 'match_fail' ({'function_clause',_117})-|[{'function_name',{'lc$^4',1}}] )-|['compiler_generated'] ) end in apply 'lc$^4'/1 (_16) in apply 'func_line_error'/3 (_2,_38,_3)-|['compiler_generated'] )
(<_77> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'nowarn_function'/2 = fun (_0,_1) -> let <_10> = letrec 'lc$^0'/1 = fun (_7) -> case _7 of <[{Tag1,FAs}|_3]> when call 'erlang':'=:=' (Tag1,_0) -> (letrec 'lc$^1'/1 = fun (_8) -> case _8 of <[FA|_5]> when 'true' -> let <_9> = apply 'lc$^1'/1 (_5) in ([FA|_9]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_3)
(<_13> when 'true' -> (primop 'match_fail' ({'function_clause',_13})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'flatten' ([FAs|[]]) in apply 'lc$^1'/1 (_6)-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_14> when 'true' -> (primop 'match_fail' ({'function_clause',_14})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_1) in call 'ordsets':'from_list' (_10)
'func_line_warning'/3 = fun (_0,_1,_2) -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{F,Line},St0> when 'true' -> apply 'add_warning'/3 (Line,{_0,F},St0)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'-func_line_warning/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_7,_2,_1)
'func_line_error'/3 = fun (_0,_1,_2) -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{F,Line},St0> when 'true' -> apply 'add_error'/3 (Line,{_0,F},St0)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'-func_line_error/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_7,_2,_1)
'check_untyped_records'/2 = fun (_0,_1) -> case apply 'is_warn_enabled'/2 ('untyped_record',_1) of <'true'> when 'true' -> (case _1 of (<({'lint',_30,_31,_32,_33,_34,_35,_rec57,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}-|['compiler_generated'] )> when 'true' -> let <RecNames> = call 'maps':'keys' (_rec57) in let <_13> = letrec 'lc$^1'/1 = fun (_10) -> case _10 of <[{'attribute',_64,'record',{Name,Fields}}|_6]> when 'true' -> let <_9> = fun (_7) -> case _7 of <{'typed_record_field',_65,_66}> when 'true' -> 'true'
<_67> when 'true' -> 'false' end in (case call 'lists':'all' (_9,Fields) of <'true'> when 'true' -> let <_11> = apply 'lc$^1'/1 (_6) in ([Name|_11]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^1'/1 (_6)-|['compiler_generated'] )
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_5|_6]> when 'true' -> apply 'lc$^1'/1 (_6)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_104> when 'true' -> (primop 'match_fail' ({'function_clause',_104})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (_0) in let <_26> = fun (_23,_22) -> (case _1 of (<({'lint',_68,_69,_70,_71,_72,_73,_rec58,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100}-|['compiler_generated'] )> when 'true' -> case call 'erlang':'map_get' (_23,_rec58) of <{L,Fields}> when 'true' -> case Fields of <[]> when 'true' -> _22
<[_102|_103]> when 'true' -> apply 'add_warning'/3 (L,{'untyped_record',_23},_22)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_101> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in let <_16> = call 'ordsets':'from_list' (RecNames) in let <_15> = call 'ordsets':'from_list' (_13) in let <_17> = call 'ordsets':'subtract' (_16,_15) in call 'lists':'foldl' (_26,_1,_17)-|['compiler_generated'] )
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> _1
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end
'check_unused_records'/2 = fun (_0,_1) -> let <_6> = letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[{'attribute',_X_L,'file',{File,_X_Line}}|_3]> when 'true' -> let <_5> = apply 'lc$^0'/1 (_3) in ([File|_5]-|['compiler_generated'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_115> when 'true' -> (primop 'match_fail' ({'function_clause',_115})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_8> = apply 'is_warn_enabled'/2 ('unused_record',_1) in case <_8,_6> of <('true'-|['compiler_generated'] ),([FirstFile|_41]-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'lint',_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_rec59,_67,_68,_69,_70,_71,_72,_73,_74}-|['compiler_generated'] )> when 'true' -> (case _rec59 of (<({'usage',_76,_77,_rec60,_78}-|['compiler_generated'] )> when 'true' -> let <_21> = fun (_18,_17) -> call 'maps':'remove' (_18,_17) in (case _1 of (<({'lint',_80,_81,_82,_83,_84,_85,_rec61,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}-|['compiler_generated'] )> when 'true' -> let <URecs> = call 'gb_sets':'fold' (_21,_rec61,_rec60) in let <_31> = letrec 'lc$^2'/1 = fun (_28) -> case _28 of <[{Name,{FileLine,_X_Fields}}|_24]> when 'true' -> let <_26> = apply 'loc'/2 (FileLine,_1) in let <_27> = call 'erlang':'element' (1,_26) in (case <> of <> when call 'erlang':'=:=' (_27,FirstFile) -> let <_29> = apply 'lc$^2'/1 (_24) in ([{Name,FileLine}|_29]-|['compiler_generated'] )
(<> when 'true' -> apply 'lc$^2'/1 (_24)-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_23|_24]> when 'true' -> apply 'lc$^2'/1 (_24)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_122> when 'true' -> (primop 'match_fail' ({'function_clause',_122})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in let <_25> = call 'maps':'to_list' (URecs) in apply 'lc$^2'/1 (_25) in let <_37> = fun (_34,_33) -> case <_34,_33> of <{N,L},St> when 'true' -> apply 'add_warning'/3 (L,{'unused_record',N},St)
(<_36,_35> when 'true' -> (primop 'match_fail' ({'function_clause',_36,_35})-|[{'function_name',{'-check_unused_records/2-fun-3-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_37,_1,_31)-|['compiler_generated'] )
(<_113> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<(_116-|['compiler_generated'] ),(_117-|['compiler_generated'] )> when 'true' -> _1 end
'check_callback_information'/1 = fun (_0) -> case _0 of <St0 = {'lint',_20,_21,_22,_23,_24,_25,_26,_27,_28,Defined,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,Callbacks,OptionalCbs,_46,_47,_48,_49,_50}> when 'true' -> let <OptFun> = fun (_4,_3,_2) -> case call 'erlang':'is_map_key' (_4,Callbacks) of <'true'> when 'true' -> _2
<'false'> when 'true' -> apply 'add_error'/3 (_3,{'undefined_callback',_4},_2)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end in let <St1> = call 'maps':'fold' (OptFun,St0,OptionalCbs) in case call 'gb_sets':'is_member' ({'behaviour_info',1},Defined) of <'false'> when 'true' -> St1
<'true'> when 'true' -> case call 'erlang':'map_size' (Callbacks) of <0> when 'true' -> St1
<_51> when 'true' -> let <FoldFun> = fun (_12,_11,_10) -> apply 'add_error'/3 (_11,{'behaviour_info',_12},_10) in call 'maps':'fold' (FoldFun,St1,Callbacks) end
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
(<_19> when 'true' -> (primop 'match_fail' ({'function_clause',_19})-|[{'function_name',{'check_callback_information',1}}] )-|['compiler_generated'] ) end
'export'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,Es,St0 = {'lint',_20,_21,_22,Es0,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Called,_43,_44,_45,_46,_47,_48,_49,_50,_51}> when 'true' -> let <_12> = fun (_9,_8) -> case <_9,_8> of <NA,{E,C,St2}> when 'true' -> let <_5> = case call 'gb_sets':'is_element' (NA,E) of <'true'> when 'true' -> let <Warn> = {'duplicated_export',NA} in apply 'add_warning'/3 (Line,Warn,St2)
<'false'> when 'true' -> St2
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in let <_7> = call 'gb_sets':'add_element' (NA,E) in {_7,[{NA,Line}|C],_5}
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'-export/3-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (_12,{Es0,Called,St0},Es) of <{Es1,C1,St1}> when 'true' -> case St1 of <{'lint',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_15> = call 'erlang':'setelement' (26,St1,C1) in call 'erlang':'setelement' (5,_15,Es1)
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17})-|[{'function_name',{'export',3}}] )-|['compiler_generated'] ) end
'export_type'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,ETs,St0 = {'lint',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,Usage,_59,_60,_61,_62,ETs0,_63,_64,_65}> when 'true' -> (case Usage of (<({'usage',_66,_67,_68,_rec63}-|['compiler_generated'] )> when 'true' -> try let <_18> = fun (_15,_14) -> case <_15,_14> of <TA = {T,A},{E,U,St2}> when let <_6> = call 'erlang':'is_atom' (T) in let <_7> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_6,_7) -> let <_10> = case call 'gb_sets':'is_element' (TA,E) of <'true'> when 'true' -> let <Warn> = {'duplicated_export_type',TA} in apply 'add_warning'/3 (Line,Warn,St2)
<'false'> when 'true' -> St2
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in let <_13> = call 'gb_sets':'add_element' (TA,E) in let <_12> = call 'maps':'put' (TA,Line,U) in {_13,_12,_10}
(<_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16})-|[{'function_name',{'-export_type/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_18,{ETs0,_rec63,St0},ETs) of <_19> -> case _19 of <{ETs1,UTs1,St1}> when 'true' -> case Usage of <{'usage',_70,_71,_72,_73}> when 'true' -> let <_22> = call 'erlang':'setelement' (5,Usage,UTs1) in case St1 of <{'lint',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108}> when 'true' -> let <_25> = call 'erlang':'setelement' (32,St1,ETs1) in call 'erlang':'setelement' (27,_25,_22)
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_27> when 'true' -> primop 'match_fail' ({'try_clause',_27})-|['compiler_generated'] ) end catch <_30,_29,_28> -> case <_30,_29,_28> of <('error'-|['compiler_generated'] ),_110,_111> when 'true' -> apply 'add_error'/3 (Line,{'bad_export_type',ETs},St0)
(<_112,_113,_114> when 'true' -> primop 'raise' (_114,_113)-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_69> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_33,_32,_31> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32,_31})-|[{'function_name',{'export_type',3}}] )-|['compiler_generated'] ) end
'exports'/1 = fun (_0) -> case _0 of <{'lint',_3,_4,_5,Es,_6,Opts,_7,_8,_9,Defs,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> case call 'lists':'member' ('export_all',Opts) of <'true'> when 'true' -> Defs
<'false'> when 'true' -> Es
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'exports',1}}] )-|['compiler_generated'] ) end
'import'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,{Mod,Fs},St00> when 'true' -> let <St> = apply 'check_module_name'/3 (Mod,Line,St00) in let <Mfs> = call 'ordsets':'from_list' (Fs) in (case St of (<({'lint',_45,_46,_47,_48,_rec67,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77}-|['compiler_generated'] )> when 'true' -> case apply 'check_imports'/3 (Line,Mfs,_rec67) of <[]> when 'true' -> (case St of (<({'lint',_79,_80,_81,_82,_rec70,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> let <_rec68> = apply 'add_imports'/3 (Mod,Mfs,_rec70) in case St of <{'lint',_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146}> when 'true' -> call 'erlang':'setelement' (6,St,_rec68)
(<_147> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Efs> when 'true' -> let <_33> = fun (_30,_29) -> case <_30,_29> of <{'bif',_@r0 = {F,A},_148},{Err,St0}> when 'true' -> let <_15> = case apply 'is_warn_enabled'/2 ('bif_clash',St0) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_13> = apply 'bif_clash_specifically_disabled'/2 (St0,_@r0) in call 'erlang':'not' (_13)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_12> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_12}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case St0 of (<({'lint',_149,_150,_151,_152,_153,_154,_155,_156,_rec71,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181}-|['compiler_generated'] )> when 'true' -> let <AutoImpSup> = apply 'is_autoimport_suppressed'/2 (_rec71,_@r0) in let <OldBif> = call 'erl_internal':'old_bif' (F,A) in let <_27> = case <> of <> when try let <_22> = call 'erlang':'=:=' (AutoImpSup,'false') in let <_23> = call 'erlang':'and' (_15,_22) in let <_24> = call 'erlang':'=:=' (OldBif,'true') in call 'erlang':'and' (_23,_24) of <Try> -> Try catch <T,R> -> 'false' -> apply 'add_error'/3 (Line,{'redefine_old_bif_import',_@r0},St0)
<> when try let <_26> = call 'erlang':'=:=' (AutoImpSup,'false') in call 'erlang':'and' (_15,_26) of <Try> -> Try catch <T,R> -> 'false' -> apply 'add_warning'/3 (Line,{'redefine_bif_import',_@r0},St0)
<> when 'true' -> St0 end in {Err,_27}-|['compiler_generated'] )
(<_182> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Ef,{_X_Err,St0}> when 'true' -> let <_28> = apply 'add_error'/3 (Line,{'redefine_import',Ef},St0) in {'true',_28}
(<_32,_31> when 'true' -> (primop 'match_fail' ({'function_clause',_32,_31})-|[{'function_name',{'-import/3-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (_33,{'false',St},Efs) of <{Err,St1}> when 'true' -> case <> of <> when (call 'erlang':'=:=' (Err,'false')-|['compiler_generated'] ) -> (case St of (<({'lint',_183,_184,_185,_186,_rec74,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215}-|['compiler_generated'] )> when 'true' -> let <_rec72> = apply 'add_imports'/3 (Mod,Mfs,_rec74) in case St1 of <{'lint',_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250}> when 'true' -> call 'erlang':'setelement' (6,St1,_rec72)
(<_251> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_216> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> St1 end
(<_34> when 'true' -> primop 'match_fail' ({'badmatch',_34})-|['compiler_generated'] ) end end-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_44,_43,_42> when 'true' -> (primop 'match_fail' ({'function_clause',_44,_43,_42})-|[{'function_name',{'import',3}}] )-|['compiler_generated'] ) end
'check_imports'/3 = fun (_0,_1,_2) -> let <_10> = fun (_7,_6) -> case call 'orddict':'find' (_7,_2) of <{'ok',Mod}> when 'true' -> [{_7,Mod}|_6]
<'error'> when 'true' -> case _7 of <{N,A}> when 'true' -> case call 'erl_internal':'bif' (N,A) of <'true'> when 'true' -> [{'bif',_7,'erlang'}|_6]
<'false'> when 'true' -> _6
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in call 'lists':'foldl' (_10,[],_1)
'add_imports'/3 = fun (_0,_1,_2) -> let <_7> = fun (_4,_3) -> call 'orddict':'store' (_4,_0,_3) in call 'lists':'foldl' (_7,_2,_1)
'imported'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_9,_10,_11,_12,_rec75,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when 'true' -> case call 'orddict':'find' ({_0,_1},_rec75) of <{'ok',Mod}> when 'true' -> {'yes',Mod}
<'error'> when 'true' -> 'no'
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'on_load'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,Fa = {Name,Arity},St0 = {'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,OnLoad0,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}> when let <_3> = call 'erlang':'is_atom' (Name) in let <_4> = call 'erlang':'is_integer' (Arity) in call 'erlang':'and' (_3,_4) -> let <_rec76> = [Fa|OnLoad0] in case St0 of <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' -> let <_7> = call 'erlang':'setelement' (13,St0,Line) in let <_9> = call 'erlang':'setelement' (12,_7,_rec76) in case _9 of <{'lint',_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,[{_93,0}|[]],_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116}> when 'true' -> _9
<{'lint',_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,[{_127,_128}|[]],_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' -> apply 'add_error'/3 (Line,{'bad_on_load_arity',Fa},_9)
<{'lint',_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,[_162|[_163|_164]],_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187}> when 'true' -> apply 'add_error'/3 (Line,'multiple_on_loads',_9)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Line,Val,St> when 'true' -> apply 'add_error'/3 (Line,{'bad_on_load',Val},St) end
'check_on_load'/1 = fun (_0) -> case _0 of <St = {'lint',_3,_4,_5,_6,_7,_8,_9,_10,_11,Defined,[Fa = {_12,0}|[]],Line,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' -> case call 'gb_sets':'is_member' (Fa,Defined) of <'true'> when 'true' -> St
<'false'> when 'true' -> apply 'add_error'/3 (Line,{'undefined_on_load',Fa},St)
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
<St> when 'true' -> St end
'call_function'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,F,A,St = {'lint',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,Func,_36,_37,_38,_39,_40,File,_41,_42,Cd,Usage0,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' -> case Usage0 of <{'usage',Cs,_51,_52,_53}> when 'true' -> let <NA> = {F,A} in let <_10> = case Cs of <'undefined'> when 'true' -> Usage0
<_54> when 'true' -> let <_rec78> = apply 'maps_prepend'/3 (Func,NA,Cs) in case Usage0 of <{'usage',_55,_56,_57,_58}> when 'true' -> call 'erlang':'setelement' (2,Usage0,_rec78)
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end in let <Anno> = call 'erl_anno':'set_file' (File,Line) in let <_rec80> = [{NA,Anno}|Cd] in case St of <{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_15> = call 'erlang':'setelement' (27,St,_10) in call 'erlang':'setelement' (26,_15,_rec80)
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17})-|[{'function_name',{'call_function',4}}] )-|['compiler_generated'] ) end
'function'/5 = fun (_0,_1,_2,_3,_4) -> let <_rec82> = {_1,_2} in case _4 of <{'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' -> let <_8> = call 'erlang':'setelement' (17,_4,_rec82) in let <St2> = apply 'define_function'/4 (_0,_1,_2,_8) in apply 'clauses'/2 (_3,St2)
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
'define_function'/4 = fun (_0,_1,_2,_3) -> let <St1> = apply 'keyword_warning'/3 (_0,_1,_3) in let <NA> = {_1,_2} in (case St1 of (<({'lint',_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec84,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}-|['compiler_generated'] )> when 'true' -> case call 'gb_sets':'is_member' (NA,_rec84) of <'true'> when 'true' -> apply 'add_error'/3 (_0,{'redefine_function',NA},St1)
<'false'> when 'true' -> let <St2> = apply 'function_check_max_args'/3 (_0,_2,St1) in (case St2 of (<({'lint',_56,_57,_58,_59,_60,_61,_62,_63,_64,_rec87,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}-|['compiler_generated'] )> when 'true' -> let <_rec85> = call 'gb_sets':'add_element' (NA,_rec87) in case St2 of <{'lint',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123}> when 'true' -> let <_14> = call 'erlang':'setelement' (11,St2,_rec85) in case apply 'imported'/3 (_1,_2,_14) of <{'yes',_X_M}> when 'true' -> apply 'add_error'/3 (_0,{'define_import',NA},_14)
<'no'> when 'true' -> _14
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
(<_124> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_89> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'function_check_max_args'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,Arity,St> when call 'erlang':'>' (Arity,255) -> apply 'add_error'/3 (Line,{'too_many_arguments',Arity},St)
<_6,_7,St> when 'true' -> St end
'clauses'/2 = fun (_0,_1) -> let <_7> = fun (_4,_3) -> case apply 'clause'/2 (_4,_3) of <{_10,St1}> when 'true' -> St1
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end in call 'lists':'foldl' (_7,_1,_0)
'clause'/2 = fun (_0,_1) -> case <_0,_1> of <{'clause',_X_Line,H,G,B},St0> when 'true' -> case apply 'head'/3 (H,[],St0) of <{Hvt,Binvt,St1}> when 'true' -> let <_4> = apply 'vtupdate'/2 (Binvt,[]) in let <Vt1> = apply 'vtupdate'/2 (Hvt,_4) in case apply 'guard'/3 (G,Vt1,St1) of <{Gvt,St2}> when 'true' -> let <Vt2> = apply 'vtupdate'/2 (Gvt,Vt1) in case apply 'exprs'/3 (B,Vt2,St2) of <{Bvt,St3}> when 'true' -> let <Upd> = apply 'vtupdate'/2 (Bvt,Vt2) in apply 'check_unused_vars'/3 (Upd,[],St3)
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'clause',2}}] )-|['compiler_generated'] ) end
'head'/3 = fun (_0,_1,_2) -> apply 'head'/4 (_0,_1,_1,_2)
'head'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[P|Ps],Vt,Old,St0> when 'true' -> case apply 'pattern'/5 (P,Vt,Old,[],St0) of <{Pvt,Bvt1,St1}> when 'true' -> case apply 'head'/4 (Ps,Vt,Old,St1) of <{Psvt,Bvt2,St2}> when 'true' -> let <_7> = apply 'vtmerge_pat'/2 (Pvt,Psvt) in let <_6> = apply 'vtmerge_pat'/2 (Bvt1,Bvt2) in {_7,_6,St2}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<[],_X_Vt,_X_Env,St> when 'true' -> {[],[],St}
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'head',4}}] )-|['compiler_generated'] ) end
'pattern'/3 = fun (_0,_1,_2) -> apply 'pattern'/5 (_0,_1,_1,[],_2)
'pattern'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <{'var',_X_Line,'_'},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'var',Line,V},_X_Vt,Old,Bvt,St> when 'true' -> apply 'pat_var'/5 (V,Line,Old,Bvt,St)
<{'char',_X_Line,_X_C},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'integer',_X_Line,_X_I},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'float',_X_Line,_X_F},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'atom',Line,A},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> let <_5> = apply 'keyword_warning'/3 (Line,A,St) in {[],[],_5}
<{'string',_X_Line,_X_S},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'nil',_X_Line},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'cons',_X_Line,H,T},Vt,Old,Bvt,St0> when 'true' -> case apply 'pattern'/5 (H,Vt,Old,Bvt,St0) of <{Hvt,Bvt1,St1}> when 'true' -> case apply 'pattern'/5 (T,Vt,Old,Bvt,St1) of <{Tvt,Bvt2,St2}> when 'true' -> let <_9> = apply 'vtmerge_pat'/2 (Hvt,Tvt) in let <_8> = apply 'vtmerge_pat'/2 (Bvt1,Bvt2) in {_9,_8,St2}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'tuple',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' -> apply 'pattern_list'/5 (Ps,Vt,Old,Bvt,St)
<{'map',_X_Line,Ps},Vt,Old,Bvt,St> when 'true' -> apply 'pattern_map'/5 (Ps,Vt,Old,Bvt,St)
<{'record_index',Line,Name,Field},_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> let <_14> = fun (_11,_10) -> apply 'pattern_field'/4 (Field,Name,_11,_10) in case apply 'check_record'/4 (Line,Name,St,_14) of <{Vt1,St1}> when 'true' -> {Vt1,[],St1}
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{'record',Line,Name,Pfs},Vt,Old,Bvt,St> when 'true' -> (case St of (<({'lint',_34,_35,_36,_37,_38,_39,_rec88,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when 'true' -> case call 'maps':'find' (Name,_rec88) of <{'ok',{_X_Line,Fields}}> when 'true' -> let <St1> = apply 'used_record'/2 (Name,St) in apply 'pattern_fields'/7 (Pfs,Name,Fields,Vt,Old,Bvt,St1)
<'error'> when 'true' -> let <_19> = apply 'add_error'/3 (Line,{'undefined_record',Name},St) in {[],[],_19}
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'bin',_68,Fs},Vt,Old,Bvt,St> when 'true' -> apply 'pattern_bin'/5 (Fs,Vt,Old,Bvt,St)
<{'op',_X_Line,'++',{'nil',_69},R},Vt,Old,Bvt,St> when 'true' -> apply 'pattern'/5 (R,Vt,Old,Bvt,St)
<{'op',_X_Line,'++',{'cons',Li,{'char',_X_L2,_X_C},T},R},Vt,Old,Bvt,St> when 'true' -> apply 'pattern'/5 ({'op',Li,'++',T,R},Vt,Old,Bvt,St)
<{'op',_X_Line,'++',{'cons',Li,{'integer',_X_L2,_X_I},T},R},Vt,Old,Bvt,St> when 'true' -> apply 'pattern'/5 ({'op',Li,'++',T,R},Vt,Old,Bvt,St)
<{'op',_X_Line,'++',{'string',_X_Li,_X_S},R},Vt,Old,Bvt,St> when 'true' -> apply 'pattern'/5 (R,Vt,Old,Bvt,St)
<{'match',_X_Line,Pat1,Pat2},Vt,Old,Bvt,St0> when 'true' -> case apply 'pattern'/5 (Pat1,Vt,Old,Bvt,St0) of <{Lvt,Bvt1,St1}> when 'true' -> case apply 'pattern'/5 (Pat2,Vt,Old,Bvt,St1) of <{Rvt,Bvt2,St2}> when 'true' -> let <St3> = apply 'reject_invalid_alias'/4 (Pat1,Pat2,Vt,St2) in let <_25> = apply 'vtmerge_pat'/2 (Lvt,Rvt) in let <_24> = apply 'vtmerge_pat'/2 (Bvt1,Bvt2) in {_25,_24,St3}
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
<Pat,_X_Vt,_X_Old,_X_Bvt,St> when 'true' -> case apply 'is_pattern_expr'/1 (Pat) of <'true'> when 'true' -> {[],[],St}
<'false'> when 'true' -> let <_26> = call 'erlang':'element' (2,Pat) in let <_27> = apply 'add_error'/3 (_26,'illegal_pattern',St) in {[],[],_27}
(<_28> when 'true' -> primop 'match_fail' ({'case_clause',_28})-|['compiler_generated'] ) end end
'pattern_list'/5 = fun (_0,_1,_2,_3,_4) -> let <_12> = fun (_9,_8) -> case <_9,_8> of <P,{Psvt,Bvt,St0}> when 'true' -> case apply 'pattern'/5 (P,_1,_2,_3,St0) of <{Pvt,Bvt1,St1}> when 'true' -> let <_7> = apply 'vtmerge_pat'/2 (Pvt,Psvt) in let <_6> = apply 'vtmerge_pat'/2 (Bvt,Bvt1) in {_7,_6,St1}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'-pattern_list/5-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_12,{[],[],_4},_0)
'reject_invalid_alias_expr'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <P = {'bin',_11,_12},{'match',_13,P0,E},Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (P,P0,Vt,St0) in apply 'reject_invalid_alias_expr'/4 (P,E,Vt,St)
<P = {'map',_14,_15},{'match',_16,P0,E},Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (P,P0,Vt,St0) in apply 'reject_invalid_alias_expr'/4 (P,E,Vt,St)
<P = {'match',_17,_18,_19},{'match',_20,P0,E},Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (P,P0,Vt,St0) in apply 'reject_invalid_alias_expr'/4 (P,E,Vt,St)
<_21,_22,_23,St> when 'true' -> St end
'reject_invalid_alias'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'bin',Line,_18},{'bin',_19,_20},_21,St> when 'true' -> apply 'add_error'/3 (Line,'illegal_bin_pattern',St)
<{'map',_X_Line,Ps1},{'map',_22,Ps2},Vt,St0> when 'true' -> let <Fun> = fun (_6,_5) -> case <_6,_5> of <{'map_field_exact',L,{'var',_23,K},_X_V},Sti> when 'true' -> case apply 'is_var_bound'/2 (K,Vt) of <'true'> when 'true' -> Sti
<'false'> when 'true' -> apply 'add_error'/3 (L,{'unbound_var',K},Sti)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<{'map_field_exact',_X_L,_X_K,_X_V},Sti> when 'true' -> Sti
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'-reject_invalid_alias/4-fun-0-',2}}] )-|['compiler_generated'] ) end in let <_10> = call 'lists':'foldl' (Fun,St0,Ps1) in call 'lists':'foldl' (Fun,_10,Ps2)
<{'cons',_24,H1,T1},{'cons',_25,H2,T2},Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (H1,H2,Vt,St0) in apply 'reject_invalid_alias'/4 (T1,T2,Vt,St)
<{'tuple',_26,Es1},{'tuple',_27,Es2},Vt,St> when 'true' -> apply 'reject_invalid_alias_list'/4 (Es1,Es2,Vt,St)
<{'record',_28,Name1,Pfs1},{'record',_29,Name2,Pfs2},Vt,St = {'lint',_30,_31,_32,_33,_34,_35,Recs,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' -> case Recs of <~{Name2:={_X_Line2,Fields2},Name1:={_X_Line1,Fields1}}~> when 'true' -> apply 'reject_invalid_alias_rec'/6 (Pfs1,Pfs2,Fields1,Fields2,Vt,St)
<~{}~> when 'true' -> St
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<{'match',_63,P1,P2},P,Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (P1,P,Vt,St0) in apply 'reject_invalid_alias'/4 (P2,P,Vt,St)
<P,M = {'match',_64,_65,_66},Vt,St> when 'true' -> apply 'reject_invalid_alias'/4 (M,P,Vt,St)
<_X_P1,_X_P2,_X_Vt,St> when 'true' -> St end
'reject_invalid_alias_list'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[E1|Es1],[E2|Es2],Vt,St0> when 'true' -> let <St> = apply 'reject_invalid_alias'/4 (E1,E2,Vt,St0) in apply 'reject_invalid_alias_list'/4 (Es1,Es2,Vt,St)
<_9,_10,_11,St> when 'true' -> St end
'reject_invalid_alias_rec'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <PfsA1> = apply 'rbia_field_vars'/1 (_0) in let <PfsB1> = apply 'rbia_field_vars'/1 (_1) in let <_8> = call 'lists':'reverse' (_2) in let <FieldsA1> = apply 'rbia_fields'/3 (_8,0,[]) in let <_10> = call 'lists':'reverse' (_3) in let <FieldsB1> = apply 'rbia_fields'/3 (_10,0,[]) in let <FieldsA> = call 'sofs':'relation' (FieldsA1) in let <PfsA> = call 'sofs':'relation' (PfsA1) in let <A> = call 'sofs':'join' (FieldsA,1,PfsA,1) in let <FieldsB> = call 'sofs':'relation' (FieldsB1) in let <PfsB> = call 'sofs':'relation' (PfsB1) in let <B> = call 'sofs':'join' (FieldsB,1,PfsB,1) in let <C> = call 'sofs':'join' (A,2,B,2) in let <_21> = fun (_19) -> case _19 of <{_31,_32,P1,_33,P2}> when 'true' -> {P1,P2}
(<_20> when 'true' -> (primop 'match_fail' ({'function_clause',_20})-|[{'function_name',{'-reject_invalid_alias_rec/6-fun-0-',1}}] )-|['compiler_generated'] ) end in let <D> = call 'sofs':'projection' ({'external',_21},C) in let <E> = call 'sofs':'to_external' (D) in case call 'lists':'unzip' (E) of <{Ps1,Ps2}> when 'true' -> apply 'reject_invalid_alias_list'/4 (Ps1,Ps2,_4,_5)
(<_24> when 'true' -> primop 'match_fail' ({'badmatch',_24})-|['compiler_generated'] ) end
'rbia_field_vars'/1 = fun (_0) -> (letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'record_field',_6,{'atom',_7,Name},Pat}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([{Name,Pat}|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0)-|['list_comprehension'] )
'rbia_fields'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{'record_field',_8,{'atom',_9,Name},_10}|Fs],I,Acc> when 'true' -> let <_3> = call 'erlang':'+' (I,1) in apply 'rbia_fields'/3 (Fs,_3,[{Name,I}|Acc])
<[_11|Fs],I,Acc> when 'true' -> let <_4> = call 'erlang':'+' (I,1) in apply 'rbia_fields'/3 (Fs,_4,Acc)
<[],_12,Acc> when 'true' -> Acc
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'rbia_fields',3}}] )-|['compiler_generated'] ) end
'is_pattern_expr'/1 = fun (_0) -> case apply 'is_pattern_expr_1'/1 (_0) of <'false'> when 'true' -> 'false'
<'true'> when 'true' -> case call 'erl_eval':'partial_eval' (_0) of <{'integer',_4,_5}> when 'true' -> 'true'
<{'char',_6,_7}> when 'true' -> 'true'
<{'float',_8,_9}> when 'true' -> 'true'
<{'atom',_10,_11}> when 'true' -> 'true'
<_12> when 'true' -> 'false' end
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'is_pattern_expr_1'/1 = fun (_0) -> case _0 of <{'char',_X_Line,_X_C}> when 'true' -> 'true'
<{'integer',_X_Line,_X_I}> when 'true' -> 'true'
<{'float',_X_Line,_X_F}> when 'true' -> 'true'
<{'atom',_X_Line,_X_A}> when 'true' -> 'true'
<{'tuple',_X_Line,Es}> when 'true' -> let <_1> = 'is_pattern_expr'/1 in call 'lists':'all' (_1,Es)
<{'nil',_X_Line}> when 'true' -> 'true'
<{'cons',_X_Line,H,T}> when 'true' -> (case apply 'is_pattern_expr_1'/1 (H) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_pattern_expr_1'/1 (T)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'op',_X_Line,Op,A}> when 'true' -> (case call 'erl_internal':'arith_op' (Op,1) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_pattern_expr_1'/1 (A)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_4> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'op',_X_Line,Op,A1,A2}> when 'true' -> (case call 'erl_internal':'arith_op' (Op,2) of (<('true'-|['compiler_generated'] )> when 'true' -> let <_7> = 'is_pattern_expr'/1 in call 'lists':'all' (_7,[A1|[A2|[]]])-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_6> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Other> when 'true' -> 'false' end
'pattern_map'/5 = fun (_0,_1,_2,_3,_4) -> let <_19> = fun (_16,_15) -> case <_16,_15> of <{'map_field_assoc',L,_25,_26},{Psvt,Bvt0,St0}> when 'true' -> let <_5> = apply 'add_error'/3 (L,'illegal_pattern',St0) in {Psvt,Bvt0,_5}
<{'map_field_exact',_X_L,K,V},{Psvt,Bvt0,St0}> when 'true' -> case St0 of <{'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}> when 'true' -> let <_8> = call 'erlang':'setelement' (35,St0,'map_key') in case apply 'gexpr'/3 (K,_1,_8) of <{Kvt,St2}> when 'true' -> case apply 'pattern'/5 (V,_1,_2,_3,St2) of <{Vvt,Bvt2,St3}> when 'true' -> let <_13> = apply 'vtmerge_pat'/2 (Kvt,Vvt) in let <_14> = apply 'vtmerge_pat'/2 (_13,Psvt) in let <_12> = apply 'vtmerge_pat'/2 (Bvt0,Bvt2) in {_14,_12,St3}
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_61> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17})-|[{'function_name',{'-pattern_map/5-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_19,{[],[],_4},_0)
'pattern_bin'/5 = fun (_0,_1,_2,_3,_4) -> let <_9> = fun (_6,_5) -> apply 'pattern_element'/4 (_6,_1,_2,_5) in case call 'lists':'foldl' (_9,{0,[],_3,_4},_0) of <{_X_Sz,Esvt,Bvt,St1}> when 'true' -> {Esvt,Bvt,St1}
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
'pattern_element'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Be = {'bin_element',Line,{'string',_10,_11},Size,Ts},Vt,Old,Acc = {Sz,Esvt,Bvt,St0}> when 'true' -> case apply 'good_string_size_type'/2 (Size,Ts) of <'true'> when 'true' -> apply 'pattern_element_1'/4 (Be,Vt,Old,Acc)
<'false'> when 'true' -> let <St> = apply 'add_error'/3 (Line,'typed_literal_string',St0) in {Sz,Esvt,Bvt,St}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Be,Vt,Old,Acc> when 'true' -> apply 'pattern_element_1'/4 (Be,Vt,Old,Acc) end
'pattern_element_1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'bin_element',Line,E,Sz0,Ts},Vt,Old,{Size0,Esvt,Bvt,St0}> when 'true' -> case apply 'pat_bit_expr'/4 (E,Old,Bvt,St0) of <{Pevt,Bvt1,St1}> when 'true' -> let <_5> = apply 'vtmerge'/2 (Vt,Esvt) in case apply 'pat_bit_size'/4 (Sz0,_5,Bvt,St1) of <{Sz1,Szvt,Bvt2,St2}> when 'true' -> case apply 'bit_type'/4 (Line,Sz1,Ts,St2) of <{Sz2,Bt,St3}> when 'true' -> case apply 'bit_size_check'/4 (Line,Sz2,Bt,St3) of <{Sz3,St4}> when 'true' -> let <_11> = case <E,Sz3> of <({('string'-|['compiler_generated'] ),_22,S}-|['compiler_generated'] ),('all'-|['compiler_generated'] )> when 'true' -> let <_9> = call 'erlang':'length' (S) in call 'erlang':'*' (8,_9)
<_23,_24> when 'true' -> Sz3 end in case apply 'add_bit_size'/5 (Line,_11,Size0,'false',St4) of <{Size1,St5}> when 'true' -> let <_16> = apply 'vtmerge'/2 (Pevt,Esvt) in let <_17> = apply 'vtmerge'/2 (Szvt,_16) in let <_14> = apply 'vtmerge'/2 (Bvt,Bvt1) in let <_15> = apply 'vtmerge'/2 (Bvt2,_14) in {Size1,_17,_15,St5}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20,_19,_18})-|[{'function_name',{'pattern_element_1',4}}] )-|['compiler_generated'] ) end
'good_string_size_type'/2 = fun (_0,_1) -> case <_0,_1> of <'default','default'> when 'true' -> 'true'
<'default',Ts> when 'true' -> let <_4> = fun (_2) -> case _2 of <'utf8'> when 'true' -> 'true'
<'utf16'> when 'true' -> 'true'
<'utf32'> when 'true' -> 'true'
<_7> when 'true' -> 'false' end in call 'lists':'any' (_4,Ts)
<_8,_9> when 'true' -> 'false' end
'pat_bit_expr'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'var',_12,'_'},_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'var',Ln,V},Old,Bvt,St> when 'true' -> apply 'pat_var'/5 (V,Ln,Old,Bvt,St)
<{'string',_13,_14},_X_Old,_X_Bvt,St> when 'true' -> {[],[],St}
<{'bin',L,_15},_X_Old,_X_Bvt,St> when 'true' -> let <_4> = apply 'add_error'/3 (L,'illegal_pattern',St) in {[],[],_4}
<P,_X_Old,_X_Bvt,St> when 'true' -> case apply 'is_pattern_expr'/1 (P) of <'true'> when 'true' -> {[],[],St}
<'false'> when 'true' -> let <_5> = call 'erlang':'element' (2,P) in let <_6> = apply 'add_error'/3 (_5,'illegal_pattern',St) in {[],[],_6}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end end
'pat_bit_size'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'default',_X_Vt,_X_Bvt,St> when 'true' -> {'default',[],[],St}
<{'var',Lv,V},Vt0,Bvt0,St0> when 'true' -> case apply 'pat_binsize_var'/5 (V,Lv,Vt0,Bvt0,St0) of <{Vt,Bvt,St1}> when 'true' -> {'unknown',Vt,Bvt,St1}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<Size,Vt0,Bvt0,St0> when 'true' -> let <Line> = call 'erlang':'element' (2,Size) in case call 'erl_eval':'partial_eval' (Size) of <{'integer',_28,I}> when call 'erlang':'=:=' (_28,Line) -> {I,[],[],St0}
<Expr> when 'true' -> case St0 of <{'lint',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when 'true' -> let <_7> = call 'erlang':'setelement' (35,St0,'bin_seg_size') in let <_9> = call 'erlang':'setelement' (34,_7,Bvt0) in case apply 'gexpr'/3 (Size,Vt0,_9) of <{Vt,St2 = {'lint',_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,Bvt,_96}}> when 'true' -> (case St0 of (<({'lint',_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_rec93}-|['compiler_generated'] )> when 'true' -> case St2 of <{'lint',_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164}> when 'true' -> let <_16> = call 'erlang':'setelement' (35,St2,_rec93) in let <_18> = call 'erlang':'setelement' (34,_16,'none') in let <_21> = case apply 'is_bit_size_illegal'/1 (Expr) of <'true'> when 'true' -> apply 'add_warning'/3 (Line,'non_integer_bitsize',_18)
<'false'> when 'true' -> _18
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end in {'unknown',Vt,Bvt,_21}
(<_165> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_130> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_63> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end end
'is_bit_size_illegal'/1 = fun (_0) -> case _0 of <{'atom',_2,_3}> when 'true' -> 'true'
<{'bin',_4,_5}> when 'true' -> 'true'
<{'cons',_6,_7,_8}> when 'true' -> 'true'
<{'float',_9,_10}> when 'true' -> 'true'
<{'map',_11,_12}> when 'true' -> 'true'
<{'nil',_13}> when 'true' -> 'true'
<{'tuple',_14,_15}> when 'true' -> 'true'
<_16> when 'true' -> 'false' end
'expr_bin'/4 = fun (_0,_1,_2,_3) -> let <_8> = fun (_5,_4) -> apply 'bin_element'/4 (_5,_1,_4,_3) in case call 'lists':'foldl' (_8,{0,[],_2},_0) of <{_X_Sz,Esvt,St1}> when 'true' -> {Esvt,St1}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
'bin_element'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'bin_element',Line,E,Sz0,Ts},Vt,{Size0,Esvt,St0},Check> when 'true' -> case apply Check (E,Vt,St0) of <{Vt1,St1}> when 'true' -> case apply 'bit_size'/4 (Sz0,Vt,St1,Check) of <{Sz1,Vt2,St2}> when 'true' -> case apply 'bit_type'/4 (Line,Sz1,Ts,St2) of <{Sz2,Bt,St3}> when 'true' -> case apply 'bit_size_check'/4 (Line,Sz2,Bt,St3) of <{Sz3,St4}> when 'true' -> case apply 'add_bit_size'/5 (Line,Sz3,Size0,'true',St4) of <{Size1,St5}> when 'true' -> let <_9> = apply 'vtmerge'/1 ([Vt2|[Vt1|[Esvt|[]]]]) in {Size1,_9,St5}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10})-|[{'function_name',{'bin_element',4}}] )-|['compiler_generated'] ) end
'bit_size'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'default',_X_Vt,St,_X_Check> when 'true' -> {'default',[],St}
<{'atom',_X_Line,'all'},_X_Vt,St,_X_Check> when 'true' -> {'all',[],St}
<Size,Vt,St,Check> when 'true' -> let <Info> = apply 'is_guard_test2_info'/1 (St) in case apply 'is_gexpr'/2 (Size,Info) of <'true'> when 'true' -> case call 'erl_eval':'partial_eval' (Size) of <{'integer',_X_ILn,I}> when 'true' -> {I,[],St}
<_X_Other> when 'true' -> case apply Check (Size,Vt,St) of <{Evt,St1}> when 'true' -> {'unknown',Evt,St1}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end end
<'false'> when 'true' -> case apply Check (Size,Vt,St) of <{Evt,St1}> when 'true' -> {'unknown',Evt,St1}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end end
'bit_type'/4 = fun (_0,_1,_2,_3) -> case call 'erl_bits':'set_bit_type' (_1,_2) of <{'ok',Size1,Bt}> when 'true' -> {Size1,Bt,_3}
<{'error',What}> when 'true' -> case call 'erl_bits':'set_bit_type' ('default',[]) of <{'ok',Size1,Bt}> when 'true' -> let <_5> = apply 'add_error'/3 (_0,What,_3) in {Size1,Bt,_5}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'bit_size_check'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_Line,'unknown',_17,St> when 'true' -> {'unknown',St}
<_X_Line,'undefined',{'bittype',Type,_18,_19,_20},St> when 'true' -> let <_6> = call 'erlang':'=:=' (Type,'utf8') in let <_5> = call 'erlang':'=:=' (Type,'utf16') in let <_7> = call 'erlang':'or' (_6,_5) in let <_4> = call 'erlang':'=:=' (Type,'utf32') in case call 'erlang':'or' (_7,_4) of <'true'> when 'true' -> {'undefined',St}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<Line,'all',{'bittype',Type,_21,_22,_23},St> when 'true' -> case Type of <'binary'> when 'true' -> {'all',St}
<_24> when 'true' -> let <_9> = apply 'add_error'/3 (Line,'illegal_bitsize',St) in {'unknown',_9} end
<Line,Size,{'bittype',Type,Unit,_25,_26},St> when 'true' -> let <Sz> = call 'erlang':'*' (Unit,Size) in let <St2> = apply 'elemtype_check'/4 (Line,Type,Sz,St) in {Sz,St2}
(<_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13})-|[{'function_name',{'bit_size_check',4}}] )-|['compiler_generated'] ) end
'elemtype_check'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_Line,'float',32,St> when 'true' -> St
<_X_Line,'float',64,St> when 'true' -> St
<Line,'float',_X_Size,St> when 'true' -> apply 'add_warning'/3 (Line,{'bad_bitsize',[102|[108|[111|[97|[116]]]]]},St)
<_X_Line,_X_Type,_X_Size,St> when 'true' -> St end
'add_bit_size'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Line,_X_Sz1,'all','false',St> when 'true' -> let <_5> = apply 'add_error'/3 (Line,'unsized_binary_not_at_end',St) in {'all',_5}
<_X_Line,_X_Sz1,'all','true',St> when 'true' -> {'all',St}
<_X_Line,'all',_X_Sz2,_X_B,St> when 'true' -> {'all',St}
<_X_Line,'undefined',_X_Sz2,_X_B,St> when 'true' -> {'undefined',St}
<_X_Line,'unknown',_X_Sz2,_X_B,St> when 'true' -> {'unknown',St}
<_X_Line,_X_Sz1,'undefined',_X_B,St> when 'true' -> {'unknown',St}
<_X_Line,_X_Sz1,'unknown',_X_B,St> when 'true' -> {'unknown',St}
<_X_Line,Sz1,Sz2,_X_B,St> when 'true' -> let <_6> = call 'erlang':'+' (Sz1,Sz2) in {_6,St} end
'guard'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[L|R],Vt,St0> when call 'erlang':'is_list' (L) -> case apply 'guard_tests'/3 (L,Vt,St0) of <{Gvt,St1}> when 'true' -> let <_4> = apply 'vtupdate'/2 (Gvt,Vt) in case apply 'guard'/3 (R,_4,St1) of <{Gsvt,St2}> when 'true' -> let <_6> = apply 'vtupdate'/2 (Gvt,Gsvt) in {_6,St2}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<L,Vt,St0> when 'true' -> apply 'guard_tests'/3 (L,Vt,St0) end
'guard_tests'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[G|Gs],Vt,St0> when 'true' -> case apply 'guard_test'/3 (G,Vt,St0) of <{Gvt,St1}> when 'true' -> let <_4> = apply 'vtupdate'/2 (Gvt,Vt) in case apply 'guard_tests'/3 (Gs,_4,St1) of <{Gsvt,St2}> when 'true' -> let <_6> = apply 'vtupdate'/2 (Gvt,Gsvt) in {_6,St2}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<[],_X_Vt,St> when 'true' -> {[],St}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'guard_tests',3}}] )-|['compiler_generated'] ) end
'guard_test'/3 = fun (_0,_1,_2) -> let <St1> = apply 'obsolete_guard'/2 (_0,_2) in apply 'guard_test2'/3 (_0,_1,St1)
'guard_test2'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'call',Line,{'atom',Lr,'record'},_@r0 = [E|[A|[]]]},Vt,St0> when 'true' -> apply 'gexpr'/3 ({'call',Line,{'atom',Lr,'is_record'},_@r0},Vt,St0)
<G = {'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 (As,Vt,St0) of <_@r1 = {Asvt,St1}> when 'true' -> let <A> = call 'erlang':'length' (As) in case call 'erl_internal':'type_test' (F,A) of <'true'> when let <_5> = call 'erlang':'=/=' (F,'is_record') in let <_6> = call 'erlang':'=/=' (A,2) in call 'erlang':'and' (_5,_6) -> case apply 'no_guard_bif_clash'/2 (St1,{F,A}) of <'false'> when 'true' -> let <_7> = apply 'add_error'/3 (Line,{'illegal_guard_local_call',{F,A}},St1) in {Asvt,_7}
<'true'> when 'true' -> _@r1
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
<_13> when 'true' -> apply 'gexpr'/3 (G,Vt,St0) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<G,Vt,St> when 'true' -> apply 'gexpr'/3 (G,Vt,St) end
'gexpr'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'var',Line,V},Vt,St> when 'true' -> apply 'expr_var'/4 (V,Line,Vt,St)
<{'char',_X_Line,_X_C},_X_Vt,St> when 'true' -> {[],St}
<{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' -> {[],St}
<{'float',_X_Line,_X_F},_X_Vt,St> when 'true' -> {[],St}
<{'atom',Line,A},_X_Vt,St> when 'true' -> let <_3> = apply 'keyword_warning'/3 (Line,A,St) in {[],_3}
<{'string',_X_Line,_X_S},_X_Vt,St> when 'true' -> {[],St}
<{'nil',_X_Line},_X_Vt,St> when 'true' -> {[],St}
<{'cons',_X_Line,H,T},Vt,St> when 'true' -> apply 'gexpr_list'/3 ([H|[T|[]]],Vt,St)
<{'tuple',_X_Line,Es},Vt,St> when 'true' -> apply 'gexpr_list'/3 (Es,Vt,St)
<{'map',_X_Line,Es},Vt,St> when 'true' -> let <_5> = apply 'check_assoc_fields'/2 (Es,St) in let <_4> = 'gexpr_list'/3 in apply 'map_fields'/4 (Es,Vt,_5,_4)
<{'map',_X_Line,Src,Es},Vt,St> when 'true' -> case apply 'gexpr'/3 (Src,Vt,St) of <{Svt,St1}> when 'true' -> let <_7> = 'gexpr_list'/3 in case apply 'map_fields'/4 (Es,Vt,St1,_7) of <{Fvt,St2}> when 'true' -> let <_9> = apply 'vtmerge'/2 (Svt,Fvt) in {_9,St2}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'record_index',Line,Name,Field},_X_Vt,St> when 'true' -> let <_14> = fun (_11,_10) -> apply 'record_field'/4 (Field,Name,_11,_10) in apply 'check_record'/4 (Line,Name,St,_14)
<{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' -> case apply 'gexpr'/3 (Rec,Vt,St0) of <{Rvt,St1}> when 'true' -> let <_20> = fun (_17,_16) -> apply 'record_field'/4 (Field,Name,_17,_16) in case apply 'check_record'/4 (Line,Name,St1,_20) of <{Fvt,St2}> when 'true' -> let <_22> = apply 'vtmerge'/2 (Rvt,Fvt) in {_22,St2}
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{'record',Line,Name,Inits},Vt,St> when 'true' -> let <_27> = fun (_24,_23) -> apply 'ginit_fields'/6 (Inits,Line,Name,_24,Vt,_23) in apply 'check_record'/4 (Line,Name,St,_27)
<{'bin',_X_Line,Fs},Vt,St> when 'true' -> let <_28> = 'gexpr'/3 in apply 'expr_bin'/4 (Fs,Vt,St,_28)
<{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' -> case apply 'gexpr'/3 (E,Vt,St0) of <{Rvt,St1}> when 'true' -> let <_30> = apply 'exist_record'/3 (Ln,Name,St1) in {Rvt,_30}
(<_29> when 'true' -> primop 'match_fail' ({'badmatch',_29})-|['compiler_generated'] ) end
<{'call',Line,{'atom',_X_Lr,'is_record'},_@r0 = [E|[R|[]]]},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 (_@r0,Vt,St0) of <{Asvt,St1}> when 'true' -> let <_32> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Asvt,_32}
(<_31> when 'true' -> primop 'match_fail' ({'badmatch',_31})-|['compiler_generated'] ) end
<{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},_@r1 = {'atom',Lf,'is_record'}},_@r2 = [E|[A|[]]]},Vt,St0> when 'true' -> apply 'gexpr'/3 ({'call',Line,_@r1,_@r2},Vt,St0)
<{'call',Line,{'atom',_X_Lr,'is_record'},[E0|[{'atom',_73,_X_Name}|[{'integer',_74,_75}|[]]]]},Vt,St0> when 'true' -> case apply 'gexpr'/3 (E0,Vt,St0) of <_@r3 = {E,St1}> when 'true' -> case apply 'no_guard_bif_clash'/2 (St0,{'is_record',3}) of <'true'> when 'true' -> _@r3
<'false'> when 'true' -> let <_34> = apply 'add_error'/3 (Line,{'illegal_guard_local_call',{'is_record',3}},St1) in {E,_34}
(<_35> when 'true' -> primop 'match_fail' ({'case_clause',_35})-|['compiler_generated'] ) end
(<_33> when 'true' -> primop 'match_fail' ({'badmatch',_33})-|['compiler_generated'] ) end
<{'call',Line,{'atom',_X_Lr,'is_record'},Asvt0 = [_76|[_77|[_78|[]]]]},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 (Asvt0,Vt,St0) of <{Asvt,St1}> when 'true' -> let <_37> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Asvt,_37}
(<_36> when 'true' -> primop 'match_fail' ({'badmatch',_36})-|['compiler_generated'] ) end
<{'call',Line,{'remote',_79,{'atom',_80,'erlang'},Isr = {'atom',_81,'is_record'}},Args = [_82|[_83|[_84|[]]]]},Vt,St0> when 'true' -> apply 'gexpr'/3 ({'call',Line,Isr,Args},Vt,St0)
<{'call',Line,{'atom',_X_La,F},As},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 (As,Vt,St0) of <_@r4 = {Asvt,St1}> when 'true' -> let <A> = call 'erlang':'length' (As) in let <_42> = case call 'erl_internal':'guard_bif' (F,A) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'no_guard_bif_clash'/2 (St1,{F,A})-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_40}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _42 of <'true'> when 'true' -> case call 'erl_internal':'bif' (F,A) of <'true'> when 'true' -> _@r4
(<_43> when 'true' -> primop 'match_fail' ({'badmatch',_43})-|['compiler_generated'] ) end
<'false'> when 'true' -> (case St1 of (<({'lint',_85,_86,_87,_88,_89,_90,_91,_rec94,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}-|['compiler_generated'] )> when 'true' -> let <_50> = case apply 'is_local_function'/2 (_rec94,{F,A}) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case St1 of (<({'lint',_119,_120,_121,_122,_rec95,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}-|['compiler_generated'] )> when 'true' -> apply 'is_imported_function'/2 (_rec95,{F,A})-|['compiler_generated'] )
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_44}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _50 of <'true'> when 'true' -> let <_51> = apply 'add_error'/3 (Line,{'illegal_guard_local_call',{F,A}},St1) in {Asvt,_51}
<_153> when 'true' -> let <_52> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Asvt,_52} end-|['compiler_generated'] )
(<_118> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_54> when 'true' -> primop 'match_fail' ({'case_clause',_54})-|['compiler_generated'] ) end
(<_38> when 'true' -> primop 'match_fail' ({'badmatch',_38})-|['compiler_generated'] ) end
<{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 (As,Vt,St0) of <_@r5 = {Asvt,St1}> when 'true' -> let <A> = call 'erlang':'length' (As) in let <_59> = case call 'erl_internal':'guard_bif' (F,A) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr_op'/2 (F,A)-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_57}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _59 of <'true'> when 'true' -> _@r5
<'false'> when 'true' -> let <_60> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Asvt,_60}
(<_61> when 'true' -> primop 'match_fail' ({'case_clause',_61})-|['compiler_generated'] ) end
(<_55> when 'true' -> primop 'match_fail' ({'badmatch',_55})-|['compiler_generated'] ) end
<{'op',Line,Op,A},Vt,St0> when 'true' -> case apply 'gexpr'/3 (A,Vt,St0) of <_@r6 = {Avt,St1}> when 'true' -> case apply 'is_gexpr_op'/2 (Op,1) of <'true'> when 'true' -> _@r6
<'false'> when 'true' -> let <_63> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Avt,_63}
(<_64> when 'true' -> primop 'match_fail' ({'case_clause',_64})-|['compiler_generated'] ) end
(<_62> when 'true' -> primop 'match_fail' ({'badmatch',_62})-|['compiler_generated'] ) end
<{'op',_154,'andalso',L,R},Vt,St> when 'true' -> apply 'gexpr_list'/3 ([L|[R|[]]],Vt,St)
<{'op',_155,'orelse',L,R},Vt,St> when 'true' -> apply 'gexpr_list'/3 ([L|[R|[]]],Vt,St)
<{'op',Line,Op,L,R},Vt,St0> when 'true' -> case apply 'gexpr_list'/3 ([L|[R|[]]],Vt,St0) of <_@r7 = {Avt,St1}> when 'true' -> case apply 'is_gexpr_op'/2 (Op,2) of <'true'> when 'true' -> _@r7
<'false'> when 'true' -> let <_66> = apply 'add_error'/3 (Line,'illegal_guard_expr',St1) in {Avt,_66}
(<_67> when 'true' -> primop 'match_fail' ({'case_clause',_67})-|['compiler_generated'] ) end
(<_65> when 'true' -> primop 'match_fail' ({'badmatch',_65})-|['compiler_generated'] ) end
<E,_X_Vt,St> when 'true' -> let <_68> = call 'erlang':'element' (2,E) in let <_69> = apply 'add_error'/3 (_68,'illegal_guard_expr',St) in {[],_69} end
'gexpr_list'/3 = fun (_0,_1,_2) -> let <_9> = fun (_6,_5) -> case <_6,_5> of <E,{Esvt,St0}> when 'true' -> case apply 'gexpr'/3 (E,_1,St0) of <{Evt,St1}> when 'true' -> let <_4> = apply 'vtmerge'/2 (Evt,Esvt) in {_4,St1}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'-gexpr_list/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_9,{[],_2},_0)
'is_guard_test'/1 = fun (_0) -> let <_4> = call 'maps':'new' () in let <_3> = fun (_1) -> 'false' in apply 'is_guard_test2'/2 (_0,{_4,_3})
'is_guard_test'/2 = fun (_0,_1) -> let <_4> = fun (_2) -> 'false' in apply 'is_guard_test'/3 (_0,_1,_4)
'is_guard_test'/3 = fun (_0,_1,_2) -> let <_7> = letrec 'lc$^0'/1 = fun (_5) -> case _5 of <[A = {'attribute',_23,'record',_X_D}|_4]> when 'true' -> let <_6> = apply 'lc$^0'/1 (_4) in ([A|_6]-|['compiler_generated'] )
(<[_3|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_58> when 'true' -> (primop 'match_fail' ({'function_clause',_58})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_1) in let <_15> = fun (_12,_11) -> let <Attr> = apply 'set_file'/2 (_12,[110|[111|[110|[101]]]]) in apply 'attribute_state'/2 (Attr,_11) in let <_9> = apply 'start'/0 () in let <St0> = call 'lists':'foldl' (_15,_9,_7) in let <_19> = apply 'set_file'/2 (_0,[110|[111|[102|[105|[108|[101]]]]]]) in (case St0 of (<({'lint',_24,_25,_26,_27,_28,_29,_rec96,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> apply 'is_guard_test2'/2 (_19,{_rec96,_2})-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'is_guard_test2'/2 = fun (_0,_1) -> case <_0,_1> of <{'call',Line,{'atom',Lr,'record'},_@r0 = [E|[A|[]]]},Info> when 'true' -> apply 'is_gexpr'/2 ({'call',Line,{'atom',Lr,'is_record'},_@r0},Info)
<Call = {'call',_X_Line,{'atom',_X_La,Test},As},Info = {_9,IsOverridden}> when 'true' -> let <A> = call 'erlang':'length' (As) in (case apply IsOverridden ({Test,A}) of (<'false'> when 'true' -> case call 'erl_internal':'type_test' (Test,A) of <'true'> when 'true' -> apply 'is_gexpr_list'/2 (As,Info)
<'false'> when 'true' -> apply 'is_gexpr'/2 (Call,Info)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] )
<G,Info> when 'true' -> apply 'is_gexpr'/2 (G,Info) end
'is_guard_expr'/1 = fun (_0) -> let <_3> = fun (_1) -> case _1 of <{_5,_6}> when 'true' -> 'false'
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'-is_guard_expr/1-fun-0-',1}}] )-|['compiler_generated'] ) end in apply 'is_gexpr'/2 (_0,{[],_3})
'is_gexpr'/2 = fun (_0,_1) -> case <_0,_1> of <{'var',_X_L,_X_V},_X_Info> when 'true' -> 'true'
<{'char',_X_L,_X_C},_X_Info> when 'true' -> 'true'
<{'integer',_X_L,_X_I},_X_Info> when 'true' -> 'true'
<{'float',_X_L,_X_F},_X_Info> when 'true' -> 'true'
<{'atom',_X_L,_X_A},_X_Info> when 'true' -> 'true'
<{'string',_X_L,_X_S},_X_Info> when 'true' -> 'true'
<{'nil',_X_L},_X_Info> when 'true' -> 'true'
<{'cons',_X_L,H,T},Info> when 'true' -> apply 'is_gexpr_list'/2 ([H|[T|[]]],Info)
<{'tuple',_X_L,Es},Info> when 'true' -> apply 'is_gexpr_list'/2 (Es,Info)
<{'map',_X_L,Es},Info> when 'true' -> apply 'is_map_fields'/2 (Es,Info)
<{'map',_X_L,Src,Es},Info> when 'true' -> (case apply 'is_gexpr'/2 (Src,Info) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_map_fields'/2 (Es,Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'record_index',_X_L,_X_Name,Field},Info> when 'true' -> apply 'is_gexpr'/2 (Field,Info)
<{'record_field',_X_L,Rec,_X_Name,Field},Info> when 'true' -> apply 'is_gexpr_list'/2 ([Rec|[Field|[]]],Info)
<{'record',L,Name,Inits},Info> when 'true' -> apply 'is_gexpr_fields'/4 (Inits,L,Name,Info)
<{'bin',_X_L,Fs},Info> when 'true' -> let <_10> = fun (_8) -> case _8 of <{'bin_element',_X_Line,E,Sz,_X_Ts}> when 'true' -> let <_7> = apply 'is_gexpr'/2 (E,Info) in let <_6> = case <> of (<> when call 'erlang':'=:=' (Sz,'default') -> 'true'-|['compiler_generated'] )
(<> when 'true' -> apply 'is_gexpr'/2 (Sz,Info)-|['compiler_generated'] ) end in call 'erlang':'and' (_7,_6)
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'-is_gexpr/2-fun-0-',1}}] )-|['compiler_generated'] ) end in call 'lists':'all' (_10,Fs)
<{'call',_X_L,{'atom',_X_Lf,F},As},Info = {_29,IsOverridden}> when 'true' -> let <A> = call 'erlang':'length' (As) in (case apply IsOverridden ({F,A}) of (<'false'> when 'true' -> (case call 'erl_internal':'guard_bif' (F,A) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr_list'/2 (As,Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'call',_X_L,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},{'atom',_X_Lf,F}},As},Info> when 'true' -> let <A> = call 'erlang':'length' (As) in let <_21> = case call 'erl_internal':'guard_bif' (F,A) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr_op'/2 (F,A)-|['compiler_generated'] )
(<_19> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_19}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case _21 of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr_list'/2 (As,Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_18}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'call',L,{'tuple',Lt,[_@r0 = {'atom',Lm,'erlang'}|[_@r1 = {'atom',Lf,F}|[]]]},As},Info> when 'true' -> apply 'is_gexpr'/2 ({'call',L,{'remote',Lt,_@r0,_@r1},As},Info)
<{'op',_X_L,Op,A},Info> when 'true' -> (case apply 'is_gexpr_op'/2 (Op,1) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr'/2 (A,Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_23}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'op',_X_L,'andalso',A1,A2},Info> when 'true' -> apply 'is_gexpr_list'/2 ([A1|[A2|[]]],Info)
<{'op',_X_L,'orelse',A1,A2},Info> when 'true' -> apply 'is_gexpr_list'/2 ([A1|[A2|[]]],Info)
<{'op',_X_L,Op,A1,A2},Info> when 'true' -> (case apply 'is_gexpr_op'/2 (Op,2) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_gexpr_list'/2 ([A1|[A2|[]]],Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_25}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Other,_X_Info> when 'true' -> 'false' end
'is_gexpr_op'/2 = fun (_0,_1) -> try call 'erl_internal':'op_type' (_0,_1) of <_2> -> case _2 of <'arith'> when 'true' -> 'true'
<'bool'> when 'true' -> 'true'
<'comp'> when 'true' -> 'true'
<'list'> when 'true' -> 'false'
<'send'> when 'true' -> 'false'
(<_3> when 'true' -> primop 'match_fail' ({'try_clause',_3})-|['compiler_generated'] ) end catch <_6,_5,_4> -> 'false'
'is_gexpr_list'/2 = fun (_0,_1) -> let <_4> = fun (_2) -> apply 'is_gexpr'/2 (_2,_1) in call 'lists':'all' (_4,_0)
'is_map_fields'/2 = fun (_0,_1) -> case <_0,_1> of <[{Tag,_10,K,V}|Fs],Info> when let <_2> = call 'erlang':'=:=' (Tag,'map_field_assoc') in let <_3> = call 'erlang':'=:=' (Tag,'map_field_exact') in call 'erlang':'or' (_2,_3) -> (case apply 'is_gexpr'/2 (K,Info) of (<('true'-|['compiler_generated'] )> when 'true' -> (case apply 'is_gexpr'/2 (V,Info) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_map_fields'/2 (Fs,Info)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_5> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_5}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_4> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[],_X_Info> when 'true' -> 'true'
<_X_T,_X_Info> when 'true' -> 'false' end
'is_gexpr_fields'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Fs,L,Name,Info = {RDs,_15}> when 'true' -> let <_6> = case call 'maps':'find' (Name,RDs) of <{'ok',{_X_Line,Fields}}> when 'true' -> let <_4> = apply 'init_fields'/3 (Fs,L,Fields) in call 'erlang':'++' (Fs,_4)
<'error'> when 'true' -> Fs
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in let <_10> = fun (_8) -> case _8 of <{'record_field',_X_Lf,_X_Name,V}> when 'true' -> apply 'is_gexpr'/2 (V,Info)
<_X_Other> when 'true' -> 'false' end in call 'lists':'all' (_10,_6)
(<_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12,_11})-|[{'function_name',{'is_gexpr_fields',4}}] )-|['compiler_generated'] ) end
'exprs'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[E|Es],Vt,St0> when 'true' -> case apply 'expr'/3 (E,Vt,St0) of <{Evt,St1}> when 'true' -> let <_4> = apply 'vtupdate'/2 (Evt,Vt) in case apply 'exprs'/3 (Es,_4,St1) of <{Esvt,St2}> when 'true' -> let <_6> = apply 'vtupdate'/2 (Evt,Esvt) in {_6,St2}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<[],_X_Vt,St> when 'true' -> {[],St}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'exprs',3}}] )-|['compiler_generated'] ) end
'expr'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'var',Line,V},Vt,St> when 'true' -> apply 'expr_var'/4 (V,Line,Vt,St)
<{'char',_X_Line,_X_C},_X_Vt,St> when 'true' -> {[],St}
<{'integer',_X_Line,_X_I},_X_Vt,St> when 'true' -> {[],St}
<{'float',_X_Line,_X_F},_X_Vt,St> when 'true' -> {[],St}
<{'atom',Line,A},_X_Vt,St> when 'true' -> let <_3> = apply 'keyword_warning'/3 (Line,A,St) in {[],_3}
<{'string',_X_Line,_X_S},_X_Vt,St> when 'true' -> {[],St}
<{'nil',_X_Line},_X_Vt,St> when 'true' -> {[],St}
<{'cons',_X_Line,H,T},Vt,St> when 'true' -> apply 'expr_list'/3 ([H|[T|[]]],Vt,St)
<{'lc',_X_Line,E,Qs},Vt,St> when 'true' -> apply 'handle_comprehension'/4 (E,Qs,Vt,St)
<{'bc',_X_Line,E,Qs},Vt,St> when 'true' -> apply 'handle_comprehension'/4 (E,Qs,Vt,St)
<{'tuple',_X_Line,Es},Vt,St> when 'true' -> apply 'expr_list'/3 (Es,Vt,St)
<{'map',_X_Line,Es},Vt,St> when 'true' -> let <_5> = apply 'check_assoc_fields'/2 (Es,St) in let <_4> = 'expr_list'/3 in apply 'map_fields'/4 (Es,Vt,_5,_4)
<{'map',_X_Line,Src,Es},Vt,St> when 'true' -> case apply 'expr'/3 (Src,Vt,St) of <{Svt,St1}> when 'true' -> let <_7> = 'expr_list'/3 in case apply 'map_fields'/4 (Es,Vt,St1,_7) of <{Fvt,St2}> when 'true' -> let <_9> = apply 'vtupdate'/2 (Svt,Fvt) in {_9,St2}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{'record_index',Line,Name,Field},_X_Vt,St> when 'true' -> let <_14> = fun (_11,_10) -> apply 'record_field'/4 (Field,Name,_11,_10) in apply 'check_record'/4 (Line,Name,St,_14)
<{'record',Line,Name,Inits},Vt,St> when 'true' -> let <_19> = fun (_16,_15) -> apply 'init_fields'/6 (Inits,Line,Name,_16,Vt,_15) in apply 'check_record'/4 (Line,Name,St,_19)
<{'record_field',Line,Rec,Name,Field},Vt,St0> when 'true' -> case apply 'record_expr'/4 (Line,Rec,Vt,St0) of <{Rvt,St1}> when 'true' -> let <_25> = fun (_22,_21) -> apply 'record_field'/4 (Field,Name,_22,_21) in case apply 'check_record'/4 (Line,Name,St1,_25) of <{Fvt,St2}> when 'true' -> let <_27> = apply 'vtmerge'/2 (Rvt,Fvt) in {_27,St2}
(<_26> when 'true' -> primop 'match_fail' ({'badmatch',_26})-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
<{'record',Line,Rec,Name,Upds},Vt,St0> when 'true' -> case apply 'record_expr'/4 (Line,Rec,Vt,St0) of <{Rvt,St1}> when 'true' -> let <_33> = fun (_30,_29) -> apply 'update_fields'/5 (Upds,Name,_30,Vt,_29) in case apply 'check_record'/4 (Line,Name,St1,_33) of <{Usvt,St2}> when 'true' -> case apply 'has_wildcard_field'/1 (Upds) of <'true'> when 'true' -> let <_35> = apply 'add_error'/3 (Line,{'wildcard_in_update',Name},St2) in {[],_35}
<'false'> when 'true' -> let <_36> = apply 'vtmerge'/2 (Rvt,Usvt) in {_36,St2}
(<_37> when 'true' -> primop 'match_fail' ({'case_clause',_37})-|['compiler_generated'] ) end
(<_34> when 'true' -> primop 'match_fail' ({'badmatch',_34})-|['compiler_generated'] ) end
(<_28> when 'true' -> primop 'match_fail' ({'badmatch',_28})-|['compiler_generated'] ) end
<{'bin',_X_Line,Fs},Vt,St> when 'true' -> let <_38> = 'expr'/3 in apply 'expr_bin'/4 (Fs,Vt,St,_38)
<{'block',_X_Line,Es},Vt,St> when 'true' -> apply 'exprs'/3 (Es,Vt,St)
<{'if',Line,Cs},Vt,St> when 'true' -> apply 'icrt_clauses'/4 (Cs,{'if',Line},Vt,St)
<{'case',Line,E,Cs},Vt,St0> when 'true' -> case apply 'expr'/3 (E,Vt,St0) of <{Evt,St1}> when 'true' -> let <_40> = apply 'vtupdate'/2 (Evt,Vt) in case apply 'icrt_clauses'/4 (Cs,{'case',Line},_40,St1) of <{Cvt,St2}> when 'true' -> let <_42> = apply 'vtmerge'/2 (Evt,Cvt) in {_42,St2}
(<_41> when 'true' -> primop 'match_fail' ({'badmatch',_41})-|['compiler_generated'] ) end
(<_39> when 'true' -> primop 'match_fail' ({'badmatch',_39})-|['compiler_generated'] ) end
<{'receive',Line,Cs},Vt,St> when 'true' -> apply 'icrt_clauses'/4 (Cs,{'receive',Line},Vt,St)
<{'receive',Line,Cs,To,ToEs},Vt,St0> when 'true' -> case apply 'expr'/3 (To,Vt,St0) of <{Tvt,St1}> when 'true' -> case apply 'exprs'/3 (ToEs,Vt,St1) of <{Tevt,St2}> when 'true' -> case apply 'icrt_clauses'/3 (Cs,Vt,St2) of <{Cvt,St3}> when 'true' -> let <Csvts> = [Tevt|Cvt] in let <Rvt> = apply 'icrt_export'/4 (Csvts,Vt,{'receive',Line},St3) in let <_48> = apply 'vtmerge'/1 ([Tvt|[Tevt|[Rvt|[]]]]) in {_48,St3}
(<_45> when 'true' -> primop 'match_fail' ({'badmatch',_45})-|['compiler_generated'] ) end
(<_44> when 'true' -> primop 'match_fail' ({'badmatch',_44})-|['compiler_generated'] ) end
(<_43> when 'true' -> primop 'match_fail' ({'badmatch',_43})-|['compiler_generated'] ) end
<{'fun',Line,Body},Vt,St> when 'true' -> case Body of <{'clauses',Cs}> when 'true' -> apply 'fun_clauses'/3 (Cs,Vt,St)
<{'function','record_info',2}> when 'true' -> let <_49> = apply 'add_error'/3 (Line,'illegal_record_info',St) in {[],_49}
<{'function',F,A}> when 'true' -> (case St of (<({'lint',_177,_178,_179,_180,_181,_182,_183,_rec97,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}-|['compiler_generated'] )> when 'true' -> let <_53> = apply 'is_local_function'/2 (_rec97,{F,A}) in let <_60> = case _53 of (<'false'> when 'true' -> (case call 'erl_internal':'bif' (F,A) of (<('true'-|['compiler_generated'] )> when 'true' -> (case St of (<({'lint',_211,_212,_213,_214,_215,_216,_217,_218,_rec98,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243}-|['compiler_generated'] )> when 'true' -> let <_57> = apply 'is_autoimport_suppressed'/2 (_rec98,{F,A}) in call 'erlang':'not' (_57)-|['compiler_generated'] )
(<_244> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_54}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in case _60 of <'true'> when 'true' -> {[],St}
<'false'> when 'true' -> let <_61> = apply 'call_function'/4 (Line,F,A,St) in {[],_61}
(<_62> when 'true' -> primop 'match_fail' ({'case_clause',_62})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_210> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'function',M,F,A}> when try let <_63> = call 'erlang':'is_atom' (M) in let <_64> = call 'erlang':'is_atom' (F) in let <_65> = call 'erlang':'is_integer' (A) in let <_66> = call 'erlang':'and' (_64,_65) in call 'erlang':'and' (_63,_66) of <Try> -> Try catch <T,R> -> 'false' -> {[],St}
<{'function',M,F,A}> when 'true' -> apply 'expr_list'/3 ([M|[F|[A|[]]]],Vt,St)
(<_67> when 'true' -> primop 'match_fail' ({'case_clause',_67})-|['compiler_generated'] ) end
<{'named_fun',_245,'_',Cs},Vt,St> when 'true' -> apply 'fun_clauses'/3 (Cs,Vt,St)
<{'named_fun',Line,Name,Cs},Vt,St0> when 'true' -> let <Nvt0> = [{Name,{'bound','unused',[Line|[]]}}|[]] in let <St1> = apply 'shadow_vars'/4 (Nvt0,Vt,'named fun',St0) in let <_70> = apply 'vtsubtract'/2 (Vt,Nvt0) in let <Nvt1> = apply 'vtupdate'/2 (_70,Nvt0) in case apply 'fun_clauses'/3 (Cs,Nvt1,St1) of <{Csvt,St2}> when 'true' -> let <_73> = apply 'vtupdate'/2 (Csvt,Nvt0) in case apply 'check_unused_vars'/3 (_73,[],St2) of <{_246,St3}> when 'true' -> let <_75> = apply 'vtold'/2 (Csvt,Vt) in {_75,St3}
(<_74> when 'true' -> primop 'match_fail' ({'badmatch',_74})-|['compiler_generated'] ) end
(<_72> when 'true' -> primop 'match_fail' ({'badmatch',_72})-|['compiler_generated'] ) end
<{'call',_X_Line,{'atom',_X_Lr,'is_record'},[E|[{'atom',Ln,Name}|[]]]},Vt,St0> when 'true' -> case apply 'expr'/3 (E,Vt,St0) of <{Rvt,St1}> when 'true' -> let <_77> = apply 'exist_record'/3 (Ln,Name,St1) in {Rvt,_77}
(<_76> when 'true' -> primop 'match_fail' ({'badmatch',_76})-|['compiler_generated'] ) end
<{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,'erlang'},_@r0 = {'atom',Lf,'is_record'}},_@r1 = [E|[A|[]]]},Vt,St0> when 'true' -> apply 'expr'/3 ({'call',Line,_@r0,_@r1},Vt,St0)
<{'call',L,{'tuple',Lt,[_@r2 = {'atom',Lm,'erlang'}|[_@r3 = {'atom',Lf,'is_record'}|[]]]},As},Vt,St> when 'true' -> apply 'expr'/3 ({'call',L,{'remote',Lt,_@r2,_@r3},As},Vt,St)
<{'call',Line,{'remote',_X_Lr,{'atom',_X_Lm,M},{'atom',Lf,F}},As},Vt,St0> when 'true' -> let <St1> = apply 'keyword_warning'/3 (Lf,F,St0) in let <St2> = apply 'check_remote_function'/5 (Line,M,F,As,St1) in let <St3> = apply 'check_module_name'/3 (M,Line,St2) in apply 'expr_list'/3 (As,Vt,St3)
<{'call',Line,{'remote',_X_Lr,M,F},As},Vt,St0> when 'true' -> let <St1> = apply 'keyword_warning'/3 (Line,M,St0) in let <St2> = apply 'keyword_warning'/3 (Line,F,St1) in let <_84> = case M of <{'atom',Lm,Mod}> when 'true' -> apply 'check_module_name'/3 (Mod,Lm,St2)
<_247> when 'true' -> St2 end in apply 'expr_list'/3 ([M|[F|As]],Vt,_84)
<{'call',Line,{'atom',La,F},As},Vt,St0> when 'true' -> let <St1> = apply 'keyword_warning'/3 (La,F,St0) in case apply 'expr_list'/3 (As,Vt,St1) of <{Asvt,St2}> when 'true' -> let <A> = call 'erlang':'length' (As) in (case St2 of (<({'lint',_248,_249,_250,_251,_252,_253,_254,_rec99,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280}-|['compiler_generated'] )> when 'true' -> let <IsLocal> = apply 'is_local_function'/2 (_rec99,{F,A}) in let <IsAutoBif> = call 'erl_internal':'bif' (F,A) in (case St2 of (<({'lint',_282,_283,_284,_285,_286,_287,_288,_289,_rec100,_290,_291,_292,_293,_294,_295,_296,_297,_298,_299,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314}-|['compiler_generated'] )> when 'true' -> let <AutoSuppressed> = apply 'is_autoimport_suppressed'/2 (_rec100,{F,A}) in let <_98> = apply 'is_warn_enabled'/2 ('bif_clash',St2) in let <_96> = apply 'bif_clash_specifically_disabled'/2 (St2,{F,A}) in let <_97> = call 'erlang':'not' (_96) in let <Warn> = call 'erlang':'and' (_98,_97) in let <Imported> = apply 'imported'/3 (F,A,St2) in let <_107> = case IsLocal of (<'false'> when 'true' -> (case <> of (<> when call 'erlang':'=:=' (Imported,'no') -> (case IsAutoBif of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'not' (AutoSuppressed)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_103> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_103}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in case _107 of <'true'> when 'true' -> let <St3> = apply 'deprecated_function'/5 (Line,'erlang',F,As,St2) in {Asvt,St3}
<'false'> when 'true' -> let <_138> = case Imported of <{'yes',M}> when 'true' -> let <St3> = apply 'check_remote_function'/5 (Line,M,F,As,St2) in (case St3 of (<({'lint',_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_334,_335,_336,_337,_338,_339,_340,_rec101,_341,_342,_343,_344,_345,_346,_347,_348}-|['compiler_generated'] )> when 'true' -> (case _rec101 of (<({'usage',_350,_rec102,_351,_352}-|['compiler_generated'] )> when 'true' -> let <Imp> = call 'ordsets':'add_element' ({{F,A},M},_rec102) in case _rec101 of <{'usage',_354,_355,_356,_357}> when 'true' -> let <_118> = call 'erlang':'setelement' (3,_rec101,Imp) in case St3 of <{'lint',_359,_360,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392}> when 'true' -> call 'erlang':'setelement' (27,St3,_118)
(<_393> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_358> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_353> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_349> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'no'> when 'true' -> case <F,A> of <'record_info',2> when 'true' -> apply 'check_record_info_call'/4 (Line,La,As,St2)
<(_402-|['compiler_generated'] ),(_403-|['compiler_generated'] )> when 'true' -> let <N> = {(_402-|['compiler_generated'] ),(_403-|['compiler_generated'] )} in let <_128> = case <> of <> when try (let <_126> = case call 'erlang':'not' (AutoSuppressed) of (<('true'-|['compiler_generated'] )> when 'true' -> (case IsAutoBif of (<('true'-|['compiler_generated'] )> when 'true' -> Warn-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_123> when 'true' -> _123-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_122> when 'true' -> _122-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_126-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> case call 'erl_internal':'old_bif' (F,A) of <'true'> when 'true' -> apply 'add_error'/3 (Line,{'call_to_redefined_old_bif',{F,A}},St2)
<'false'> when 'true' -> apply 'add_warning'/3 (Line,{'call_to_redefined_bif',{F,A}},St2)
(<_127> when 'true' -> primop 'match_fail' ({'case_clause',_127})-|['compiler_generated'] ) end
<> when 'true' -> St2 end in case <> of <> when (try (let <_132> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_128,('lint'-|['compiler_generated'] ),(35-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_130-|['compiler_generated'] )> when 'true' -> (_130-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_133> = call 'erlang':'=:=' ((_132-|['compiler_generated'] ),'true') in let <_134> = call 'erlang':'element' (17,_128) in let <_135> = call 'erlang':'=:=' (N,_134) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_133,_135)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> _128
<> when 'true' -> apply 'call_function'/4 (Line,F,A,_128) end end
(<_137> when 'true' -> primop 'match_fail' ({'case_clause',_137})-|['compiler_generated'] ) end in {Asvt,_138}
(<_139> when 'true' -> primop 'match_fail' ({'case_clause',_139})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_315> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_281> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_87> when 'true' -> primop 'match_fail' ({'badmatch',_87})-|['compiler_generated'] ) end
<{'call',Line,F,As},Vt,St0> when 'true' -> let <St> = apply 'warn_invalid_call'/3 (Line,F,St0) in apply 'expr_list'/3 ([F|As],Vt,St)
<{'try',Line,Es,Scs,Ccs,As},Vt,St0> when 'true' -> case apply 'exprs'/3 (Es,Vt,St0) of <{Evt0,St1}> when 'true' -> let <TryLine> = {'try',Line} in let <Uvt> = apply 'vtunsafe'/3 (TryLine,Evt0,Vt) in let <Evt1> = apply 'vtupdate'/2 (Uvt,Evt0) in let <_145> = apply 'vtupdate'/2 (Evt1,Vt) in case apply 'try_clauses'/5 (Scs,Ccs,TryLine,_145,St1) of <{Sccs,St2}> when 'true' -> let <_148> = apply 'vtunsafe'/3 (TryLine,Sccs,Vt) in let <Rvt1> = apply 'vtupdate'/2 (_148,Sccs) in let <Evt2> = apply 'vtmerge'/2 (Evt1,Rvt1) in let <_151> = apply 'vtupdate'/2 (Evt2,Vt) in case apply 'exprs'/3 (As,_151,St2) of <{Avt0,St}> when 'true' -> let <_153> = apply 'vtunsafe'/3 (TryLine,Avt0,Vt) in let <Avt1> = apply 'vtupdate'/2 (_153,Avt0) in let <Avt> = apply 'vtmerge'/2 (Evt2,Avt1) in {Avt,St}
(<_152> when 'true' -> primop 'match_fail' ({'badmatch',_152})-|['compiler_generated'] ) end
(<_146> when 'true' -> primop 'match_fail' ({'badmatch',_146})-|['compiler_generated'] ) end
(<_141> when 'true' -> primop 'match_fail' ({'badmatch',_141})-|['compiler_generated'] ) end
<{'catch',Line,E},Vt,St0> when 'true' -> case apply 'expr'/3 (E,Vt,St0) of <{Evt,St}> when 'true' -> let <_157> = apply 'vtunsafe'/3 ({'catch',Line},Evt,Vt) in let <_158> = apply 'vtupdate'/2 (_157,Evt) in {_158,St}
(<_156> when 'true' -> primop 'match_fail' ({'badmatch',_156})-|['compiler_generated'] ) end
<{'match',_X_Line,P,E},Vt,St0> when 'true' -> case apply 'expr'/3 (E,Vt,St0) of <{Evt,St1}> when 'true' -> let <_160> = apply 'vtupdate'/2 (Evt,Vt) in case apply 'pattern'/3 (P,_160,St1) of <{Pvt,Bvt,St2}> when 'true' -> let <St> = apply 'reject_invalid_alias_expr'/4 (P,E,Vt,St2) in let <_163> = apply 'vtmerge'/2 (Evt,Pvt) in let <_164> = apply 'vtupdate'/2 (Bvt,_163) in {_164,St}
(<_161> when 'true' -> primop 'match_fail' ({'badmatch',_161})-|['compiler_generated'] ) end
(<_159> when 'true' -> primop 'match_fail' ({'badmatch',_159})-|['compiler_generated'] ) end
<{'op',_X_Line,_X_Op,A},Vt,St> when 'true' -> apply 'expr'/3 (A,Vt,St)
<{'op',Line,Op,L,R},Vt,St0> when let <_165> = call 'erlang':'=:=' (Op,'orelse') in let <_166> = call 'erlang':'=:=' (Op,'andalso') in call 'erlang':'or' (_165,_166) -> case apply 'expr'/3 (L,Vt,St0) of <{Evt1,St1}> when 'true' -> let <Vt1> = apply 'vtupdate'/2 (Evt1,Vt) in case apply 'expr'/3 (R,Vt1,St1) of <{Evt2,St2}> when 'true' -> let <_170> = apply 'vtunsafe'/3 ({Op,Line},Evt2,Vt1) in let <Evt3> = apply 'vtupdate'/2 (_170,Evt2) in let <_172> = apply 'vtmerge'/2 (Evt1,Evt3) in {_172,St2}
(<_169> when 'true' -> primop 'match_fail' ({'badmatch',_169})-|['compiler_generated'] ) end
(<_167> when 'true' -> primop 'match_fail' ({'badmatch',_167})-|['compiler_generated'] ) end
<{'op',_X_Line,_X_Op,L,R},Vt,St> when 'true' -> apply 'expr_list'/3 ([L|[R|[]]],Vt,St)
<{'remote',Line,_X_M,_X_F},_X_Vt,St> when 'true' -> let <_173> = apply 'add_error'/3 (Line,'illegal_expr',St) in {[],_173}
(<_176,_175,_174> when 'true' -> (primop 'match_fail' ({'function_clause',_176,_175,_174})-|[{'function_name',{'expr',3}}] )-|['compiler_generated'] ) end
'expr_list'/3 = fun (_0,_1,_2) -> let <_9> = fun (_6,_5) -> case <_6,_5> of <E,{Esvt,St0}> when 'true' -> case apply 'expr'/3 (E,_1,St0) of <{Evt,St1}> when 'true' -> let <_4> = apply 'vtmerge_pat'/2 (Evt,Esvt) in {_4,St1}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'-expr_list/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_9,{[],_2},_0)
'record_expr'/4 = fun (_0,_1,_2,_3) -> let <St1> = apply 'warn_invalid_record'/3 (_0,_1,_3) in apply 'expr'/3 (_1,_2,St1)
'check_assoc_fields'/2 = fun (_0,_1) -> case <_0,_1> of <[{'map_field_exact',Line,_5,_6}|Fs],St> when 'true' -> let <_2> = apply 'add_error'/3 (Line,'illegal_map_construction',St) in apply 'check_assoc_fields'/2 (Fs,_2)
<[{'map_field_assoc',_7,_8,_9}|Fs],St> when 'true' -> apply 'check_assoc_fields'/2 (Fs,St)
<[],St> when 'true' -> St
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'check_assoc_fields',2}}] )-|['compiler_generated'] ) end
'map_fields'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{Tag,_13,K,V}|Fs],Vt,St,F> when let <_4> = call 'erlang':'=:=' (Tag,'map_field_assoc') in let <_5> = call 'erlang':'=:=' (Tag,'map_field_exact') in call 'erlang':'or' (_4,_5) -> case apply F ([K|[V|[]]],Vt,St) of <{Pvt,St2}> when 'true' -> case apply 'map_fields'/4 (Fs,Vt,St2,F) of <{Vts,St3}> when 'true' -> let <_8> = apply 'vtupdate'/2 (Pvt,Vts) in {_8,St3}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[],_14,St,_15> when 'true' -> {[],St}
(<_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9})-|[{'function_name',{'map_fields',4}}] )-|['compiler_generated'] ) end
'warn_invalid_record'/3 = fun (_0,_1,_2) -> case apply 'is_valid_record'/1 (_1) of <'true'> when 'true' -> _2
<'false'> when 'true' -> apply 'add_warning'/3 (_0,'invalid_record',_2)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'is_valid_record'/1 = fun (_0) -> case _0 of <{'char',_3,_4}> when 'true' -> 'false'
<{'integer',_5,_6}> when 'true' -> 'false'
<{'float',_7,_8}> when 'true' -> 'false'
<{'atom',_9,_10}> when 'true' -> 'false'
<{'string',_11,_12}> when 'true' -> 'false'
<{'cons',_13,_14,_15}> when 'true' -> 'false'
<{'nil',_16}> when 'true' -> 'false'
<{'lc',_17,_18,_19}> when 'true' -> 'false'
<{'record_index',_20,_21,_22}> when 'true' -> 'false'
<{'fun',_23,_24}> when 'true' -> 'false'
<{'named_fun',_25,_26,_27}> when 'true' -> 'false'
<_28> when 'true' -> 'true' end
'warn_invalid_call'/3 = fun (_0,_1,_2) -> case apply 'is_valid_call'/1 (_1) of <'true'> when 'true' -> _2
<'false'> when 'true' -> apply 'add_warning'/3 (_0,'invalid_call',_2)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'is_valid_call'/1 = fun (_0) -> case _0 of <{'char',_4,_5}> when 'true' -> 'false'
<{'integer',_6,_7}> when 'true' -> 'false'
<{'float',_8,_9}> when 'true' -> 'false'
<{'string',_10,_11}> when 'true' -> 'false'
<{'cons',_12,_13,_14}> when 'true' -> 'false'
<{'nil',_15}> when 'true' -> 'false'
<{'lc',_16,_17,_18}> when 'true' -> 'false'
<{'record_index',_19,_20,_21}> when 'true' -> 'false'
<{'tuple',_22,Exprs}> when try let <_1> = call 'erlang':'length' (Exprs) in call 'erlang':'=/=' (_1,2) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<_23> when 'true' -> 'true' end
'record_def'/4 = fun (_0,_1,_2,_3) -> (case _3 of (<({'lint',_27,_28,_29,_30,_31,_32,_rec106,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}-|['compiler_generated'] )> when 'true' -> case call 'erlang':'is_map_key' (_1,_rec106) of <'true'> when 'true' -> apply 'add_error'/3 (_0,{'redefine_record',_1},_3)
<'false'> when 'true' -> let <_6> = apply 'normalise_fields'/1 (_2) in case apply 'def_fields'/3 (_6,_1,_3) of <{Fs1,St1}> when 'true' -> (case St1 of (<({'lint',_61,_62,_63,_64,_65,_66,_rec109,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> let <_rec107> = call 'maps':'put' (_1,{_0,Fs1},_rec109) in case St1 of <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' -> let <_13> = call 'erlang':'setelement' (8,St1,_rec107) in let <_19> = letrec 'lc$^0'/1 = fun (_17) -> case _17 of <[{'typed_record_field',_130,T}|_16]> when 'true' -> let <_18> = apply 'lc$^0'/1 (_16) in ([T|_18]-|['compiler_generated'] )
(<[_15|_16]> when 'true' -> apply 'lc$^0'/1 (_16)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_131> when 'true' -> (primop 'match_fail' ({'function_clause',_131})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_2) in let <_21> = apply 'nowarn'/0 () in apply 'check_type'/2 ({'type',_21,'product',_19},_13)
(<_129> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'def_fields'/3 = fun (_0,_1,_2) -> let <_37> = fun (_34,_33) -> case <_34,_33> of <{'record_field',Lf,_@r0 = {'atom',La,F},V},{Fs,St}> when 'true' -> case apply 'exist_field'/2 (F,Fs) of <'true'> when 'true' -> let <_3> = apply 'add_error'/3 (Lf,{'redefine_field',_1,F},St) in {Fs,_3}
<'false'> when 'true' -> case St of <{'lint',_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}> when 'true' -> let <_6> = call 'erlang':'setelement' (24,St,'true') in case apply 'expr'/3 (V,[],_6) of <{_76,St2}> when 'true' -> (case St2 of (<({'lint',_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec115,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109}-|['compiler_generated'] )> when 'true' -> (case St2 of (<({'lint',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_rec116,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143}-|['compiler_generated'] )> when 'true' -> (case St2 of (<({'lint',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec117,_169,_170,_171,_172,_173,_174,_175,_176,_177}-|['compiler_generated'] )> when 'true' -> case _6 of <{'lint',_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212}> when 'true' -> let <_19> = call 'erlang':'setelement' (26,_6,_rec117) in let <_20> = call 'erlang':'setelement' (24,_19,'false') in let <_21> = call 'erlang':'setelement' (22,_20,_rec115) in let <_23> = call 'erlang':'setelement' (21,_21,_rec116) in (case St2 of (<({'lint',_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_rec118,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246}-|['compiler_generated'] )> when 'true' -> (case _6 of (<({'lint',_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_rec119,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280}-|['compiler_generated'] )> when 'true' -> let <_30> = case <> of <> when call 'erlang':'=:=' (_rec118,_rec119) -> V
<> when 'true' -> {'atom',La,'undefined'} end in {[{'record_field',Lf,_@r0,_30}|Fs],_23}-|['compiler_generated'] )
(<_281> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_247> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_213> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_178> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_144> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end
(<_36,_35> when 'true' -> (primop 'match_fail' ({'function_clause',_36,_35})-|[{'function_name',{'-def_fields/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_37,{[],_2},_0)
'normalise_fields'/1 = fun (_0) -> let <_3> = fun (_1) -> case _1 of <{'record_field',Lf,Field}> when 'true' -> {'record_field',Lf,Field,{'atom',Lf,'undefined'}}
<{'typed_record_field',{'record_field',Lf,Field},_X_Type}> when 'true' -> {'record_field',Lf,Field,{'atom',Lf,'undefined'}}
<{'typed_record_field',Field,_X_Type}> when 'true' -> Field
<F> when 'true' -> F end in call 'lists':'map' (_3,_0)
'exist_record'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_9,_10,_11,_12,_13,_14,_rec120,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when 'true' -> case call 'erlang':'is_map_key' (_1,_rec120) of <'true'> when 'true' -> apply 'used_record'/2 (_1,_2)
<'false'> when 'true' -> apply 'add_error'/3 (_0,{'undefined_record',_1},_2)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'check_record'/4 = fun (_0,_1,_2,_3) -> (case _2 of (<({'lint',_13,_14,_15,_16,_17,_18,_rec121,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> case call 'maps':'find' (_1,_rec121) of <{'ok',{_X_Line,Fields}}> when 'true' -> let <_6> = apply 'used_record'/2 (_1,_2) in apply _3 (Fields,_6)
<'error'> when 'true' -> let <_7> = apply 'add_error'/3 (_0,{'undefined_record',_1},_2) in {[],_7}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'used_record'/2 = fun (_0,_1) -> case <_0,_1> of <Name,St = {'lint',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,Usage,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' -> (case Usage of (<({'usage',_46,_47,_rec122,_48}-|['compiler_generated'] )> when 'true' -> let <UsedRecs> = call 'gb_sets':'add_element' (Name,_rec122) in case Usage of <{'usage',_50,_51,_52,_53}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,Usage,UsedRecs) in case St of <{'lint',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88}> when 'true' -> call 'erlang':'setelement' (27,St,_7)
(<_89> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11})-|[{'function_name',{'used_record',2}}] )-|['compiler_generated'] ) end
'check_fields'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_12> = fun (_9,_8) -> case <_9,_8> of <Field,{Sfsa,Vta,Sta}> when 'true' -> case apply 'check_field'/7 (Field,_1,_2,_3,Sta,Sfsa,_5) of <{Sfsb,{Vtb,Stb}}> when 'true' -> let <_7> = apply 'vtmerge_pat'/2 (Vta,Vtb) in {Sfsb,_7,Stb}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'-check_fields/6-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (_12,{[],[],_4},_0) of <{_X_SeenFields,Uvt,St1}> when 'true' -> {Uvt,St1}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
'check_field'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <{'record_field',Lf,{'atom',La,F},Val},Name,Fields,Vt,St,Sfs,CheckFun> when 'true' -> case call 'lists':'member' (F,Sfs) of <'true'> when 'true' -> let <_7> = apply 'add_error'/3 (Lf,{'redefine_field',Name,F},St) in {Sfs,{[],_7}}
<'false'> when 'true' -> let <_10> = case apply 'find_field'/2 (F,Fields) of <{'ok',_X_I}> when 'true' -> apply CheckFun (Val,Vt,St)
<'error'> when 'true' -> let <_8> = apply 'add_error'/3 (La,{'undefined_field',Name,F},St) in {[],_8}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in {[F|Sfs],_10}
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<{'record_field',_X_Lf,{'var',_X_La,'_'},Val},_X_Name,_X_Fields,Vt,St,Sfs,CheckFun> when 'true' -> let <_12> = apply CheckFun (Val,Vt,St) in {Sfs,_12}
<{'record_field',_X_Lf,{'var',La,V},_X_Val},Name,_X_Fields,Vt,St,Sfs,_X_CheckFun> when 'true' -> let <_13> = apply 'add_error'/3 (La,{'field_name_is_variable',Name,V},St) in {Sfs,{Vt,_13}}
(<_20,_19,_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17,_16,_15,_14})-|[{'function_name',{'check_field',7}}] )-|['compiler_generated'] ) end
'pattern_field'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'atom',La,F},Name,Fields,St> when 'true' -> case apply 'find_field'/2 (F,Fields) of <{'ok',_X_I}> when 'true' -> {[],St}
<'error'> when 'true' -> let <_4> = apply 'add_error'/3 (La,{'undefined_field',Name,F},St) in {[],_4}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'pattern_field',4}}] )-|['compiler_generated'] ) end
'pattern_fields'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <CheckFun> = fun (_9,_8,_7) -> apply 'pattern'/5 (_9,_8,_4,_5,_7) in let <_22> = fun (_19,_18) -> case <_19,_18> of <Field,{Sfsa,Vta,Bvt1,Sta}> when 'true' -> case apply 'check_field'/7 (Field,_1,_2,_3,Sta,Sfsa,CheckFun) of <{Sfsb,{Vtb,Stb}}> when 'true' -> let <_14> = apply 'vtmerge_pat'/2 (Vta,Vtb) in {Sfsb,_14,[],Stb}
<{Sfsb,{Vtb,Bvt2,Stb}}> when 'true' -> let <_16> = apply 'vtmerge_pat'/2 (Vta,Vtb) in let <_15> = apply 'vtmerge_pat'/2 (Bvt1,Bvt2) in {Sfsb,_16,_15,Stb}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20})-|[{'function_name',{'-pattern_fields/7-fun-1-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (_22,{[],[],[],_6},_0) of <{_X_SeenFields,Uvt,Bvt1,St1}> when 'true' -> {Uvt,Bvt1,St1}
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end
'record_field'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'atom',La,F},Name,Fields,St> when 'true' -> case apply 'find_field'/2 (F,Fields) of <{'ok',_X_I}> when 'true' -> {[],St}
<'error'> when 'true' -> let <_4> = apply 'add_error'/3 (La,{'undefined_field',Name,F},St) in {[],_4}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'record_field',4}}] )-|['compiler_generated'] ) end
'init_fields'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = 'expr'/3 in case apply 'check_fields'/6 (_0,_2,_3,_4,_5,_6) of <{Vt1,St1}> when 'true' -> let <Defs> = apply 'init_fields'/3 (_0,_1,_3) in let <_9> = 'expr'/3 in case apply 'check_fields'/6 (Defs,_2,_3,Vt1,St1,_9) of <{_23,St2}> when 'true' -> (case St2 of (<({'lint',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_rec128,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> case St1 of <{'lint',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' -> let <_16> = call 'erlang':'setelement' (27,St1,_rec128) in {Vt1,_16}
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'ginit_fields'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = 'gexpr'/3 in case apply 'check_fields'/6 (_0,_2,_3,_4,_5,_6) of <{Vt1,St1}> when 'true' -> let <Defs> = apply 'init_fields'/3 (_0,_1,_3) in case St1 of <{'lint',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69}> when 'true' -> let <_11> = call 'erlang':'setelement' (21,St1,[]) in let <_13> = 'gexpr'/3 in case apply 'check_fields'/6 (Defs,_2,_3,Vt1,_11,_13) of <{_71,St3}> when 'true' -> case St3 of <{'lint',_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,Errors,_91,_92,_93,_94,_95,Usage,_96,_97,_98,_99,_100,_101,_102,_103}> when 'true' -> let <_20> = letrec 'lc$^2'/1 = fun (_18) -> case _18 of <[E = {_X_File,{_X_Line,'erl_lint','illegal_guard_expr'}}|_17]> when 'true' -> let <_19> = apply 'lc$^2'/1 (_17) in ([E|_19]-|['compiler_generated'] )
(<[_16|_17]> when 'true' -> apply 'lc$^2'/1 (_17)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_173> when 'true' -> (primop 'match_fail' ({'function_clause',_173})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (Errors) in (case St1 of (<({'lint',_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_rec132,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136}-|['compiler_generated'] )> when 'true' -> let <_rec130> = call 'erlang':'++' (_20,_rec132) in case St1 of <{'lint',_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}> when 'true' -> let <_26> = call 'erlang':'setelement' (27,St1,Usage) in let <_28> = call 'erlang':'setelement' (21,_26,_rec130) in {Vt1,_28}
(<_172> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_137> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_70> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'init_fields'/3 = fun (_0,_1,_2) -> (letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[{'record_field',Lf,_@r0 = {'atom',La,F},Di}|_4]> when 'true' -> (case apply 'exist_field'/2 (F,_0) of <'false'> when 'true' -> let <_7> = apply 'copy_expr'/2 (Di,_1) in let <_8> = apply 'lc$^0'/1 (_4) in ([{'record_field',Lf,_@r0,_7}|_8]-|['compiler_generated'] )
(<'true'> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_3|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_13> when 'true' -> (primop 'match_fail' ({'function_clause',_13})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_2)-|['list_comprehension'] )
'update_fields'/5 = fun (_0,_1,_2,_3,_4) -> let <_5> = 'expr'/3 in apply 'check_fields'/6 (_0,_1,_2,_3,_4,_5)
'exist_field'/2 = fun (_0,_1) -> case <_0,_1> of <F,[{'record_field',_X_Lf,{'atom',_X_La,_4},_X_Val}|_X_Fs]> when call 'erlang':'=:=' (_4,F) -> 'true'
<F,[_5|Fs]> when 'true' -> apply 'exist_field'/2 (F,Fs)
<_X_F,[]> when 'true' -> 'false'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'exist_field',2}}] )-|['compiler_generated'] ) end
'find_field'/2 = fun (_0,_1) -> case <_0,_1> of <_X_F,[{'record_field',_X_Lf,{'atom',_X_La,_4},Val}|_X_Fs]> when call 'erlang':'=:=' (_4,_X_F) -> {'ok',Val}
<F,[_5|Fs]> when 'true' -> apply 'find_field'/2 (F,Fs)
<_X_F,[]> when 'true' -> 'error'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'find_field',2}}] )-|['compiler_generated'] ) end
'type_def'/6 = fun (_0,_1,_2,_3,_4,_5) -> (case _5 of (<({'lint',_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec133,_69,_70,_71,_72}-|['compiler_generated'] )> when 'true' -> let <Arity> = call 'erlang':'length' (_4) in let <TypePair> = {_2,Arity} in let <Info> = {'typeinfo',_0,_1} in let <StoreType> = fun (_18) -> let <NewDefs> = call 'maps':'put' (TypePair,Info,_rec133) in let <_13> = apply 'nowarn'/0 () in let <CheckType> = {'type',_13,'product',[_3|_4]} in case _18 of <{'lint',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107}> when 'true' -> let <_17> = call 'erlang':'setelement' (31,_18,NewDefs) in apply 'check_type'/2 (CheckType,_17)
(<_108> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case apply 'is_default_type'/1 (TypePair) of <'true'> when 'true' -> case apply 'is_obsolete_builtin_type'/1 (TypePair) of <'true'> when 'true' -> apply StoreType (_5)
<'false'> when 'true' -> case apply 'is_newly_introduced_builtin_type'/1 (TypePair) of <'true'> when 'true' -> let <Warn> = {'new_builtin_type',TypePair} in let <St1> = apply 'add_warning'/3 (_1,Warn,_5) in apply StoreType (St1)
<'false'> when 'true' -> apply 'add_error'/3 (_1,{'builtin_type',TypePair},_5)
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<'false'> when 'true' -> case call 'erlang':'is_map_key' (TypePair,_rec133) of <'true'> when 'true' -> apply 'add_error'/3 (_1,{'redefine_type',TypePair},_5)
<'false'> when 'true' -> let <_27> = case <> of (<> when call 'erlang':'=:=' (_0,'opaque') -> apply 'is_underspecified'/2 (_3,Arity)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in let <_30> = case _27 of <'true'> when 'true' -> let <Warn> = {'underspecified_opaque',TypePair} in apply 'add_warning'/3 (_1,Warn,_5)
<'false'> when 'true' -> _5
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end in apply StoreType (_30)
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end
(<_33> when 'true' -> primop 'match_fail' ({'case_clause',_33})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'is_underspecified'/2 = fun (_0,_1) -> case <_0,_1> of <{'type',_4,'term',[]},0> when 'true' -> 'true'
<{'type',_5,'any',[]},0> when 'true' -> 'true'
<_X_ProtType,_X_Arity> when 'true' -> 'false' end
'check_type'/2 = fun (_0,_1) -> let <_2> = call 'maps':'new' () in case apply 'check_type'/3 (_0,_2,_1) of <{SeenVars,St1}> when 'true' -> let <_11> = fun (_7,_6,_5) -> case <_7,_6,_5> of <Var,{'seen_once',Line},AccSt> when 'true' -> case call 'erlang':'atom_to_list' (Var) of <[95|_14]> when 'true' -> AccSt
<_15> when 'true' -> apply 'add_error'/3 (Line,{'singleton_typevar',Var},AccSt) end
<_X_Var,'seen_multiple',AccSt> when 'true' -> AccSt
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'-check_type/2-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'maps':'fold' (_11,St1,SeenVars)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'check_type'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'ann_type',_X_L,[_X_Var|[Type|[]]]},SeenVars,St> when 'true' -> apply 'check_type'/3 (Type,SeenVars,St)
<{'remote_type',L,[{'atom',_84,Mod}|[{'atom',_85,Name}|[Args|[]]]]},SeenVars,St00> when 'true' -> let <St0> = apply 'check_module_name'/3 (Mod,L,St00) in let <St> = apply 'deprecated_type'/5 (L,Mod,Name,Args,St0) in (case St of (<({'lint',_86,_rec135,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}-|['compiler_generated'] )> when 'true' -> case <> of <> when call 'erlang':'=:=' (Mod,_rec135) -> apply 'check_type'/3 ({'user_type',L,Name,Args},SeenVars,St)
<> when 'true' -> let <_12> = fun (_9,_8) -> case <_9,_8> of <T,{AccSeenVars,AccSt}> when 'true' -> apply 'check_type'/3 (T,AccSeenVars,AccSt)
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'-check_type/3-fun-0-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_12,{SeenVars,St},Args) end-|['compiler_generated'] )
(<_119> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'integer',_X_L,_120},SeenVars,St> when 'true' -> {SeenVars,St}
<{'atom',_X_L,_121},SeenVars,St> when 'true' -> {SeenVars,St}
<{'var',_X_L,'_'},SeenVars,St> when 'true' -> {SeenVars,St}
<{'var',L,Name},SeenVars,St> when 'true' -> let <_15> = case call 'maps':'find' (Name,SeenVars) of <{'ok',{'seen_once',_122}}> when 'true' -> call 'maps':'put' (Name,'seen_multiple',SeenVars)
<{'ok','seen_multiple'}> when 'true' -> SeenVars
<'error'> when 'true' -> call 'maps':'put' (Name,{'seen_once',L},SeenVars)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end in {_15,St}
<{'type',L,'bool',[]},SeenVars,St> when 'true' -> let <_17> = apply 'add_warning'/3 (L,{'renamed_type','bool','boolean'},St) in {SeenVars,_17}
<{'type',L,'fun',_@r0 = [Dom|[Range|[]]]},SeenVars,St> when 'true' -> let <_19> = case Dom of <{'type',_123,'product',_124}> when 'true' -> St
<{'type',_125,'any'}> when 'true' -> St
<_126> when 'true' -> apply 'add_error'/3 (L,{'type_syntax','fun'},St) end in let <_21> = apply 'nowarn'/0 () in apply 'check_type'/3 ({'type',_21,'product',_@r0},SeenVars,_19)
<{'type',L,'range',[From|[To|[]]]},SeenVars,St> when 'true' -> let <_23> = call 'erl_eval':'partial_eval' (From) in let <_22> = call 'erl_eval':'partial_eval' (To) in let <_25> = case <_23,_22> of <({('integer'-|['compiler_generated'] ),_127,X}-|['compiler_generated'] ),({('integer'-|['compiler_generated'] ),_128,Y}-|['compiler_generated'] )> when call 'erlang':'<' (X,Y) -> St
<(_171-|['compiler_generated'] ),(_172-|['compiler_generated'] )> when 'true' -> apply 'add_error'/3 (L,{'type_syntax','range'},St) end in {SeenVars,_25}
<{'type',_X_L,'map','any'},SeenVars,St> when 'true' -> {SeenVars,St}
<{'type',_X_L,'map',Pairs},SeenVars,St> when 'true' -> let <_31> = fun (_28,_27) -> case <_28,_27> of <Pair,{AccSeenVars,AccSt}> when 'true' -> apply 'check_type'/3 (Pair,AccSeenVars,AccSt)
(<_30,_29> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29})-|[{'function_name',{'-check_type/3-fun-1-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_31,{SeenVars,St},Pairs)
<{'type',_X_L,'map_field_assoc',_@r1 = [Dom|[Range|[]]]},SeenVars,St> when 'true' -> let <_32> = apply 'nowarn'/0 () in apply 'check_type'/3 ({'type',_32,'product',_@r1},SeenVars,St)
<{'type',_X_L,'tuple','any'},SeenVars,St> when 'true' -> {SeenVars,St}
<{'type',_X_L,'any'},SeenVars,St> when 'true' -> {SeenVars,St}
<{'type',L,'binary',[Base|[Unit|[]]]},SeenVars,St> when 'true' -> let <_34> = call 'erl_eval':'partial_eval' (Base) in let <_33> = call 'erl_eval':'partial_eval' (Unit) in let <_38> = case <_34,_33> of <({('integer'-|['compiler_generated'] ),_130,BaseVal}-|['compiler_generated'] ),({('integer'-|['compiler_generated'] ),_131,UnitVal}-|['compiler_generated'] )> when let <_35> = call 'erlang':'>=' (BaseVal,0) in let <_36> = call 'erlang':'>=' (UnitVal,0) in call 'erlang':'and' (_35,_36) -> St
<(_175-|['compiler_generated'] ),(_176-|['compiler_generated'] )> when 'true' -> apply 'add_error'/3 (L,{'type_syntax','binary'},St) end in {SeenVars,_38}
<{'type',L,'record',[Name|Fields]},SeenVars,St> when 'true' -> case Name of <{'atom',_133,Atom}> when 'true' -> let <St1> = apply 'used_record'/2 (Atom,St) in apply 'check_record_types'/5 (L,Atom,Fields,SeenVars,St1)
<_134> when 'true' -> let <_41> = apply 'add_error'/3 (L,{'type_syntax','record'},St) in {SeenVars,_41} end
<{'type',_X_L,Tag,Args},SeenVars,St> when let <_43> = call 'erlang':'=:=' (Tag,'product') in let <_44> = call 'erlang':'=:=' (Tag,'union') in let <_45> = call 'erlang':'=:=' (Tag,'tuple') in let <_46> = call 'erlang':'or' (_44,_45) in call 'erlang':'or' (_43,_46) -> let <_51> = fun (_48,_47) -> case <_48,_47> of <T,{AccSeenVars,AccSt}> when 'true' -> apply 'check_type'/3 (T,AccSeenVars,AccSt)
(<_50,_49> when 'true' -> (primop 'match_fail' ({'function_clause',_50,_49})-|[{'function_name',{'-check_type/3-fun-2-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_51,{SeenVars,St},Args)
<{'type',La,TypeName,Args},SeenVars,St> when 'true' -> case St of <{'lint',_135,Module,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,Types,_163,_164,_165,_166}> when 'true' -> let <Arity> = call 'erlang':'length' (Args) in let <TypePair> = {TypeName,Arity} in let <_57> = case apply 'is_warn_enabled'/2 ('deprecated_type',St) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'obsolete_builtin_type'/1 (TypePair)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_55}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_65> = case _57 of <{'deprecated',Repl,_167}> when try let <_59> = call 'erlang':'element' (1,Repl) in call 'erlang':'=/=' (_59,Module) of <Try> -> Try catch <T,R> -> 'false' -> case call 'maps':'find' (TypePair,Types) of <{'ok',_168}> when 'true' -> apply 'used_type'/3 (TypePair,La,St)
<'error'> when 'true' -> case _57 of <{'deprecated',Replacement,Rel}> when 'true' -> let <W> = {'deprecated_builtin_type',TypePair,Replacement,Rel} in apply 'add_warning'/3 (La,W,St)
(<_60> when 'true' -> primop 'match_fail' ({'badmatch',_60})-|['compiler_generated'] ) end
(<_63> when 'true' -> primop 'match_fail' ({'case_clause',_63})-|['compiler_generated'] ) end
<_169> when 'true' -> St end in let <_67> = apply 'nowarn'/0 () in apply 'check_type'/3 ({'type',_67,'product',Args},SeenVars,_65)
(<_52> when 'true' -> primop 'match_fail' ({'badmatch',_52})-|['compiler_generated'] ) end
<{'user_type',L,TypeName,Args},SeenVars,St> when 'true' -> let <Arity> = call 'erlang':'length' (Args) in let <TypePair> = {TypeName,Arity} in let <St1> = apply 'used_type'/3 (TypePair,L,St) in let <_75> = fun (_72,_71) -> case <_72,_71> of <T,{AccSeenVars,AccSt}> when 'true' -> apply 'check_type'/3 (T,AccSeenVars,AccSt)
(<_74,_73> when 'true' -> (primop 'match_fail' ({'function_clause',_74,_73})-|[{'function_name',{'-check_type/3-fun-3-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_75,{SeenVars,St1},Args)
<[{'typed_record_field',Field,_X_T}|_170],SeenVars,St> when 'true' -> let <_76> = call 'erlang':'element' (2,Field) in let <_77> = apply 'add_error'/3 (_76,'old_abstract_code',St) in {SeenVars,_77}
<I,SeenVars,St> when 'true' -> case call 'erl_eval':'partial_eval' (I) of <{'integer',_X_ILn,_X_Integer}> when 'true' -> {SeenVars,St}
<_X_Other> when 'true' -> let <_78> = call 'erlang':'element' (2,I) in let <_79> = apply 'add_error'/3 (_78,{'type_syntax','integer'},St) in {SeenVars,_79} end end
'check_record_types'/5 = fun (_0,_1,_2,_3,_4) -> (case _4 of (<({'lint',_19,_20,_21,_22,_23,_24,_rec136,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> case call 'maps':'find' (_1,_rec136) of <{'ok',{_X_L,DefFields}}> when 'true' -> let <_9> = fun (_7) -> case _7 of <{'type',_53,'field_type',_54}> when 'true' -> 'true'
<_55> when 'true' -> 'false' end in case call 'lists':'all' (_9,_2) of <'true'> when 'true' -> apply 'check_record_types'/6 (_2,_1,DefFields,_3,_4,[])
<'false'> when 'true' -> let <_10> = apply 'add_error'/3 (_0,{'type_syntax','record'},_4) in {_3,_10}
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<'error'> when 'true' -> let <_12> = apply 'add_error'/3 (_0,{'undefined_record',_1},_4) in {_3,_12}
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'check_record_types'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[{'type',_20,'field_type',[{'atom',AL,FName}|[Type|[]]]}|Left],Name,DefFields,SeenVars,St,SeenFields> when 'true' -> let <_7> = case apply 'exist_field'/2 (FName,DefFields) of <'true'> when 'true' -> St
<'false'> when 'true' -> apply 'add_error'/3 (AL,{'undefined_field',Name,FName},St)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in let <_10> = case call 'ordsets':'is_element' (FName,SeenFields) of <'true'> when 'true' -> apply 'add_error'/3 (AL,{'redefine_field',Name,FName},_7)
<'false'> when 'true' -> _7
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in case apply 'check_type'/3 (Type,SeenVars,_10) of <{NewSeenVars,St3}> when 'true' -> let <NewSeenFields> = call 'ordsets':'add_element' (FName,SeenFields) in apply 'check_record_types'/6 (Left,Name,DefFields,NewSeenVars,St3,NewSeenFields)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<[],_X_Name,_X_DefFields,SeenVars,St,_X_SeenFields> when 'true' -> {SeenVars,St}
(<_19,_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14})-|[{'function_name',{'check_record_types',6}}] )-|['compiler_generated'] ) end
'used_type'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <TypePair,L,St = {'lint',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,File,_38,_39,_40,Usage,_41,_42,_43,_44,_45,_46,_47,_48}> when 'true' -> (case Usage of (<({'usage',_49,_50,_51,_rec137}-|['compiler_generated'] )> when 'true' -> let <_6> = call 'erl_anno':'set_file' (File,L) in let <UsedTypes> = call 'maps':'put' (TypePair,_6,_rec137) in case Usage of <{'usage',_53,_54,_55,_56}> when 'true' -> let <_10> = call 'erlang':'setelement' (5,Usage,UsedTypes) in case St of <{'lint',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' -> call 'erlang':'setelement' (27,St,_10)
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14})-|[{'function_name',{'used_type',3}}] )-|['compiler_generated'] ) end
'is_default_type'/1 = fun (_0) -> case _0 of <{Name,NumberOfTypeVariables}> when 'true' -> call 'erl_internal':'is_type' (Name,NumberOfTypeVariables)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'is_default_type',1}}] )-|['compiler_generated'] ) end
'is_newly_introduced_builtin_type'/1 = fun (_0) -> case _0 of <{Name,_2}> when call 'erlang':'is_atom' (Name) -> 'false'
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'is_newly_introduced_builtin_type',1}}] )-|['compiler_generated'] ) end
'is_obsolete_builtin_type'/1 = fun (_0) -> let <_1> = apply 'obsolete_builtin_type'/1 (_0) in call 'erlang':'=/=' (_1,'no')
'obsolete_builtin_type'/1 = fun (_0) -> case _0 of <{1,255}> when 'true' -> {'deprecated',{2,255},[]}
<{Name,A}> when let <_1> = call 'erlang':'is_atom' (Name) in let <_2> = call 'erlang':'is_integer' (A) in call 'erlang':'and' (_1,_2) -> 'no'
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'obsolete_builtin_type',1}}] )-|['compiler_generated'] ) end
'spec_decl'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,MFA0,TypeSpecs,St00 = {'lint',_20,Mod,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,Specs,_45,_46,_47,_48,_49,_50,_51}> when 'true' -> let <_5,Arity> = case MFA0 of <{F,Arity}> when 'true' -> <{Mod,F,Arity},Arity>
<{_X_M,_X_F,Arity}> when 'true' -> <MFA0,Arity>
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in let <_7> = call 'erlang':'element' (1,_5) in let <St0> = apply 'check_module_name'/3 (_7,Line,St00) in let <_rec141> = call 'maps':'put' (_5,Line,Specs) in case St0 of <{'lint',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}> when 'true' -> let <_12> = call 'erlang':'setelement' (28,St0,_rec141) in case call 'erlang':'is_map_key' (_5,Specs) of <'true'> when 'true' -> apply 'add_error'/3 (Line,{'redefine_spec',MFA0},_12)
<'false'> when 'true' -> case _5 of <{_87,_88,_89}> when call 'erlang':'=:=' (_87,Mod) -> apply 'check_specs'/4 (TypeSpecs,'spec_wrong_arity',Arity,_12)
<_90> when 'true' -> apply 'add_error'/3 (Line,{'bad_module',_5},_12) end
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_19,_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16})-|[{'function_name',{'spec_decl',4}}] )-|['compiler_generated'] ) end
'callback_decl'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,MFA0,TypeSpecs,St0 = {'lint',_17,Mod,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,Callbacks,_43,_44,_45,_46,_47,_48}> when 'true' -> case MFA0 of <{M,_X_F,_X_A}> when 'true' -> let <St1> = apply 'check_module_name'/3 (M,Line,St0) in apply 'add_error'/3 (Line,{'bad_callback',MFA0},St1)
<{F,Arity}> when 'true' -> let <MFA> = {Mod,F,Arity} in let <_rec143> = call 'maps':'put' (MFA,Line,Callbacks) in case St0 of <{'lint',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82}> when 'true' -> let <_9> = call 'erlang':'setelement' (29,St0,_rec143) in case call 'erlang':'is_map_key' (MFA,Callbacks) of <'true'> when 'true' -> apply 'add_error'/3 (Line,{'redefine_callback',MFA0},_9)
<'false'> when 'true' -> apply 'check_specs'/4 (TypeSpecs,'callback_wrong_arity',Arity,_9)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14,_13})-|[{'function_name',{'callback_decl',4}}] )-|['compiler_generated'] ) end
'optional_callbacks'/3 = fun (_0,_1,_2) -> try case apply 'is_fa_list'/1 (_1) of <'true'> when 'true' -> _1
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end of <_4> -> apply 'optional_cbs'/3 (_0,_4,_2) catch <_8,_7,_6> -> _2
'optional_cbs'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_Line,[],St> when 'true' -> St
<Line,[_@r0 = {F,A}|FAs],St0> when 'true' -> case St0 of <{'lint',_16,Mod,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,OptionalCbs,_43,_44,_45,_46,_47}> when 'true' -> let <MFA> = {Mod,F,A} in let <_rec145> = call 'maps':'put' (MFA,Line,OptionalCbs) in case St0 of <{'lint',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' -> let <_8> = call 'erlang':'setelement' (30,St0,_rec145) in let <_11> = case call 'erlang':'is_map_key' (MFA,OptionalCbs) of <'true'> when 'true' -> apply 'add_error'/3 (Line,{'redefine_optional_callback',_@r0},_8)
<'false'> when 'true' -> _8
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end in apply 'optional_cbs'/3 (Line,FAs,_11)
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13})-|[{'function_name',{'optional_cbs',3}}] )-|['compiler_generated'] ) end
'is_fa_list'/1 = fun (_0) -> case _0 of <[E|L]> when 'true' -> (case apply 'is_fa'/1 (E) of (<('true'-|['compiler_generated'] )> when 'true' -> apply 'is_fa_list'/1 (L)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_1> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_1}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[]> when 'true' -> 'true'
<_4> when 'true' -> 'false' end
'is_fa'/1 = fun (_0) -> case _0 of <{FuncName,Arity}> when try let <_1> = call 'erlang':'is_atom' (FuncName) in let <_2> = call 'erlang':'is_integer' (Arity) in let <_3> = call 'erlang':'>=' (Arity,0) in let <_4> = call 'erlang':'and' (_2,_3) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<_6> when 'true' -> 'false' end
'check_module_name'/3 = fun (_0,_1,_2) -> case apply 'is_latin1_name'/1 (_0) of <'true'> when 'true' -> _2
<'false'> when 'true' -> apply 'add_error'/3 (_1,'non_latin1_module_unsupported',_2)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'is_latin1_name'/1 = fun (_0) -> let <_1> = call 'erlang':'atom_to_list' (_0) in call 'io_lib':'latin1_char_list' (_1)
'check_specs'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[FunType|Left],ETag,Arity,St0> when 'true' -> let <_34,_35> = case FunType of <{'type',_25,'bounded_fun',[FT = {'type',_26,'fun',_27}|[Cs|[]]]}> when 'true' -> let <_8> = letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[{'type',_28,'constraint',[_29|[T|[]]]}|_5]> when 'true' -> let <_7> = apply 'lc$^0'/1 (_5) in ([T|_7]-|['compiler_generated'] )
(<[_4|_5]> when 'true' -> apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_36> when 'true' -> (primop 'match_fail' ({'function_clause',_36})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Cs) in let <_10> = call 'lists':'append' (_8) in <FT,_10>
<FT = {'type',_30,'fun',_31}> when 'true' -> <FT,[]>
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end in case (_34-|['compiler_generated'] ) of <{'type',L,'fun',[{'type',_32,'product',D}|[_33|[]]]}> when 'true' -> let <SpecArity> = call 'erlang':'length' (D) in let <_17> = case <> of <> when call 'erlang':'=:=' (Arity,SpecArity) -> St0
<> when 'true' -> apply 'add_error'/3 (L,ETag,St0) end in let <_19> = apply 'nowarn'/0 () in let <St2> = apply 'check_type'/2 ({'type',_19,'product',[(_34-|['compiler_generated'] )|(_35-|['compiler_generated'] )]},_17) in apply 'check_specs'/4 (Left,ETag,Arity,St2)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<[],_X_ETag,_X_Arity,St> when 'true' -> St
(<_24,_23,_22,_21> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21})-|[{'function_name',{'check_specs',4}}] )-|['compiler_generated'] ) end
'nowarn'/0 = fun () -> let <A0> = call 'erl_anno':'new' (0) in let <A1> = call 'erl_anno':'set_generated' ('true',A0) in call 'erl_anno':'set_file' ([],A1)
'check_specs_without_function'/1 = fun (_0) -> case _0 of <St = {'lint',_11,Mod,_12,_13,_14,_15,_16,_17,_18,Funcs,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,Specs,_35,_36,_37,_38,_39,_40,_41}> when 'true' -> let <Fun> = fun (_5,_4,_3) -> case <_5,_4,_3> of <{M,F,A},Line,AccSt> when call 'erlang':'=:=' (M,Mod) -> let <FA> = {F,A} in case call 'gb_sets':'is_element' (FA,Funcs) of <'true'> when 'true' -> AccSt
<'false'> when 'true' -> apply 'add_error'/3 (Line,{'spec_fun_undefined',FA},AccSt)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<{_X_M,_X_F,_X_A},_X_Line,AccSt> when 'true' -> AccSt
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'-check_specs_without_function/1-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'maps':'fold' (Fun,St,Specs)
(<_10> when 'true' -> (primop 'match_fail' ({'function_clause',_10})-|[{'function_name',{'check_specs_without_function',1}}] )-|['compiler_generated'] ) end
'check_functions_without_spec'/2 = fun (_0,_1) -> case apply 'is_warn_enabled'/2 ('missing_spec_all',_1) of <'true'> when 'true' -> apply 'add_missing_spec_warnings'/3 (_0,_1,'all')
<'false'> when 'true' -> case apply 'is_warn_enabled'/2 ('missing_spec',_1) of <'true'> when 'true' -> apply 'add_missing_spec_warnings'/3 (_0,_1,'exported')
<'false'> when 'true' -> _1
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'add_missing_spec_warnings'/3 = fun (_0,_1,_2) -> let <_10> = letrec 'lc$^0'/1 = fun (_8) -> case _8 of <[{_X_M,F,A}|_4]> when 'true' -> let <_9> = apply 'lc$^0'/1 (_4) in ([{F,A}|_9]-|['compiler_generated'] )
(<[_3|_4]> when 'true' -> apply 'lc$^0'/1 (_4)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_114> when 'true' -> (primop 'match_fail' ({'function_clause',_114})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in (case _1 of (<({'lint',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_rec147,_70,_71,_72,_73,_74,_75,_76}-|['compiler_generated'] )> when 'true' -> let <_7> = call 'maps':'keys' (_rec147) in apply 'lc$^0'/1 (_7)-|['compiler_generated'] )
(<_77> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in let <_34> = case _2 of <'all'> when 'true' -> (letrec 'lc$^1'/1 = fun (_17) -> case _17 of <[{'function',L,F,A,_78}|_13]> when 'true' -> let <FA> = {(F-|['compiler_generated'] ),(A-|['compiler_generated'] )} in (case call 'lists':'member' (FA,_10) of <'false'> when 'true' -> let <_18> = apply 'lc$^1'/1 (_13) in ([{FA,L}|_18]-|['compiler_generated'] )
(<'true'> when 'true' -> apply 'lc$^1'/1 (_13)-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_12|_13]> when 'true' -> apply 'lc$^1'/1 (_13)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_119> when 'true' -> (primop 'match_fail' ({'function_clause',_119})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in apply 'lc$^1'/1 (_0)-|['list_comprehension'] )
<'exported'> when 'true' -> (case _1 of (<({'lint',_79,_80,_81,_rec148,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111}-|['compiler_generated'] )> when 'true' -> let <_23> = call 'gb_sets':'to_list' (_rec148) in let <_20> = apply 'pseudolocals'/0 () in let <Exps0> = call 'erlang':'--' (_23,_20) in let <Exps> = call 'erlang':'--' (Exps0,_10) in (letrec 'lc$^2'/1 = fun (_30) -> case _30 of <[{'function',L,F,A,_113}|_27]> when 'true' -> (let <FA> = {(F-|['compiler_generated'] ),(A-|['compiler_generated'] )} in (case call 'lists':'member' (FA,Exps) of <'true'> when 'true' -> let <_31> = apply 'lc$^2'/1 (_27) in ([{FA,L}|_31]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^2'/1 (_27)-|['compiler_generated'] )
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end-|['list_comprehension'] )-|['list_comprehension'] )
(<[_26|_27]> when 'true' -> apply 'lc$^2'/1 (_27)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_124> when 'true' -> (primop 'match_fail' ({'function_clause',_124})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (_0)-|['list_comprehension'] )-|['compiler_generated'] )
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_33> when 'true' -> primop 'match_fail' ({'case_clause',_33})-|['compiler_generated'] ) end in let <_40> = fun (_37,_36) -> case <_37,_36> of <{FA,L},St> when 'true' -> apply 'add_warning'/3 (L,{'missing_spec',FA},St)
(<_39,_38> when 'true' -> (primop 'match_fail' ({'function_clause',_39,_38})-|[{'function_name',{'-add_missing_spec_warnings/3-fun-3-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_40,_1,_34)
'check_unused_types'/2 = fun (_0,_1) -> case apply 'is_warn_enabled'/2 ('unused_type',_1) of <'true'> when 'true' -> apply 'check_unused_types_1'/2 (_0,_1)
<'false'> when 'true' -> _1
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'check_unused_types_1'/2 = fun (_0,_1) -> case <_0,_1> of <Forms,St = {'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,Usage,_52,_53,_54,Ts,ExpTs,_55,_56,_57}> when 'true' -> let <_6> = letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[{'attribute',_X_L,'file',{File,_X_Line}}|_3]> when 'true' -> let <_5> = apply 'lc$^0'/1 (_3) in ([File|_5]-|['compiler_generated'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_69> when 'true' -> (primop 'match_fail' ({'function_clause',_69})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Forms) in case _6 of <[FirstFile|_58]> when 'true' -> (case Usage of (<({'usage',_59,_60,_61,_rec149}-|['compiler_generated'] )> when 'true' -> let <_11> = call 'gb_sets':'to_list' (ExpTs) in let <_10> = call 'maps':'keys' (_rec149) in let <L> = call 'erlang':'++' (_11,_10) in let <UsedTypes> = call 'gb_sets':'from_list' (L) in let <FoldFun> = fun (_19,_18,_17) -> case <_19,_18,_17> of <{_X_Type = {'record',_63},0},_64,AccSt> when 'true' -> AccSt
<Type,{'typeinfo',_65,FileLine},AccSt> when 'true' -> case apply 'loc'/2 (FileLine,AccSt) of <{_66,_67}> when call 'erlang':'=:=' (_66,FirstFile) -> case call 'gb_sets':'is_member' (Type,UsedTypes) of <'true'> when 'true' -> AccSt
<'false'> when 'true' -> let <Warn> = {'unused_type',Type} in apply 'add_warning'/3 (FileLine,Warn,AccSt)
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<_68> when 'true' -> AccSt end
(<_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21,_20})-|[{'function_name',{'-check_unused_types_1/2-fun-1-',3}}] )-|['compiler_generated'] ) end in call 'maps':'fold' (FoldFun,St,Ts)-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','usage'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[]> when 'true' -> St
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
(<_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25})-|[{'function_name',{'check_unused_types_1',2}}] )-|['compiler_generated'] ) end
'check_local_opaque_types'/1 = fun (_0) -> case _0 of <{'lint',_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,Ts,ExpTs,_41,_42,_43}> when 'true' -> let <FoldFun> = fun (_6,_5,_4) -> case <_6,_5,_4> of <_X_Type,{'typeinfo','type',_44},AccSt> when 'true' -> AccSt
<Type,{'typeinfo','opaque',FileLine},AccSt> when 'true' -> case call 'gb_sets':'is_element' (Type,ExpTs) of <'true'> when 'true' -> AccSt
<'false'> when 'true' -> let <Warn> = {'not_exported_opaque',Type} in apply 'add_warning'/3 (FileLine,Warn,AccSt)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'-check_local_opaque_types/1-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'maps':'fold' (FoldFun,_0,Ts)
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'check_dialyzer_attribute'/2 = fun (_0,_1) -> let <_24> = letrec 'lc$^2'/1 = fun (_20) -> case _20 of <[{'attribute',L,'dialyzer',Val}|_3]> when 'true' -> (letrec 'lc$^3'/1 = fun (_21) -> case _21 of <[V0|_5]> when 'true' -> (letrec 'lc$^4'/1 = fun (_22) -> case _22 of <[V|_8]> when 'true' -> let <_23> = apply 'lc$^4'/1 (_8) in ([{L,V}|_23]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^3'/1 (_5)
(<_88> when 'true' -> (primop 'match_fail' ({'function_clause',_88})-|[{'function_name',{'lc$^4',1}}] )-|['compiler_generated'] ) end in let <_19> = case V0 of <{O,F}> when 'true' -> (letrec 'lc$^0'/1 = fun (_15) -> case _15 of <[A|_10]> when 'true' -> (letrec 'lc$^1'/1 = fun (_16) -> case _16 of <[B|_13]> when 'true' -> let <_17> = apply 'lc$^1'/1 (_13) in ([{A,B}|_17]-|['compiler_generated'] )
<[]> when 'true' -> apply 'lc$^0'/1 (_10)
(<_89> when 'true' -> (primop 'match_fail' ({'function_clause',_89})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_14> = call 'lists':'flatten' ([F|[]]) in apply 'lc$^1'/1 (_14)-|['list_comprehension'] )
<[]> when 'true' -> []
(<_90> when 'true' -> (primop 'match_fail' ({'function_clause',_90})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in let <_11> = call 'lists':'flatten' ([O|[]]) in apply 'lc$^0'/1 (_11)-|['list_comprehension'] )
<T> when 'true' -> [T|[]] end in apply 'lc$^4'/1 (_19)-|['list_comprehension'] )
<[]> when 'true' -> apply 'lc$^2'/1 (_3)
(<_91> when 'true' -> (primop 'match_fail' ({'function_clause',_91})-|[{'function_name',{'lc$^3',1}}] )-|['compiler_generated'] ) end in let <_6> = call 'lists':'flatten' ([Val|[]]) in apply 'lc$^3'/1 (_6)-|['list_comprehension'] )
(<[_2|_3]> when 'true' -> apply 'lc$^2'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_92> when 'true' -> (primop 'match_fail' ({'function_clause',_92})-|[{'function_name',{'lc$^2',1}}] )-|['compiler_generated'] ) end in apply 'lc$^2'/1 (_0) in let <_28> = fun (_26) -> case _26 of <{_51,{Option,FA}}> when call 'erlang':'is_atom' (Option) -> apply 'is_fa'/1 (FA)
<{_52,Option}> when call 'erlang':'is_atom' (Option) -> 'true'
<_53> when 'true' -> 'false' end in case call 'lists':'partition' (_28,_24) of <{Wellformed,Bad}> when 'true' -> let <_34> = fun (_31,_30) -> case <_31,_30> of <{L,Term},St> when 'true' -> apply 'add_error'/3 (L,{'bad_dialyzer_attribute',Term},St)
(<_33,_32> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32})-|[{'function_name',{'-check_dialyzer_attribute/2-fun-6-',2}}] )-|['compiler_generated'] ) end in let <St1> = call 'lists':'foldl' (_34,_1,Bad) in (case _1 of (<({'lint',_54,_55,_56,_57,_58,_59,_60,_61,_62,_rec150,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86}-|['compiler_generated'] )> when 'true' -> let <_39> = call 'gb_sets':'to_list' (_rec150) in let <_36> = apply 'pseudolocals'/0 () in let <DefFunctions> = call 'erlang':'--' (_39,_36) in let <Fun> = fun (_45,_44) -> case <_45,_44> of <{L,{Option,FA}},St> when 'true' -> case apply 'is_function_dialyzer_option'/1 (Option) of <'true'> when 'true' -> case call 'lists':'member' (FA,DefFunctions) of <'true'> when 'true' -> St
<'false'> when 'true' -> apply 'add_error'/3 (L,{'undefined_function',FA},St)
(<_41> when 'true' -> primop 'match_fail' ({'case_clause',_41})-|['compiler_generated'] ) end
<'false'> when 'true' -> apply 'add_error'/3 (L,{'bad_dialyzer_option',Option},St)
(<_42> when 'true' -> primop 'match_fail' ({'case_clause',_42})-|['compiler_generated'] ) end
<{L,Option},St> when 'true' -> case apply 'is_module_dialyzer_option'/1 (Option) of <'true'> when 'true' -> St
<'false'> when 'true' -> apply 'add_error'/3 (L,{'bad_dialyzer_option',Option},St)
(<_43> when 'true' -> primop 'match_fail' ({'case_clause',_43})-|['compiler_generated'] ) end
(<_47,_46> when 'true' -> (primop 'match_fail' ({'function_clause',_47,_46})-|[{'function_name',{'-check_dialyzer_attribute/2-fun-7-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (Fun,St1,Wellformed)-|['compiler_generated'] )
(<_87> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> primop 'match_fail' ({'badmatch',_29})-|['compiler_generated'] ) end
'is_function_dialyzer_option'/1 = fun (_0) -> case _0 of <'nowarn_function'> when 'true' -> 'true'
<Option> when 'true' -> apply 'is_module_dialyzer_option'/1 (Option) end
'is_module_dialyzer_option'/1 = fun (_0) -> call 'lists':'member' (_0,['no_return'|['no_unused'|['no_improper_lists'|['no_fun_app'|['no_match'|['no_opaque'|['no_fail_call'|['no_contracts'|['no_behaviours'|['no_undefined_callbacks'|['unmatched_returns'|['error_handling'|['race_conditions'|['no_missing_calls'|['specdiffs'|['overspecs'|['underspecs'|['unknown']]]]]]]]]]]]]]]]]])
'try_clauses'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'icrt_clauses'/3 (_0,_3,_4) of <{Csvt0,St1}> when 'true' -> case St1 of <{'lint',_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54}> when 'true' -> let <_8> = call 'erlang':'setelement' (33,St1,'true') in case apply 'icrt_clauses'/3 (_1,_3,_8) of <{Csvt1,St3}> when 'true' -> let <Csvt> = call 'erlang':'++' (Csvt0,Csvt1) in let <UpdVt> = apply 'icrt_export'/4 (Csvt,_3,_2,St3) in case St3 of <{'lint',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' -> let <_15> = call 'erlang':'setelement' (33,St3,'false') in {UpdVt,_15}
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'icrt_clauses'/4 = fun (_0,_1,_2,_3) -> case apply 'icrt_clauses'/3 (_0,_2,_3) of <{Csvt,St1}> when 'true' -> let <UpdVt> = apply 'icrt_export'/4 (Csvt,_2,_1,St1) in {UpdVt,St1}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'icrt_clauses'/3 = fun (_0,_1,_2) -> let <_7> = fun (_4,_3) -> apply 'icrt_clause'/3 (_4,_1,_3) in call 'lists':'mapfoldl' (_7,_2,_0)
'icrt_clause'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' -> let <Vt1> = apply 'taint_stack_var'/3 (Vt0,H,St0) in case apply 'head'/3 (H,Vt1,St0) of <{Hvt,Binvt,St1}> when 'true' -> let <Vt2> = apply 'vtupdate'/2 (Hvt,Binvt) in let <Vt3> = apply 'taint_stack_var'/3 (Vt2,H,St0) in let <_10> = apply 'vtupdate'/2 (Vt3,Vt0) in case St1 of <{'lint',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}> when 'true' -> let <_9> = call 'erlang':'setelement' (33,St1,'false') in case apply 'guard'/3 (G,_10,_9) of <{Gvt,St2}> when 'true' -> let <Vt4> = apply 'vtupdate'/2 (Gvt,Vt2) in let <_13> = apply 'vtupdate'/2 (Vt4,Vt0) in case apply 'exprs'/3 (B,_13,St2) of <{Bvt,St3}> when 'true' -> let <_15> = apply 'vtupdate'/2 (Bvt,Vt4) in {_15,St3}
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16})-|[{'function_name',{'icrt_clause',3}}] )-|['compiler_generated'] ) end
'taint_stack_var'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Vt,Pat,{'lint',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,'true',_42,_43}> when 'true' -> case Pat of <[{'tuple',_44,[_45|[_46|[{'var',_47,Stk}|[]]]]}|[]]> when 'true' -> case Stk of <'_'> when 'true' -> Vt
<_48> when 'true' -> let <_6> = fun (_4) -> case _4 of <{V,{'bound',Used,Lines}}> when call 'erlang':'=:=' (V,Stk) -> {V,{'stacktrace',Used,Lines}}
<B> when 'true' -> B end in call 'lists':'map' (_6,Vt) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<Vt,_X_Pat,{'lint',_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,'false',_80,_81}> when 'true' -> Vt
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'taint_stack_var',3}}] )-|['compiler_generated'] ) end
'icrt_export'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Vts,Vt,{Tag,Attrs},St> when 'true' -> case apply 'loc'/2 (Attrs,St) of <{_X_File,Loc}> when 'true' -> let <_6> = call 'lists':'merge' (Vts) in let <_5> = call 'erlang':'length' (Vts) in apply 'icrt_export'/5 (_6,Vt,{Tag,Loc},_5,[])
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|[{'function_name',{'icrt_export',4}}] )-|['compiler_generated'] ) end
'icrt_export'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[{V,{{'export',_47},_48,_49}}|Vs0],[{_50,{S0 = {'export',_51},_52,Ls}}|Vt],In,I,Acc> when call 'erlang':'=:=' (_50,V) -> let <_7> = fun (_5) -> case _5 of <{K,_53}> when 'true' -> call 'erlang':'=:=' (K,V)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-icrt_export/5-fun-0-',1}}] )-|['compiler_generated'] ) end in case call 'lists':'partition' (_7,Vs0) of <{VVs,Vs}> when 'true' -> let <_13> = fun (_10,_9) -> case <_10,_9> of <{_54,{S1,_55,_56}},AccS> when 'true' -> apply 'merge_state'/2 (AccS,S1)
(<_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11})-|[{'function_name',{'-icrt_export/5-fun-1-',2}}] )-|['compiler_generated'] ) end in let <S> = call 'lists':'foldl' (_13,S0,VVs) in apply 'icrt_export'/5 (Vs,Vt,In,I,[{V,{S,'used',Ls}}|Acc])
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<[{V,_57}|Vs0],[{_58,{_59,_60,Ls}}|Vt],In,I,Acc> when call 'erlang':'=:=' (_58,V) -> let <_17> = fun (_15) -> case _15 of <{K,_61}> when 'true' -> call 'erlang':'=:=' (K,V)
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'-icrt_export/5-fun-2-',1}}] )-|['compiler_generated'] ) end in let <Vs> = call 'lists':'dropwhile' (_17,Vs0) in apply 'icrt_export'/5 (Vs,Vt,In,I,[{V,{'bound','used',Ls}}|Acc])
<Vs = [{V1,_62}|_63],[{V2,_64}|Vt],In,I,Acc> when call 'erlang':'>' (V1,V2) -> apply 'icrt_export'/5 (Vs,Vt,In,I,Acc)
<Vs0 = [{V,_65}|_66],Vt,In,I,Acc> when 'true' -> let <_21> = fun (_19) -> case _19 of <{K,_67}> when 'true' -> call 'erlang':'=:=' (K,V)
(<_20> when 'true' -> (primop 'match_fail' ({'function_clause',_20})-|[{'function_name',{'-icrt_export/5-fun-3-',1}}] )-|['compiler_generated'] ) end in case call 'lists':'partition' (_21,Vs0) of <{VVs,Vs}> when 'true' -> let <F> = fun (_31,_30) -> case <_31,_30> of <{_68,{S,U,Ls}},{AccI,AccS0,AccLs0}> when 'true' -> let <_24> = case <S,AccS0> of <({('unsafe'-|['compiler_generated'] ),_69}-|['compiler_generated'] ),({('unsafe'-|['compiler_generated'] ),_70}-|['compiler_generated'] )> when 'true' -> {'unsafe',In}
<({('unsafe'-|['compiler_generated'] ),_71}-|['compiler_generated'] ),_72> when 'true' -> S
<(_80-|['compiler_generated'] ),(_81-|['compiler_generated'] )> when 'true' -> AccS0 end in let <_27> = case U of <'used'> when 'true' -> AccLs0
<'unused'> when 'true' -> apply 'merge_lines'/2 (AccLs0,Ls)
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end in let <_29> = call 'erlang':'+' (AccI,1) in {_29,_24,_27}
(<_33,_32> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32})-|[{'function_name',{'-icrt_export/5-fun-4-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (F,{0,{'export',In},[]},VVs) of <{Count,S1,Ls}> when 'true' -> let <_37> = case Count of <_74> when call 'erlang':'=:=' (Count,I) -> S1
<_75> when 'true' -> {'unsafe',In} end in let <_40> = case Ls of <[]> when 'true' -> 'used'
<_76> when 'true' -> 'unused' end in apply 'icrt_export'/5 (Vs,Vt,In,I,[{V,{_37,_40,Ls}}|Acc])
(<_35> when 'true' -> primop 'match_fail' ({'badmatch',_35})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
<[],_77,_78,_79,Acc> when 'true' -> call 'lists':'reverse' (Acc)
(<_46,_45,_44,_43,_42> when 'true' -> (primop 'match_fail' ({'function_clause',_46,_45,_44,_43,_42})-|[{'function_name',{'icrt_export',5}}] )-|['compiler_generated'] ) end
'handle_comprehension'/4 = fun (_0,_1,_2,_3) -> case apply 'lc_quals'/3 (_1,_2,_3) of <{Vt1,Uvt,St1}> when 'true' -> case apply 'expr'/3 (_0,Vt1,St1) of <{Evt,St2}> when 'true' -> let <Vt2> = apply 'vtupdate'/2 (Evt,Vt1) in case apply 'check_old_unused_vars'/3 (Vt2,Uvt,St2) of <{_19,St3}> when 'true' -> case apply 'check_unused_vars'/3 (Uvt,_2,St3) of <{_20,St4}> when 'true' -> case apply 'check_unused_vars'/3 (Vt2,_2,St4) of <{_21,St}> when 'true' -> let <_10> = apply 'vtsubtract'/2 (Vt2,Uvt) in let <Vt3> = apply 'vtmerge'/2 (_10,Uvt) in let <Vt4> = apply 'vtold'/2 (Vt3,_2) in let <_13> = apply 'vt_no_unused'/1 (Vt4) in let <Vt> = apply 'vt_no_unsafe'/1 (_13) in {Vt,St}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'lc_quals'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_rec154,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48}-|['compiler_generated'] )> when 'true' -> case _2 of <{'lint',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83}> when 'true' -> let <_8> = call 'erlang':'setelement' (24,_2,'false') in case apply 'lc_quals'/4 (_0,_1,[],_8) of <{Vt,Uvt,St}> when 'true' -> case St of <{'lint',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}> when 'true' -> let <_12> = call 'erlang':'setelement' (24,St,_rec154) in {Vt,Uvt,_12}
(<_119> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_84> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'lc_quals'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{'generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' -> case apply 'handle_generator'/5 (P,E,Vt0,Uvt0,St0) of <{Vt,Uvt,St}> when 'true' -> apply 'lc_quals'/4 (Qs,Vt,Uvt,St)
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<[{'b_generate',_X_Line,P,E}|Qs],Vt0,Uvt0,St0> when 'true' -> let <St1> = apply 'handle_bitstring_gen_pat'/2 (P,St0) in case apply 'handle_generator'/5 (P,E,Vt0,Uvt0,St1) of <{Vt,Uvt,St}> when 'true' -> apply 'lc_quals'/4 (Qs,Vt,Uvt,St)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[F|Qs],Vt,Uvt,St0> when 'true' -> let <Info> = apply 'is_guard_test2_info'/1 (St0) in let <_9> = case apply 'is_guard_test2'/2 (F,Info) of <'true'> when 'true' -> apply 'guard_test'/3 (F,Vt,St0)
<'false'> when 'true' -> apply 'expr'/3 (F,Vt,St0)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in case _9 of <{Fvt,St1}> when 'true' -> let <_11> = apply 'vtupdate'/2 (Fvt,Vt) in apply 'lc_quals'/4 (Qs,_11,Uvt,St1)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<[],Vt,Uvt,St> when 'true' -> {Vt,Uvt,St}
(<_15,_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12})-|[{'function_name',{'lc_quals',4}}] )-|['compiler_generated'] ) end
'is_guard_test2_info'/1 = fun (_0) -> case _0 of <{'lint',_7,_8,_9,_10,Imports,_11,RDs,Locals,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}> when 'true' -> let <_5> = fun (_3) -> (case apply 'is_local_function'/2 (Locals,_3) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> apply 'is_imported_function'/2 (Imports,_3)-|['compiler_generated'] )
(<_1> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_1}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in {RDs,_5}
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'is_guard_test2_info',1}}] )-|['compiler_generated'] ) end
'handle_generator'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'expr'/3 (_1,_2,_4) of <{Evt,St1}> when 'true' -> let <_6> = apply 'vtold'/2 (Evt,_2) in let <Vt1> = apply 'vtupdate'/2 (_6,_2) in case apply 'check_unused_vars'/3 (Evt,_2,St1) of <{_23,St2}> when 'true' -> case apply 'pattern'/5 (_0,Vt1,[],[],St2) of <{Pvt,Binvt,St3}> when 'true' -> let <Vt2> = apply 'vtupdate'/2 (Pvt,Vt1) in let <St4> = apply 'shadow_vars'/4 (Binvt,Vt1,'generate',St3) in let <Svt> = apply 'vtold'/2 (Vt2,Binvt) in case apply 'check_old_unused_vars'/3 (Svt,_3,St4) of <{_24,St5}> when 'true' -> let <_14> = apply 'vtnew'/2 (Svt,_3) in let <NUvt> = apply 'vtupdate'/2 (_14,_3) in let <_16> = apply 'vtsubtract'/2 (Vt2,Binvt) in let <Vt3> = apply 'vtupdate'/2 (_16,Binvt) in {Vt3,NUvt,St5}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'handle_bitstring_gen_pat'/2 = fun (_0,_1) -> case <_0,_1> of <{'bin',_13,Segments = [_14|_15]},St> when 'true' -> case call 'lists':'last' (Segments) of <{'bin_element',Line,_16,'default',Flags}> when call 'erlang':'is_list' (Flags) -> let <_8> = case call 'lists':'member' ('binary',Flags) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'lists':'member' ('bytes',Flags) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> (case call 'lists':'member' ('bits',Flags) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'lists':'member' ('bitstring',Flags)-|['compiler_generated'] )
(<_4> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_2> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_2}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _8 of <'true'> when 'true' -> apply 'add_error'/3 (Line,'unsized_binary_in_bin_gen_pattern',St)
<'false'> when 'true' -> St
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<_17> when 'true' -> St end
<_18,St> when 'true' -> St end
'fun_clauses'/3 = fun (_0,_1,_2) -> (case _2 of (<({'lint',_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec157,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}-|['compiler_generated'] )> when 'true' -> let <_15> = fun (_12,_11) -> case <_12,_11> of <C,{Bvt0,St0}> when 'true' -> case apply 'fun_clause'/3 (C,_1,St0) of <{Cvt,St1}> when 'true' -> let <_10> = apply 'vtmerge'/2 (Cvt,Bvt0) in {_10,St1}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'-fun_clauses/3-fun-0-',2}}] )-|['compiler_generated'] ) end in case _2 of <{'lint',_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}> when 'true' -> let <_8> = call 'erlang':'setelement' (24,_2,'false') in case call 'lists':'foldl' (_15,{[],_8},_0) of <{Bvt,St2}> when 'true' -> let <_17> = apply 'vtold'/2 (Bvt,_1) in let <_18> = apply 'vt_no_unused'/1 (_17) in let <Uvt> = apply 'vt_no_unsafe'/1 (_18) in case St2 of <{'lint',_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128}> when 'true' -> let <_22> = call 'erlang':'setelement' (24,St2,_rec157) in {Uvt,_22}
(<_129> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fun_clause'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'clause',_X_Line,H,G,B},Vt0,St0> when 'true' -> case apply 'head'/4 (H,Vt0,[],St0) of <{Hvt,Binvt,St1}> when 'true' -> let <Vt1> = apply 'vtupdate'/2 (Hvt,Vt0) in let <St2> = apply 'shadow_vars'/4 (Binvt,Vt0,'fun',St1) in let <_6> = apply 'vtsubtract'/2 (Vt1,Binvt) in let <Vt2> = apply 'vtupdate'/2 (_6,Binvt) in case apply 'guard'/3 (G,Vt2,St2) of <{Gvt,St3}> when 'true' -> let <Vt3> = apply 'vtupdate'/2 (Gvt,Vt2) in case apply 'exprs'/3 (B,Vt3,St3) of <{Bvt,St4}> when 'true' -> let <Cvt> = apply 'vtupdate'/2 (Bvt,Vt3) in case apply 'check_unused_vars'/3 (Cvt,Vt0,St4) of <{_21,St5}> when 'true' -> let <Svt> = apply 'vtold'/2 (Vt1,Binvt) in case apply 'check_old_unused_vars'/3 (Cvt,Svt,St5) of <{_22,St6}> when 'true' -> let <_15> = apply 'vtsubtract'/2 (Cvt,Svt) in let <Vt4> = apply 'vtmerge'/2 (Svt,_15) in let <_17> = apply 'vtold'/2 (Vt4,Vt0) in {_17,St6}
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18})-|[{'function_name',{'fun_clause',3}}] )-|['compiler_generated'] ) end
'pat_var'/5 = fun (_0,_1,_2,_3,_4) -> case call 'orddict':'find' (_0,_3) of <{'ok',{'bound',_X_Usage,Ls}}> when 'true' -> {[],[{_0,{'bound','used',Ls}}|[]],_4}
<'error'> when 'true' -> case call 'orddict':'find' (_0,_2) of <{'ok',{'bound',_X_Usage,Ls}}> when 'true' -> {[{_0,{'bound','used',Ls}}|[]],[],_4}
<{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' -> let <_5> = apply 'add_error'/3 (_1,{'unsafe_var',_0,In},_4) in {[{_0,{'bound','used',Ls}}|[]],[],_5}
<{'ok',{{'export',From},_X_Usage,Ls}}> when 'true' -> let <_6> = apply 'add_warning'/3 (_1,{'exported_var',_0,From},_4) in {[{_0,{'bound','used',Ls}}|[]],[],_6}
<{'ok',{'stacktrace',_X_Usage,Ls}}> when 'true' -> let <_7> = apply 'add_error'/3 (_1,{'stacktrace_bound',_0},_4) in {[{_0,{'bound','used',Ls}}|[]],[],_7}
<'error'> when (try (let <_10> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_4,('lint'-|['compiler_generated'] ),(35-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_8-|['compiler_generated'] )> when 'true' -> (_8-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'element' (24,_4) in let <_13> = call 'erlang':'=:=' (_12,'true') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_13)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_14> = apply 'add_error'/3 (_1,{'variable_in_record_def',_0},_4) in {[],[{_0,{'bound','unused',[_1|[]]}}|[]],_14}
<'error'> when 'true' -> {[],[{_0,{'bound','unused',[_1|[]]}}|[]],_4}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
'pat_binsize_var'/5 = fun (_0,_1,_2,_3,_4) -> case call 'orddict':'find' (_0,_3) of <{'ok',{'bound',_X_Used,Ls}}> when 'true' -> {[],[{_0,{'bound','used',Ls}}|[]],_4}
<'error'> when 'true' -> case call 'orddict':'find' (_0,_2) of <{'ok',{'bound',_X_Used,Ls}}> when 'true' -> {[{_0,{'bound','used',Ls}}|[]],[],_4}
<{'ok',{{'unsafe',In},_X_Used,Ls}}> when 'true' -> let <_5> = apply 'add_error'/3 (_1,{'unsafe_var',_0,In},_4) in {[{_0,{'bound','used',Ls}}|[]],[],_5}
<{'ok',{{'export',From},_X_Used,Ls}}> when 'true' -> let <_6> = apply 'exported_var'/4 (_1,_0,From,_4) in {[{_0,{'bound','used',Ls}}|[]],[],_6}
<'error'> when 'true' -> let <_7> = apply 'add_error'/3 (_1,{'unbound_var',_0},_4) in {[{_0,{'bound','used',[_1|[]]}}|[]],[],_7}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'expr_var'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <V,Line,Vt,St = {'lint',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,'none',_45}> when 'true' -> apply 'do_expr_var'/4 (V,Line,Vt,St)
<V,Line,Vt0,St0 = {'lint',_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,Bvt0,_78}> when call 'erlang':'is_list' (Bvt0) -> case apply 'pat_binsize_var'/5 (V,Line,Vt0,Bvt0,St0) of <{Vt,Bvt,St}> when 'true' -> let <_rec160> = apply 'vtmerge'/2 (Bvt0,Bvt) in case St of <{'lint',_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}> when 'true' -> let <_8> = call 'erlang':'setelement' (34,St,_rec160) in {Vt,_8}
(<_113> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9})-|[{'function_name',{'expr_var',4}}] )-|['compiler_generated'] ) end
'do_expr_var'/4 = fun (_0,_1,_2,_3) -> case call 'orddict':'find' (_0,_2) of <{'ok',{'bound',_X_Usage,Ls}}> when 'true' -> {[{_0,{'bound','used',Ls}}|[]],_3}
<{'ok',{{'unsafe',In},_X_Usage,Ls}}> when 'true' -> let <_4> = apply 'add_error'/3 (_1,{'unsafe_var',_0,In},_3) in {[{_0,{'bound','used',Ls}}|[]],_4}
<{'ok',{_@r0 = {'export',From},_X_Usage,Ls}}> when 'true' -> case apply 'is_warn_enabled'/2 ('export_vars',_3) of <'true'> when 'true' -> let <_5> = apply 'add_warning'/3 (_1,{'exported_var',_0,From},_3) in {[{_0,{'bound','used',Ls}}|[]],_5}
<'false'> when 'true' -> {[{_0,{_@r0,'used',Ls}}|[]],_3}
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<{'ok',{'stacktrace',_X_Usage,Ls}}> when 'true' -> let <_7> = apply 'add_error'/3 (_1,{'stacktrace_guard',_0},_3) in {[{_0,{'bound','used',Ls}}|[]],_7}
<'error'> when 'true' -> let <_8> = apply 'add_error'/3 (_1,{'unbound_var',_0},_3) in {[{_0,{'bound','used',[_1|[]]}}|[]],_8}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'exported_var'/4 = fun (_0,_1,_2,_3) -> case apply 'is_warn_enabled'/2 ('export_vars',_3) of <'true'> when 'true' -> apply 'add_warning'/3 (_0,{'exported_var',_1,_2},_3)
<'false'> when 'true' -> _3
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'shadow_vars'/4 = fun (_0,_1,_2,_3) -> case apply 'is_warn_enabled'/2 ('shadow_vars',_3) of <'true'> when 'true' -> let <_10> = fun (_7,_6) -> case <_7,_6> of <{V,{_16,_17,[L|_18]}},St> when 'true' -> apply 'add_warning'/3 (L,{'shadowed_var',V,_2},St)
<_19,St> when 'true' -> St end in let <_4> = apply 'vt_no_unsafe'/1 (_1) in let <_5> = apply 'vtold'/2 (_0,_4) in call 'lists':'foldl' (_10,_3,_5)
<'false'> when 'true' -> _3
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'check_unused_vars'/3 = fun (_0,_1,_2) -> let <U> = apply 'unused_vars'/3 (_0,_1,_2) in apply 'warn_unused_vars'/3 (U,_0,_2)
'check_old_unused_vars'/3 = fun (_0,_1,_2) -> let <_3> = apply 'vtold'/2 (_0,_1) in let <U> = apply 'unused_vars'/3 (_3,[],_2) in apply 'warn_unused_vars'/3 (U,_0,_2)
'unused_vars'/3 = fun (_0,_1,_2) -> let <_8> = fun (_5,_4) -> case <_5,_4> of <V,{_X_State,'unused',_X_Ls}> when 'true' -> case call 'erlang':'atom_to_list' (V) of <[95|_13]> when 'true' -> 'false'
<_14> when 'true' -> 'true' end
<_X_V,_X_How> when 'true' -> 'false' end in let <U0> = call 'orddict':'filter' (_8,_0) in apply 'vtnew'/2 (U0,_1)
'warn_unused_vars'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],Vt,St0> when 'true' -> {Vt,St0}
<U,Vt,St0> when 'true' -> let <_14> = case apply 'is_warn_enabled'/2 ('unused_vars',St0) of <'false'> when 'true' -> St0
<'true'> when 'true' -> let <_12> = fun (_9,_8) -> case <_9,_8> of <{V,{_24,'unused',Ls}},St> when 'true' -> let <_7> = fun (_4,_3) -> apply 'add_warning'/3 (_4,{'unused_var',V},_3) in call 'lists':'foldl' (_7,St,Ls)
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'-warn_unused_vars/3-fun-1-',2}}] )-|['compiler_generated'] ) end in call 'lists':'foldl' (_12,St0,U)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end in let <_18> = fun (_16) -> case _16 of <{V,{State,_25,Ls}}> when 'true' -> {V,{State,'used',Ls}}
(<_17> when 'true' -> (primop 'match_fail' ({'function_clause',_17})-|[{'function_name',{'-warn_unused_vars/3-fun-2-',1}}] )-|['compiler_generated'] ) end in let <UVt> = call 'lists':'map' (_18,U) in let <_20> = apply 'vtmerge'/2 (Vt,UVt) in {_20,_14} end
'is_var_bound'/2 = fun (_0,_1) -> case call 'orddict':'find' (_0,_1) of <{'ok',{'bound',_X_Usage,_5}}> when 'true' -> 'true'
<_6> when 'true' -> 'false' end
'vtupdate'/2 = fun (_0,_1) -> let <_10> = fun (_6,_5,_4) -> case <_6,_5,_4> of <_X_V,{S,U1,L1},{_X_S,U2,L2}> when 'true' -> let <_3> = apply 'merge_used'/2 (U1,U2) in let <_2> = apply 'merge_lines'/2 (L1,L2) in {S,_3,_2}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'-vtupdate/2-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'orddict':'merge' (_10,_0,_1)
'vtunsafe'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{Tag,FileLine},Uvt,Vt> when 'true' -> let <Line> = call 'erl_anno':'location' (FileLine) in (letrec 'lc$^0'/1 = fun (_7) -> case _7 of <[{V,{_12,U,Ls}}|_5]> when 'true' -> let <_8> = apply 'lc$^0'/1 (_5) in ([{V,{{'unsafe',{Tag,Line}},U,Ls}}|_8]-|['compiler_generated'] )
(<[_4|_5]> when 'true' -> apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_13> when 'true' -> (primop 'match_fail' ({'function_clause',_13})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in let <_6> = apply 'vtnew'/2 (Uvt,Vt) in apply 'lc$^0'/1 (_6)-|['list_comprehension'] )
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'vtunsafe',3}}] )-|['compiler_generated'] ) end
'vtmerge'/2 = fun (_0,_1) -> let <_11> = fun (_7,_6,_5) -> case <_7,_6,_5> of <_X_V,{S1,U1,L1},{S2,U2,L2}> when 'true' -> let <_4> = apply 'merge_state'/2 (S1,S2) in let <_3> = apply 'merge_used'/2 (U1,U2) in let <_2> = apply 'merge_lines'/2 (L1,L2) in {_4,_3,_2}
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'-vtmerge/2-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'orddict':'merge' (_11,_0,_1)
'vtmerge'/1 = fun (_0) -> let <_5> = fun (_2,_1) -> apply 'vtmerge'/2 (_2,_1) in call 'lists':'foldl' (_5,[],_0)
'vtmerge_pat'/2 = fun (_0,_1) -> let <_10> = fun (_6,_5,_4) -> case <_6,_5,_4> of <_X_V,{S1,_X_Usage1,L1},{S2,_X_Usage2,L2}> when 'true' -> let <_3> = apply 'merge_state'/2 (S1,S2) in let <_2> = apply 'merge_lines'/2 (L1,L2) in {_3,'used',_2}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'-vtmerge_pat/2-fun-0-',3}}] )-|['compiler_generated'] ) end in call 'orddict':'merge' (_10,_0,_1)
'merge_lines'/2 = fun (_0,_1) -> call 'ordsets':'union' (_0,_1)
'merge_state'/2 = fun (_0,_1) -> case <_0,_1> of <S1 = {'unsafe',_X_F1},_X_S2> when 'true' -> S1
<_X_S1,S2 = {'unsafe',_X_F2}> when 'true' -> S2
<'bound',S2> when 'true' -> S2
<S1,'bound'> when 'true' -> S1
<_@r0 = {'export',F1},{'export',_X_F2}> when 'true' -> _@r0
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'merge_state',2}}] )-|['compiler_generated'] ) end
'merge_used'/2 = fun (_0,_1) -> case <_0,_1> of <'used',_X_Usage2> when 'true' -> 'used'
<_X_Usage1,'used'> when 'true' -> 'used'
<'unused','unused'> when 'true' -> 'unused'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'merge_used',2}}] )-|['compiler_generated'] ) end
'vtnew'/2 = fun (_0,_1) -> let <_7> = fun (_4,_3) -> let <_2> = call 'orddict':'is_key' (_4,_1) in call 'erlang':'not' (_2) in call 'orddict':'filter' (_7,_0)
'vtsubtract'/2 = fun (_0,_1) -> apply 'vtnew'/2 (_0,_1)
'vtold'/2 = fun (_0,_1) -> let <_6> = fun (_3,_2) -> call 'orddict':'is_key' (_3,_1) in call 'orddict':'filter' (_6,_0)
'vt_no_unsafe'/1 = fun (_0) -> (letrec 'lc$^0'/1 = fun (_5) -> case _5 of <[V = {_9,{S,_X_U,_X_L}}|_2]> when 'true' -> let <_4> = case S of <{'unsafe',_10}> when 'true' -> 'false'
<_11> when 'true' -> 'true' end in (case _4 of <'true'> when 'true' -> let <_6> = apply 'lc$^0'/1 (_2) in ([V|_6]-|['compiler_generated'] )
(<'false'> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end-|['list_comprehension'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0)-|['list_comprehension'] )
'vt_no_unused'/1 = fun (_0) -> (letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[V = {_6,{_7,U,_X_L}}|_2]> when call 'erlang':'=/=' (U,'unused') -> let <_4> = apply 'lc$^0'/1 (_2) in ([V|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0)-|['list_comprehension'] )
'copy_expr'/2 = fun (_0,_1) -> let <_4> = fun (_2) -> _1 in call 'erl_parse':'map_anno' (_4,_0)
'check_record_info_call'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_Line,La,[{'atom',Li,Info}|[{'atom',_X_Ln,Name}|[]]],St> when 'true' -> case call 'lists':'member' (Info,['fields'|['size']]) of <'true'> when 'true' -> apply 'exist_record'/3 (La,Name,St)
<'false'> when 'true' -> apply 'add_error'/3 (Li,'illegal_record_info',St)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<Line,_X_La,_X_As,St> when 'true' -> apply 'add_error'/3 (Line,'illegal_record_info',St) end
'has_wildcard_field'/1 = fun (_0) -> case _0 of <[{'record_field',_X_Lf,{'var',_X_La,'_'},_X_Val}|_X_Fs]> when 'true' -> 'true'
<[_2|Fs]> when 'true' -> apply 'has_wildcard_field'/1 (Fs)
<[]> when 'true' -> 'false'
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'has_wildcard_field',1}}] )-|['compiler_generated'] ) end
'check_remote_function'/5 = fun (_0,_1,_2,_3,_4) -> let <St1> = apply 'deprecated_function'/5 (_0,_1,_2,_3,_4) in let <St2> = apply 'check_qlc_hrl'/5 (_0,_1,_2,_3,St1) in apply 'format_function'/5 (_0,_1,_2,_3,St2)
'check_qlc_hrl'/5 = fun (_0,_1,_2,_3,_4) -> let <Arity> = call 'erlang':'length' (_3) in case _3 of <[{'lc',_X_L,_X_E,_X_Qs}|_29]> when try let <_6> = call 'erlang':'=:=' (_1,'qlc') in let <_7> = call 'erlang':'=:=' (_2,'q') in let <_8> = call 'erlang':'<' (Arity,3) in (let <_11> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_4,('lint'-|['compiler_generated'] ),(35-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_9-|['compiler_generated'] )> when 'true' -> (_9-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_12> = call 'erlang':'=:=' ((_11-|['compiler_generated'] ),'true') in let <_13> = call 'erlang':'element' (25,_4) in let <_14> = call 'erlang':'=:=' (_13,'true') in let <_15> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_12,_14) in let <_16> = call 'erlang':'not' (_15) in let <_17> = call 'erlang':'and' (_8,_16) in let <_18> = call 'erlang':'and' (_7,_17) in let <_19> = call 'erlang':'and' (_6,_18) in let <_20> = call 'erlang':'is_boolean' (_13) in let <_21> = call 'erlang':'and' (_19,_20) in let <_22> = call 'erlang':'is_boolean' (_11) in (call 'erlang':'and' (_21,_22)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'add_warning'/3 (_0,{'missing_qlc_hrl',Arity},_4)
<_30> when 'true' -> _4 end
'deprecated_function'/5 = fun (_0,_1,_2,_3,_4) -> let <Arity> = call 'erlang':'length' (_3) in let <MFA> = {_1,_2,Arity} in case call 'otp_internal':'obsolete' (_1,_2,Arity) of <{'deprecated',String}> when call 'erlang':'is_list' (String) -> let <_8> = apply 'is_warn_enabled'/2 ('deprecated_function',_4) in let <_12> = case _8 of (<'false'> when 'true' -> 'true'-|['compiler_generated'] )
(<'true'> when 'true' -> (case _4 of (<({'lint',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_rec162,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59}-|['compiler_generated'] )> when 'true' -> call 'ordsets':'is_element' (MFA,_rec162)-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in case _12 of <'true'> when 'true' -> _4
<'false'> when 'true' -> apply 'add_warning'/3 (_0,{'deprecated',MFA,String},_4)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
<{'deprecated',Replacement,Rel}> when 'true' -> let <_15> = apply 'is_warn_enabled'/2 ('deprecated_function',_4) in let <_19> = case _15 of (<'false'> when 'true' -> 'true'-|['compiler_generated'] )
(<'true'> when 'true' -> (case _4 of (<({'lint',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_rec163,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> call 'ordsets':'is_element' (MFA,_rec163)-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in case _19 of <'true'> when 'true' -> _4
<'false'> when 'true' -> apply 'add_warning'/3 (_0,{'deprecated',MFA,Replacement,Rel},_4)
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end
<{'removed',String}> when call 'erlang':'is_list' (String) -> apply 'add_removed_warning'/4 (_0,MFA,{'removed',MFA,String},_4)
<{'removed',Replacement,Rel}> when 'true' -> apply 'add_removed_warning'/4 (_0,MFA,{'removed',MFA,Replacement,Rel},_4)
<'no'> when 'true' -> _4
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
'add_removed_warning'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,MFA = {M,_16,_17},Warning,St = {'lint',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,NotRemoved,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50}> when 'true' -> let <_10> = case apply 'is_warn_enabled'/2 ('removed',St) of (<('true'-|['compiler_generated'] )> when 'true' -> (case call 'gb_sets':'is_element' (M,NotRemoved) of (<'false'> when 'true' -> let <_7> = call 'gb_sets':'is_element' (MFA,NotRemoved) in call 'erlang':'not' (_7)-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_4> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _10 of <'true'> when 'true' -> apply 'add_warning'/3 (Line,Warning,St)
<'false'> when 'true' -> St
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_15,_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12})-|[{'function_name',{'add_removed_warning',4}}] )-|['compiler_generated'] ) end
'deprecated_type'/5 = fun (_0,_1,_2,_3,_4) -> let <NAs> = call 'erlang':'length' (_3) in case call 'otp_internal':'obsolete_type' (_1,_2,NAs) of <{'deprecated',String}> when call 'erlang':'is_list' (String) -> case apply 'is_warn_enabled'/2 ('deprecated_type',_4) of <'true'> when 'true' -> apply 'add_warning'/3 (_0,{'deprecated_type',{_1,_2,NAs},String},_4)
<'false'> when 'true' -> _4
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<{'removed',String}> when 'true' -> apply 'add_warning'/3 (_0,{'removed_type',{_1,_2,NAs},String},_4)
<'no'> when 'true' -> _4
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'obsolete_guard'/2 = fun (_0,_1) -> case <_0,_1> of <{'call',Line,{'atom',Lr,F},As},St0> when 'true' -> let <Arity> = call 'erlang':'length' (As) in case call 'erl_internal':'old_type_test' (F,Arity) of <'false'> when 'true' -> apply 'deprecated_function'/5 (Line,'erlang',F,As,St0)
<'true'> when 'true' -> let <_4> = case apply 'is_warn_enabled'/2 ('obsolete_guard',St0) of <'true'> when 'true' -> apply 'add_warning'/3 (Lr,{'obsolete_guard',{F,Arity}},St0)
<'false'> when 'true' -> St0
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end in apply 'test_overriden_by_local'/4 (Lr,F,Arity,_4)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<_X_G,St> when 'true' -> St end
'test_overriden_by_local'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'atom_to_list' (_1) in let <_5> = [105|[115|[95|_4]]] in let <ModernTest> = call 'erlang':'list_to_atom' (_5) in (case _3 of (<({'lint',_14,_15,_16,_17,_18,_19,_20,_rec164,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}-|['compiler_generated'] )> when 'true' -> case apply 'is_local_function'/2 (_rec164,{ModernTest,_2}) of <'true'> when 'true' -> apply 'add_error'/3 (_0,{'obsolete_guard_overridden',_1},_3)
<'false'> when 'true' -> _3
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'keyword_warning'/3 = fun (_0,_1,_2) -> _2
'format_function'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'is_format_function'/2 (_1,_2) of <'true'> when 'true' -> (case _4 of (<({'lint',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec165,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> case _rec165 of <Lev> when call 'erlang':'>' (_rec165,0) -> case apply 'check_format_1'/1 (_3) of <{'warn',Level,Fmt,Fas}> when call 'erlang':'=<' (Level,Lev) -> apply 'add_warning'/3 (_0,{'format_error',{Fmt,Fas}},_4)
<_49> when 'true' -> _4 end
<_X_Lev> when 'true' -> _4 end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> _4
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'is_format_function'/2 = fun (_0,_1) -> case <_0,_1> of <'io','fwrite'> when 'true' -> 'true'
<'io','format'> when 'true' -> 'true'
<'io_lib','fwrite'> when 'true' -> 'true'
<'io_lib','format'> when 'true' -> 'true'
<M,F> when let <_2> = call 'erlang':'is_atom' (M) in let <_3> = call 'erlang':'is_atom' (F) in call 'erlang':'and' (_2,_3) -> 'false'
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'is_format_function',2}}] )-|['compiler_generated'] ) end
'check_format_1'/1 = fun (_0) -> case _0 of <[Fmt|[]]> when 'true' -> apply 'check_format_1'/1 ([Fmt|[{'nil',0}]])
<[Fmt|[As|[]]]> when 'true' -> let <_1> = apply 'canonicalize_string'/1 (As) in apply 'check_format_2'/2 (Fmt,_1)
<[_X_Dev|_@r0 = [Fmt|[As|[]]]]> when 'true' -> apply 'check_format_1'/1 (_@r0)
<_X_As> when 'true' -> {'warn',1,[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108|[32|[119|[105|[116|[104|[32|[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]} end
'canonicalize_string'/1 = fun (_0) -> case _0 of <{'string',Line,Cs}> when 'true' -> let <_5> = fun (_2,_1) -> {'cons',Line,{'integer',Line,_2},_1} in call 'lists':'foldr' (_5,{'nil',Line},Cs)
<Term> when 'true' -> Term end
'check_format_2'/2 = fun (_0,_1) -> case _0 of <{'string',_X_L,S}> when 'true' -> apply 'check_format_2a'/2 (S,_1)
<{'atom',_X_L,A}> when 'true' -> let <_2> = call 'erlang':'atom_to_list' (A) in apply 'check_format_2a'/2 (_2,_1)
<_6> when 'true' -> {'warn',2,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[110|[111|[116|[32|[97|[32|[116|[101|[120|[116|[117|[97|[108|[32|[99|[111|[110|[115|[116|[97|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]} end
'check_format_2a'/2 = fun (_0,_1) -> case apply 'args_list'/1 (_1) of <'true'> when 'true' -> apply 'check_format_3'/2 (_0,_1)
<'false'> when 'true' -> {'warn',1,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
<'maybe'> when 'true' -> {'warn',2,[102|[111|[114|[109|[97|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[112|[101|[114|[104|[97|[112|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'check_format_3'/2 = fun (_0,_1) -> case apply 'check_format_string'/1 (_0) of <{'ok',Need}> when 'true' -> case apply 'args_length'/1 (_1) of <Len> when try let <_2> = call 'erlang':'length' (Need) in call 'erlang':'=:=' (_2,Len) of <Try> -> Try catch <T,R> -> 'false' -> 'ok'
<_X_Len> when 'true' -> {'warn',1,[119|[114|[111|[110|[103|[32|[110|[117|[109|[98|[101|[114|[32|[111|[102|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[105|[110|[32|[102|[111|[114|[109|[97|[116|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]} end
<{'error',S}> when 'true' -> {'warn',1,[102|[111|[114|[109|[97|[116|[32|[115|[116|[114|[105|[110|[103|[32|[105|[110|[118|[97|[108|[105|[100|[32|[40|[126|[116|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]],[S|[]]}
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'args_list'/1 = fun (_0) -> case _0 of <{'cons',_X_L,_X_H,T}> when 'true' -> apply 'args_list'/1 (T)
<{'string',_X_L,_X_Cs}> when 'true' -> 'maybe'
<{'nil',_X_L}> when 'true' -> 'true'
<{'atom',_2,_3}> when 'true' -> 'false'
<{'integer',_4,_5}> when 'true' -> 'false'
<{'float',_6,_7}> when 'true' -> 'false'
<_X_Other> when 'true' -> 'maybe' end
'args_length'/1 = fun (_0) -> case _0 of <{'cons',_X_L,_X_H,T}> when 'true' -> let <_1> = apply 'args_length'/1 (T) in call 'erlang':'+' (1,_1)
<{'nil',_X_L}> when 'true' -> 0
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'args_length',1}}] )-|['compiler_generated'] ) end
'check_format_string'/1 = fun (_0) -> apply 'extract_sequences'/2 (_0,[])
'extract_sequences'/2 = fun (_0,_1) -> case call 'string':'find' (_0,[126]) of <'nomatch'> when 'true' -> let <_2> = call 'lists':'reverse' (_1) in {'ok',_2}
<[126|Fmt1]> when 'true' -> case apply 'extract_sequence'/3 (1,Fmt1,_1) of <{'ok',Need1,Rest}> when 'true' -> apply 'extract_sequences'/2 (Rest,Need1)
<Error> when 'true' -> Error end
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'extract_sequence'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <1,[45|[C|Fmt]],Need> when let <_3> = call 'erlang':'>=' (C,48) in let <_4> = call 'erlang':'=<' (C,57) in call 'erlang':'and' (_3,_4) -> apply 'extract_sequence_digits'/3 (1,Fmt,Need)
<1,[C|Fmt],Need> when let <_5> = call 'erlang':'>=' (C,48) in let <_6> = call 'erlang':'=<' (C,57) in call 'erlang':'and' (_5,_6) -> apply 'extract_sequence_digits'/3 (1,Fmt,Need)
<1,[45|[42|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (2,Fmt,['int'|Need])
<1,[42|Fmt],Need> when 'true' -> apply 'extract_sequence'/3 (2,Fmt,['int'|Need])
<1,Fmt,Need> when 'true' -> apply 'extract_sequence'/3 (2,Fmt,Need)
<2,[46|[C|Fmt]],Need> when let <_7> = call 'erlang':'>=' (C,48) in let <_8> = call 'erlang':'=<' (C,57) in call 'erlang':'and' (_7,_8) -> apply 'extract_sequence_digits'/3 (2,Fmt,Need)
<2,[46|[42|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (3,Fmt,['int'|Need])
<2,[46|Fmt],Need> when 'true' -> apply 'extract_sequence'/3 (3,Fmt,Need)
<2,Fmt,Need> when 'true' -> apply 'extract_sequence'/3 (4,Fmt,Need)
<3,[46|[42|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (4,Fmt,['int'|Need])
<3,[46|[_17|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (4,Fmt,Need)
<3,Fmt,Need> when 'true' -> apply 'extract_sequence'/3 (4,Fmt,Need)
<4,[116|[108|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (4,[108|[116|Fmt]],Need)
<4,[116|_@r0 = [99|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r0,Need)
<4,[116|_@r1 = [115|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r1,Need)
<4,[116|_@r2 = [112|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r2,Need)
<4,[116|_@r3 = [80|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r3,Need)
<4,[116|_@r4 = [119|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r4,Need)
<4,[116|_@r5 = [87|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r5,Need)
<4,[116|[C|_X_Fmt]],_X_Need> when 'true' -> let <_9> = call 'erlang':'++' ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[116]]]]]]]]]]]]]]]]]],[C|[]]) in {'error',_9}
<4,[108|_@r6 = [112|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r6,Need)
<4,[108|[116|_@r7 = [112|Fmt]]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r7,Need)
<4,[108|_@r8 = [80|Fmt]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r8,Need)
<4,[108|[116|_@r9 = [80|Fmt]]],Need> when 'true' -> apply 'extract_sequence'/3 (5,_@r9,Need)
<4,[108|[116|[C|_X_Fmt]]],_X_Need> when 'true' -> let <_10> = call 'erlang':'++' ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[108|[116]]]]]]]]]]]]]]]]]]],[C|[]]) in {'error',_10}
<4,[108|[C|_X_Fmt]],_X_Need> when 'true' -> let <_11> = call 'erlang':'++' ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126|[108]]]]]]]]]]]]]]]]]],[C|[]]) in {'error',_11}
<4,Fmt,Need> when 'true' -> apply 'extract_sequence'/3 (5,Fmt,Need)
<5,[C|Fmt],Need0> when 'true' -> case apply 'control_type'/2 (C,Need0) of <'error'> when 'true' -> let <_12> = call 'erlang':'++' ([105|[110|[118|[97|[108|[105|[100|[32|[99|[111|[110|[116|[114|[111|[108|[32|[126]]]]]]]]]]]]]]]]],[C|[]]) in {'error',_12}
<Need1> when 'true' -> {'ok',Need1,Fmt} end
<_18,[],_X_Need> when 'true' -> {'error',[116|[114|[117|[110|[99|[97|[116|[101|[100]]]]]]]]]}
(<_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14})-|[{'function_name',{'extract_sequence',3}}] )-|['compiler_generated'] ) end
'extract_sequence_digits'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Fld,[C|Fmt],Need> when let <_3> = call 'erlang':'>=' (C,48) in let <_4> = call 'erlang':'=<' (C,57) in call 'erlang':'and' (_3,_4) -> apply 'extract_sequence_digits'/3 (Fld,Fmt,Need)
<Fld,Fmt,Need> when 'true' -> let <_5> = call 'erlang':'+' (Fld,1) in apply 'extract_sequence'/3 (_5,Fmt,Need) end
'control_type'/2 = fun (_0,_1) -> case <_0,_1> of <126,Need> when 'true' -> Need
<99,Need> when 'true' -> ['int'|Need]
<102,Need> when 'true' -> ['float'|Need]
<101,Need> when 'true' -> ['float'|Need]
<103,Need> when 'true' -> ['float'|Need]
<115,Need> when 'true' -> ['string'|Need]
<119,Need> when 'true' -> ['term'|Need]
<112,Need> when 'true' -> ['term'|Need]
<87,Need> when 'true' -> ['int'|['term'|Need]]
<80,Need> when 'true' -> ['int'|['term'|Need]]
<98,Need> when 'true' -> ['term'|Need]
<66,Need> when 'true' -> ['term'|Need]
<120,Need> when 'true' -> ['string'|['term'|Need]]
<88,Need> when 'true' -> ['string'|['term'|Need]]
<43,Need> when 'true' -> ['term'|Need]
<35,Need> when 'true' -> ['term'|Need]
<110,Need> when 'true' -> Need
<105,Need> when 'true' -> ['term'|Need]
<_X_C,_X_Need> when 'true' -> 'error' end
'local_functions'/1 = fun (_0) -> let <_5> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'function',_7,Func,Arity,_8}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([{Func,Arity}|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in call 'gb_sets':'from_list' (_5)
'is_local_function'/2 = fun (_0,_1) -> case <_0,_1> of <LocalSet,_@r0 = {Func,Arity}> when 'true' -> call 'gb_sets':'is_element' (_@r0,LocalSet)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'is_local_function',2}}] )-|['compiler_generated'] ) end
'is_imported_function'/2 = fun (_0,_1) -> case <_0,_1> of <ImportSet,_@r0 = {Func,Arity}> when 'true' -> case call 'orddict':'find' (_@r0,ImportSet) of <{'ok',_X_Mod}> when 'true' -> 'true'
<'error'> when 'true' -> 'false'
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'is_imported_function',2}}] )-|['compiler_generated'] ) end
'is_imported_from_erlang'/2 = fun (_0,_1) -> case <_0,_1> of <ImportSet,_@r0 = {Func,Arity}> when 'true' -> case call 'orddict':'find' (_@r0,ImportSet) of <{'ok','erlang'}> when 'true' -> 'true'
<_5> when 'true' -> 'false' end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'is_imported_from_erlang',2}}] )-|['compiler_generated'] ) end
'auto_import_suppressed'/1 = fun (_0) -> case call 'lists':'member' ('no_auto_import',_0) of <'true'> when 'true' -> 'all'
<'false'> when 'true' -> let <_5> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'no_auto_import',X}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([X|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_18> when 'true' -> (primop 'match_fail' ({'function_clause',_18})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_14> = letrec 'lc$^1'/1 = fun (_12) -> case _12 of <[_@r0 = {Y,Z}|_8]> when let <_9> = call 'erlang':'is_atom' (Y) in let <_10> = call 'erlang':'is_integer' (Z) in call 'erlang':'and' (_9,_10) -> let <_13> = apply 'lc$^1'/1 (_8) in ([_@r0|_13]-|['compiler_generated'] )
(<[_7|_8]> when 'true' -> apply 'lc$^1'/1 (_8)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_19> when 'true' -> (primop 'match_fail' ({'function_clause',_19})-|[{'function_name',{'lc$^1',1}}] )-|['compiler_generated'] ) end in let <_11> = call 'lists':'flatten' (_5) in apply 'lc$^1'/1 (_11) in call 'gb_sets':'from_list' (_14)
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
'is_autoimport_suppressed'/2 = fun (_0,_1) -> case <_0,_1> of <'all',{_X_Func,_X_Arity}> when 'true' -> 'true'
<NoAutoSet,_@r0 = {Func,Arity}> when 'true' -> call 'gb_sets':'is_element' (_@r0,NoAutoSet)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'is_autoimport_suppressed',2}}] )-|['compiler_generated'] ) end
'bif_clash_specifically_disabled'/2 = fun (_0,_1) -> case <_0,_1> of <St,_@r0 = {F,A}> when 'true' -> (case St of (<({'lint',_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_rec166,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> call 'lists':'member' (_@r0,_rec166)-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'bif_clash_specifically_disabled',2}}] )-|['compiler_generated'] ) end
'no_guard_bif_clash'/2 = fun (_0,_1) -> case <_0,_1> of <St,_@r0 = {F,A}> when 'true' -> (case St of (<({'lint',_26,_27,_28,_29,_30,_31,_32,_rec167,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}-|['compiler_generated'] )> when 'true' -> (case apply 'is_local_function'/2 (_rec167,_@r0) of (<'false'> when 'true' -> (case St of (<({'lint',_60,_61,_62,_63,_rec168,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92}-|['compiler_generated'] )> when 'true' -> let <_10> = apply 'is_imported_function'/2 (_rec168,_@r0) in let <_14> = case _10 of (<'false'> when 'true' -> 'true'-|['compiler_generated'] )
(<'true'> when 'true' -> (case St of (<({'lint',_94,_95,_96,_97,_rec169,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}-|['compiler_generated'] )> when 'true' -> apply 'is_imported_from_erlang'/2 (_rec169,_@r0)-|['compiler_generated'] )
(<_127> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end in (case _14 of (<('true'-|['compiler_generated'] )> when 'true' -> (case St of (<({'lint',_128,_129,_130,_131,_132,_133,_134,_135,_rec170,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160}-|['compiler_generated'] )> when 'true' -> (case apply 'is_autoimport_suppressed'/2 (_rec170,_@r0) of (<'false'> when 'true' -> 'true'-|['compiler_generated'] )
(<'true'> when 'true' -> (case St of (<({'lint',_162,_163,_164,_165,_rec171,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194}-|['compiler_generated'] )> when 'true' -> apply 'is_imported_from_erlang'/2 (_rec171,_@r0)-|['compiler_generated'] )
(<_195> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_161> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_6> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_93> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<'true'> when 'true' -> 'false'-|['compiler_generated'] )
(<_cor_variable> when 'true' -> call 'erlang':'error' ('badarg')-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','lint'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_25,_24})-|[{'function_name',{'no_guard_bif_clash',2}}] )-|['compiler_generated'] ) end
'maps_prepend'/3 = fun (_0,_1,_2) -> case call 'maps':'find' (_0,_2) of <{'ok',Values}> when 'true' -> call 'maps':'put' (_0,[_1|Values],_2)
<'error'> when 'true' -> call 'maps':'put' (_0,[_1|[]],_2)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('erl_lint')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('erl_lint',_0) end