module 'timer' ['apply_after'/4,'apply_interval'/4,'cancel'/1,'code_change'/3,'exit_after'/2,'exit_after'/3,'get_status'/0,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'hms'/3,'hours'/1,'init'/1,'kill_after'/1,'kill_after'/2,'minutes'/1,'module_info'/0,'module_info'/1,'now_diff'/2,'seconds'/1,'send_after'/2,'send_after'/3,'send_interval'/2,'send_interval'/3,'sleep'/1,'start'/0,'start_link'/0,'tc'/1,'tc'/2,'tc'/3,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[116|[105|[109|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]],1}]
, 'export_type' = [{'tref',0}]
, 'opaque' = [{'tref',{'type',48,'tuple',[{'type',48,'integer',[]}|[{'type',48,'reference',[]}]]},[]}]
, 'type' = [{'time',{'type',49,'non_neg_integer',[]},[]}]
, 'spec' = [{{'apply_after',4},[{'type',54,'bounded_fun',[{'type',54,'fun',[{'type',54,'product',[{'var',54,'Time'}|[{'var',54,'Module'}|[{'var',54,'Function'}|[{'var',54,'Arguments'}]]]]}|[{'type',55,'union',[{'type',55,'tuple',[{'atom',55,'ok'}|[{'var',55,'TRef'}]]}|[{'type',55,'tuple',[{'atom',55,'error'}|[{'var',55,'Reason'}]]}]]}]]}|[[{'type',56,'constraint',[{'atom',56,'is_subtype'}|[[{'var',56,'Time'}|[{'user_type',56,'time',[]}]]]]}|[{'type',57,'constraint',[{'atom',57,'is_subtype'}|[[{'var',57,'Module'}|[{'type',57,'module',[]}]]]]}|[{'type',58,'constraint',[{'atom',58,'is_subtype'}|[[{'var',58,'Function'}|[{'type',58,'atom',[]}]]]]}|[{'type',59,'constraint',[{'atom',59,'is_subtype'}|[[{'var',59,'Arguments'}|[{'type',59,'list',[{'type',59,'term',[]}]}]]]]}|[{'type',60,'constraint',[{'atom',60,'is_subtype'}|[[{'var',60,'TRef'}|[{'user_type',60,'tref',[]}]]]]}|[{'type',61,'constraint',[{'atom',61,'is_subtype'}|[[{'var',61,'Reason'}|[{'type',61,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'send_after',3},[{'type',66,'bounded_fun',[{'type',66,'fun',[{'type',66,'product',[{'var',66,'Time'}|[{'var',66,'Pid'}|[{'var',66,'Message'}]]]}|[{'type',66,'union',[{'type',66,'tuple',[{'atom',66,'ok'}|[{'var',66,'TRef'}]]}|[{'type',66,'tuple',[{'atom',66,'error'}|[{'var',66,'Reason'}]]}]]}]]}|[[{'type',67,'constraint',[{'atom',67,'is_subtype'}|[[{'var',67,'Time'}|[{'user_type',67,'time',[]}]]]]}|[{'type',68,'constraint',[{'atom',68,'is_subtype'}|[[{'var',68,'Pid'}|[{'type',68,'union',[{'type',68,'pid',[]}|[{'ann_type',68,[{'var',68,'RegName'}|[{'type',68,'atom',[]}]]}]]}]]]]}|[{'type',69,'constraint',[{'atom',69,'is_subtype'}|[[{'var',69,'Message'}|[{'type',69,'term',[]}]]]]}|[{'type',70,'constraint',[{'atom',70,'is_subtype'}|[[{'var',70,'TRef'}|[{'user_type',70,'tref',[]}]]]]}|[{'type',71,'constraint',[{'atom',71,'is_subtype'}|[[{'var',71,'Reason'}|[{'type',71,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'send_after',2},[{'type',75,'bounded_fun',[{'type',75,'fun',[{'type',75,'product',[{'var',75,'Time'}|[{'var',75,'Message'}]]}|[{'type',75,'union',[{'type',75,'tuple',[{'atom',75,'ok'}|[{'var',75,'TRef'}]]}|[{'type',75,'tuple',[{'atom',75,'error'}|[{'var',75,'Reason'}]]}]]}]]}|[[{'type',76,'constraint',[{'atom',76,'is_subtype'}|[[{'var',76,'Time'}|[{'user_type',76,'time',[]}]]]]}|[{'type',77,'constraint',[{'atom',77,'is_subtype'}|[[{'var',77,'Message'}|[{'type',77,'term',[]}]]]]}|[{'type',78,'constraint',[{'atom',78,'is_subtype'}|[[{'var',78,'TRef'}|[{'user_type',78,'tref',[]}]]]]}|[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'Reason'}|[{'type',79,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'exit_after',3},[{'type',83,'bounded_fun',[{'type',83,'fun',[{'type',83,'product',[{'var',83,'Time'}|[{'var',83,'Pid'}|[{'var',83,'Reason1'}]]]}|[{'type',83,'union',[{'type',83,'tuple',[{'atom',83,'ok'}|[{'var',83,'TRef'}]]}|[{'type',83,'tuple',[{'atom',83,'error'}|[{'var',83,'Reason2'}]]}]]}]]}|[[{'type',84,'constraint',[{'atom',84,'is_subtype'}|[[{'var',84,'Time'}|[{'user_type',84,'time',[]}]]]]}|[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Pid'}|[{'type',85,'union',[{'type',85,'pid',[]}|[{'ann_type',85,[{'var',85,'RegName'}|[{'type',85,'atom',[]}]]}]]}]]]]}|[{'type',86,'constraint',[{'atom',86,'is_subtype'}|[[{'var',86,'TRef'}|[{'user_type',86,'tref',[]}]]]]}|[{'type',87,'constraint',[{'atom',87,'is_subtype'}|[[{'var',87,'Reason1'}|[{'type',87,'term',[]}]]]]}|[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Reason2'}|[{'type',88,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'exit_after',2},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Time'}|[{'var',92,'Reason1'}]]}|[{'type',92,'union',[{'type',92,'tuple',[{'atom',92,'ok'}|[{'var',92,'TRef'}]]}|[{'type',92,'tuple',[{'atom',92,'error'}|[{'var',92,'Reason2'}]]}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Time'}|[{'user_type',93,'time',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'TRef'}|[{'user_type',94,'tref',[]}]]]]}|[{'type',95,'constraint',[{'atom',95,'is_subtype'}|[[{'var',95,'Reason1'}|[{'type',95,'term',[]}]]]]}|[{'type',96,'constraint',[{'atom',96,'is_subtype'}|[[{'var',96,'Reason2'}|[{'type',96,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'kill_after',2},[{'type',100,'bounded_fun',[{'type',100,'fun',[{'type',100,'product',[{'var',100,'Time'}|[{'var',100,'Pid'}]]}|[{'type',100,'union',[{'type',100,'tuple',[{'atom',100,'ok'}|[{'var',100,'TRef'}]]}|[{'type',100,'tuple',[{'atom',100,'error'}|[{'var',100,'Reason2'}]]}]]}]]}|[[{'type',101,'constraint',[{'atom',101,'is_subtype'}|[[{'var',101,'Time'}|[{'user_type',101,'time',[]}]]]]}|[{'type',102,'constraint',[{'atom',102,'is_subtype'}|[[{'var',102,'Pid'}|[{'type',102,'union',[{'type',102,'pid',[]}|[{'ann_type',102,[{'var',102,'RegName'}|[{'type',102,'atom',[]}]]}]]}]]]]}|[{'type',103,'constraint',[{'atom',103,'is_subtype'}|[[{'var',103,'TRef'}|[{'user_type',103,'tref',[]}]]]]}|[{'type',104,'constraint',[{'atom',104,'is_subtype'}|[[{'var',104,'Reason2'}|[{'type',104,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'kill_after',1},[{'type',108,'bounded_fun',[{'type',108,'fun',[{'type',108,'product',[{'var',108,'Time'}]}|[{'type',108,'union',[{'type',108,'tuple',[{'atom',108,'ok'}|[{'var',108,'TRef'}]]}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'var',108,'Reason2'}]]}]]}]]}|[[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Time'}|[{'user_type',109,'time',[]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'TRef'}|[{'user_type',110,'tref',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Reason2'}|[{'type',111,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'apply_interval',4},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Time'}|[{'var',115,'Module'}|[{'var',115,'Function'}|[{'var',115,'Arguments'}]]]]}|[{'type',116,'union',[{'type',116,'tuple',[{'atom',116,'ok'}|[{'var',116,'TRef'}]]}|[{'type',116,'tuple',[{'atom',116,'error'}|[{'var',116,'Reason'}]]}]]}]]}|[[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'Time'}|[{'user_type',117,'time',[]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'Module'}|[{'type',118,'module',[]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Function'}|[{'type',119,'atom',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Arguments'}|[{'type',120,'list',[{'type',120,'term',[]}]}]]]]}|[{'type',121,'constraint',[{'atom',121,'is_subtype'}|[[{'var',121,'TRef'}|[{'user_type',121,'tref',[]}]]]]}|[{'type',122,'constraint',[{'atom',122,'is_subtype'}|[[{'var',122,'Reason'}|[{'type',122,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'send_interval',3},[{'type',126,'bounded_fun',[{'type',126,'fun',[{'type',126,'product',[{'var',126,'Time'}|[{'var',126,'Pid'}|[{'var',126,'Message'}]]]}|[{'type',127,'union',[{'type',127,'tuple',[{'atom',127,'ok'}|[{'var',127,'TRef'}]]}|[{'type',127,'tuple',[{'atom',127,'error'}|[{'var',127,'Reason'}]]}]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'Time'}|[{'user_type',128,'time',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'Pid'}|[{'type',129,'union',[{'type',129,'pid',[]}|[{'ann_type',129,[{'var',129,'RegName'}|[{'type',129,'atom',[]}]]}]]}]]]]}|[{'type',130,'constraint',[{'atom',130,'is_subtype'}|[[{'var',130,'Message'}|[{'type',130,'term',[]}]]]]}|[{'type',131,'constraint',[{'atom',131,'is_subtype'}|[[{'var',131,'TRef'}|[{'user_type',131,'tref',[]}]]]]}|[{'type',132,'constraint',[{'atom',132,'is_subtype'}|[[{'var',132,'Reason'}|[{'type',132,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'send_interval',2},[{'type',136,'bounded_fun',[{'type',136,'fun',[{'type',136,'product',[{'var',136,'Time'}|[{'var',136,'Message'}]]}|[{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'ok'}|[{'var',136,'TRef'}]]}|[{'type',136,'tuple',[{'atom',136,'error'}|[{'var',136,'Reason'}]]}]]}]]}|[[{'type',137,'constraint',[{'atom',137,'is_subtype'}|[[{'var',137,'Time'}|[{'user_type',137,'time',[]}]]]]}|[{'type',138,'constraint',[{'atom',138,'is_subtype'}|[[{'var',138,'Message'}|[{'type',138,'term',[]}]]]]}|[{'type',139,'constraint',[{'atom',139,'is_subtype'}|[[{'var',139,'TRef'}|[{'user_type',139,'tref',[]}]]]]}|[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Reason'}|[{'type',140,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'cancel',1},[{'type',144,'bounded_fun',[{'type',144,'fun',[{'type',144,'product',[{'var',144,'TRef'}]}|[{'type',144,'union',[{'type',144,'tuple',[{'atom',144,'ok'}|[{'atom',144,'cancel'}]]}|[{'type',144,'tuple',[{'atom',144,'error'}|[{'var',144,'Reason'}]]}]]}]]}|[[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'TRef'}|[{'user_type',145,'tref',[]}]]]]}|[{'type',146,'constraint',[{'atom',146,'is_subtype'}|[[{'var',146,'Reason'}|[{'type',146,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'sleep',1},[{'type',150,'bounded_fun',[{'type',150,'fun',[{'type',150,'product',[{'var',150,'Time'}]}|[{'atom',150,'ok'}]]}|[[{'type',151,'constraint',[{'atom',151,'is_subtype'}|[[{'var',151,'Time'}|[{'type',151,'timeout',[]}]]]]}]]]}]}]
, 'spec' = [{{'tc',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Fun'}]}|[{'type',160,'tuple',[{'var',160,'Time'}|[{'var',160,'Value'}]]}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Fun'}|[{'type',161,'function',[]}]]]]}|[{'type',162,'constraint',[{'atom',162,'is_subtype'}|[[{'var',162,'Time'}|[{'type',162,'integer',[]}]]]]}|[{'type',163,'constraint',[{'atom',163,'is_subtype'}|[[{'var',163,'Value'}|[{'type',163,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'tc',2},[{'type',174,'bounded_fun',[{'type',174,'fun',[{'type',174,'product',[{'var',174,'Fun'}|[{'var',174,'Arguments'}]]}|[{'type',174,'tuple',[{'var',174,'Time'}|[{'var',174,'Value'}]]}]]}|[[{'type',175,'constraint',[{'atom',175,'is_subtype'}|[[{'var',175,'Fun'}|[{'type',175,'function',[]}]]]]}|[{'type',176,'constraint',[{'atom',176,'is_subtype'}|[[{'var',176,'Arguments'}|[{'type',176,'list',[{'type',176,'term',[]}]}]]]]}|[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Time'}|[{'type',177,'integer',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Value'}|[{'type',178,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'tc',3},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Module'}|[{'var',189,'Function'}|[{'var',189,'Arguments'}]]]}|[{'type',189,'tuple',[{'var',189,'Time'}|[{'var',189,'Value'}]]}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Module'}|[{'type',190,'module',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Function'}|[{'type',191,'atom',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Arguments'}|[{'type',192,'list',[{'type',192,'term',[]}]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Time'}|[{'type',193,'integer',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Value'}|[{'type',194,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'now_diff',2},[{'type',206,'bounded_fun',[{'type',206,'fun',[{'type',206,'product',[{'var',206,'T2'}|[{'var',206,'T1'}]]}|[{'var',206,'Tdiff'}]]}|[[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'T1'}|[{'remote_type',207,[{'atom',207,'erlang'}|[{'atom',207,'timestamp'}|[[]]]]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'T2'}|[{'remote_type',208,[{'atom',208,'erlang'}|[{'atom',208,'timestamp'}|[[]]]]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Tdiff'}|[{'type',209,'integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'seconds',1},[{'type',216,'bounded_fun',[{'type',216,'fun',[{'type',216,'product',[{'var',216,'Seconds'}]}|[{'var',216,'MilliSeconds'}]]}|[[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Seconds'}|[{'type',217,'non_neg_integer',[]}]]]]}|[{'type',218,'constraint',[{'atom',218,'is_subtype'}|[[{'var',218,'MilliSeconds'}|[{'type',218,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'minutes',1},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Minutes'}]}|[{'var',221,'MilliSeconds'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Minutes'}|[{'type',222,'non_neg_integer',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'MilliSeconds'}|[{'type',223,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'hours',1},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'Hours'}]}|[{'var',226,'MilliSeconds'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'Hours'}|[{'type',227,'non_neg_integer',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'MilliSeconds'}|[{'type',228,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'hms',3},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Hours'}|[{'var',231,'Minutes'}|[{'var',231,'Seconds'}]]]}|[{'var',231,'MilliSeconds'}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Hours'}|[{'type',232,'non_neg_integer',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Minutes'}|[{'type',233,'non_neg_integer',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Seconds'}|[{'type',234,'non_neg_integer',[]}]]]]}|[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'MilliSeconds'}|[{'type',235,'non_neg_integer',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'start',0},[{'type',244,'fun',[{'type',244,'product',[]}|[{'atom',244,'ok'}]]}]}]
, 'spec' = [{{'start_link',0},[{'type',248,'fun',[{'type',248,'product',[]}|[{'type',248,'union',[{'type',248,'tuple',[{'atom',248,'ok'}|[{'type',248,'pid',[]}]]}|[{'type',248,'tuple',[{'atom',248,'error'}|[{'type',248,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'init',1},[{'type',252,'fun',[{'type',252,'product',[{'type',252,'nil',[]}]}|[{'type',252,'tuple',[{'atom',252,'ok'}|[{'type',252,'nil',[]}|[{'atom',252,'infinity'}]]]}]]}]}]
, 'spec' = [{{'ensure_started',0},[{'type',259,'fun',[{'type',259,'product',[]}|[{'atom',259,'ok'}]]}]}]
, 'type' = [{'timers',{'type',283,'term',[]},[]}]
, 'spec' = [{{'handle_call',3},[{'type',285,'fun',[{'type',285,'product',[{'type',285,'term',[]}|[{'type',285,'term',[]}|[{'user_type',285,'timers',[]}]]]}|[{'type',286,'union',[{'type',286,'tuple',[{'atom',286,'reply'}|[{'type',286,'term',[]}|[{'user_type',286,'timers',[]}|[{'type',286,'timeout',[]}]]]]}|[{'type',286,'tuple',[{'atom',286,'noreply'}|[{'user_type',286,'timers',[]}|[{'type',286,'timeout',[]}]]]}]]}]]}]}]
, 'spec' = [{{'handle_info',2},[{'type',326,'fun',[{'type',326,'product',[{'type',326,'term',[]}|[{'user_type',326,'timers',[]}]]}|[{'type',326,'tuple',[{'atom',326,'noreply'}|[{'user_type',326,'timers',[]}|[{'type',326,'timeout',[]}]]]}]]}]}]
, 'spec' = [{{'handle_cast',2},[{'type',336,'fun',[{'type',336,'product',[{'type',336,'term',[]}|[{'user_type',336,'timers',[]}]]}|[{'type',336,'tuple',[{'atom',336,'noreply'}|[{'user_type',336,'timers',[]}|[{'type',336,'timeout',[]}]]]}]]}]}]
, 'spec' = [{{'terminate',2},[{'type',340,'fun',[{'type',340,'product',[{'type',340,'term',[]}|[{'var',340,'_State'}]]}|[{'atom',340,'ok'}]]}]}]
, 'spec' = [{{'code_change',3},[{'type',344,'fun',[{'type',344,'product',[{'type',344,'term',[]}|[{'var',344,'State'}|[{'type',344,'term',[]}]]]}|[{'type',344,'tuple',[{'atom',344,'ok'}|[{'var',344,'State'}]]}]]}]}]
, 'spec' = [{{'pid_delete',1},[{'type',400,'fun',[{'type',400,'product',[{'type',400,'pid',[]}]}|[{'atom',400,'ok'}]]}]}]
, 'spec' = [{{'next_timeout',0},[{'type',415,'fun',[{'type',415,'product',[]}|[{'type',415,'timeout',[]}]]}]}]
, 'spec' = [{{'get_status',0},[{'type',468,'fun',[{'type',468,'product',[]}|[{'type',469,'tuple',[{'type',469,'tuple',[{'atom',469,'timer_tab'}|[{'type',469,'non_neg_integer',[]}]]}|[{'type',469,'tuple',[{'atom',469,'timer_interval_tab'}|[{'type',469,'non_neg_integer',[]}]]}]]}]]}]}] ] 'apply_after'/4 = fun (_0,_1,_2,_3) -> apply 'req'/2 ('apply_after',{_0,{_1,_2,_3}})
'send_after'/3 = fun (_0,_1,_2) -> apply 'req'/2 ('apply_after',{_0,{'timer','send',[_1|[_2|[]]]}})
'send_after'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in apply 'send_after'/3 (_0,_2,_1)
'exit_after'/3 = fun (_0,_1,_2) -> apply 'req'/2 ('apply_after',{_0,{'erlang','exit',[_1|[_2|[]]]}})
'exit_after'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in apply 'exit_after'/3 (_0,_2,_1)
'kill_after'/2 = fun (_0,_1) -> apply 'exit_after'/3 (_0,_1,'kill')
'kill_after'/1 = fun (_0) -> let <_1> = call 'erlang':'self' () in apply 'exit_after'/3 (_0,_1,'kill')
'apply_interval'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'self' () in apply 'req'/2 ('apply_interval',{_0,_4,{_1,_2,_3}})
'send_interval'/3 = fun (_0,_1,_2) -> apply 'req'/2 ('apply_interval',{_0,_1,{'timer','send',[_1|[_2|[]]]}})
'send_interval'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in apply 'send_interval'/3 (_0,_2,_1)
'cancel'/1 = fun (_0) -> apply 'req'/2 ('cancel',_0)
'sleep'/1 = fun (_0) -> receive  after _0 -> 'ok'
'tc'/1 = fun (_0) -> let <T1> = call 'erlang':'monotonic_time' () in let <Val> = apply _0 () in let <T2> = call 'erlang':'monotonic_time' () in let <_4> = call 'erlang':'-' (T2,T1) in let <Time> = call 'erlang':'convert_time_unit' (_4,'native','microsecond') in {Time,Val}
'tc'/2 = fun (_0,_1) -> let <T1> = call 'erlang':'monotonic_time' () in let <Val> = call 'erlang':'apply' (_0,_1) in let <T2> = call 'erlang':'monotonic_time' () in let <_5> = call 'erlang':'-' (T2,T1) in let <Time> = call 'erlang':'convert_time_unit' (_5,'native','microsecond') in {Time,Val}
'tc'/3 = fun (_0,_1,_2) -> let <T1> = call 'erlang':'monotonic_time' () in let <Val> = call 'erlang':'apply' (_0,_1,_2) in let <T2> = call 'erlang':'monotonic_time' () in let <_6> = call 'erlang':'-' (T2,T1) in let <Time> = call 'erlang':'convert_time_unit' (_6,'native','microsecond') in {Time,Val}
'now_diff'/2 = fun (_0,_1) -> case <_0,_1> of <{A2,B2,C2},{A1,B1,C1}> when 'true' -> let <_2> = call 'erlang':'-' (A2,A1) in let <_3> = call 'erlang':'*' (_2,1000000) in let <_4> = call 'erlang':'+' (_3,B2) in let <_5> = call 'erlang':'-' (_4,B1) in let <_6> = call 'erlang':'*' (_5,1000000) in let <_7> = call 'erlang':'+' (_6,C2) in call 'erlang':'-' (_7,C1)
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'now_diff',2}}] )-|['compiler_generated'] ) end
'seconds'/1 = fun (_0) -> call 'erlang':'*' (1000,_0)
'minutes'/1 = fun (_0) -> call 'erlang':'*' (60000,_0)
'hours'/1 = fun (_0) -> call 'erlang':'*' (3600000,_0)
'hms'/3 = fun (_0,_1,_2) -> let <_5> = apply 'hours'/1 (_0) in let <_4> = apply 'minutes'/1 (_1) in let <_6> = call 'erlang':'+' (_5,_4) in let <_3> = apply 'seconds'/1 (_2) in call 'erlang':'+' (_6,_3)
'start'/0 = fun () -> apply 'ensure_started'/0 ()
'start_link'/0 = fun () -> call 'gen_server':'start_link' ({'local','timer_server'},'timer',[],[])
'init'/1 = fun (_0) -> case _0 of <[]> when 'true' -> do call 'erlang':'process_flag' ('trap_exit','true') case call 'ets':'new' ('timer_tab',['named_table'|['ordered_set'|['protected']]]) of <'timer_tab'> when 'true' -> case call 'ets':'new' ('timer_interval_tab',['named_table'|['protected']]) of <'timer_interval_tab'> when 'true' -> {'ok',[],'infinity'}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'ensure_started'/0 = fun () -> case call 'erlang':'whereis' ('timer_server') of <'undefined'> when 'true' -> do (call ('supervisor'-|['result_not_wanted'] ):('start_child'-|['result_not_wanted'] ) (('kernel_safe_sup'-|['result_not_wanted'] ),{'timer_server',{'timer','start_link',[]},'permanent',1000,'worker',['timer']})-|['result_not_wanted'] ) 'ok'
<_3> when 'true' -> 'ok' end
'req'/2 = fun (_0,_1) -> let <SysTime> = apply 'system_time'/0 () in do apply 'ensure_started'/0 () call 'gen_server':'call' ('timer_server',{_0,_1,SysTime},'infinity')
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'apply_after',{Time,Op},Started},_X_From,_X_Ts> when let <_3> = call 'erlang':'is_integer' (Time) in let <_4> = call 'erlang':'>=' (Time,0) in call 'erlang':'and' (_3,_4) -> let <_6> = call 'erlang':'*' (1000,Time) in let <_7> = call 'erlang':'+' (Started,_6) in let <_5> = call 'erlang':'make_ref' () in let <BRef> = {_7,_5} in let <Timer> = {BRef,'timeout',Op} in do call 'ets':'insert' ('timer_tab',Timer) let <_10> = apply 'system_time'/0 () in let <Timeout> = apply 'timer_timeout'/1 (_10) in {'reply',{'ok',BRef},[],Timeout}
<{'apply_interval',{Time,To,MFA},Started},_X_From,_X_Ts> when let <_12> = call 'erlang':'is_integer' (Time) in let <_13> = call 'erlang':'>=' (Time,0) in call 'erlang':'and' (_12,_13) -> case apply 'get_pid'/1 (To) of <Pid> when call 'erlang':'is_pid' (Pid) -> do try call 'erlang':'link' (Pid) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' let <SysTime> = apply 'system_time'/0 () in let <Ref> = call 'erlang':'make_ref' () in let <BRef1> = {'interval',Ref} in let <Interval> = call 'erlang':'*' (Time,1000) in let <_18> = call 'erlang':'+' (Started,Interval) in let <BRef2> = {_18,Ref} in let <Timer> = {BRef2,{'repeat',Interval,Pid},MFA} in do call 'ets':'insert' ('timer_interval_tab',{BRef1,BRef2,Pid}) do call 'ets':'insert' ('timer_tab',Timer) let <Timeout> = apply 'timer_timeout'/1 (SysTime) in {'reply',{'ok',BRef1},[],Timeout}
<_32> when 'true' -> let <_22> = apply 'next_timeout'/0 () in {'reply',{'error','badarg'},[],_22} end
<{'cancel',BRef = {_X_Time,Ref},_33},_X_From,Ts> when call 'erlang':'is_reference' (Ref) -> do apply 'delete_ref'/1 (BRef) let <_24> = apply 'next_timeout'/0 () in {'reply',{'ok','cancel'},Ts,_24}
<{'cancel',_X_BRef,_34},_X_From,Ts> when 'true' -> let <_25> = apply 'next_timeout'/0 () in {'reply',{'error','badarg'},Ts,_25}
<{'apply_after',_35,_36},_X_From,Ts> when 'true' -> let <_26> = apply 'next_timeout'/0 () in {'reply',{'error','badarg'},Ts,_26}
<{'apply_interval',_37,_38},_X_From,Ts> when 'true' -> let <_27> = apply 'next_timeout'/0 () in {'reply',{'error','badarg'},Ts,_27}
<_X_Else,_X_From,Ts> when 'true' -> let <_28> = apply 'next_timeout'/0 () in {'noreply',Ts,_28} end
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <'timeout',Ts> when 'true' -> let <_2> = apply 'system_time'/0 () in let <Timeout> = apply 'timer_timeout'/1 (_2) in {'noreply',Ts,Timeout}
<{'EXIT',Pid,_X_Reason},Ts> when 'true' -> do apply 'pid_delete'/1 (Pid) let <_4> = apply 'next_timeout'/0 () in {'noreply',Ts,_4}
<_X_OtherMsg,Ts> when 'true' -> let <_5> = apply 'next_timeout'/0 () in {'noreply',Ts,_5} end
'handle_cast'/2 = fun (_0,_1) -> let <_2> = apply 'next_timeout'/0 () in {'noreply',_1,_2}
'terminate'/2 = fun (_0,_1) -> 'ok'
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'timer_timeout'/1 = fun (_0) -> case call 'ets':'first' ('timer_tab') of <'$end_of_table'> when 'true' -> 'infinity'
<{Time,_X_Ref}> when call 'erlang':'>' (Time,_0) -> let <_1> = call 'erlang':'-' (Time,_0) in let <_2> = call 'erlang':'+' (_1,999) in let <Timeout> = call 'erlang':'div' (_2,1000) in call 'erlang':'min' (Timeout,8388608)
<Key> when 'true' -> case call 'ets':'lookup' ('timer_tab',Key) of <[{_8,'timeout',MFA}|[]]> when call 'erlang':'=:=' (_8,Key) -> do call 'ets':'delete' ('timer_tab',Key) do apply 'do_apply'/1 (MFA) apply 'timer_timeout'/1 (_0)
<[{{Time,Ref},Repeat = {'repeat',Interv,To},MFA}|[]]> when 'true' -> do call 'ets':'delete' ('timer_tab',Key) let <NewTime> = call 'erlang':'+' (Time,Interv) in do call 'ets':'insert' ('timer_interval_tab',{{'interval',Ref},{NewTime,Ref},To}) do apply 'do_apply'/1 (MFA) do call 'ets':'insert' ('timer_tab',{{NewTime,Ref},Repeat,MFA}) apply 'timer_timeout'/1 (_0)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end end
'delete_ref'/1 = fun (_0) -> case _0 of <BRef = {'interval',_3}> when 'true' -> case call 'ets':'lookup' ('timer_interval_tab',BRef) of <[{_4,BRef2,_X_Pid}|[]]> when 'true' -> do call 'ets':'delete' ('timer_interval_tab',BRef) call 'ets':'delete' ('timer_tab',BRef2)
<_5> when 'true' -> 'ok' end
<BRef> when 'true' -> call 'ets':'delete' ('timer_tab',BRef) end
'pid_delete'/1 = fun (_0) -> let <IntervalTimerList> = call 'ets':'select' ('timer_interval_tab',[{{'_','_','$1'},[{'==','$1',_0}|[]],['$_']}|[]]) in let <_4> = fun (_2) -> case _2 of <{IntKey,TimerKey,_6}> when 'true' -> do call 'ets':'delete' ('timer_interval_tab',IntKey) call 'ets':'delete' ('timer_tab',TimerKey)
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'-pid_delete/1-fun-0-',1}}] )-|['compiler_generated'] ) end in call 'lists':'foreach' (_4,IntervalTimerList)
'next_timeout'/0 = fun () -> case call 'ets':'first' ('timer_tab') of <'$end_of_table'> when 'true' -> 'infinity'
<{Time,_6}> when 'true' -> let <_0> = apply 'system_time'/0 () in let <_1> = call 'erlang':'-' (Time,_0) in let <_2> = call 'erlang':'+' (_1,999) in let <_3> = call 'erlang':'div' (_2,1000) in let <_4> = apply 'positive'/1 (_3) in call 'erlang':'min' (_4,8388608)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
'do_apply'/1 = fun (_0) -> case _0 of <{M,F,A}> when 'true' -> case <M,F,A> of <('timer'-|['compiler_generated'] ),('send'-|['compiler_generated'] ),_4> when call 'erlang':'=:=' (_4,A) -> catch apply 'send'/1 (A)
<('erlang'-|['compiler_generated'] ),('exit'-|['compiler_generated'] ),([Name|([Reason|([]-|['compiler_generated'] )]-|['compiler_generated'] )]-|['compiler_generated'] )> when 'true' -> catch let <_1> = apply 'get_pid'/1 (Name) in call 'erlang':'exit' (_1,Reason)
<(_6-|['compiler_generated'] ),(_7-|['compiler_generated'] ),(_8-|['compiler_generated'] )> when 'true' -> catch call 'erlang':'spawn' (M,F,A) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'do_apply',1}}] )-|['compiler_generated'] ) end
'positive'/1 = fun (_0) -> call 'erlang':'max' (_0,0)
'system_time'/0 = fun () -> call 'erlang':'monotonic_time' (1000000)
'send'/1 = fun (_0) -> case _0 of <[Pid|[Msg|[]]]> when 'true' -> call 'erlang':'!' (Pid,Msg)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'send',1}}] )-|['compiler_generated'] ) end
'get_pid'/1 = fun (_0) -> case _0 of <Name> when call 'erlang':'is_pid' (_0) -> Name
<'undefined'> when 'true' -> 'undefined'
<Name> when call 'erlang':'is_atom' (_0) -> let <_1> = call 'erlang':'whereis' (Name) in apply 'get_pid'/1 (_1)
<_3> when 'true' -> 'undefined' end
'get_status'/0 = fun () -> let <Info1> = call 'ets':'info' ('timer_tab') in case call 'lists':'keyfind' ('size',1,Info1) of <{'size',TotalNumTimers}> when 'true' -> let <Info2> = call 'ets':'info' ('timer_interval_tab') in case call 'lists':'keyfind' ('size',1,Info2) of <{'size',NumIntervalTimers}> when 'true' -> {{'timer_tab',TotalNumTimers},{'timer_interval_tab',NumIntervalTimers}}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('timer')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('timer',_0) end