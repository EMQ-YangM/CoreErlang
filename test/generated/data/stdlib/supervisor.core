module 'supervisor' ['behaviour_info'/1,'check_childspecs'/1,'code_change'/3,'count_children'/1,'delete_child'/2,'format_log'/1,'format_log'/2,'format_status'/2,'get_callback_module'/1,'get_childspec'/2,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'restart_child'/2,'start_child'/2,'start_link'/2,'start_link'/3,'terminate'/2,'terminate_child'/2,'which_children'/1] attributes [ 'file' = [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_server']
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],42}]
, 'export_type' = [{'sup_flags',0}|[{'child_spec',0}|[{'strategy',0}|[{'startchild_ret',0}|[{'startchild_err',0}|[{'startlink_ret',0}|[{'startlink_err',0}]]]]]]]
, 'type' = [{'child',{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'pid',[]}]]},[]}]
, 'type' = [{'child_id',{'type',65,'term',[]},[]}]
, 'type' = [{'mfargs',{'type',66,'tuple',[{'ann_type',66,[{'var',66,'M'}|[{'type',66,'module',[]}]]}|[{'ann_type',66,[{'var',66,'F'}|[{'type',66,'atom',[]}]]}|[{'ann_type',66,[{'var',66,'A'}|[{'type',66,'union',[{'type',66,'list',[{'type',66,'term',[]}]}|[{'atom',66,'undefined'}]]}]]}]]]},[]}]
, 'type' = [{'modules',{'type',67,'union',[{'type',67,'list',[{'type',67,'module',[]}]}|[{'atom',67,'dynamic'}]]},[]}]
, 'type' = [{'restart',{'type',68,'union',[{'atom',68,'permanent'}|[{'atom',68,'transient'}|[{'atom',68,'temporary'}]]]},[]}]
, 'type' = [{'shutdown',{'type',69,'union',[{'atom',69,'brutal_kill'}|[{'type',69,'timeout',[]}]]},[]}]
, 'type' = [{'worker',{'type',70,'union',[{'atom',70,'worker'}|[{'atom',70,'supervisor'}]]},[]}]
, 'type' = [{'sup_name',{'type',71,'union',[{'type',71,'tuple',[{'atom',71,'local'}|[{'ann_type',71,[{'var',71,'Name'}|[{'type',71,'atom',[]}]]}]]}|[{'type',72,'tuple',[{'atom',72,'global'}|[{'ann_type',72,[{'var',72,'Name'}|[{'type',72,'atom',[]}]]}]]}|[{'type',73,'tuple',[{'atom',73,'via'}|[{'ann_type',73,[{'var',73,'Module'}|[{'type',73,'module',[]}]]}|[{'ann_type',73,[{'var',73,'Name'}|[{'type',73,'any',[]}]]}]]]}]]]},[]}]
, 'type' = [{'sup_ref',{'type',74,'union',[{'ann_type',74,[{'var',74,'Name'}|[{'type',74,'atom',[]}]]}|[{'type',75,'tuple',[{'ann_type',75,[{'var',75,'Name'}|[{'type',75,'atom',[]}]]}|[{'ann_type',75,[{'var',75,'Node'}|[{'type',75,'node',[]}]]}]]}|[{'type',76,'tuple',[{'atom',76,'global'}|[{'ann_type',76,[{'var',76,'Name'}|[{'type',76,'atom',[]}]]}]]}|[{'type',77,'tuple',[{'atom',77,'via'}|[{'ann_type',77,[{'var',77,'Module'}|[{'type',77,'module',[]}]]}|[{'ann_type',77,[{'var',77,'Name'}|[{'type',77,'any',[]}]]}]]]}|[{'type',78,'pid',[]}]]]]]},[]}]
, 'type' = [{'child_spec',{'type',79,'union',[{'type',79,'map',[{'type',79,'map_field_exact',[{'atom',79,'id'}|[{'user_type',79,'child_id',[]}]]}|[{'type',80,'map_field_exact',[{'atom',80,'start'}|[{'user_type',80,'mfargs',[]}]]}|[{'type',81,'map_field_assoc',[{'atom',81,'restart'}|[{'user_type',81,'restart',[]}]]}|[{'type',82,'map_field_assoc',[{'atom',82,'shutdown'}|[{'user_type',82,'shutdown',[]}]]}|[{'type',83,'map_field_assoc',[{'atom',83,'type'}|[{'user_type',83,'worker',[]}]]}|[{'type',84,'map_field_assoc',[{'atom',84,'modules'}|[{'user_type',84,'modules',[]}]]}]]]]]]}|[{'type',85,'tuple',[{'ann_type',85,[{'var',85,'Id'}|[{'user_type',85,'child_id',[]}]]}|[{'ann_type',86,[{'var',86,'StartFunc'}|[{'user_type',86,'mfargs',[]}]]}|[{'ann_type',87,[{'var',87,'Restart'}|[{'user_type',87,'restart',[]}]]}|[{'ann_type',88,[{'var',88,'Shutdown'}|[{'user_type',88,'shutdown',[]}]]}|[{'ann_type',89,[{'var',89,'Type'}|[{'user_type',89,'worker',[]}]]}|[{'ann_type',90,[{'var',90,'Modules'}|[{'user_type',90,'modules',[]}]]}]]]]]]}]]},[]}]
, 'type' = [{'strategy',{'type',92,'union',[{'atom',92,'one_for_all'}|[{'atom',92,'one_for_one'}|[{'atom',93,'rest_for_one'}|[{'atom',93,'simple_one_for_one'}]]]]},[]}]
, 'type' = [{'sup_flags',{'type',95,'union',[{'type',95,'map',[{'type',95,'map_field_assoc',[{'atom',95,'strategy'}|[{'user_type',95,'strategy',[]}]]}|[{'type',96,'map_field_assoc',[{'atom',96,'intensity'}|[{'type',96,'non_neg_integer',[]}]]}|[{'type',97,'map_field_assoc',[{'atom',97,'period'}|[{'type',97,'pos_integer',[]}]]}]]]}|[{'type',98,'tuple',[{'ann_type',98,[{'var',98,'RestartStrategy'}|[{'user_type',98,'strategy',[]}]]}|[{'ann_type',99,[{'var',99,'Intensity'}|[{'type',99,'non_neg_integer',[]}]]}|[{'ann_type',100,[{'var',100,'Period'}|[{'type',100,'pos_integer',[]}]]}]]]}]]},[]}]
, 'type' = [{'children',{'type',101,'tuple',[{'ann_type',101,[{'var',101,'Ids'}|[{'type',101,'list',[{'user_type',101,'child_id',[]}]}]]}|[{'ann_type',101,[{'var',101,'Db'}|[{'type',101,'map',[{'type',101,'map_field_assoc',[{'user_type',101,'child_id',[]}|[{'user_type',101,'child_rec',[]}]]}]}]]}]]},[]}]
, 'record' = [{'child',[{'typed_record_field',{'record_field',116,{'atom',116,'pid'},{'atom',116,'undefined'}},{'type',116,'union',[{'user_type',116,'child',[]}|[{'type',117,'tuple',[{'atom',117,'restarting'}|[{'type',117,'union',[{'type',117,'pid',[]}|[{'atom',117,'undefined'}]]}]]}|[{'type',118,'list',[{'type',118,'pid',[]}]}]]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'id'}},{'user_type',119,'child_id',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'mfargs'}},{'user_type',120,'mfargs',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'restart_type'}},{'user_type',121,'restart',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'shutdown'}},{'user_type',122,'shutdown',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'child_type'}},{'user_type',123,'worker',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'modules'},{'nil',124}},{'user_type',124,'modules',[]}}]]]]]]]}]
, 'type' = [{'child_rec',{'type',125,'record',[{'atom',125,'child'}]},[]}]
, 'record' = [{'state',[{'record_field',127,{'atom',127,'name'}}|[{'typed_record_field',{'record_field',128,{'atom',128,'strategy'}},{'type',128,'union',[{'user_type',128,'strategy',[]}|[{'atom',128,'undefined'}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'children'},{'tuple',129,[{'nil',129}|[{'map',129,[]}]]}},{'user_type',129,'children',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'dynamics'}},{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'maps'}|[{'type',130,'map',[{'type',130,'map_field_assoc',[{'type',130,'pid',[]}|[{'type',130,'list',[]}]]}]}]]}|[{'type',131,'tuple',[{'atom',131,'mapsets'}|[{'type',131,'map',[{'type',131,'map_field_assoc',[{'type',131,'pid',[]}|[{'type',131,'nil',[]}]]}]}]]}|[{'atom',132,'undefined'}]]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'intensity'}},{'type',133,'union',[{'type',133,'non_neg_integer',[]}|[{'atom',133,'undefined'}]]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'period'}},{'type',134,'union',[{'type',134,'pos_integer',[]}|[{'atom',134,'undefined'}]]}}|[{'record_field',135,{'atom',135,'restarts'},{'nil',135}}|[{'typed_record_field',{'record_field',136,{'atom',136,'dynamic_restarts'},{'integer',136,0}},{'type',136,'non_neg_integer',[]}}|[{'record_field',137,{'atom',137,'module'}}|[{'record_field',138,{'atom',138,'args'}}]]]]]]]]]]}]
, 'type' = [{'state',{'type',139,'record',[{'atom',139,'state'}]},[]}]
, 'callback' = [{{'init',1},[{'type',146,'fun',[{'type',146,'product',[{'ann_type',146,[{'var',146,'Args'}|[{'type',146,'term',[]}]]}]}|[{'type',147,'union',[{'type',147,'tuple',[{'atom',147,'ok'}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'SupFlags'}|[{'user_type',147,'sup_flags',[]}]]}|[{'type',147,'list',[{'ann_type',147,[{'var',147,'ChildSpec'}|[{'user_type',147,'child_spec',[]}]]}]}]]}]]}|[{'atom',148,'ignore'}]]}]]}]}]
, 'type' = [{'startlink_err',{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'already_started'}|[{'type',158,'pid',[]}]]}|[{'type',159,'tuple',[{'atom',159,'shutdown'}|[{'type',159,'term',[]}]]}|[{'type',160,'term',[]}]]]},[]}]
, 'type' = [{'startlink_ret',{'type',161,'union',[{'type',161,'tuple',[{'atom',161,'ok'}|[{'type',161,'pid',[]}]]}|[{'atom',161,'ignore'}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'user_type',161,'startlink_err',[]}]]}]]]},[]}]
, 'spec' = [{{'start_link',2},[{'type',163,'bounded_fun',[{'type',163,'fun',[{'type',163,'product',[{'var',163,'Module'}|[{'var',163,'Args'}]]}|[{'user_type',163,'startlink_ret',[]}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Module'}|[{'type',164,'module',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Args'}|[{'type',165,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'start_link',3},[{'type',169,'bounded_fun',[{'type',169,'fun',[{'type',169,'product',[{'var',169,'SupName'}|[{'var',169,'Module'}|[{'var',169,'Args'}]]]}|[{'user_type',169,'startlink_ret',[]}]]}|[[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'SupName'}|[{'user_type',170,'sup_name',[]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'Module'}|[{'type',171,'module',[]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'Args'}|[{'type',172,'term',[]}]]]]}]]]]]}]}]
, 'type' = [{'startchild_err',{'type',180,'union',[{'atom',180,'already_present'}|[{'type',181,'tuple',[{'atom',181,'already_started'}|[{'ann_type',181,[{'var',181,'Child'}|[{'user_type',181,'child',[]}]]}]]}|[{'type',181,'term',[]}]]]},[]}]
, 'type' = [{'startchild_ret',{'type',182,'union',[{'type',182,'tuple',[{'atom',182,'ok'}|[{'ann_type',182,[{'var',182,'Child'}|[{'user_type',182,'child',[]}]]}]]}|[{'type',183,'tuple',[{'atom',183,'ok'}|[{'ann_type',183,[{'var',183,'Child'}|[{'user_type',183,'child',[]}]]}|[{'ann_type',183,[{'var',183,'Info'}|[{'type',183,'term',[]}]]}]]]}|[{'type',184,'tuple',[{'atom',184,'error'}|[{'user_type',184,'startchild_err',[]}]]}]]]},[]}]
, 'spec' = [{{'start_child',2},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[{'var',186,'SupRef'}|[{'var',186,'ChildSpec'}]]}|[{'user_type',186,'startchild_ret',[]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'SupRef'}|[{'user_type',187,'sup_ref',[]}]]]]}|[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'ChildSpec'}|[{'type',188,'union',[{'user_type',188,'child_spec',[]}|[{'ann_type',188,[{'var',188,'List'}|[{'type',188,'list',[{'type',188,'term',[]}]}]]}]]}]]]]}]]]]}]}]
, 'spec' = [{{'restart_child',2},[{'type',192,'bounded_fun',[{'type',192,'fun',[{'type',192,'product',[{'var',192,'SupRef'}|[{'var',192,'Id'}]]}|[{'var',192,'Result'}]]}|[[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'SupRef'}|[{'user_type',193,'sup_ref',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Id'}|[{'user_type',194,'child_id',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Result'}|[{'type',195,'union',[{'type',195,'tuple',[{'atom',195,'ok'}|[{'ann_type',195,[{'var',195,'Child'}|[{'user_type',195,'child',[]}]]}]]}|[{'type',196,'tuple',[{'atom',196,'ok'}|[{'ann_type',196,[{'var',196,'Child'}|[{'user_type',196,'child',[]}]]}|[{'ann_type',196,[{'var',196,'Info'}|[{'type',196,'term',[]}]]}]]]}|[{'type',197,'tuple',[{'atom',197,'error'}|[{'var',197,'Error'}]]}]]]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Error'}|[{'type',198,'union',[{'atom',198,'running'}|[{'atom',198,'restarting'}|[{'atom',198,'not_found'}|[{'atom',198,'simple_one_for_one'}|[{'type',199,'term',[]}]]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'delete_child',2},[{'type',203,'bounded_fun',[{'type',203,'fun',[{'type',203,'product',[{'var',203,'SupRef'}|[{'var',203,'Id'}]]}|[{'var',203,'Result'}]]}|[[{'type',204,'constraint',[{'atom',204,'is_subtype'}|[[{'var',204,'SupRef'}|[{'user_type',204,'sup_ref',[]}]]]]}|[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Id'}|[{'user_type',205,'child_id',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Result'}|[{'type',206,'union',[{'atom',206,'ok'}|[{'type',206,'tuple',[{'atom',206,'error'}|[{'var',206,'Error'}]]}]]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Error'}|[{'type',207,'union',[{'atom',207,'running'}|[{'atom',207,'restarting'}|[{'atom',207,'not_found'}|[{'atom',207,'simple_one_for_one'}]]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'terminate_child',2},[{'type',218,'bounded_fun',[{'type',218,'fun',[{'type',218,'product',[{'var',218,'SupRef'}|[{'var',218,'Id'}]]}|[{'var',218,'Result'}]]}|[[{'type',219,'constraint',[{'atom',219,'is_subtype'}|[[{'var',219,'SupRef'}|[{'user_type',219,'sup_ref',[]}]]]]}|[{'type',220,'constraint',[{'atom',220,'is_subtype'}|[[{'var',220,'Id'}|[{'type',220,'union',[{'type',220,'pid',[]}|[{'user_type',220,'child_id',[]}]]}]]]]}|[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Result'}|[{'type',221,'union',[{'atom',221,'ok'}|[{'type',221,'tuple',[{'atom',221,'error'}|[{'var',221,'Error'}]]}]]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Error'}|[{'type',222,'union',[{'atom',222,'not_found'}|[{'atom',222,'simple_one_for_one'}]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'get_childspec',2},[{'type',226,'bounded_fun',[{'type',226,'fun',[{'type',226,'product',[{'var',226,'SupRef'}|[{'var',226,'Id'}]]}|[{'var',226,'Result'}]]}|[[{'type',227,'constraint',[{'atom',227,'is_subtype'}|[[{'var',227,'SupRef'}|[{'user_type',227,'sup_ref',[]}]]]]}|[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Id'}|[{'type',228,'union',[{'type',228,'pid',[]}|[{'user_type',228,'child_id',[]}]]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Result'}|[{'type',229,'union',[{'type',229,'tuple',[{'atom',229,'ok'}|[{'user_type',229,'child_spec',[]}]]}|[{'type',229,'tuple',[{'atom',229,'error'}|[{'var',229,'Error'}]]}]]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Error'}|[{'atom',230,'not_found'}]]]]}]]]]]]}]}]
, 'spec' = [{{'which_children',1},[{'type',234,'bounded_fun',[{'type',234,'fun',[{'type',234,'product',[{'var',234,'SupRef'}]}|[{'type',234,'list',[{'type',234,'tuple',[{'var',234,'Id'}|[{'var',234,'Child'}|[{'var',234,'Type'}|[{'var',234,'Modules'}]]]]}]}]]}|[[{'type',235,'constraint',[{'atom',235,'is_subtype'}|[[{'var',235,'SupRef'}|[{'user_type',235,'sup_ref',[]}]]]]}|[{'type',236,'constraint',[{'atom',236,'is_subtype'}|[[{'var',236,'Id'}|[{'type',236,'union',[{'user_type',236,'child_id',[]}|[{'atom',236,'undefined'}]]}]]]]}|[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Child'}|[{'type',237,'union',[{'user_type',237,'child',[]}|[{'atom',237,'restarting'}]]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Type'}|[{'user_type',238,'worker',[]}]]]]}|[{'type',239,'constraint',[{'atom',239,'is_subtype'}|[[{'var',239,'Modules'}|[{'user_type',239,'modules',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'count_children',1},[{'type',243,'bounded_fun',[{'type',243,'fun',[{'type',243,'product',[{'var',243,'SupRef'}]}|[{'var',243,'PropListOfCounts'}]]}|[[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'SupRef'}|[{'user_type',244,'sup_ref',[]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'PropListOfCounts'}|[{'type',245,'list',[{'var',245,'Count'}]}]]]]}|[{'type',246,'constraint',[{'atom',246,'is_subtype'}|[[{'var',246,'Count'}|[{'type',246,'union',[{'type',246,'tuple',[{'atom',246,'specs'}|[{'ann_type',246,[{'var',246,'ChildSpecCount'}|[{'type',246,'non_neg_integer',[]}]]}]]}|[{'type',247,'tuple',[{'atom',247,'active'}|[{'ann_type',247,[{'var',247,'ActiveProcessCount'}|[{'type',247,'non_neg_integer',[]}]]}]]}|[{'type',248,'tuple',[{'atom',248,'supervisors'}|[{'ann_type',248,[{'var',248,'ChildSupervisorCount'}|[{'type',248,'non_neg_integer',[]}]]}]]}|[{'type',249,'tuple',[{'atom',249,'workers'}|[{'ann_type',249,[{'var',249,'ChildWorkerCount'}|[{'type',249,'non_neg_integer',[]}]]}]]}]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'check_childspecs',1},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'ChildSpecs'}]}|[{'var',256,'Result'}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'ChildSpecs'}|[{'type',257,'list',[{'user_type',257,'child_spec',[]}]}]]]]}|[{'type',258,'constraint',[{'atom',258,'is_subtype'}|[[{'var',258,'Result'}|[{'type',258,'union',[{'atom',258,'ok'}|[{'type',258,'tuple',[{'atom',258,'error'}|[{'ann_type',258,[{'var',258,'Error'}|[{'type',258,'term',[]}]]}]]}]]}]]]]}]]]]}]}]
, 'spec' = [{{'get_callback_module',1},[{'type',268,'bounded_fun',[{'type',268,'fun',[{'type',268,'product',[{'var',268,'Pid'}]}|[{'var',268,'Module'}]]}|[[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Pid'}|[{'type',269,'pid',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Module'}|[{'type',270,'atom',[]}]]]]}]]]]}]}]
, 'type' = [{'init_sup_name',{'type',288,'union',[{'user_type',288,'sup_name',[]}|[{'atom',288,'self'}]]},[]}]
, 'type' = [{'stop_rsn',{'type',290,'union',[{'type',290,'tuple',[{'atom',290,'shutdown'}|[{'type',290,'term',[]}]]}|[{'type',291,'tuple',[{'atom',291,'bad_return'}|[{'type',291,'tuple',[{'type',291,'module',[]}|[{'atom',291,'init'}|[{'type',291,'term',[]}]]]}]]}|[{'type',292,'tuple',[{'atom',292,'bad_start_spec'}|[{'type',292,'term',[]}]]}|[{'type',293,'tuple',[{'atom',293,'start_spec'}|[{'type',293,'term',[]}]]}|[{'type',294,'tuple',[{'atom',294,'supervisor_data'}|[{'type',294,'term',[]}]]}]]]]]},[]}]
, 'spec' = [{{'init',1},[{'type',296,'fun',[{'type',296,'product',[{'type',296,'tuple',[{'user_type',296,'init_sup_name',[]}|[{'type',296,'module',[]}|[{'type',296,'list',[{'type',296,'term',[]}]}]]]}]}|[{'type',297,'union',[{'type',297,'tuple',[{'atom',297,'ok'}|[{'user_type',297,'state',[]}]]}|[{'atom',297,'ignore'}|[{'type',297,'tuple',[{'atom',297,'stop'}|[{'user_type',297,'stop_rsn',[]}]]}]]]}]]}]}]
, 'type' = [{'call',{'type',403,'union',[{'atom',403,'which_children'}|[{'atom',403,'count_children'}|[{'type',403,'tuple',[{'var',403,'_'}|[{'var',403,'_'}]]}]]]},[]}]
, 'spec' = [{{'handle_call',3},[{'type',404,'fun',[{'type',404,'product',[{'user_type',404,'call',[]}|[{'type',404,'term',[]}|[{'user_type',404,'state',[]}]]]}|[{'type',404,'tuple',[{'atom',404,'reply'}|[{'type',404,'term',[]}|[{'user_type',404,'state',[]}]]]}]]}]}]
, 'spec' = [{{'handle_cast',2},[{'type',557,'fun',[{'type',557,'product',[{'type',557,'tuple',[{'atom',557,'try_again_restart'}|[{'type',557,'union',[{'user_type',557,'child_id',[]}|[{'type',557,'tuple',[{'atom',557,'restarting'}|[{'type',557,'pid',[]}]]}]]}]]}|[{'user_type',557,'state',[]}]]}|[{'type',558,'union',[{'type',558,'tuple',[{'atom',558,'noreply'}|[{'user_type',558,'state',[]}]]}|[{'type',558,'tuple',[{'atom',558,'stop'}|[{'atom',558,'shutdown'}|[{'user_type',558,'state',[]}]]]}]]}]]}]}]
, 'spec' = [{{'handle_info',2},[{'type',576,'fun',[{'type',576,'product',[{'type',576,'term',[]}|[{'user_type',576,'state',[]}]]}|[{'type',577,'union',[{'type',577,'tuple',[{'atom',577,'noreply'}|[{'user_type',577,'state',[]}]]}|[{'type',577,'tuple',[{'atom',577,'stop'}|[{'atom',577,'shutdown'}|[{'user_type',577,'state',[]}]]]}]]}]]}]}]
, 'spec' = [{{'terminate',2},[{'type',596,'fun',[{'type',596,'product',[{'type',596,'term',[]}|[{'user_type',596,'state',[]}]]}|[{'atom',596,'ok'}]]}]}]
, 'spec' = [{{'code_change',3},[{'type',612,'fun',[{'type',612,'product',[{'type',612,'term',[]}|[{'user_type',612,'state',[]}|[{'type',612,'term',[]}]]]}|[{'type',613,'union',[{'type',613,'tuple',[{'atom',613,'ok'}|[{'user_type',613,'state',[]}]]}|[{'type',613,'tuple',[{'atom',613,'error'}|[{'type',613,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'try_again_restart',1},[{'type',812,'fun',[{'type',812,'product',[{'type',812,'union',[{'user_type',812,'child_id',[]}|[{'type',812,'tuple',[{'atom',812,'restarting'}|[{'type',812,'pid',[]}]]}]]}]}|[{'atom',812,'ok'}]]}]}]
, 'spec' = [{{'save_child',2},[{'type',1029,'fun',[{'type',1029,'product',[{'user_type',1029,'child_rec',[]}|[{'user_type',1029,'state',[]}]]}|[{'user_type',1029,'state',[]}]]}]}]
, 'spec' = [{{'do_save_child',2},[{'type',1035,'fun',[{'type',1035,'product',[{'user_type',1035,'child_rec',[]}|[{'user_type',1035,'state',[]}]]}|[{'user_type',1035,'state',[]}]]}]}]
, 'spec' = [{{'del_child',2},[{'type',1039,'fun',[{'type',1039,'product',[{'user_type',1039,'child_rec',[]}|[{'user_type',1039,'state',[]}]]}|[{'user_type',1039,'state',[]}]]}|[{'type',1040,'fun',[{'type',1040,'product',[{'user_type',1040,'child_id',[]}|[{'user_type',1040,'children',[]}]]}|[{'user_type',1040,'children',[]}]]}]]}]
, 'spec' = [{{'split_child',2},[{'type',1057,'fun',[{'type',1057,'product',[{'user_type',1057,'child_id',[]}|[{'user_type',1057,'children',[]}]]}|[{'type',1057,'tuple',[{'user_type',1057,'children',[]}|[{'user_type',1057,'children',[]}]]}]]}]}]
, 'spec' = [{{'find_child',2},[{'type',1071,'fun',[{'type',1071,'product',[{'type',1071,'union',[{'type',1071,'pid',[]}|[{'user_type',1071,'child_id',[]}]]}|[{'user_type',1071,'state',[]}]]}|[{'type',1071,'union',[{'type',1071,'tuple',[{'atom',1071,'ok'}|[{'user_type',1071,'child_rec',[]}]]}|[{'atom',1071,'error'}]]}]]}]}]
, 'spec' = [{{'find_child_and_args',2},[{'type',1093,'bounded_fun',[{'type',1093,'fun',[{'type',1093,'product',[{'var',1093,'IdOrPid'}|[{'user_type',1093,'state',[]}]]}|[{'type',1093,'union',[{'type',1093,'tuple',[{'atom',1093,'ok'}|[{'user_type',1093,'child_rec',[]}]]}|[{'atom',1093,'error'}]]}]]}|[[{'type',1094,'constraint',[{'atom',1094,'is_subtype'}|[[{'var',1094,'IdOrPid'}|[{'type',1094,'union',[{'type',1094,'pid',[]}|[{'type',1094,'tuple',[{'atom',1094,'restarting'}|[{'type',1094,'pid',[]}]]}|[{'user_type',1094,'child_id',[]}]]]}]]]]}]]]}]}]
, 'spec' = [{{'find_dynamic_child',2},[{'type',1110,'bounded_fun',[{'type',1110,'fun',[{'type',1110,'product',[{'var',1110,'IdOrPid'}|[{'user_type',1110,'state',[]}]]}|[{'type',1110,'union',[{'type',1110,'tuple',[{'atom',1110,'ok'}|[{'user_type',1110,'child_rec',[]}]]}|[{'atom',1110,'error'}]]}]]}|[[{'type',1111,'constraint',[{'atom',1111,'is_subtype'}|[[{'var',1111,'IdOrPid'}|[{'type',1111,'union',[{'type',1111,'pid',[]}|[{'type',1111,'tuple',[{'atom',1111,'restarting'}|[{'type',1111,'pid',[]}]]}|[{'user_type',1111,'child_id',[]}]]]}]]]]}]]]}]}]
, 'spec' = [{{'find_child_by_pid',2},[{'type',1122,'bounded_fun',[{'type',1122,'fun',[{'type',1122,'product',[{'var',1122,'IdOrPid'}|[{'user_type',1122,'state',[]}]]}|[{'type',1122,'union',[{'type',1122,'tuple',[{'atom',1122,'ok'}|[{'user_type',1122,'child_rec',[]}]]}|[{'atom',1122,'error'}]]}]]}|[[{'type',1123,'constraint',[{'atom',1123,'is_subtype'}|[[{'var',1123,'IdOrPid'}|[{'type',1123,'union',[{'type',1123,'pid',[]}|[{'type',1123,'tuple',[{'atom',1123,'restarting'}|[{'type',1123,'pid',[]}]]}]]}]]]]}]]]}]}]
, 'spec' = [{{'get_dynamic_child',1},[{'type',1136,'fun',[{'type',1136,'product',[{'user_type',1136,'state',[]}]}|[{'user_type',1136,'child_rec',[]}]]}]}]
, 'spec' = [{{'set_pid',3},[{'type',1142,'fun',[{'type',1142,'product',[{'type',1142,'term',[]}|[{'user_type',1142,'child_id',[]}|[{'user_type',1142,'state',[]}]]]}|[{'user_type',1142,'state',[]}]]}|[{'type',1143,'fun',[{'type',1143,'product',[{'type',1143,'term',[]}|[{'user_type',1143,'child_id',[]}|[{'user_type',1143,'children',[]}]]]}|[{'user_type',1143,'children',[]}]]}]]}]
, 'spec' = [{{'remove_child',2},[{'type',1151,'fun',[{'type',1151,'product',[{'user_type',1151,'child_id',[]}|[{'user_type',1151,'state',[]}]]}|[{'user_type',1151,'state',[]}]]}]}]
, 'spec' = [{{'children_map',2},[{'type',1161,'bounded_fun',[{'type',1161,'fun',[{'type',1161,'product',[{'var',1161,'Fun'}|[{'user_type',1161,'children',[]}]]}|[{'type',1161,'union',[{'type',1161,'tuple',[{'atom',1161,'ok'}|[{'user_type',1161,'children',[]}]]}|[{'type',1162,'tuple',[{'atom',1162,'error'}|[{'user_type',1162,'children',[]}|[{'var',1162,'Reason'}]]]}]]}]]}|[[{'type',1163,'constraint',[{'atom',1163,'is_subtype'}|[[{'var',1163,'Fun'}|[{'type',1163,'fun',[{'type',1163,'product',[{'user_type',1163,'child_id',[]}|[{'user_type',1163,'child_rec',[]}]]}|[{'type',1163,'union',[{'type',1163,'tuple',[{'atom',1163,'update'}|[{'user_type',1163,'child_rec',[]}]]}|[{'atom',1164,'remove'}|[{'type',1165,'tuple',[{'atom',1165,'abort'}|[{'var',1165,'Reason'}]]}]]]}]]}]]]]}|[{'type',1166,'constraint',[{'atom',1166,'is_subtype'}|[[{'var',1166,'Reason'}|[{'type',1166,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'children_to_list',2},[{'type',1183,'bounded_fun',[{'type',1183,'fun',[{'type',1183,'product',[{'var',1183,'Fun'}|[{'user_type',1183,'children',[]}]]}|[{'var',1183,'List'}]]}|[[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'Fun'}|[{'type',1184,'fun',[{'type',1184,'product',[{'user_type',1184,'child_id',[]}|[{'user_type',1184,'child_rec',[]}]]}|[{'var',1184,'Elem'}]]}]]]]}|[{'type',1185,'constraint',[{'atom',1185,'is_subtype'}|[[{'var',1185,'List'}|[{'type',1185,'list',[{'var',1185,'Elem'}]}]]]]}|[{'type',1186,'constraint',[{'atom',1186,'is_subtype'}|[[{'var',1186,'Elem'}|[{'type',1186,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'children_fold',3},[{'type',1195,'bounded_fun',[{'type',1195,'fun',[{'type',1195,'product',[{'var',1195,'Fun'}|[{'var',1195,'Acc0'}|[{'user_type',1195,'children',[]}]]]}|[{'var',1195,'Acc1'}]]}|[[{'type',1196,'constraint',[{'atom',1196,'is_subtype'}|[[{'var',1196,'Fun'}|[{'type',1196,'fun',[{'type',1196,'product',[{'user_type',1196,'child_id',[]}|[{'user_type',1196,'child_rec',[]}|[{'var',1196,'AccIn'}]]]}|[{'var',1196,'AccOut'}]]}]]]]}|[{'type',1197,'constraint',[{'atom',1197,'is_subtype'}|[[{'var',1197,'Acc0'}|[{'type',1197,'term',[]}]]]]}|[{'type',1198,'constraint',[{'atom',1198,'is_subtype'}|[[{'var',1198,'Acc1'}|[{'type',1198,'term',[]}]]]]}|[{'type',1199,'constraint',[{'atom',1199,'is_subtype'}|[[{'var',1199,'AccIn'}|[{'type',1199,'term',[]}]]]]}|[{'type',1200,'constraint',[{'atom',1200,'is_subtype'}|[[{'var',1200,'AccOut'}|[{'type',1200,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'append',2},[{'type',1204,'fun',[{'type',1204,'product',[{'user_type',1204,'children',[]}|[{'user_type',1204,'children',[]}]]}|[{'user_type',1204,'children',[]}]]}]}] ] 'start_link'/2 = fun (_0,_1) -> call 'gen_server':'start_link' ('supervisor',{'self',_0,_1},[])
'start_link'/3 = fun (_0,_1,_2) -> call 'gen_server':'start_link' (_0,'supervisor',{_0,_1,_2},[])
'start_child'/2 = fun (_0,_1) -> apply 'call'/2 (_0,{'start_child',_1})
'restart_child'/2 = fun (_0,_1) -> apply 'call'/2 (_0,{'restart_child',_1})
'delete_child'/2 = fun (_0,_1) -> apply 'call'/2 (_0,{'delete_child',_1})
'terminate_child'/2 = fun (_0,_1) -> apply 'call'/2 (_0,{'terminate_child',_1})
'get_childspec'/2 = fun (_0,_1) -> apply 'call'/2 (_0,{'get_childspec',_1})
'which_children'/1 = fun (_0) -> apply 'call'/2 (_0,'which_children')
'count_children'/1 = fun (_0) -> apply 'call'/2 (_0,'count_children')
'call'/2 = fun (_0,_1) -> call 'gen_server':'call' (_0,_1,'infinity')
'check_childspecs'/1 = fun (_0) -> case _0 of <ChildSpecs> when call 'erlang':'is_list' (_0) -> case apply 'check_startspec'/1 (ChildSpecs) of <{'ok',_3}> when 'true' -> 'ok'
<Error> when 'true' -> {'error',Error} end
<X> when 'true' -> {'error',{'badarg',X}} end
'get_callback_module'/1 = fun (_0) -> case call 'sys':'get_status' (_0) of <{'status',_X_Pid,{'module',_X_Mod},[_X_PDict|[_X_SysState|[_X_Parent|[_X_Dbg|[Misc|[]]]]]]}> when 'true' -> case call 'lists':'keyfind' ('supervisor',1,Misc) of <{'supervisor',[{[67|[97|[108|[108|[98|[97|[99|[107]]]]]]]],Mod}|[]]}> when 'true' -> Mod
<_6> when 'true' -> case Misc of <[_X_Header|[_X_Data|[{'data',[{[83|[116|[97|[116|[101]]]]],State}|[]]}|_7]]]> when 'true' -> (case State of (<({'state',_8,_9,_10,_11,_12,_13,_14,_15,_rec0,_16}-|['compiler_generated'] )> when 'true' -> _rec0-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'init'/1 = fun (_0) -> case _0 of <{SupName,Mod,Args}> when 'true' -> do call 'erlang':'process_flag' ('trap_exit','true') case call Mod:'init' (Args) of <{'ok',{SupFlags,StartSpec}}> when 'true' -> case apply 'init_state'/4 (SupName,SupFlags,Mod,Args) of <{'ok',State = {'state',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19}}> when (try let <_5> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_5,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'init_dynamic'/2 (State,StartSpec)
<{'ok',State}> when 'true' -> apply 'init_children'/2 (State,StartSpec)
<Error> when 'true' -> {'stop',{'supervisor_data',Error}} end
<'ignore'> when 'true' -> 'ignore'
<Error> when 'true' -> {'stop',{'bad_return',{Mod,'init',Error}}} end
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'init',1}}] )-|['compiler_generated'] ) end
'init_children'/2 = fun (_0,_1) -> (case _0 of (<({'state',_rec1,_13,_14,_15,_16,_17,_18,_19,_20,_21}-|['compiler_generated'] )> when 'true' -> case apply 'check_startspec'/1 (_1) of <{'ok',Children}> when 'true' -> case apply 'start_children'/2 (Children,_rec1) of <{'ok',NChildren}> when 'true' -> case _0 of <{'state',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,_0,NChildren) in {'ok',_7}
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',NChildren,Reason}> when 'true' -> do apply 'terminate_children'/2 (NChildren,_rec1) {'stop',{'shutdown',Reason}}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<Error> when 'true' -> {'stop',{'start_spec',Error}} end-|['compiler_generated'] )
(<_22> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'init_dynamic'/2 = fun (_0,_1) -> case <_0,_1> of <State,_@r0 = [StartSpec|[]]> when 'true' -> case apply 'check_startspec'/1 (_@r0) of <{'ok',Children}> when 'true' -> case State of <{'state',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18}> when 'true' -> let <_4> = call 'erlang':'setelement' (4,State,Children) in let <_5> = apply 'dyn_init'/1 (_4) in {'ok',_5}
(<_19> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> {'stop',{'start_spec',Error}} end
<_X_State,StartSpec> when 'true' -> {'stop',{'bad_start_spec',StartSpec}} end
'start_children'/2 = fun (_0,_1) -> let <Start> = fun (_23,_22) -> case apply 'do_start_child'/2 (_1,_22) of <{'ok','undefined'}> when (try (let <_4> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_22,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_2-|['compiler_generated'] )> when 'true' -> (_2-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_5> = call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true') in let <_6> = call 'erlang':'element' (5,_22) in let <_7> = call 'erlang':'=:=' (_6,'temporary') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_5,_7)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'remove'
<{'ok',Pid}> when 'true' -> case _22 of <{'child',_29,_30,_31,_32,_33,_34,_35}> when 'true' -> let <_10> = call 'erlang':'setelement' (2,_22,Pid) in {'update',_10}
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',Pid,_X_Extra}> when 'true' -> case _22 of <{'child',_37,_38,_39,_40,_41,_42,_43}> when 'true' -> let <_13> = call 'erlang':'setelement' (2,_22,Pid) in {'update',_13}
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',Reason}> when 'true' -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> let <_14> = apply 'extract_child'/1 (_22) in let <_15> = ~{'report'=>[{'supervisor',_1}|[{'errorContext','start_error'}|[{'reason',Reason}|[{'offender',_14}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>363,'mfa'=>{'supervisor','start_children',2}}~,'error',_15,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end {'abort',{'failed_to_start_child',_23,Reason}}
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end in apply 'children_map'/2 (Start,_0)
'do_start_child'/2 = fun (_0,_1) -> case _1 of <{'child',_14,_15,{M,F,Args},_16,_17,_18,_19}> when 'true' -> case apply 'do_start_child_i'/3 (M,F,Args) of <_@r0 = {'ok',Pid}> when call 'erlang':'is_pid' (Pid) -> case _1 of <{'child',_20,_21,_22,_23,_24,_25,_26}> when 'true' -> let <_5> = call 'erlang':'setelement' (2,_1,Pid) in do apply 'report_progress'/2 (_5,_0) _@r0
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r1 = {'ok',Pid,Extra}> when call 'erlang':'is_pid' (Pid) -> case _1 of <{'child',_28,_29,_30,_31,_32,_33,_34}> when 'true' -> let <_9> = call 'erlang':'setelement' (2,_1,Pid) in do apply 'report_progress'/2 (_9,_0) _@r1
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Other> when 'true' -> Other end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'do_start_child_i'/3 = fun (_0,_1,_2) -> let <_3> = catch call 'erlang':'apply' (_0,_1,_2) in case _3 of <_@r0 = {'ok',Pid}> when call 'erlang':'is_pid' (Pid) -> _@r0
<_@r1 = {'ok',Pid,Extra}> when call 'erlang':'is_pid' (Pid) -> _@r1
<'ignore'> when 'true' -> {'ok','undefined'}
<_@r2 = {'error',Error}> when 'true' -> _@r2
<What> when 'true' -> {'error',What} end
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'start_child',EArgs},_X_From,State = {'state',_109,_110,_111,_112,_113,_114,_115,_116,_117,_118}> when (try let <_7> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_7,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'get_dynamic_child'/1 (State) of <{'child',_119,_120,{M,F,A},_121,_122,_123,_124}> when 'true' -> let <Args> = call 'erlang':'++' (A,EArgs) in case apply 'do_start_child_i'/3 (M,F,Args) of <{'ok','undefined'}> when 'true' -> {'reply',{'ok','undefined'},State}
<_@r0 = {'ok',Pid}> when 'true' -> let <NState> = apply 'dyn_store'/3 (Pid,Args,State) in {'reply',_@r0,NState}
<_@r1 = {'ok',Pid,Extra}> when 'true' -> let <NState> = apply 'dyn_store'/3 (Pid,Args,State) in {'reply',_@r1,NState}
<What> when 'true' -> {'reply',What,State} end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<{'start_child',ChildSpec},_X_From,State> when 'true' -> case apply 'check_childspec'/1 (ChildSpec) of <{'ok',Child}> when 'true' -> case apply 'handle_start_child'/2 (Child,State) of <{Resp,NState}> when 'true' -> {'reply',Resp,NState}
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<What> when 'true' -> {'reply',{'error',What},State} end
<{'terminate_child',Id},_X_From,State = {'state',_125,_126,_127,_128,_129,_130,_131,_132,_133,_134}> when try let <_17> = call 'erlang':'is_pid' (Id) in let <_18> = call 'erlang':'not' (_17) in let <_23> = call 'erlang':'element' (3,State) in let <_24> = call 'erlang':'=:=' (_23,'simple_one_for_one') in call 'erlang':'and' (_18,_24) of <Try> -> Try catch <T,R> -> 'false' -> {'reply',{'error','simple_one_for_one'},State}
<{'terminate_child',Id},_X_From,State> when 'true' -> case apply 'find_child'/2 (Id,State) of <{'ok',Child}> when 'true' -> (case State of (<({'state',_rec8,_135,_136,_137,_138,_139,_140,_141,_142,_143}-|['compiler_generated'] )> when 'true' -> do apply 'do_terminate'/2 (Child,_rec8) let <_28> = apply 'del_child'/2 (Child,State) in {'reply','ok',_28}-|['compiler_generated'] )
(<_144> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'error'> when 'true' -> {'reply',{'error','not_found'},State}
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end
<{'restart_child',_X_Id},_X_From,State = {'state',_145,_146,_147,_148,_149,_150,_151,_152,_153,_154}> when (try let <_34> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_34,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'reply',{'error','simple_one_for_one'},State}
<{'restart_child',Id},_X_From,State> when 'true' -> case apply 'find_child'/2 (Id,State) of <{'ok',Child = {'child',_155,_156,_157,_158,_159,_160,_161}}> when (try let <_40> = call 'erlang':'element' (2,Child) in call 'erlang':'=:=' (_40,'undefined') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case State of (<({'state',_rec9,_162,_163,_164,_165,_166,_167,_168,_169,_170}-|['compiler_generated'] )> when 'true' -> case apply 'do_start_child'/2 (_rec9,Child) of <_@r2 = {'ok',Pid}> when 'true' -> let <NState> = apply 'set_pid'/3 (Pid,Id,State) in {'reply',_@r2,NState}
<_@r3 = {'ok',Pid,Extra}> when 'true' -> let <NState> = apply 'set_pid'/3 (Pid,Id,State) in {'reply',_@r3,NState}
<Error> when 'true' -> {'reply',Error,State} end-|['compiler_generated'] )
(<_171> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'ok',{'child',{'restarting',_172},_173,_174,_175,_176,_177,_178}}> when 'true' -> {'reply',{'error','restarting'},State}
<{'ok',_179}> when 'true' -> {'reply',{'error','running'},State}
<_180> when 'true' -> {'reply',{'error','not_found'},State} end
<{'delete_child',_X_Id},_X_From,State = {'state',_181,_182,_183,_184,_185,_186,_187,_188,_189,_190}> when (try let <_52> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_52,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'reply',{'error','simple_one_for_one'},State}
<{'delete_child',Id},_X_From,State> when 'true' -> case apply 'find_child'/2 (Id,State) of <{'ok',Child = {'child',_191,_192,_193,_194,_195,_196,_197}}> when (try let <_58> = call 'erlang':'element' (2,Child) in call 'erlang':'=:=' (_58,'undefined') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <NState> = apply 'remove_child'/2 (Id,State) in {'reply','ok',NState}
<{'ok',{'child',{'restarting',_198},_199,_200,_201,_202,_203,_204}}> when 'true' -> {'reply',{'error','restarting'},State}
<{'ok',_205}> when 'true' -> {'reply',{'error','running'},State}
<_206> when 'true' -> {'reply',{'error','not_found'},State} end
<{'get_childspec',Id},_X_From,State> when 'true' -> case apply 'find_child'/2 (Id,State) of <{'ok',Child}> when 'true' -> let <_62> = apply 'child_to_spec'/1 (Child) in {'reply',{'ok',_62},State}
<'error'> when 'true' -> {'reply',{'error','not_found'},State}
(<_63> when 'true' -> primop 'match_fail' ({'case_clause',_63})-|['compiler_generated'] ) end
<'which_children',_X_From,State = {'state',_207,_208,_209,_210,_211,_212,_213,_214,_215,_216}> when (try let <_68> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_68,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'get_dynamic_child'/1 (State) of <{'child',_217,_218,_219,_220,_221,CT,Mods}> when 'true' -> let <_73> = fun (_71) -> case _71 of <{'restarting',_222}> when 'true' -> {'undefined','restarting',CT,Mods}
<Pid> when 'true' -> {'undefined',Pid,CT,Mods} end in let <Reply> = apply 'dyn_map'/2 (_73,State) in {'reply',Reply,State}
(<_70> when 'true' -> primop 'match_fail' ({'badmatch',_70})-|['compiler_generated'] ) end
<'which_children',_X_From,State> when 'true' -> let <_81> = fun (_78,_77) -> case <_78,_77> of <Id,{'child',{'restarting',_223},_224,_225,_226,_227,ChildType,Mods}> when 'true' -> {Id,'restarting',ChildType,Mods}
<Id,{'child',Pid,_228,_229,_230,_231,ChildType,Mods}> when 'true' -> {Id,Pid,ChildType,Mods}
(<_80,_79> when 'true' -> (primop 'match_fail' ({'function_clause',_80,_79})-|[{'function_name',{'-handle_call/3-fun-1-',2}}] )-|['compiler_generated'] ) end in (case State of (<({'state',_232,_233,_rec10,_234,_235,_236,_237,_238,_239,_240}-|['compiler_generated'] )> when 'true' -> let <Resp> = apply 'children_to_list'/2 (_81,_rec10) in {'reply',Resp,State}-|['compiler_generated'] )
(<_241> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'count_children',_X_From,State = {'state',_242,_243,_244,_245,_246,_247,_248,Restarts = _249,_250,_251}> when (try let <_87> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_87,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'get_dynamic_child'/1 (State) of <{'child',_252,_253,_254,_255,_256,CT,_257}> when 'true' -> let <Sz> = apply 'dyn_size'/1 (State) in let <Active> = call 'erlang':'-' (Sz,Restarts) in let <_93> = case CT of <'supervisor'> when 'true' -> [{'specs',1}|[{'active',Active}|[{'supervisors',Sz}|[{'workers',0}]]]]
<'worker'> when 'true' -> [{'specs',1}|[{'active',Active}|[{'supervisors',0}|[{'workers',Sz}|[]]]]]
(<_92> when 'true' -> primop 'match_fail' ({'case_clause',_92})-|['compiler_generated'] ) end in {'reply',_93,State}
(<_89> when 'true' -> primop 'match_fail' ({'badmatch',_89})-|['compiler_generated'] ) end
<'count_children',_X_From,State> when 'true' -> let <_103> = fun (_99,_98,_97) -> apply 'count_child'/2 (_98,_97) in (case State of (<({'state',_258,_259,_rec11,_260,_261,_262,_263,_264,_265,_266}-|['compiler_generated'] )> when 'true' -> case apply 'children_fold'/3 (_103,{0,0,0,0},_rec11) of <{Specs,Active,Supers,Workers}> when 'true' -> let <Reply> = [{'specs',Specs}|[{'active',Active}|[{'supervisors',Supers}|[{'workers',Workers}|[]]]]] in {'reply',Reply,State}
(<_104> when 'true' -> primop 'match_fail' ({'badmatch',_104})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_267> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_108,_107,_106> when 'true' -> (primop 'match_fail' ({'function_clause',_108,_107,_106})-|[{'function_name',{'handle_call',3}}] )-|['compiler_generated'] ) end
'count_child'/2 = fun (_0,_1) -> case <_0,_1> of <{'child',Pid,_22,_23,_24,_25,'worker',_26},{Specs,Active,Supers,Workers}> when 'true' -> let <_4> = case <> of (<> when call 'erlang':'is_pid' (Pid) -> call 'erlang':'is_process_alive' (Pid)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in case _4 of <'true'> when 'true' -> let <_7> = call 'erlang':'+' (Specs,1) in let <_6> = call 'erlang':'+' (Active,1) in let <_5> = call 'erlang':'+' (Workers,1) in {_7,_6,Supers,_5}
<'false'> when 'true' -> let <_9> = call 'erlang':'+' (Specs,1) in let <_8> = call 'erlang':'+' (Workers,1) in {_9,Active,Supers,_8}
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<{'child',Pid,_27,_28,_29,_30,'supervisor',_31},{Specs,Active,Supers,Workers}> when 'true' -> let <_13> = case <> of (<> when call 'erlang':'is_pid' (Pid) -> call 'erlang':'is_process_alive' (Pid)-|['compiler_generated'] )
(<> when 'true' -> 'false'-|['compiler_generated'] ) end in case _13 of <'true'> when 'true' -> let <_16> = call 'erlang':'+' (Specs,1) in let <_15> = call 'erlang':'+' (Active,1) in let <_14> = call 'erlang':'+' (Supers,1) in {_16,_15,_14,Workers}
<'false'> when 'true' -> let <_18> = call 'erlang':'+' (Specs,1) in let <_17> = call 'erlang':'+' (Supers,1) in {_18,Active,_17,Workers}
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
(<_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20})-|[{'function_name',{'count_child',2}}] )-|['compiler_generated'] ) end
'handle_cast'/2 = fun (_0,_1) -> case <_0,_1> of <{'try_again_restart',TryAgainId},State> when 'true' -> case apply 'find_child_and_args'/2 (TryAgainId,State) of <{'ok',Child = {'child',{'restarting',_6},_7,_8,_9,_10,_11,_12}}> when 'true' -> case apply 'restart'/2 (Child,State) of <{'ok',State1}> when 'true' -> {'noreply',State1}
<{'shutdown',State1}> when 'true' -> {'stop','shutdown',State1}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<_13> when 'true' -> {'noreply',State} end
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'handle_cast',2}}] )-|['compiler_generated'] ) end
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <{'EXIT',Pid,Reason},State> when 'true' -> case apply 'restart_child'/3 (Pid,Reason,State) of <{'ok',State1}> when 'true' -> {'noreply',State1}
<{'shutdown',State1}> when 'true' -> {'stop','shutdown',State1}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<Msg,State> when 'true' -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>588,'mfa'=>{'supervisor','handle_info',2}}~,'error',[83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Msg|[]],~{'domain'=>['otp'],'error_logger'=>~{'tag'=>'error'}~}~)
<'false'> when 'true' -> 'ok'
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end {'noreply',State} end
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Reason,State = {'state',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}> when (try let <_6> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_6,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'terminate_dynamic_children'/1 (State)
<_X_Reason,State> when 'true' -> (case State of (<({'state',_24,_25,_rec12,_26,_27,_28,_29,_30,_31,_32}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_rec13,_34,_35,_36,_37,_38,_39,_40,_41,_42}-|['compiler_generated'] )> when 'true' -> apply 'terminate_children'/2 (_rec12,_rec13)-|['compiler_generated'] )
(<_43> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'code_change'/3 = fun (_0,_1,_2) -> (case _1 of (<({'state',_14,_15,_16,_17,_18,_19,_20,_21,_rec14,_22}-|['compiler_generated'] )> when 'true' -> (case _1 of (<({'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_rec15}-|['compiler_generated'] )> when 'true' -> case call _rec14:'init' (_rec15) of <{'ok',{SupFlags,StartSpec}}> when 'true' -> case apply 'set_flags'/2 (SupFlags,_1) of <{'ok',State1}> when 'true' -> apply 'update_childspec'/2 (State1,StartSpec)
<{'invalid_type',_34}> when call 'erlang':'=:=' (_34,SupFlags) -> {'error',{'bad_flags',SupFlags}}
<Error> when 'true' -> {'error',Error} end
<'ignore'> when 'true' -> {'ok',_1}
<Error> when 'true' -> Error end-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'update_childspec'/2 = fun (_0,_1) -> case <_0,_1> of <State = {'state',_22,_23,_24,_25,_26,_27,_28,_29,_30,_31},StartSpec> when (try let <_6> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_6,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'check_startspec'/1 (StartSpec) of <{'ok',Children = {[_32|[]],_33}}> when 'true' -> case State of <{'state',_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}> when 'true' -> let <_10> = call 'erlang':'setelement' (4,State,Children) in {'ok',_10}
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error> when 'true' -> {'error',Error} end
<State,StartSpec> when 'true' -> case apply 'check_startspec'/1 (StartSpec) of <{'ok',Children}> when 'true' -> (case State of (<({'state',_45,_46,_rec17,_47,_48,_49,_50,_51,_52,_53}-|['compiler_generated'] )> when 'true' -> let <NewC> = apply 'update_childspec1'/3 (_rec17,Children,[]) in case State of <{'state',_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}> when 'true' -> let <_18> = call 'erlang':'setelement' (4,State,NewC) in {'ok',_18}
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> {'error',Error} end end
'update_childspec1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{[Id|OldIds],OldDb},_@r0 = {Ids,Db},KeepOld> when 'true' -> let <_3> = call 'maps':'get' (Id,OldDb) in case apply 'update_chsp'/2 (_3,Db) of <{'ok',NewDb}> when 'true' -> apply 'update_childspec1'/3 ({OldIds,OldDb},{Ids,NewDb},KeepOld)
<'false'> when 'true' -> apply 'update_childspec1'/3 ({OldIds,OldDb},_@r0,[Id|KeepOld])
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<{[],OldDb},{Ids,Db},KeepOld> when 'true' -> let <KeepOldDb> = call 'maps':'with' (KeepOld,OldDb) in let <_7> = call 'erlang':'++' (Ids,KeepOld) in let <_8> = call 'lists':'reverse' (_7) in let <_6> = call 'maps':'merge' (KeepOldDb,Db) in {_8,_6}
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'update_childspec1',3}}] )-|['compiler_generated'] ) end
'update_chsp'/2 = fun (_0,_1) -> case <_0,_1> of <OldChild = {'child',_12,Id,_13,_14,_15,_16,_17},NewDb> when 'true' -> case call 'maps':'find' (Id,NewDb) of <{'ok',Child}> when 'true' -> (case OldChild of (<({'child',_rec21,_18,_19,_20,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> case Child of <{'child',_25,_26,_27,_28,_29,_30,_31}> when 'true' -> let <_7> = call 'erlang':'setelement' (2,Child,_rec21) in case <> of (<> when call 'erlang':'is_map' (NewDb) -> let <_8> = ~{Id=>_7|NewDb}~ in {'ok',_8}-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',NewDb})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'error'> when 'true' -> 'false'
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'update_chsp',2}}] )-|['compiler_generated'] ) end
'handle_start_child'/2 = fun (_0,_1) -> (case _0 of (<({'child',_32,_rec22,_33,_34,_35,_36,_37}-|['compiler_generated'] )> when 'true' -> case apply 'find_child'/2 (_rec22,_1) of <'error'> when 'true' -> (case _1 of (<({'state',_rec23,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> case apply 'do_start_child'/2 (_rec23,_0) of <{'ok','undefined'}> when (try (let <_8> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_6-|['compiler_generated'] )> when 'true' -> (_6-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_9> = call 'erlang':'=:=' ((_8-|['compiler_generated'] ),'true') in let <_10> = call 'erlang':'element' (5,_0) in let <_11> = call 'erlang':'=:=' (_10,'temporary') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_9,_11)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {{'ok','undefined'},_1}
<_@r0 = {'ok',Pid}> when 'true' -> case _0 of <{'child',_49,_50,_51,_52,_53,_54,_55}> when 'true' -> let <_14> = call 'erlang':'setelement' (2,_0,Pid) in let <_15> = apply 'save_child'/2 (_14,_1) in {_@r0,_15}
(<_56> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_@r1 = {'ok',Pid,Extra}> when 'true' -> case _0 of <{'child',_57,_58,_59,_60,_61,_62,_63}> when 'true' -> let <_18> = call 'erlang':'setelement' (2,_0,Pid) in let <_19> = apply 'save_child'/2 (_18,_1) in {_@r1,_19}
(<_64> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'error',What}> when 'true' -> {{'error',{What,_0}},_1}
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'ok',OldChild = {'child',_65,_66,_67,_68,_69,_70,_71}}> when (try let <_25> = call 'erlang':'element' (2,OldChild) in call 'erlang':'is_pid' (_25) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case OldChild of (<({'child',_rec26,_72,_73,_74,_75,_76,_77}-|['compiler_generated'] )> when 'true' -> {{'error',{'already_started',_rec26}},_1}-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'ok',_X_OldChild}> when 'true' -> {{'error','already_present'},_1}
(<_29> when 'true' -> primop 'match_fail' ({'case_clause',_29})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'restart_child'/3 = fun (_0,_1,_2) -> case apply 'find_child_and_args'/2 (_0,_2) of <{'ok',Child}> when 'true' -> apply 'do_restart'/3 (_1,Child,_2)
<'error'> when 'true' -> {'ok',_2}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'do_restart'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Reason,Child = {'child',_55,_56,_57,_58,_59,_60,_61},State> when (try let <_7> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_7,'permanent') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case State of (<({'state',_rec27,_62,_63,_64,_65,_66,_67,_68,_69,_70}-|['compiler_generated'] )> when 'true' -> let <_11> = apply 'extract_child'/1 (Child) in let <_12> = ~{'report'=>[{'supervisor',_rec27}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_11}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>707,'mfa'=>{'supervisor','do_restart',3}}~,'error',_12,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_71> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end apply 'restart'/2 (Child,State)
<'normal',Child,State> when 'true' -> let <NState> = apply 'del_child'/2 (Child,State) in {'ok',NState}
<'shutdown',Child,State> when 'true' -> let <NState> = apply 'del_child'/2 (Child,State) in {'ok',NState}
<{'shutdown',_X_Term},Child,State> when 'true' -> let <NState> = apply 'del_child'/2 (Child,State) in {'ok',NState}
<Reason,Child = {'child',_72,_73,_74,_75,_76,_77,_78},State> when (try let <_25> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_25,'transient') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case State of (<({'state',_rec28,_79,_80,_81,_82,_83,_84,_85,_86,_87}-|['compiler_generated'] )> when 'true' -> let <_29> = apply 'extract_child'/1 (Child) in let <_30> = ~{'report'=>[{'supervisor',_rec28}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_29}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>719,'mfa'=>{'supervisor','do_restart',3}}~,'error',_30,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_35> when 'true' -> primop 'match_fail' ({'case_clause',_35})-|['compiler_generated'] ) end apply 'restart'/2 (Child,State)
<Reason,Child = {'child',_89,_90,_91,_92,_93,_94,_95},State> when (try let <_40> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_40,'temporary') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case State of (<({'state',_rec29,_96,_97,_98,_99,_100,_101,_102,_103,_104}-|['compiler_generated'] )> when 'true' -> let <_44> = apply 'extract_child'/1 (Child) in let <_45> = ~{'report'=>[{'supervisor',_rec29}|[{'errorContext','child_terminated'}|[{'reason',Reason}|[{'offender',_44}|[]]]]]|~{'label'=>{'supervisor','child_terminated'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>722,'mfa'=>{'supervisor','do_restart',3}}~,'error',_45,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_50> when 'true' -> primop 'match_fail' ({'case_clause',_50})-|['compiler_generated'] ) end let <NState> = apply 'del_child'/2 (Child,State) in {'ok',NState}
(<_54,_53,_52> when 'true' -> (primop 'match_fail' ({'function_clause',_54,_53,_52})-|[{'function_name',{'do_restart',3}}] )-|['compiler_generated'] ) end
'restart'/2 = fun (_0,_1) -> case apply 'add_restart'/1 (_1) of <{'ok',NState}> when 'true' -> (case NState of (<({'state',_18,_rec30,_19,_20,_21,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when 'true' -> case apply 'restart'/3 (_rec30,_0,NState) of <{{'try_again',TryAgainId},NState2}> when 'true' -> do apply 'try_again_restart'/1 (TryAgainId) {'ok',NState2}
<Other> when 'true' -> Other end-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'terminate',NState}> when 'true' -> do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case _1 of (<({'state',_rec31,_28,_29,_30,_31,_32,_33,_34,_35,_36}-|['compiler_generated'] )> when 'true' -> let <_7> = apply 'extract_child'/1 (_0) in let <_8> = ~{'report'=>[{'supervisor',_rec31}|[{'errorContext','shutdown'}|[{'reason','reached_max_restart_intensity'}|[{'offender',_7}|[]]]]]|~{'label'=>{'supervisor','shutdown'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>742,'mfa'=>{'supervisor','restart',2}}~,'error',_8,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end let <_14> = apply 'del_child'/2 (_0,NState) in {'shutdown',_14}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
'restart'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'simple_one_for_one',Child,State0> when 'true' -> case Child of <{'child',OldPid,_73,{M,F,A},_74,_75,_76,_77}> when 'true' -> let <_10> = case OldPid of <{'restarting',_78}> when 'true' -> (case State0 of (<({'state',_79,_80,_81,_82,_83,_84,_85,_rec32,_86,_87}-|['compiler_generated'] )> when 'true' -> let <NRes> = call 'erlang':'-' (_rec32,1) in case State0 of <{'state',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98}> when 'true' -> call 'erlang':'setelement' (9,State0,NRes)
(<_99> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_100> when 'true' -> State0 end in let <State2> = apply 'dyn_erase'/2 (OldPid,_10) in case apply 'do_start_child_i'/3 (M,F,A) of <{'ok',Pid}> when 'true' -> let <NState> = apply 'dyn_store'/3 (Pid,A,State2) in {'ok',NState}
<{'ok',Pid,_X_Extra}> when 'true' -> let <NState> = apply 'dyn_store'/3 (Pid,A,State2) in {'ok',NState}
<{'error',Error}> when 'true' -> let <ROldPid> = apply 'restarting'/1 (OldPid) in (case State2 of (<({'state',_101,_102,_103,_104,_105,_106,_107,_rec34,_108,_109}-|['compiler_generated'] )> when 'true' -> let <NRestarts> = call 'erlang':'+' (_rec34,1) in case State2 of <{'state',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120}> when 'true' -> let <_21> = call 'erlang':'setelement' (9,State2,NRestarts) in let <NState> = apply 'dyn_store'/3 (ROldPid,A,_21) in do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case NState of (<({'state',_rec36,_122,_123,_124,_125,_126,_127,_128,_129,_130}-|['compiler_generated'] )> when 'true' -> let <_26> = apply 'extract_child'/1 (Child) in let <_27> = ~{'report'=>[{'supervisor',_rec36}|[{'errorContext','start_error'}|[{'reason',Error}|[{'offender',_26}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>769,'mfa'=>{'supervisor','restart',3}}~,'error',_27,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_131> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end {{'try_again',ROldPid},NState}
(<_121> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_33> when 'true' -> primop 'match_fail' ({'case_clause',_33})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<'one_for_one',Child = {'child',_132,Id,_133,_134,_135,_136,_137},State> when 'true' -> (case Child of (<({'child',_rec37,_138,_139,_140,_141,_142,_143}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_rec38,_145,_146,_147,_148,_149,_150,_151,_152,_153}-|['compiler_generated'] )> when 'true' -> case apply 'do_start_child'/2 (_rec38,Child) of <{'ok',Pid}> when 'true' -> let <NState> = apply 'set_pid'/3 (Pid,Id,State) in {'ok',NState}
<{'ok',Pid,_X_Extra}> when 'true' -> let <NState> = apply 'set_pid'/3 (Pid,Id,State) in {'ok',NState}
<{'error',Reason}> when 'true' -> let <_41> = apply 'restarting'/1 (_rec37) in let <NState> = apply 'set_pid'/3 (_41,Id,State) in do case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case State of (<({'state',_rec39,_155,_156,_157,_158,_159,_160,_161,_162,_163}-|['compiler_generated'] )> when 'true' -> let <_45> = apply 'extract_child'/1 (Child) in let <_46> = ~{'report'=>[{'supervisor',_rec39}|[{'errorContext','start_error'}|[{'reason',Reason}|[{'offender',_45}|[]]]]]|~{'label'=>{'supervisor','start_error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>783,'mfa'=>{'supervisor','restart',3}}~,'error',_46,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)-|['compiler_generated'] )
(<_164> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_51> when 'true' -> primop 'match_fail' ({'case_clause',_51})-|['compiler_generated'] ) end {{'try_again',Id},NState}
(<_52> when 'true' -> primop 'match_fail' ({'case_clause',_52})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_154> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_144> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'rest_for_one',Child = {'child',_165,Id,_166,_167,_168,_169,_170},State = {'state',SupName,_171,_172,_173,_174,_175,_176,_177,_178,_179}> when 'true' -> (case State of (<({'state',_180,_181,_rec40,_182,_183,_184,_185,_186,_187,_188}-|['compiler_generated'] )> when 'true' -> case apply 'split_child'/2 (Id,_rec40) of <{ChAfter,ChBefore}> when 'true' -> case apply 'restart_multiple_children'/3 (Child,ChAfter,SupName) of <{Return,ChAfter2}> when 'true' -> let <_rec41> = apply 'append'/2 (ChAfter2,ChBefore) in case State of <{'state',_190,_191,_192,_193,_194,_195,_196,_197,_198,_199}> when 'true' -> let <_60> = call 'erlang':'setelement' (4,State,_rec41) in {Return,_60}
(<_200> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_56> when 'true' -> primop 'match_fail' ({'badmatch',_56})-|['compiler_generated'] ) end
(<_55> when 'true' -> primop 'match_fail' ({'badmatch',_55})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_189> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'one_for_all',Child,State = {'state',SupName,_201,_202,_203,_204,_205,_206,_207,_208,_209}> when 'true' -> (case Child of (<({'child',_210,_rec43,_211,_212,_213,_214,_215}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_217,_218,_rec44,_219,_220,_221,_222,_223,_224,_225}-|['compiler_generated'] )> when 'true' -> let <Children1> = apply 'del_child'/2 (_rec43,_rec44) in case apply 'restart_multiple_children'/3 (Child,Children1,SupName) of <{Return,NChildren}> when 'true' -> case State of <{'state',_227,_228,_229,_230,_231,_232,_233,_234,_235,_236}> when 'true' -> let <_69> = call 'erlang':'setelement' (4,State,NChildren) in {Return,_69}
(<_237> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_66> when 'true' -> primop 'match_fail' ({'badmatch',_66})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_226> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_216> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_72,_71,_70> when 'true' -> (primop 'match_fail' ({'function_clause',_72,_71,_70})-|[{'function_name',{'restart',3}}] )-|['compiler_generated'] ) end
'restart_multiple_children'/3 = fun (_0,_1,_2) -> let <Children1> = apply 'terminate_children'/2 (_1,_2) in case apply 'start_children'/2 (Children1,_2) of <_@r0 = {'ok',NChildren}> when 'true' -> _@r0
<{'error',NChildren,{'failed_to_start_child',FailedId,_X_Reason}}> when 'true' -> let <_12> = case <> of <> when (try (let <_6> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_4-|['compiler_generated'] )> when 'true' -> (_4-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_7> = call 'erlang':'=:=' ((_6-|['compiler_generated'] ),'true') in let <_8> = call 'erlang':'element' (3,_0) in let <_9> = call 'erlang':'=:=' (FailedId,_8) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_7,_9)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case _0 of (<({'child',_rec46,_19,_20,_21,_22,_23,_24}-|['compiler_generated'] )> when 'true' -> apply 'restarting'/1 (_rec46)-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> {'restarting','undefined'} end in let <_14> = apply 'set_pid'/3 (_12,FailedId,NChildren) in {{'try_again',FailedId},_14}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
'restarting'/1 = fun (_0) -> case _0 of <Pid> when call 'erlang':'is_pid' (_0) -> {'restarting',Pid}
<RPid> when 'true' -> RPid end
'try_again_restart'/1 = fun (_0) -> let <_1> = call 'erlang':'self' () in call 'gen_server':'cast' (_1,{'try_again_restart',_0})
'terminate_children'/2 = fun (_0,_1) -> let <Terminate> = fun (_12,_11) -> case <_12,_11> of <_X_Id,Child = {'child',_19,_20,_21,_22,_23,_24,_25}> when (try let <_6> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_6,'temporary') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> do apply 'do_terminate'/2 (Child,_1) 'remove'
<_X_Id,Child> when 'true' -> do apply 'do_terminate'/2 (Child,_1) case Child of <{'child',_26,_27,_28,_29,_30,_31,_32}> when 'true' -> let <_10> = call 'erlang':'setelement' (2,Child,'undefined') in {'update',_10}
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end in case apply 'children_map'/2 (Terminate,_0) of <{'ok',NChildren}> when 'true' -> NChildren
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
'do_terminate'/2 = fun (_0,_1) -> case <_0,_1> of <Child = {'child',_31,_32,_33,_34,_35,_36,_37},SupName> when (try let <_6> = call 'erlang':'element' (2,Child) in call 'erlang':'is_pid' (_6) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Child of (<({'child',_rec48,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_45,_46,_47,_48,_rec49,_49,_50}-|['compiler_generated'] )> when 'true' -> do case apply 'shutdown'/2 (_rec48,_rec49) of <'ok'> when 'true' -> 'ok'
<{'error','normal'}> when try (let <_14> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Child,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_12-|['compiler_generated'] )> when 'true' -> (_12-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_15> = call 'erlang':'=:=' ((_14-|['compiler_generated'] ),'true') in let <_16> = call 'erlang':'element' (5,Child) in let <_17> = call 'erlang':'=:=' (_16,'permanent') in let <_18> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_15,_17) in let <_19> = call 'erlang':'not' (_18) in let <_20> = call 'erlang':'is_boolean' (_14) in (call 'erlang':'and' (_19,_20)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> 'ok'
<{'error',OtherReason}> when 'true' -> case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> let <_21> = apply 'extract_child'/1 (Child) in let <_22> = ~{'report'=>[{'supervisor',SupName}|[{'errorContext','shutdown_error'}|[{'reason',OtherReason}|[{'offender',_21}|[]]]]]|~{'label'=>{'supervisor','shutdown_error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>844,'mfa'=>{'supervisor','do_terminate',2}}~,'error',_22,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_27> when 'true' -> primop 'match_fail' ({'case_clause',_27})-|['compiler_generated'] ) end
(<_28> when 'true' -> primop 'match_fail' ({'case_clause',_28})-|['compiler_generated'] ) end 'ok'-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Child,_X_SupName> when 'true' -> 'ok' end
'shutdown'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,'brutal_kill'> when 'true' -> case apply 'monitor_child'/1 (Pid) of <'ok'> when 'true' -> do call 'erlang':'exit' (Pid,'kill') receive <{'DOWN',_X_MRef,'process',_6,'killed'}> when call 'erlang':'=:=' (_6,Pid) -> 'ok'
<{'DOWN',_X_MRef,'process',_7,OtherReason}> when call 'erlang':'=:=' (_7,Pid) -> {'error',OtherReason} after 'infinity' -> 'true'
<_@r0 = {'error',Reason}> when 'true' -> _@r0
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<Pid,Time> when 'true' -> case apply 'monitor_child'/1 (Pid) of <'ok'> when 'true' -> do call 'erlang':'exit' (Pid,'shutdown') receive <{'DOWN',_X_MRef,'process',_8,'shutdown'}> when call 'erlang':'=:=' (_8,Pid) -> 'ok'
<{'DOWN',_X_MRef,'process',_9,OtherReason}> when call 'erlang':'=:=' (_9,Pid) -> {'error',OtherReason} after Time -> do call 'erlang':'exit' (Pid,'kill') receive <{'DOWN',_X_MRef,'process',_10,OtherReason}> when call 'erlang':'=:=' (_10,Pid) -> {'error',OtherReason} after 'infinity' -> 'true'
<_@r1 = {'error',Reason}> when 'true' -> _@r1
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end end
'monitor_child'/1 = fun (_0) -> do call 'erlang':'monitor' ('process',_0) do call 'erlang':'unlink' (_0) receive <{'EXIT',_2,Reason}> when call 'erlang':'=:=' (_2,_0) -> receive <{'DOWN',_3,'process',_4,_5}> when call 'erlang':'=:=' (_4,_0) -> {'error',Reason} after 'infinity' -> 'true' after 0 -> 'ok'
'terminate_dynamic_children'/1 = fun (_0) -> let <Child> = apply 'get_dynamic_child'/1 (_0) in case apply 'monitor_dynamic_children'/2 (Child,_0) of <{Pids,EStack0}> when 'true' -> let <Sz> = call 'maps':'size' (Pids) in (case Child of (<({'child',_52,_53,_54,_55,_rec50,_56,_57}-|['compiler_generated'] )> when 'true' -> let <_30> = case _rec50 of <'brutal_kill'> when 'true' -> let <_12> = fun (_8,_7,_6) -> call 'erlang':'exit' (_8,'kill') in do call 'maps':'fold' (_12,'ok',Pids) apply 'wait_dynamic_children'/5 (Child,Pids,Sz,'undefined',EStack0)
<'infinity'> when 'true' -> let <_19> = fun (_15,_14,_13) -> call 'erlang':'exit' (_15,'shutdown') in do call 'maps':'fold' (_19,'ok',Pids) apply 'wait_dynamic_children'/5 (Child,Pids,Sz,'undefined',EStack0)
<Time> when 'true' -> let <_26> = fun (_22,_21,_20) -> call 'erlang':'exit' (_22,'shutdown') in do call 'maps':'fold' (_26,'ok',Pids) let <_27> = call 'erlang':'self' () in let <TRef> = call 'erlang':'start_timer' (Time,_27,'kill') in apply 'wait_dynamic_children'/5 (Child,Pids,Sz,TRef,EStack0) end in let <_50> = fun (_46,_45,_44) -> case call 'logger':'allow' ('error','supervisor') of <'true'> when 'true' -> (case _0 of (<({'state',_rec51,_66,_67,_68,_69,_70,_71,_72,_73,_74}-|['compiler_generated'] )> when 'true' -> case Child of <{'child',_76,_77,_78,_79,_80,_81,_82}> when 'true' -> let <_36> = call 'erlang':'setelement' (2,Child,_45) in let <_37> = apply 'extract_child'/1 (_36) in let <_38> = ~{'report'=>[{'supervisor',_rec51}|[{'errorContext','shutdown_error'}|[{'reason',_46}|[{'offender',_37}|[]]]]]|~{'label'=>{'supervisor','shutdown_error'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>948,'mfa'=>{'supervisor','terminate_dynamic_children',1}}~,'error',_38,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'error_report','type'=>'supervisor_report'}~,'logger_formatter'=>~{'title'=>[83|[85|[80|[69|[82|[86|[73|[83|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
(<_83> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_43> when 'true' -> primop 'match_fail' ({'case_clause',_43})-|['compiler_generated'] ) end in call 'maps':'fold' (_50,'ok',_30)-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'monitor_dynamic_children'/2 = fun (_0,_1) -> let <_20> = fun (_17,_16) -> case <_17,_16> of <P,_@r0 = {Pids,EStack}> when call 'erlang':'is_pid' (P) -> case apply 'monitor_child'/1 (P) of <'ok'> when 'true' -> let <_4> = call 'maps':'put' (P,P,Pids) in {_4,EStack}
<{'error','normal'}> when try (let <_7> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_5-|['compiler_generated'] )> when 'true' -> (_5-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_8> = call 'erlang':'=:=' ((_7-|['compiler_generated'] ),'true') in let <_9> = call 'erlang':'element' (5,_0) in let <_10> = call 'erlang':'=:=' (_9,'permanent') in let <_11> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_10) in let <_12> = call 'erlang':'not' (_11) in let <_13> = call 'erlang':'is_boolean' (_7) in (call 'erlang':'and' (_12,_13)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> _@r0
<{'error',Reason}> when 'true' -> let <_14> = apply 'maps_prepend'/3 (Reason,P,EStack) in {Pids,_14}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<{'restarting',_23},_@r1 = {Pids,EStack}> when 'true' -> _@r1
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'-monitor_dynamic_children/2-fun-0-',2}}] )-|['compiler_generated'] ) end in let <_3> = call 'maps':'new' () in let <_2> = call 'maps':'new' () in apply 'dyn_fold'/3 (_20,{_3,_2},_1)
'wait_dynamic_children'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Child,_X_Pids,0,'undefined',EStack> when 'true' -> EStack
<_X_Child,_X_Pids,0,TRef,EStack> when 'true' -> do (call ('erlang'-|['result_not_wanted'] ):('cancel_timer'-|['result_not_wanted'] ) (TRef)-|['result_not_wanted'] ) receive <{'timeout',_41,'kill'}> when call 'erlang':'=:=' (_41,TRef) -> EStack after 0 -> EStack
<Child = {'child',_42,_43,_44,_45,'brutal_kill',_46,_47},Pids,Sz,TRef,EStack> when 'true' -> receive <{'DOWN',_X_MRef,'process',Pid,'killed'}> when 'true' -> let <_7> = call 'maps':'remove' (Pid,Pids) in let <_6> = call 'erlang':'-' (Sz,1) in apply 'wait_dynamic_children'/5 (Child,_7,_6,TRef,EStack)
<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' -> let <_10> = call 'maps':'remove' (Pid,Pids) in let <_9> = call 'erlang':'-' (Sz,1) in let <_8> = apply 'maps_prepend'/3 (Reason,Pid,EStack) in apply 'wait_dynamic_children'/5 (Child,_10,_9,TRef,_8) after 'infinity' -> 'true'
<Child,Pids,Sz,TRef,EStack> when 'true' -> receive <{'DOWN',_X_MRef,'process',Pid,'shutdown'}> when 'true' -> let <_12> = call 'maps':'remove' (Pid,Pids) in let <_11> = call 'erlang':'-' (Sz,1) in apply 'wait_dynamic_children'/5 (Child,_12,_11,TRef,EStack)
<{'DOWN',_X_MRef,'process',Pid,{'shutdown',_48}}> when 'true' -> let <_14> = call 'maps':'remove' (Pid,Pids) in let <_13> = call 'erlang':'-' (Sz,1) in apply 'wait_dynamic_children'/5 (Child,_14,_13,TRef,EStack)
<{'DOWN',_X_MRef,'process',Pid,'normal'}> when try (let <_17> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Child,('child'-|['compiler_generated'] ),(8-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_15-|['compiler_generated'] )> when 'true' -> (_15-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_18> = call 'erlang':'=:=' ((_17-|['compiler_generated'] ),'true') in let <_19> = call 'erlang':'element' (5,Child) in let <_20> = call 'erlang':'=:=' (_19,'permanent') in let <_21> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_18,_20) in let <_22> = call 'erlang':'not' (_21) in let <_23> = call 'erlang':'is_boolean' (_17) in (call 'erlang':'and' (_22,_23)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <_25> = call 'maps':'remove' (Pid,Pids) in let <_24> = call 'erlang':'-' (Sz,1) in apply 'wait_dynamic_children'/5 (Child,_25,_24,TRef,EStack)
<{'DOWN',_X_MRef,'process',Pid,Reason}> when 'true' -> let <_28> = call 'maps':'remove' (Pid,Pids) in let <_27> = call 'erlang':'-' (Sz,1) in let <_26> = apply 'maps_prepend'/3 (Reason,Pid,EStack) in apply 'wait_dynamic_children'/5 (Child,_28,_27,TRef,_26)
<{'timeout',_49,'kill'}> when call 'erlang':'=:=' (_49,TRef) -> let <_35> = fun (_31,_30,_29) -> call 'erlang':'exit' (_31,'kill') in do call 'maps':'fold' (_35,'ok',Pids) apply 'wait_dynamic_children'/5 (Child,Pids,Sz,'undefined',EStack) after 'infinity' -> 'true' end
'maps_prepend'/3 = fun (_0,_1,_2) -> case call 'maps':'find' (_0,_2) of <{'ok',Values}> when 'true' -> call 'maps':'put' (_0,[_1|Values],_2)
<'error'> when 'true' -> call 'maps':'put' (_0,[_1|[]],_2)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'save_child'/2 = fun (_0,_1) -> case <_0,_1> of <Child = {'child',_14,_15,_16 = {M,F,_17},_18,_19,_20,_21},State> when (try let <_6> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_6,'temporary') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_rec53> = {M,F,'undefined'} in case Child of <{'child',_22,_23,_24,_25,_26,_27,_28}> when 'true' -> let <_11> = call 'erlang':'setelement' (4,Child,_rec53) in apply 'do_save_child'/2 (_11,State)
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Child,State> when 'true' -> apply 'do_save_child'/2 (Child,State) end
'do_save_child'/2 = fun (_0,_1) -> case <_0,_1> of <Child = {'child',_8,Id,_9,_10,_11,_12,_13},State = {'state',_14,_15,{Ids,Db},_16,_17,_18,_19,_20,_21,_22}> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Db) -> let <_2> = ~{Id=>Child|Db}~ in let <_rec55> = {[Id|Ids],_2} in case State of <{'state',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}> when 'true' -> call 'erlang':'setelement' (4,State,_rec55)
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'do_save_child',2}}] )-|['compiler_generated'] ) end
'del_child'/2 = fun (_0,_1) -> case <_0,_1> of <{'child',Pid,_30,_31,_32,_33,_34,_35},State = {'state',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when (try let <_6> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_6,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'dyn_erase'/2 (Pid,State)
<Child = {'child',_46,_47,_48,_49,_50,_51,_52},State = {'state',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62}> when ('true'-|['compiler_generated'] ) -> (case Child of (<({'child',_63,_rec57,_64,_65,_66,_67,_68}-|['compiler_generated'] )> when 'true' -> (case State of (<({'state',_70,_71,_rec58,_72,_73,_74,_75,_76,_77,_78}-|['compiler_generated'] )> when 'true' -> let <NChildren> = apply 'del_child'/2 (_rec57,_rec58) in case State of <{'state',_80,_81,_82,_83,_84,_85,_86,_87,_88,_89}> when 'true' -> call 'erlang':'setelement' (4,State,NChildren)
(<_90> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_69> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Id,{Ids,Db}> when 'true' -> case call 'maps':'get' (Id,Db) of <Child = {'child',_91,_92,_93,_94,_95,_96,_97}> when (try let <_19> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_19,'temporary') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_22> = call 'lists':'delete' (Id,Ids) in let <_21> = call 'maps':'remove' (Id,Db) in {_22,_21}
<Child> when 'true' -> case Child of <{'child',_98,_99,_100,_101,_102,_103,_104}> when 'true' -> let <_25> = call 'erlang':'setelement' (2,Child,'undefined') in case <> of (<> when call 'erlang':'is_map' (Db) -> let <_26> = ~{Id=>_25|Db}~ in {Ids,_26}-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_105> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
(<_29,_28> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28})-|[{'function_name',{'del_child',2}}] )-|['compiler_generated'] ) end
'split_child'/2 = fun (_0,_1) -> case <_0,_1> of <Id,{Ids,Db}> when 'true' -> case apply 'split_ids'/3 (Id,Ids,[]) of <{IdsAfter,IdsBefore}> when 'true' -> let <DbBefore> = call 'maps':'with' (IdsBefore,Db) in case call 'maps':'with' (IdsAfter,Db) of <DbAfter = ~{Id:=Ch}~> when 'true' -> case Ch of <{'child',_11,_12,_13,_14,_15,_16,_17}> when 'true' -> let <_7> = call 'erlang':'setelement' (2,Ch,'undefined') in case <> of (<> when call 'erlang':'is_map' (DbAfter) -> let <_8> = ~{Id=>_7|DbAfter}~ in {{IdsAfter,_8},{IdsBefore,DbBefore}}-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',DbAfter})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'split_child',2}}] )-|['compiler_generated'] ) end
'split_ids'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Id,[_7|Ids],After> when call 'erlang':'=:=' (_7,Id) -> let <_3> = call 'lists':'reverse' ([Id|After]) in {_3,Ids}
<Id,[Other|Ids],After> when 'true' -> apply 'split_ids'/3 (Id,Ids,[Other|After])
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'split_ids',3}}] )-|['compiler_generated'] ) end
'find_child'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,State = {'state',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when try let <_2> = call 'erlang':'is_pid' (Pid) in let <_7> = call 'erlang':'element' (3,State) in let <_8> = call 'erlang':'=:=' (_7,'simple_one_for_one') in call 'erlang':'and' (_2,_8) of <Try> -> Try catch <T,R> -> 'false' -> case apply 'find_dynamic_child'/2 (Pid,State) of <'error'> when 'true' -> let <_10> = apply 'restarting'/1 (Pid) in case apply 'find_dynamic_child'/2 (_10,State) of <'error'> when 'true' -> case call 'erlang':'is_process_alive' (Pid) of <'true'> when 'true' -> 'error'
<'false'> when 'true' -> let <_11> = apply 'get_dynamic_child'/1 (State) in {'ok',_11}
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
<Other> when 'true' -> Other end
<Other> when 'true' -> Other end
<Id,{'state',_27,_28,{_X_Ids,Db},_29,_30,_31,_32,_33,_34,_35}> when 'true' -> call 'maps':'find' (Id,Db)
(<_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15})-|[{'function_name',{'find_child',2}}] )-|['compiler_generated'] ) end
'find_child_and_args'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,State = {'state',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25}> when (try let <_6> = call 'erlang':'element' (3,State) in call 'erlang':'=:=' (_6,'simple_one_for_one') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case apply 'find_dynamic_child'/2 (Pid,State) of <{'ok',Child = {'child',_26,_27,{M,F,_28},_29,_30,_31,_32}}> when 'true' -> case apply 'dyn_args'/2 (Pid,State) of <{'ok',Args}> when 'true' -> let <_rec62> = {M,F,Args} in case Child of <{'child',_33,_34,_35,_36,_37,_38,_39}> when 'true' -> let <_12> = call 'erlang':'setelement' (4,Child,_rec62) in {'ok',_12}
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<'error'> when 'true' -> 'error'
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
<Pid,State> when call 'erlang':'is_pid' (Pid) -> apply 'find_child_by_pid'/2 (Pid,State)
<Id,{'state',_41,_42,{_X_Ids,Db},_43,_44,_45,_46,_47,_48,_49}> when 'true' -> call 'maps':'find' (Id,Db)
(<_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14})-|[{'function_name',{'find_child_and_args',2}}] )-|['compiler_generated'] ) end
'find_dynamic_child'/2 = fun (_0,_1) -> case apply 'dyn_exists'/2 (_0,_1) of <'true'> when 'true' -> let <Child> = apply 'get_dynamic_child'/1 (_1) in case Child of <{'child',_9,_10,_11,_12,_13,_14,_15}> when 'true' -> let <_5> = call 'erlang':'setelement' (2,Child,_0) in {'ok',_5}
(<_16> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'false'> when 'true' -> 'error'
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'find_child_by_pid'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,{'state',_15,_16,{_X_Ids,Db},_17,_18,_19,_20,_21,_22,_23}> when 'true' -> let <Fun> = fun (_4,_3,_2) -> case <_4,_3,_2> of <_X_Id,Ch = {'child',P,_24,_25,_26,_27,_28,_29},_30> when call 'erlang':'=:=' (P,Pid) -> call 'erlang':'throw' (Ch)
<_31,_32,'error'> when 'true' -> 'error'
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'-find_child_by_pid/2-fun-0-',3}}] )-|['compiler_generated'] ) end in try call 'maps':'fold' (Fun,'error',Db) of <_9> -> _9 catch <_12,_11,_10> -> case <_12,_11,_10> of <('throw'-|['compiler_generated'] ),Child,_33> when 'true' -> {'ok',Child}
(<_34,_35,_36> when 'true' -> primop 'raise' (_36,_35)-|['compiler_generated'] ) end
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'find_child_by_pid',2}}] )-|['compiler_generated'] ) end
'get_dynamic_child'/1 = fun (_0) -> case _0 of <{'state',_3,_4,{[Id|[]],Db},_5,_6,_7,_8,_9,_10,_11}> when 'true' -> case Db of <~{Id:=Child}~> when 'true' -> Child
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'get_dynamic_child',1}}] )-|['compiler_generated'] ) end
'set_pid'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Pid,Id,State = {'state',_15,_16,Children,_17,_18,_19,_20,_21,_22,_23}> when 'true' -> let <_rec65> = apply 'set_pid'/3 (Pid,Id,Children) in case State of <{'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> call 'erlang':'setelement' (4,State,_rec65)
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Pid,Id,{Ids,Db}> when 'true' -> let <_10> = fun (_8) -> case _8 of <{'child',_35,_36,_37,_38,_39,_40,_41}> when 'true' -> call 'erlang':'setelement' (2,_8,Pid)
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <NewDb> = call 'maps':'update_with' (Id,_10,Db) in {Ids,NewDb}
(<_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12})-|[{'function_name',{'set_pid',3}}] )-|['compiler_generated'] ) end
'remove_child'/2 = fun (_0,_1) -> case <_0,_1> of <Id,State = {'state',_9,_10,{Ids,Db},_11,_12,_13,_14,_15,_16,_17}> when 'true' -> let <NewIds> = call 'lists':'delete' (Id,Ids) in let <NewDb> = call 'maps':'remove' (Id,Db) in let <_rec68> = {NewIds,NewDb} in case State of <{'state',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27}> when 'true' -> call 'erlang':'setelement' (4,State,_rec68)
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'remove_child',2}}] )-|['compiler_generated'] ) end
'children_map'/2 = fun (_0,_1) -> case <_0,_1> of <Fun,{Ids,Db}> when 'true' -> apply 'children_map'/4 (Fun,Ids,Db,[])
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'children_map',2}}] )-|['compiler_generated'] ) end
'children_map'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Fun,[Id|Ids],Db,Acc> when 'true' -> let <_4> = call 'maps':'get' (Id,Db) in case apply Fun (Id,_4) of <{'update',Child}> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Db) -> let <_5> = ~{Id=>Child|Db}~ in apply 'children_map'/4 (Fun,Ids,_5,[Id|Acc])-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<'remove'> when 'true' -> let <_6> = call 'maps':'remove' (Id,Db) in apply 'children_map'/4 (Fun,Ids,_6,Acc)
<{'abort',Reason}> when 'true' -> let <_7> = call 'lists':'reverse' (Ids) in let <_8> = call 'erlang':'++' (_7,[Id|Acc]) in {'error',{_8,Db},Reason}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<_X_Fun,[],Db,Acc> when 'true' -> {'ok',{Acc,Db}}
(<_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10})-|[{'function_name',{'children_map',4}}] )-|['compiler_generated'] ) end
'children_to_list'/2 = fun (_0,_1) -> case <_0,_1> of <Fun,{Ids,Db}> when 'true' -> apply 'children_to_list'/4 (Fun,Ids,Db,[])
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'children_to_list',2}}] )-|['compiler_generated'] ) end
'children_to_list'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Fun,[Id|Ids],Db,Acc> when 'true' -> let <_4> = call 'maps':'get' (Id,Db) in let <_5> = apply Fun (Id,_4) in apply 'children_to_list'/4 (Fun,Ids,Db,[_5|Acc])
<_X_Fun,[],_X_Db,Acc> when 'true' -> call 'lists':'reverse' (Acc)
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'children_to_list',4}}] )-|['compiler_generated'] ) end
'children_fold'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Fun,Init,{_X_Ids,Db}> when 'true' -> call 'maps':'fold' (Fun,Init,Db)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'children_fold',3}}] )-|['compiler_generated'] ) end
'append'/2 = fun (_0,_1) -> case <_0,_1> of <{Ids1,Db1},{Ids2,Db2}> when 'true' -> let <_3> = call 'erlang':'++' (Ids1,Ids2) in let <_2> = call 'maps':'merge' (Db1,Db2) in {_3,_2}
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'append',2}}] )-|['compiler_generated'] ) end
'init_state'/4 = fun (_0,_1,_2,_3) -> let <_4> = apply 'supname'/2 (_0,_2) in apply 'set_flags'/2 (_1,{'state',_4,'undefined',{[],~{}~},'undefined','undefined','undefined',[],0,_2,_3})
'set_flags'/2 = fun (_0,_1) -> try apply 'check_flags'/1 (_0) of <_2> -> case _2 of <~{'period':=Period,'intensity':=MaxIntensity,'strategy':=Strategy}~> when 'true' -> case _1 of <{'state',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23}> when 'true' -> let <_4> = call 'erlang':'setelement' (7,_1,Period) in let <_5> = call 'erlang':'setelement' (6,_4,MaxIntensity) in let <_7> = call 'erlang':'setelement' (3,_5,Strategy) in {'ok',_7}
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'try_clause',_8})-|['compiler_generated'] ) end catch <_11,_10,_9> -> case <_11,_10,_9> of <('throw'-|['compiler_generated'] ),Thrown,_25> when 'true' -> Thrown
(<_26,_27,_28> when 'true' -> primop 'raise' (_28,_27)-|['compiler_generated'] ) end
'check_flags'/1 = fun (_0) -> case _0 of <SupFlags> when call 'erlang':'is_map' (_0) -> let <_1> = call 'maps':'merge' (~{'intensity'=>1,'period'=>5,'strategy'=>'one_for_one'}~,SupFlags) in apply 'do_check_flags'/1 (_1)
<{Strategy,MaxIntensity,Period}> when 'true' -> let <_2> = ~{'strategy'=>Strategy,'intensity'=>MaxIntensity,'period'=>Period}~ in apply 'check_flags'/1 (_2)
<What> when 'true' -> call 'erlang':'throw' ({'invalid_type',What}) end
'do_check_flags'/1 = fun (_0) -> case _0 of <Flags = ~{'period':=Period,'intensity':=MaxIntensity,'strategy':=Strategy}~> when 'true' -> do apply 'validStrategy'/1 (Strategy) do apply 'validIntensity'/1 (MaxIntensity) do apply 'validPeriod'/1 (Period) Flags
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'do_check_flags',1}}] )-|['compiler_generated'] ) end
'validStrategy'/1 = fun (_0) -> case _0 of <'simple_one_for_one'> when 'true' -> 'true'
<'one_for_one'> when 'true' -> 'true'
<'one_for_all'> when 'true' -> 'true'
<'rest_for_one'> when 'true' -> 'true'
<What> when 'true' -> call 'erlang':'throw' ({'invalid_strategy',What}) end
'validIntensity'/1 = fun (_0) -> case _0 of <Max> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>=' (_0,0) in call 'erlang':'and' (_1,_2) -> 'true'
<What> when 'true' -> call 'erlang':'throw' ({'invalid_intensity',What}) end
'validPeriod'/1 = fun (_0) -> case _0 of <Period> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in call 'erlang':'and' (_1,_2) -> 'true'
<What> when 'true' -> call 'erlang':'throw' ({'invalid_period',What}) end
'supname'/2 = fun (_0,_1) -> case <_0,_1> of <'self',Mod> when 'true' -> let <_2> = call 'erlang':'self' () in {_2,Mod}
<N,_5> when 'true' -> N end
'check_startspec'/1 = fun (_0) -> apply 'check_startspec'/3 (_0,[],~{}~)
'check_startspec'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[ChildSpec|T],Ids,Db> when 'true' -> case apply 'check_childspec'/1 (ChildSpec) of <{'ok',Child = {'child',_10,Id,_11,_12,_13,_14,_15}}> when 'true' -> case call 'maps':'is_key' (Id,Db) of <'true'> when 'true' -> {'duplicate_child_name',Id}
<'false'> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Db) -> let <_3> = ~{Id=>Child|Db}~ in apply 'check_startspec'/3 (T,[Id|Ids],_3)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
<Error> when 'true' -> Error end
<[],Ids,Db> when 'true' -> let <_6> = call 'lists':'reverse' (Ids) in {'ok',{_6,Db}}
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'check_startspec',3}}] )-|['compiler_generated'] ) end
'check_childspec'/1 = fun (_0) -> case _0 of <ChildSpec> when call 'erlang':'is_map' (_0) -> catch let <_1> = call 'maps':'merge' (~{'restart'=>'permanent','type'=>'worker'}~,ChildSpec) in apply 'do_check_childspec'/1 (_1)
<{Id,Func,RestartType,Shutdown,ChildType,Mods}> when 'true' -> let <_2> = ~{'id'=>Id,'start'=>Func,'restart'=>RestartType,'shutdown'=>Shutdown,'type'=>ChildType,'modules'=>Mods}~ in apply 'check_childspec'/1 (_2)
<X> when 'true' -> {'invalid_child_spec',X} end
'do_check_childspec'/1 = fun (_0) -> case _0 of <ChildSpec = ~{'restart':=RestartType,'type':=ChildType}~> when 'true' -> case ChildSpec of <~{'id':=I}~> when 'true' -> case ChildSpec of <~{'start':=F}~> when 'true' -> do apply 'validId'/1 (I) do apply 'validFunc'/1 (F) do apply 'validRestartType'/1 (RestartType) do apply 'validChildType'/1 (ChildType) let <_8> = case ChildSpec of <~{'shutdown':=S}~> when 'true' -> S
<~{'type':='worker'}~> when 'true' -> 5000
<~{'type':='supervisor'}~> when 'true' -> 'infinity'
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end in do apply 'validShutdown'/1 (_8) let <_12> = case ChildSpec of <~{'modules':=Ms}~> when 'true' -> Ms
<_17> when 'true' -> case F of <{M,_18,_19}> when 'true' -> [M|[]]
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end end in do apply 'validMods'/1 (_12) {'ok',{'child','undefined',I,F,RestartType,_8,ChildType,_12}}
<_16> when 'true' -> call 'erlang':'throw' ('missing_start') end
<_15> when 'true' -> call 'erlang':'throw' ('missing_id') end
(<_14> when 'true' -> (primop 'match_fail' ({'function_clause',_14})-|[{'function_name',{'do_check_childspec',1}}] )-|['compiler_generated'] ) end
'validChildType'/1 = fun (_0) -> case _0 of <'supervisor'> when 'true' -> 'true'
<'worker'> when 'true' -> 'true'
<What> when 'true' -> call 'erlang':'throw' ({'invalid_child_type',What}) end
'validId'/1 = fun (_0) -> 'true'
'validFunc'/1 = fun (_0) -> case _0 of <{M,F,A}> when try let <_1> = call 'erlang':'is_atom' (M) in let <_2> = call 'erlang':'is_atom' (F) in let <_3> = call 'erlang':'is_list' (A) in let <_4> = call 'erlang':'and' (_2,_3) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> 'true'
<Func> when 'true' -> call 'erlang':'throw' ({'invalid_mfa',Func}) end
'validRestartType'/1 = fun (_0) -> case _0 of <'permanent'> when 'true' -> 'true'
<'temporary'> when 'true' -> 'true'
<'transient'> when 'true' -> 'true'
<RestartType> when 'true' -> call 'erlang':'throw' ({'invalid_restart_type',RestartType}) end
'validShutdown'/1 = fun (_0) -> case _0 of <Shutdown> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>' (_0,0) in call 'erlang':'and' (_1,_2) -> 'true'
<'infinity'> when 'true' -> 'true'
<'brutal_kill'> when 'true' -> 'true'
<Shutdown> when 'true' -> call 'erlang':'throw' ({'invalid_shutdown',Shutdown}) end
'validMods'/1 = fun (_0) -> case _0 of <'dynamic'> when 'true' -> 'true'
<Mods> when call 'erlang':'is_list' (_0) -> let <_3> = fun (_1) -> case <> of <> when call 'erlang':'is_atom' (_1) -> 'ok'
<> when 'true' -> call 'erlang':'throw' ({'invalid_module',_1}) end in call 'lists':'foreach' (_3,Mods)
<Mods> when 'true' -> call 'erlang':'throw' ({'invalid_modules',Mods}) end
'child_to_spec'/1 = fun (_0) -> case _0 of <{'child',_2,Id,Func,RestartType,Shutdown,ChildType,Mods}> when 'true' -> ~{'id'=>Id,'start'=>Func,'restart'=>RestartType,'shutdown'=>Shutdown,'type'=>ChildType,'modules'=>Mods}~
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'child_to_spec',1}}] )-|['compiler_generated'] ) end
'add_restart'/1 = fun (_0) -> (case _0 of (<({'state',_18,_19,_20,_21,_rec71,_22,_23,_24,_25,_26}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'state',_28,_29,_30,_31,_32,_rec72,_33,_34,_35,_36}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'state',_38,_39,_40,_41,_42,_43,_rec73,_44,_45,_46}-|['compiler_generated'] )> when 'true' -> let <Now> = call 'erlang':'monotonic_time' (1) in let <R1> = apply 'add_restart'/3 ([Now|_rec73],Now,_rec72) in case _0 of <{'state',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' -> let <_14> = call 'erlang':'setelement' (8,_0,R1) in case call 'erlang':'length' (R1) of <CurI> when call 'erlang':'=<' (CurI,_rec71) -> {'ok',_14}
<_59> when 'true' -> {'terminate',_14} end
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_37> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'add_restart'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[R|Restarts],Now,Period> when 'true' -> case apply 'inPeriod'/3 (R,Now,Period) of <'true'> when 'true' -> let <_3> = apply 'add_restart'/3 (Restarts,Now,Period) in [R|_3]
<_8> when 'true' -> [] end
<[],_9,_10> when 'true' -> []
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'add_restart',3}}] )-|['compiler_generated'] ) end
'inPeriod'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'+' (_0,_2) in call 'erlang':'=<' (_1,_3)
'extract_child'/1 = fun (_0) -> case _0 of <Child = {'child',_33,_34,_35,_36,_37,_38,_39}> when (try let <_5> = call 'erlang':'element' (2,Child) in call 'erlang':'is_list' (_5) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Child of (<({'child',_rec75,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> let <_9> = call 'erlang':'length' (_rec75) in (case Child of (<({'child',_47,_rec76,_48,_49,_50,_51,_52}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_54,_55,_rec77,_56,_57,_58,_59}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_61,_62,_63,_rec78,_64,_65,_66}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_68,_69,_70,_71,_rec79,_72,_73}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_75,_76,_77,_78,_79,_rec80,_80}-|['compiler_generated'] )> when 'true' -> [{'nb_children',_9}|[{'id',_rec76}|[{'mfargs',_rec77}|[{'restart_type',_rec78}|[{'shutdown',_rec79}|[{'child_type',_rec80}|[]]]]]]]-|['compiler_generated'] )
(<_81> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Child> when 'true' -> (case Child of (<({'child',_rec81,_82,_83,_84,_85,_86,_87}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_89,_rec82,_90,_91,_92,_93,_94}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_96,_97,_rec83,_98,_99,_100,_101}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_103,_104,_105,_rec84,_106,_107,_108}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_110,_111,_112,_113,_rec85,_114,_115}-|['compiler_generated'] )> when 'true' -> (case Child of (<({'child',_117,_118,_119,_120,_121,_rec86,_122}-|['compiler_generated'] )> when 'true' -> [{'pid',_rec81}|[{'id',_rec82}|[{'mfargs',_rec83}|[{'restart_type',_rec84}|[{'shutdown',_rec85}|[{'child_type',_rec86}|[]]]]]]]-|['compiler_generated'] )
(<_123> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_116> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_109> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_102> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','child'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'report_progress'/2 = fun (_0,_1) -> case call 'logger':'allow' ('info','supervisor') of <'true'> when 'true' -> let <_2> = apply 'extract_child'/1 (_0) in let <_3> = ~{'report'=>[{'supervisor',_1}|[{'started',_2}|[]]]|~{'label'=>{'supervisor','progress'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>1433,'mfa'=>{'supervisor','report_progress',2}}~,'info',_3,~{'domain'=>['otp'|['sasl']],'error_logger'=>~{'report_cb'=>fun 'supervisor':'format_log'/1,'tag'=>'info_report','type'=>'progress'}~,'logger_formatter'=>~{'title'=>[80|[82|[79|[71|[82|[69|[83|[83|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]]]}~,'report_cb'=>fun 'supervisor':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'format_log'/1 = fun (_0) -> let <Depth> = call 'error_logger':'get_format_depth' () in let <FormatOpts> = ~{'depth'=>Depth,'single_line'=>'false','encoding'=>'utf8'|~{'chars_limit'=>'unlimited'}~}~ in let <_3> = apply 'limit_report'/2 (_0,Depth) in apply 'format_log_multi'/2 (_3,FormatOpts)
'limit_report'/2 = fun (_0,_1) -> case <_0,_1> of <LogReport,'unlimited'> when 'true' -> LogReport
<LogReport = ~{'report':=[Supervisor = {'supervisor',_8}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,Depth> when 'true' -> let <_2> = apply 'limit_child_report'/2 (Child,Depth) in case <> of (<> when call 'erlang':'is_map' (LogReport) -> ~{'report'=>[Supervisor|[{'started',_2}|[]]]|LogReport}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',LogReport})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<LogReport = ~{'report':=[Supervisor = {'supervisor',_9}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,Depth> when 'true' -> let <_3> = call 'io_lib':'limit_term' (Ctxt,Depth) in let <_4> = call 'io_lib':'limit_term' (Reason,Depth) in let <_5> = apply 'limit_child_report'/2 (Child,Depth) in case <> of (<> when call 'erlang':'is_map' (LogReport) -> ~{'report'=>[Supervisor|[{'errorContext',_3}|[{'reason',_4}|[{'offender',_5}|[]]]]]|LogReport}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',LogReport})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'limit_report',2}}] )-|['compiler_generated'] ) end
'limit_child_report'/2 = fun (_0,_1) -> call 'io_lib':'limit_term' (_0,_1)
'format_log'/2 = fun (_0,_1) -> let <FormatOpts> = call 'maps':'merge' (~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~,_1) in let <_5> = case FormatOpts of <~{'chars_limit':='unlimited'}~> when 'true' -> []
<~{'chars_limit':=Limit}~> when 'true' -> [{'chars_limit',Limit}|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case apply 'format_log_single'/2 (_0,FormatOpts) of <{Format,Args}> when 'true' -> call 'io_lib':'format' (Format,Args,_5)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'format_log_single'/2 = fun (_0,_1) -> case <_0,_1> of <~{'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in case apply 'format_child_log_single'/2 (Child,[83|[116|[97|[114|[116|[101|[100|[58]]]]]]]]) of <{ChildFormat,ChildArgs}> when 'true' -> let <_4> = call 'erlang':'++' (P,[46]) in let <Format> = call 'erlang':'++' ([83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]],_4) in let <_7> = case Depth of <'unlimited'> when 'true' -> [SupName|[]]
<_21> when 'true' -> [SupName|[Depth|[]]] end in let <_10> = call 'erlang':'++' (Format,ChildFormat) in let <_9> = call 'erlang':'++' (_7,ChildArgs) in {_10,_9}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<~{'report':=[{'supervisor',SupName}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[83|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]|[P|[[46|[32|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]|[P|[[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]]) in case apply 'format_child_log_single'/2 (Child,[79|[102|[102|[101|[110|[100|[101|[114|[58]]]]]]]]]) of <{ChildFormat,ChildArgs}> when 'true' -> let <_15> = case Depth of <'unlimited'> when 'true' -> [SupName|[Ctxt|[Reason|[]]]]
<_22> when 'true' -> [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[]]]]]]] end in let <_18> = call 'erlang':'++' (Format,ChildFormat) in let <_17> = call 'erlang':'++' (_15,ChildArgs) in {_18,_17}
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<Report,FormatOpts> when 'true' -> apply 'format_log_multi'/2 (Report,FormatOpts) end
'format_log_multi'/2 = fun (_0,_1) -> case <_0,_1> of <~{'report':=[{'supervisor',SupName}|[{'started',Child}|[]]],'label':={'supervisor','progress'}}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[115|[116|[97|[114|[116|[101|[100|[58|[32]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]) in let <_5> = case Depth of <'unlimited'> when 'true' -> [SupName|[Child|[]]]
<_14> when 'true' -> [SupName|[Depth|[Child|[Depth|[]]]]] end in {Format,_5}
<~{'report':=[{'supervisor',SupName}|[{'errorContext',Ctxt}|[{'reason',Reason}|[{'offender',Child}|[]]]]],'label':={'supervisor',_X_Error}}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[32|[32|[32|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[58|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[101|[114|[114|[111|[114|[67|[111|[110|[116|[101|[120|[116|[58|[32]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[114|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]|[P|[[126|[110]]|[[32|[32|[32|[32|[111|[102|[102|[101|[110|[100|[101|[114|[58|[32]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]]]]]]]]) in let <_10> = case Depth of <'unlimited'> when 'true' -> [SupName|[Ctxt|[Reason|[Child|[]]]]]
<_15> when 'true' -> [SupName|[Depth|[Ctxt|[Depth|[Reason|[Depth|[Child|[Depth|[]]]]]]]]] end in {Format,_10}
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'format_log_multi',2}}] )-|['compiler_generated'] ) end
'format_child_log_single'/2 = fun (_0,_1) -> case call 'lists':'keyfind' ('id',1,_0) of <{'id',Id}> when 'true' -> case call 'lists':'keyfind' ('pid',1,_0) of <'false'> when 'true' -> case call 'lists':'keyfind' ('nb_children',1,_0) of <{'nb_children',NumCh}> when 'true' -> {[32|[126|[115|[32|[105|[100|[61|[126|[119|[44|[110|[98|[95|[99|[104|[105|[108|[100|[114|[101|[110|[61|[126|[119|[46]]]]]]]]]]]]]]]]]]]]]]]]],[_1|[Id|[NumCh|[]]]]}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<T> when call 'erlang':'is_tuple' (T) -> case call 'lists':'keyfind' ('pid',1,_0) of <{'pid',Pid}> when 'true' -> {[32|[126|[115|[32|[105|[100|[61|[126|[119|[44|[112|[105|[100|[61|[126|[119|[46]]]]]]]]]]]]]]]]],[_1|[Id|[Pid|[]]]]}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'p'/1 = fun (_0) -> case _0 of <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' -> let <_4> = apply 'single'/1 (Single) in let <_2> = apply 'mod'/1 (Enc) in let <_1> = apply 'p'/1 (Depth) in let <_3> = call 'erlang':'++' (_2,_1) in let <_5> = call 'erlang':'++' (_4,_3) in [126|_5]
<'unlimited'> when 'true' -> [112]
<_X_Depth> when 'true' -> [80] end
'single'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> [48]
<'false'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'single',1}}] )-|['compiler_generated'] ) end
'mod'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'format_status'/2 = fun (_0,_1) -> case <_0,_1> of <'terminate',[_X_PDict|[State|[]]]> when 'true' -> State
<_6,[_X_PDict|[State|[]]]> when 'true' -> (case State of (<({'state',_7,_8,_9,_10,_11,_12,_13,_14,_rec87,_15}-|['compiler_generated'] )> when 'true' -> [{'data',[{[83|[116|[97|[116|[101]]]]],State}|[]]}|[{'supervisor',[{[67|[97|[108|[108|[98|[97|[99|[107]]]]]]]],_rec87}|[]]}|[]]]-|['compiler_generated'] )
(<_16> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'format_status',2}}] )-|['compiler_generated'] ) end
'dyn_size'/1 = fun (_0) -> case _0 of <{'state',_2,_3,_4,{_X_Kind,Db},_5,_6,_7,_8,_9,_10}> when 'true' -> call 'erlang':'map_size' (Db)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'dyn_size',1}}] )-|['compiler_generated'] ) end
'dyn_erase'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,State = {'state',_8,_9,_10,{_X_Kind,Db},_11,_12,_13,_14,_15,_16}> when 'true' -> let <_2> = call 'maps':'remove' (Pid,Db) in let <_rec88> = {'maps',_2} in case State of <{'state',_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' -> call 'erlang':'setelement' (5,State,_rec88)
(<_27> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'dyn_erase',2}}] )-|['compiler_generated'] ) end
'dyn_store'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Pid,Args,State = {'state',_15,_16,_17,{Kind,Db},_18,_19,_20,_21,_22,_23}> when 'true' -> case Kind of <'mapsets'> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Db) -> let <_3> = ~{Pid=>[]|Db}~ in let <_rec90> = {'mapsets',_3} in case State of <{'state',_24,_25,_26,_27,_28,_29,_30,_31,_32,_33}> when 'true' -> call 'erlang':'setelement' (5,State,_rec90)
(<_34> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<'maps'> when 'true' -> case <> of (<> when call 'erlang':'is_map' (Db) -> let <_7> = ~{Pid=>Args|Db}~ in let <_rec92> = {'maps',_7} in case State of <{'state',_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}> when 'true' -> call 'erlang':'setelement' (5,State,_rec92)
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Db})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12})-|[{'function_name',{'dyn_store',3}}] )-|['compiler_generated'] ) end
'dyn_fold'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Fun,Init,{'state',_13,_14,_15,{_X_Kind,Db},_16,_17,_18,_19,_20,_21}> when 'true' -> let <_9> = fun (_5,_4,_3) -> apply Fun (_5,_3) in call 'maps':'fold' (_9,Init,Db)
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'dyn_fold',3}}] )-|['compiler_generated'] ) end
'dyn_map'/2 = fun (_0,_1) -> case <_0,_1> of <Fun,{'state',_5,_6,_7,{_X_Kind,Db},_8,_9,_10,_11,_12,_13}> when 'true' -> let <_2> = call 'maps':'keys' (Db) in call 'lists':'map' (Fun,_2)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'dyn_map',2}}] )-|['compiler_generated'] ) end
'dyn_exists'/2 = fun (_0,_1) -> case <_0,_1> of <Pid,{'state',_4,_5,_6,{_X_Kind,Db},_7,_8,_9,_10,_11,_12}> when 'true' -> call 'erlang':'is_map_key' (Pid,Db)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'dyn_exists',2}}] )-|['compiler_generated'] ) end
'dyn_args'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Pid,{'state',_4,_5,_6,{'mapsets',_X_Db},_7,_8,_9,_10,_11,_12}> when 'true' -> {'ok','undefined'}
<Pid,{'state',_13,_14,_15,{'maps',Db},_16,_17,_18,_19,_20,_21}> when 'true' -> call 'maps':'find' (Pid,Db)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'dyn_args',2}}] )-|['compiler_generated'] ) end
'dyn_init'/1 = fun (_0) -> let <_1> = apply 'get_dynamic_child'/1 (_0) in apply 'dyn_init'/2 (_1,_0)
'dyn_init'/2 = fun (_0,_1) -> case <_0,_1> of <Child = {'child',_18,_19,_20,_21,_22,_23,_24},State> when (try let <_6> = call 'erlang':'element' (5,Child) in call 'erlang':'=:=' (_6,'temporary') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_8> = call 'maps':'new' () in let <_rec94> = {'mapsets',_8} in case State of <{'state',_25,_26,_27,_28,_29,_30,_31,_32,_33,_34}> when 'true' -> call 'erlang':'setelement' (5,State,_rec94)
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_X_Child,State> when 'true' -> let <_12> = call 'maps':'new' () in let <_rec96> = {'maps',_12} in case State of <{'state',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}> when 'true' -> call 'erlang':'setelement' (5,State,_rec96)
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'behaviour_info'/1 = fun (_0) -> case _0 of <'callbacks'> when 'true' -> [{'init',1}]
<'optional_callbacks'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'behaviour_info',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('supervisor')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('supervisor',_0) end