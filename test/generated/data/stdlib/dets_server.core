module 'dets_server' ['all'/0,'close'/1,'code_change'/3,'get_pid'/1,'handle_call'/3,'handle_cast'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'open_file'/1,'open_file'/2,'pid2name'/1,'start'/0,'start_link'/0,'stop'/0,'terminate'/2,'users'/1,'verbose'/1] attributes [ 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[115|[101|[114|[118|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_server']
, 'record' = [{'pending',[{'record_field',38,{'atom',38,'tab'}}|[{'record_field',38,{'atom',38,'ref'}}|[{'record_field',38,{'atom',38,'pid'}}|[{'record_field',38,{'atom',38,'from'}}|[{'record_field',38,{'atom',38,'reqtype'}}|[{'record_field',38,{'atom',38,'clients'}}]]]]]]}]
, 'record' = [{'state',[{'record_field',41,{'atom',41,'store'}}|[{'record_field',41,{'atom',41,'parent'}}|[{'record_field',41,{'atom',41,'pending'}}]]]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}]
, 'type' = [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}]
, 'type' = [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}]
, 'type' = [{'keypos',{'type',52,'pos_integer',[]},[]}]
, 'type' = [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}]
, 'type' = [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'tab_name',{'type',56,'term',[]},[]}]
, 'type' = [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}]
, 'type' = [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}]
, 'record' = [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'record' = [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}]
, 'type' = [{'delay',{'type',136,'non_neg_integer',[]},[]}]
, 'type' = [{'threshold',{'type',137,'non_neg_integer',[]},[]}]
, 'type' = [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}]
, 'record' = [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}]
, 'type' = [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[115|[101|[114|[118|[101|[114|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],44}]
, 'compile' = [{'inline',[{'pid2name_1',1}]}] ] 'start_link'/0 = fun () -> let <_0> = call 'erlang':'self' () in call 'gen_server':'start_link' ({'local','dets'},'dets_server',[_0|[]],[])
'start'/0 = fun () -> apply 'ensure_started'/0 ()
'stop'/0 = fun () -> case call 'erlang':'whereis' ('dets') of <'undefined'> when 'true' -> 'stopped'
<_X_Pid> when 'true' -> call 'gen_server':'call' ('dets','stop','infinity') end
'all'/0 = fun () -> apply 'call'/1 ('all')
'close'/1 = fun (_0) -> apply 'call'/1 ({'close',_0})
'get_pid'/1 = fun (_0) -> call 'ets':'lookup_element' ('dets_registry',_0,3)
'open_file'/1 = fun (_0) -> apply 'call'/1 ({'open',_0})
'open_file'/2 = fun (_0,_1) -> apply 'call'/1 ({'open',_0,_1})
'pid2name'/1 = fun (_0) -> do apply 'ensure_started'/0 () (case (call ('ets'-|['compiler_generated'] ):('lookup'-|['compiler_generated'] ) (('dets_owners'-|['compiler_generated'] ),_0)-|['compiler_generated'] ) of (<([]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )
(<([({_X_Pid,Tab}-|['compiler_generated'] )|([]-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ({('ok'-|['compiler_generated'] ),Tab}-|['compiler_generated'] )-|['compiler_generated'] )
(<_1> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_1}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'users'/1 = fun (_0) -> apply 'call'/1 ({'users',_0})
'verbose'/1 = fun (_0) -> apply 'call'/1 ({'set_verbose',_0})
'call'/1 = fun (_0) -> do apply 'ensure_started'/0 () call 'gen_server':'call' ('dets',_0,'infinity')
'init'/1 = fun (_0) -> let <Store> = apply 'init'/0 () in {'ok',{'state',Store,_0,[]}}
'handle_call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'all',_X_From,State> when 'true' -> let <F> = fun (_5,_4) -> let <_3> = call 'erlang':'element' (1,_5) in [_3|_4] in let <_9> = call 'ets':'foldl' (F,[],'dets_registry') in {'reply',_9,State}
<_@r0 = {'close',Tab},From,State> when 'true' -> apply 'request'/2 ([{_@r0,From}|[]],State)
<_@r1 = {'open',File},From,State> when 'true' -> apply 'request'/2 ([{_@r1,From}|[]],State)
<_@r2 = {'open',Tab,OpenArgs},From,State> when 'true' -> apply 'request'/2 ([{_@r2,From}|[]],State)
<'stop',_X_From,State> when 'true' -> {'stop','normal','stopped',State}
<{'set_verbose',What},_X_From,State> when 'true' -> do apply 'set_verbose'/1 (What) {'reply','ok',State}
<{'users',Tab},_X_From,State> when 'true' -> (case State of (<({'state',_rec0,_16,_17}-|['compiler_generated'] )> when 'true' -> let <Users> = call 'ets':'select' (_rec0,[{{'$1',Tab},[],['$1']}|[]]) in {'reply',Users,State}-|['compiler_generated'] )
(<_18> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13})-|[{'function_name',{'handle_call',3}}] )-|['compiler_generated'] ) end
'handle_cast'/2 = fun (_0,_1) -> {'noreply',_1}
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <{'pending_reply',{Ref,Result0}},State> when 'true' -> (case State of (<({'state',_45,_46,_rec1}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keysearch' (Ref,3,_rec1) of <{'value',{'pending',Tab,_48,Pid,From = {FromPid,_X_Tag},ReqT,Clients}}> when 'true' -> (case State of (<({'state',_rec2,_49,_50}-|['compiler_generated'] )> when 'true' -> let <_13> = case <Result0,ReqT> of <'ok','add_user'> when 'true' -> do apply 'do_link'/2 (_rec2,FromPid) case call 'ets':'insert' (_rec2,{FromPid,Tab}) of <'true'> when 'true' -> do call 'ets':'update_counter' ('dets_registry',Tab,1) {'ok',Tab}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<'ok','internal_open'> when 'true' -> do call 'erlang':'link' (Pid) do apply 'do_link'/2 (_rec2,FromPid) case call 'ets':'insert' (_rec2,{FromPid,Tab}) of <'true'> when 'true' -> {'ok',Tab}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<Reply,('internal_open'-|['compiler_generated'] )> when 'true' -> case call 'ets':'delete' ('dets_registry',Tab) of <'true'> when 'true' -> case call 'ets':'delete' ('dets_owners',Pid) of <'true'> when 'true' -> Reply
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<Reply,_52> when 'true' -> Reply end in do call 'gen_server':'reply' (From,_13) (case State of (<({'state',_53,_54,_rec3}-|['compiler_generated'] )> when 'true' -> let <NP> = call 'lists':'keydelete' (Pid,4,_rec3) in case State of <{'state',_56,_57,_58}> when 'true' -> let <_20> = call 'erlang':'setelement' (4,State,NP) in apply 'request'/2 (Clients,_20)
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'EXIT',Pid,_X_Reason},State> when 'true' -> (case State of (<({'state',_rec5,_60,_61}-|['compiler_generated'] )> when 'true' -> case (case (call ('ets'-|['compiler_generated'] ):('lookup'-|['compiler_generated'] ) (('dets_owners'-|['compiler_generated'] ),Pid)-|['compiler_generated'] ) of (<([]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )
(<([({_X_Pid,Tab}-|['compiler_generated'] )|([]-|['compiler_generated'] )]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ({('ok'-|['compiler_generated'] ),Tab}-|['compiler_generated'] )-|['compiler_generated'] )
(<_71> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_71}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <{'ok',Tab}> when 'true' -> case call 'ets':'delete' ('dets_registry',Tab) of <'true'> when 'true' -> case call 'ets':'delete' ('dets_owners',Pid) of <'true'> when 'true' -> (case State of (<({'state',_rec6,_63,_64}-|['compiler_generated'] )> when 'true' -> let <Users> = call 'ets':'select' (_rec6,[{{'$1',Tab},[],['$1']}|[]]) in case call 'ets':'match_delete' (_rec5,{'_',Tab}) of <'true'> when 'true' -> let <_33> = fun (_31) -> apply 'do_unlink'/2 (_rec5,_31) in do call 'lists':'foreach' (_33,Users) {'noreply',State}
(<_30> when 'true' -> primop 'match_fail' ({'badmatch',_30})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_26> when 'true' -> primop 'match_fail' ({'badmatch',_26})-|['compiler_generated'] ) end
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
<'undefined'> when 'true' -> let <F> = fun (_36,_35) -> case <_36,_35> of <{FromPid,Tab},S> when 'true' -> case apply 'handle_close'/4 (S,{'close',Tab},{FromPid,'notag'},Tab) of <{_66,S1}> when 'true' -> S1
(<_34> when 'true' -> primop 'match_fail' ({'badmatch',_34})-|['compiler_generated'] ) end
(<_38,_37> when 'true' -> (primop 'match_fail' ({'function_clause',_38,_37})-|[{'function_name',{'-handle_info/2-fun-1-',2}}] )-|['compiler_generated'] ) end in let <_40> = call 'ets':'lookup' (_rec5,Pid) in let <State1> = call 'lists':'foldl' (F,State,_40) in {'noreply',State1}
(<_42> when 'true' -> primop 'match_fail' ({'case_clause',_42})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Message,State> when 'true' -> {'noreply',State} end
'terminate'/2 = fun (_0,_1) -> 'ok'
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'ensure_started'/0 = fun () -> case call 'erlang':'whereis' ('dets') of <'undefined'> when 'true' -> do (call ('supervisor'-|['result_not_wanted'] ):('start_child'-|['result_not_wanted'] ) (('kernel_safe_sup'-|['result_not_wanted'] ),{'dets_sup',{'dets_sup','start_link',[]},'permanent',1000,'supervisor',['dets_sup']})-|['result_not_wanted'] ) do (call ('supervisor'-|['result_not_wanted'] ):('start_child'-|['result_not_wanted'] ) (('kernel_safe_sup'-|['result_not_wanted'] ),{'dets',{'dets_server','start_link',[]},'permanent',2000,'worker',['dets_server']})-|['result_not_wanted'] ) 'ok'
<_6> when 'true' -> 'ok' end
'init'/0 = fun () -> let <_0> = apply 'verbose_flag'/0 () in do apply 'set_verbose'/1 (_0) do call 'erlang':'process_flag' ('trap_exit','true') case call 'ets':'new' ('dets_registry',['set'|['named_table']]) of <'dets_registry'> when 'true' -> case call 'ets':'new' ('dets_owners',['set'|['named_table']]) of <'dets_owners'> when 'true' -> call 'ets':'new' ('dets',['duplicate_bag'])
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'verbose_flag'/0 = fun () -> case call 'init':'get_argument' ('dets') of <{'ok',Args}> when 'true' -> call 'lists':'member' ([[118|[101|[114|[98|[111|[115|[101]]]]]]]],Args)
<_1> when 'true' -> 'false' end
'set_verbose'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> call 'erlang':'put' ('verbose','yes')
<_2> when 'true' -> call 'erlang':'erase' ('verbose') end
'pid2name_1'/1 = fun (_0) -> case call 'ets':'lookup' ('dets_owners',_0) of <[]> when 'true' -> 'undefined'
<[{_X_Pid,Tab}|[]]> when 'true' -> {'ok',Tab}
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'request'/2 = fun (_0,_1) -> case <_0,_1> of <[{Req,From}|L],State> when 'true' -> let <_4> = case Req of <{'close',Tab}> when 'true' -> apply 'handle_close'/4 (State,Req,From,Tab)
<{'open',File}> when 'true' -> let <_2> = call 'erlang':'get' ('verbose') in apply 'do_internal_open'/3 (State,From,[File|[_2|[]]])
<{'open',Tab,OpenArgs}> when 'true' -> apply 'do_open'/5 (State,Req,From,OpenArgs,Tab)
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end in let <_7> = case _4 of <{'pending',State1}> when 'true' -> State1
<{Reply,State1}> when 'true' -> do call 'gen_server':'reply' (From,Reply) State1
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in apply 'request'/2 (L,_7)
<[],State> when 'true' -> {'noreply',State}
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'request',2}}] )-|['compiler_generated'] ) end
'do_open'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'check_pending'/4 (_4,_2,_0,_1) of <_@r0 = {'pending',NewState}> when 'true' -> _@r0
<'false'> when 'true' -> case call 'ets':'lookup' ('dets_registry',_4) of <[]> when 'true' -> let <_5> = call 'erlang':'get' ('verbose') in let <A> = [_4|[_3|[_5|[]]]] in apply 'do_internal_open'/3 (_0,_2,A)
<[{_15,_X_Counter,Pid}|[]]> when call 'erlang':'=:=' (_15,_4) -> let <_7> = call 'erlang':'make_ref' () in apply 'pending_call'/7 (_4,Pid,_7,_2,_3,'add_user',_0)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'do_internal_open'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'self' () in case call 'supervisor':'start_child' ('dets_sup',[_3|[]]) of <{'ok',Pid}> when 'true' -> let <Ref> = call 'erlang':'make_ref' () in let <_6> = case _2 of <[T|[_14|[_15|[]]]]> when 'true' -> T
<[_16|[_17|[]]]> when 'true' -> Ref
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in case call 'ets':'insert' ('dets_registry',{_6,1,Pid}) of <'true'> when 'true' -> case call 'ets':'insert' ('dets_owners',{Pid,_6}) of <'true'> when 'true' -> apply 'pending_call'/7 (_6,Pid,Ref,_1,_2,'internal_open',_0)
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<Error> when 'true' -> {Error,_0} end
'handle_close'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <State,Req,From = {FromPid,_X_Tag},Tab> when 'true' -> case apply 'check_pending'/4 (Tab,From,State,Req) of <_@r0 = {'pending',NewState}> when 'true' -> _@r0
<'false'> when 'true' -> (case State of (<({'state',_rec7,_22,_23}-|['compiler_generated'] )> when 'true' -> case call 'ets':'match_object' (_rec7,{FromPid,Tab}) of <[]> when 'true' -> {{'error','not_owner'},State}
<[_25|Keep]> when 'true' -> case call 'ets':'lookup' ('dets_registry',Tab) of <[{_26,1,Pid}|[]]> when call 'erlang':'=:=' (_26,Tab) -> do apply 'do_unlink'/2 (_rec7,FromPid) case call 'ets':'delete' ('dets_registry',Tab) of <'true'> when 'true' -> case call 'ets':'delete' ('dets_owners',Pid) of <'true'> when 'true' -> case call 'ets':'match_delete' (_rec7,{FromPid,Tab}) of <'true'> when 'true' -> do call 'erlang':'unlink' (Pid) let <_10> = call 'erlang':'make_ref' () in apply 'pending_call'/7 (Tab,Pid,_10,From,[],'internal_close',State)
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<[{_27,_X_Counter,Pid}|[]]> when call 'erlang':'=:=' (_27,Tab) -> do apply 'do_unlink'/2 (_rec7,FromPid) case call 'ets':'match_delete' (_rec7,{FromPid,Tab}) of <'true'> when 'true' -> case call 'ets':'insert' (_rec7,Keep) of <'true'> when 'true' -> do call 'ets':'update_counter' ('dets_registry',Tab,-1) let <_14> = call 'erlang':'make_ref' () in apply 'pending_call'/7 (Tab,Pid,_14,From,[],'remove_user',State)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20,_19,_18})-|[{'function_name',{'handle_close',4}}] )-|['compiler_generated'] ) end
'do_link'/2 = fun (_0,_1) -> let <Key> = {'links',_1} in case call 'ets':'lookup' (_0,Key) of <[]> when 'true' -> case call 'ets':'insert' (_0,{Key,1}) of <'true'> when 'true' -> call 'erlang':'link' (_1)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<[{_10,C}|[]]> when 'true' -> case call 'ets':'delete' (_0,Key) of <'true'> when 'true' -> let <_5> = call 'erlang':'+' (C,1) in let <_11> = call 'ets':'insert' (_0,{Key,_5}) in case _11 of <'true'> when 'true' -> (_11-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'do_unlink'/2 = fun (_0,_1) -> let <Key> = {'links',_1} in case call 'ets':'lookup' (_0,Key) of <[{_10,C}|[]]> when call 'erlang':'>' (C,1) -> case call 'ets':'delete' (_0,Key) of <'true'> when 'true' -> let <_4> = call 'erlang':'-' (C,1) in let <_11> = call 'ets':'insert' (_0,{Key,_4}) in case _11 of <'true'> when 'true' -> (_11-|['compiler_generated'] )
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<_12> when 'true' -> case call 'ets':'delete' (_0,Key) of <'true'> when 'true' -> call 'erlang':'unlink' (_1)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end end
'pending_call'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Tab,Pid,Ref,From = {FromPid,_X_Tag},Args,ReqT,State> when 'true' -> let <Server> = call 'erlang':'self' () in let <F> = fun () -> let <_9> = case ReqT of <'add_user'> when 'true' -> call 'dets':'add_user' (Pid,Tab,Args)
<'internal_open'> when 'true' -> call 'dets':'internal_open' (Pid,Ref,Args)
<'internal_close'> when 'true' -> call 'dets':'internal_close' (Pid)
<'remove_user'> when 'true' -> call 'dets':'remove_user' (Pid,FromPid)
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in call 'erlang':'!' (Server,{'pending_reply',{Ref,_9}}) in do (call ('erlang'-|['result_not_wanted'] ):('spawn'-|['result_not_wanted'] ) (F)-|['result_not_wanted'] ) let <PD> = {'pending',Tab,Ref,Pid,From,ReqT,[]} in (case State of (<({'state',_27,_28,_rec8}-|['compiler_generated'] )> when 'true' -> let <P> = [PD|_rec8] in case State of <{'state',_30,_31,_32}> when 'true' -> let <_19> = call 'erlang':'setelement' (4,State,P) in {'pending',_19}
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_26,_25,_24,_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25,_24,_23,_22,_21,_20})-|[{'function_name',{'pending_call',7}}] )-|['compiler_generated'] ) end
'check_pending'/4 = fun (_0,_1,_2,_3) -> (case _2 of (<({'state',_21,_22,_rec10}-|['compiler_generated'] )> when 'true' -> case call 'lists':'keysearch' (_0,2,_rec10) of <{'value',P = {'pending',_24,_25,_26,_27,_28,Clients}}> when call 'erlang':'=:=' (_24,_0) -> (case _2 of (<({'state',_29,_30,_rec11}-|['compiler_generated'] )> when 'true' -> let <_rec12> = call 'erlang':'++' (Clients,[{_3,_1}|[]]) in case P of <{'pending',_32,_33,_34,_35,_36,_37}> when 'true' -> let <_9> = call 'erlang':'setelement' (7,P,_rec12) in let <NP> = call 'lists':'keyreplace' (_0,2,_rec11,_9) in case _2 of <{'state',_39,_40,_41}> when 'true' -> let <_15> = call 'erlang':'setelement' (4,_2,NP) in {'pending',_15}
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','pending'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'false'
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_23> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('dets_server')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('dets_server',_0) end