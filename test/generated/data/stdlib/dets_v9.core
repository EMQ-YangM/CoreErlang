module 'dets_v9' ['bchunk_init'/2,'bulk_input'/3,'cache_segps'/3,'check_file_header'/2,'compact_init'/3,'db_hash'/2,'do_perform_save'/1,'file_info'/1,'find_object'/2,'fsck_input'/4,'init_freelist'/1,'initiate_file'/11,'mark_dirty'/1,'may_grow'/3,'module_info'/0,'module_info'/1,'no_slots'/1,'output_objs'/3,'prep_table_copy'/9,'read_bchunks'/2,'read_file_header'/2,'scan_objs'/8,'slot_objs'/2,'table_parameters'/1,'try_bchunk_header'/2,'v_segments'/1,'write_cache'/1] attributes [ 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[118|[57|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'dialyzer' = ['no_improper_lists']
, 'compile' = [{'inline',[{'max_objsize',1}|[{'maxobjsize',1}]]}]
, 'compile' = [{'inline',[{'write_segment_file',6}]}]
, 'compile' = [{'inline',[{'sz2pos',1}|[{'adjsz',1}]]}]
, 'compile' = [{'inline',[{'skip_bytes',6}|[{'make_object',4}]]}]
, 'compile' = [{'inline',[{'segp_cache',2}|[{'get_segp',1}|[{'get_arrpart',1}]]]}]
, 'compile' = [{'inline',[{'h',2}]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[46|[104|[114|[108]]]]]]]]]]]],1}]
, 'type' = [{'access',{'type',49,'union',[{'atom',49,'read'}|[{'atom',49,'read_write'}]]},[]}]
, 'type' = [{'auto_save',{'type',50,'union',[{'atom',50,'infinity'}|[{'type',50,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'hash_bif',{'type',51,'union',[{'atom',51,'phash'}|[{'atom',51,'phash2'}]]},[]}]
, 'type' = [{'keypos',{'type',52,'pos_integer',[]},[]}]
, 'type' = [{'no_colls',{'type',53,'list',[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'LogSize'}|[{'type',53,'non_neg_integer',[]}]]}|[{'ann_type',54,[{'var',54,'NoCollections'}|[{'type',54,'non_neg_integer',[]}]]}]]}]},[]}]
, 'type' = [{'no_slots',{'type',55,'union',[{'atom',55,'default'}|[{'type',55,'non_neg_integer',[]}]]},[]}]
, 'type' = [{'tab_name',{'type',56,'term',[]},[]}]
, 'type' = [{'type',{'type',57,'union',[{'atom',57,'bag'}|[{'atom',57,'duplicate_bag'}|[{'atom',57,'set'}]]]},[]}]
, 'type' = [{'update_mode',{'type',58,'union',[{'atom',58,'dirty'}|[{'atom',59,'new_dirty'}|[{'atom',60,'saved'}|[{'type',61,'tuple',[{'atom',61,'error'}|[{'ann_type',61,[{'var',61,'Reason'}|[{'type',61,'term',[]}]]}]]}]]]]},[]}]
, 'record' = [{'head',[{'typed_record_field',{'record_field',65,{'atom',65,'m'}},{'type',65,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'m2'}},{'type',66,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'next'}},{'type',67,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'fptr'}},{'remote_type',69,[{'atom',69,'file'}|[{'atom',69,'fd'}|[[]]]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'no_objects'}},{'type',70,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'no_keys'}},{'type',71,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'maxobjsize'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'non_neg_integer',[]}]]}}|[{'record_field',74,{'atom',74,'n'}}|[{'typed_record_field',{'record_field',75,{'atom',75,'type'}},{'user_type',75,'type',[]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'keypos'}},{'user_type',76,'keypos',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'freelists'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',78,'tuple','any'}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'freelists_p'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',81,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'no_collections'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'user_type',83,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'auto_save'}},{'user_type',85,'auto_save',[]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'update_mode'}},{'user_type',86,'update_mode',[]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'fixed'},{'atom',87,'false'}},{'type',87,'union',[{'atom',87,'false'}|[{'type',88,'tuple',[{'type',88,'tuple',[{'type',88,'integer',[]}|[{'type',88,'integer',[]}]]}|[{'type',89,'list',[{'type',89,'tuple',[{'type',89,'pid',[]}|[{'type',90,'non_neg_integer',[]}]]}]}]]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'hash_bif'}},{'user_type',91,'hash_bif',[]}}|[{'typed_record_field',{'record_field',92,{'atom',92,'has_md5'}},{'type',92,'boolean',[]}}|[{'typed_record_field',{'record_field',94,{'atom',94,'min_no_slots'}},{'user_type',94,'no_slots',[]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'max_no_slots'}},{'user_type',95,'no_slots',[]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'cache'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'user_type',96,'cache',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'filename'}},{'remote_type',98,[{'atom',98,'file'}|[{'atom',98,'name'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'access'},{'atom',99,'read_write'}},{'user_type',99,'access',[]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'ram_file'},{'atom',100,'false'}},{'type',100,'boolean',[]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'name'}},{'user_type',101,'tab_name',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'parent'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'pid',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'server'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'pid',[]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'bump'}},{'type',106,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'base'}},{'type',107,'non_neg_integer',[]}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]
, 'record' = [{'fileheader',[{'typed_record_field',{'record_field',113,{'atom',113,'freelist'}},{'type',113,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'fl_base'}},{'type',114,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'cookie'}},{'type',115,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'closed_properly'}},{'type',116,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'type'}},{'type',117,'union',[{'atom',117,'badtype'}|[{'user_type',117,'type',[]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'version'}},{'type',118,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'m'}},{'type',119,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'next'}},{'type',120,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'keypos'}},{'user_type',121,'keypos',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'no_objects'}},{'type',122,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'no_keys'}},{'type',123,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'min_no_slots'}},{'type',124,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'max_no_slots'}},{'type',125,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'no_colls'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'user_type',126,'no_colls',[]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'hash_method'}},{'type',127,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'read_md5'}},{'type',128,'binary',[]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'has_md5'}},{'type',129,'boolean',[]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'md5'}},{'type',130,'binary',[]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'trailer'}},{'type',131,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'eof'}},{'type',132,'non_neg_integer',[]}}|[{'record_field',133,{'atom',133,'n'}}]]]]]]]]]]]]]]]]]]]]]}]
, 'type' = [{'delay',{'type',136,'non_neg_integer',[]},[]}]
, 'type' = [{'threshold',{'type',137,'non_neg_integer',[]},[]}]
, 'type' = [{'cache_parms',{'type',139,'tuple',[{'ann_type',139,[{'var',139,'Delay'}|[{'user_type',139,'delay',[]}]]}|[{'ann_type',141,[{'var',141,'Size'}|[{'user_type',141,'threshold',[]}]]}]]},[]}]
, 'record' = [{'cache',[{'typed_record_field',{'record_field',145,{'atom',145,'cache'}},{'type',146,'list',[{'type',146,'tuple',[{'ann_type',146,[{'var',146,'Key'}|[{'type',146,'term',[]}]]}|[{'type',147,'tuple',[{'ann_type',147,[{'var',147,'Seq'}|[{'type',147,'non_neg_integer',[]}]]}|[{'ann_type',147,[{'var',147,'Item'}|[{'type',147,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'csize'}},{'type',148,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'inserts'}},{'type',150,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',151,{'atom',151,'wrtime'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'integer',[]}]]}}|[{'typed_record_field',{'record_field',152,{'atom',152,'tsize'}},{'user_type',152,'threshold',[]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'delay'}},{'user_type',153,'delay',[]}}]]]]]]}]
, 'type' = [{'cache',{'type',156,'record',[{'atom',156,'cache'}]},[]}]
, 'file' = [{[115|[114|[99|[47|[100|[101|[116|[115|[95|[118|[57|[46|[101|[114|[108]]]]]]]]]]]]]]],47}]
, 'record' = [{'$hash2',[{'record_field',271,{'atom',271,'file_format_version'}}|[{'record_field',272,{'atom',272,'bchunk_format_version'}}|[{'record_field',273,{'atom',273,'file'}}|[{'record_field',273,{'atom',273,'type'}}|[{'record_field',273,{'atom',273,'keypos'}}|[{'record_field',273,{'atom',273,'hash_method'}}|[{'record_field',274,{'atom',274,'n'}}|[{'record_field',274,{'atom',274,'m'}}|[{'record_field',274,{'atom',274,'next'}}|[{'record_field',275,{'atom',275,'min'}}|[{'record_field',275,{'atom',275,'max'}}|[{'record_field',276,{'atom',276,'no_objects'}}|[{'record_field',276,{'atom',276,'no_keys'}}|[{'typed_record_field',{'record_field',277,{'atom',277,'no_colls'}},{'user_type',277,'no_colls',[]}}]]]]]]]]]]]]]]}] ] 'mark_dirty'/1 = fun (_0) -> case call 'dets_utils':'pwrite' (_0,[{8,#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#}]) of <{_X_H,'ok'}> when 'true' -> case call 'dets_utils':'sync' (_0) of <'ok'> when 'true' -> (case _0 of (<({'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_rec0,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'position' (_0,_rec0) of <{'ok',_X_Pos}> when 'true' -> call 'dets_utils':'truncate' (_0,'cur')
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'prep_table_copy'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case _8 of <{'$hash2',9,1,_35,_36,_37,HashMethodCode,N,M,Next,Min,Max,NoObjects,NoKeys,_X_NoColls}> when try let <_9> = call 'erlang':'is_integer' (N) in let <_10> = call 'erlang':'is_integer' (M) in let <_11> = call 'erlang':'is_integer' (Next) in let <_12> = call 'erlang':'is_integer' (Min) in let <_13> = call 'erlang':'is_integer' (Max) in let <_14> = call 'erlang':'is_integer' (NoObjects) in let <_15> = call 'erlang':'is_integer' (NoKeys) in let <_16> = call 'erlang':'>=' (NoObjects,NoKeys) in let <_17> = call 'erlang':'and' (_15,_16) in let <_18> = call 'erlang':'and' (_14,_17) in let <_19> = call 'erlang':'and' (_13,_18) in let <_20> = call 'erlang':'and' (_12,_19) in let <_21> = call 'erlang':'and' (_11,_20) in let <_22> = call 'erlang':'and' (_10,_21) in call 'erlang':'and' (_9,_22) of <Try> -> Try catch <T,R> -> 'false' -> let <HashMethod> = apply 'code_to_hash_method'/1 (HashMethodCode) in case apply 'hash_invars'/5 (N,M,Next,Min,Max) of <'false'> when 'true' -> call 'erlang':'throw' ('badarg')
<'true'> when 'true' -> apply 'init_file'/17 (_0,_1,_2,_3,_4,Min,Max,_5,_6,_7,'false',M,N,Next,HashMethod,NoObjects,NoKeys)
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
<_38> when 'true' -> call 'erlang':'throw' ('badarg') end
'initiate_file'/11 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) -> let <MaxSlots1> = call 'erlang':'min' (_6,33554432) in let <MinSlots1> = call 'erlang':'min' (_5,MaxSlots1) in let <MinSlots> = apply 'slots2'/1 (MinSlots1) in let <MaxSlots> = apply 'slots2'/1 (MaxSlots1) in apply 'init_file'/17 (_0,_1,_2,_3,_4,MinSlots,MaxSlots,_7,_8,_9,_10,MinSlots,0,MinSlots,'phash2',0,0)
'init_file'/17 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) -> let <Ftab> = call 'dets_utils':'init_alloc' (1336) in let <_34> = call 'erlang':'*' (_11,2) in let <_33> = call 'orddict':'new' () in let <_32> = call 'dets_utils':'new_cache' (_8) in let <Head0> = {'head',_11,_34,_13,_0,_15,_16,0,_12,_3,_4,Ftab,'undefined',_33,_9,'dirty','false',_14,'true',_5,_6,_32,_2,'read_write',_7,_1,'undefined','undefined',16,1336} in let <NoColls> = #{#<0>(112,8,'integer',['unsigned'|['big']])}# in let <FileHeader> = apply 'file_header'/4 (Head0,0,0,NoColls) in let <_41> = #{#<0>(1024,8,'integer',['unsigned'|['big']])}# in let <W0> = {0,[FileHeader|_41]} in let <_48> = fun (_46) -> case _46 of <{I1,I2}> when let <_44> = call 'erlang':'is_integer' (I1) in let <_45> = call 'erlang':'is_integer' (I2) in call 'erlang':'and' (_44,_45) -> 'ok'
<{K,V}> when 'true' -> call 'erlang':'put' (K,V)
(<_47> when 'true' -> (primop 'match_fail' ({'function_clause',_47})-|[{'function_name',{'-init_file/17-fun-0-',1}}] )-|['compiler_generated'] ) end in let <_43> = call 'erlang':'erase' () in do call 'lists':'foreach' (_48,_43) let <Zero> = apply 'seg_zero'/0 () in let <_50> = apply 'no_parts'/1 (_13) in case apply 'init_parts'/5 (Head0,0,_50,Zero,[]) of <{Head1,Ws1}> when 'true' -> let <NoSegs> = apply 'no_segs'/1 (_13) in case apply 'init_segments'/6 (Head1,0,NoSegs,Zero,[],[]) of <{Head2,WsI,WsP}> when 'true' -> let <_54> = case <> of <> when (call 'erlang':'=:=' (_10,'true')-|['compiler_generated'] ) -> call 'erlang':'++' (WsP,WsI)
<> when 'true' -> WsP end in let <_56> = call 'lists':'append' (Ws1) in let <_57> = call 'erlang':'++' (_56,_54) in do call 'dets_utils':'pwrite' (_0,_2,[W0|_57]) case apply 'hash_invars'/1 (Head2) of <'true'> when 'true' -> case call 'dets_utils':'alloc' (Head2,16) of <{_83,Where,_84}> when 'true' -> let <NewFtab> = call 'dets_utils':'init_alloc' (Where) in case Head2 of <{'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113}> when 'true' -> let <_62> = call 'erlang':'setelement' (30,Head2,Where) in let <_64> = call 'erlang':'setelement' (12,_62,NewFtab) in {'ok',_64}
(<_114> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_59> when 'true' -> primop 'match_fail' ({'badmatch',_59})-|['compiler_generated'] ) end
(<_58> when 'true' -> primop 'match_fail' ({'badmatch',_58})-|['compiler_generated'] ) end
(<_53> when 'true' -> primop 'match_fail' ({'badmatch',_53})-|['compiler_generated'] ) end
(<_51> when 'true' -> primop 'match_fail' ({'badmatch',_51})-|['compiler_generated'] ) end
'slots2'/1 = fun (_0) -> case _0 of <NoSlots> when call 'erlang':'>=' (_0,256) -> let <_1> = call 'dets_utils':'log2' (NoSlots) in call 'erlang':'bsl' (1,_1)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'slots2',1}}] )-|['compiler_generated'] ) end
'init_parts'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Head,PartNo,NoParts,Zero,Ws> when call 'erlang':'<' (PartNo,NoParts) -> let <_5> = call 'erlang':'*' (4,PartNo) in let <PartPos> = call 'erlang':'+' (312,_5) in case apply 'alloc_part'/3 (Head,Zero,PartPos) of <{NewHead,W,_X_Part}> when 'true' -> let <_13> = call 'erlang':'+' (PartNo,1) in apply 'init_parts'/5 (NewHead,_13,NoParts,Zero,[W|Ws])
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<Head,_X_PartNo,_X_NoParts,_X_Zero,Ws> when 'true' -> {Head,Ws} end
'init_segments'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Head,SegNo,NoSegs,SegZero,WsP,WsI> when call 'erlang':'<' (SegNo,NoSegs) -> case apply 'allocate_segment'/3 (Head,SegZero,SegNo) of <{NewHead,WI,Ws}> when 'true' -> let <_8> = call 'erlang':'+' (SegNo,1) in let <_7> = call 'erlang':'++' (Ws,WsP) in apply 'init_segments'/6 (NewHead,_8,NoSegs,SegZero,_7,[WI|WsI])
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<Head,_X_SegNo,_X_NoSegs,_X_SegZero,WsP,WsI> when 'true' -> {Head,WsI,WsP} end
'allocate_segment'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'div' (_2,512) in let <_4> = call 'erlang':'*' (4,_3) in let <PartPos> = call 'erlang':'+' (312,_4) in case (call ('erlang'-|['compiler_generated'] ):('get'-|['compiler_generated'] ) (PartPos)-|['compiler_generated'] ) of <'undefined'> when 'true' -> case apply 'alloc_part'/3 (_0,_1,PartPos) of <{Head1,[InitArrPart|_@r0 = [ArrPartPointer|[]]],Part}> when 'true' -> case apply 'alloc_seg'/4 (Head1,_1,_2,Part) of <{NewHead,InitSegment,[SegPointer|[]]}> when 'true' -> {NewHead,InitSegment,[InitArrPart|[SegPointer|_@r0]]}
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<Part> when 'true' -> apply 'alloc_seg'/4 (_0,_1,_2,Part) end
'alloc_part'/3 = fun (_0,_1,_2) -> case call 'dets_utils':'alloc' (_0,(2047-|['compiler_generated'] )) of <{NewHead,Part,_12}> when 'true' -> do apply 'arrpart_cache'/2 (_2,Part) let <InitArrPart> = {Part,_1} in let <_7> = #{#<Part>(32,1,'integer',['unsigned'|['big']])}# in let <ArrPartPointer> = {_2,_7} in {NewHead,[InitArrPart|[ArrPartPointer|[]]],Part}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'alloc_seg'/4 = fun (_0,_1,_2,_3) -> case call 'dets_utils':'alloc' (_0,(2047-|['compiler_generated'] )) of <{NewHead,Segment,_18}> when 'true' -> let <InitSegment> = {Segment,_1} in let <_9> = call 'erlang':'band' (_2,511) in let <_10> = call 'erlang':'*' (4,_9) in let <Pos> = call 'erlang':'+' (_3,_10) in do (call ('erlang'-|['compiler_generated'] ):('put'-|['compiler_generated'] ) (Pos,Segment)-|['compiler_generated'] ) do call 'dets_utils':'disk_map_segment' (Segment,_1) let <_12> = #{#<Segment>(32,1,'integer',['unsigned'|['big']])}# in let <SegPointer> = {Pos,_12} in {NewHead,InitSegment,[SegPointer|[]]}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'init_freelist'/1 = fun (_0) -> (case _0 of (<({'head',_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_rec2,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32}-|['compiler_generated'] )> when 'true' -> apply 'free_lists_from_file'/2 (_0,_rec2)-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'read_file_header'/2 = fun (_0,_1) -> case call 'dets_utils':'pread_close' (_0,_1,0,188) of <{'ok',Bin}> when 'true' -> case Bin of <#{#<FreeList>(32,1,'integer',['unsigned'|['big']]),#<Cookie>(32,1,'integer',['unsigned'|['big']]),#<CP>(32,1,'integer',['unsigned'|['big']]),#<Type2>(32,1,'integer',['unsigned'|['big']]),#<Version>(32,1,'integer',['unsigned'|['big']]),#<M>(32,1,'integer',['unsigned'|['big']]),#<Next>(32,1,'integer',['unsigned'|['big']]),#<Kp>(32,1,'integer',['unsigned'|['big']]),#<NoObjects>(32,1,'integer',['unsigned'|['big']]),#<NoKeys>(32,1,'integer',['unsigned'|['big']]),#<MinNoSlots>(32,1,'integer',['unsigned'|['big']]),#<MaxNoSlots>(32,1,'integer',['unsigned'|['big']]),#<HashMethod>(32,1,'integer',['unsigned'|['big']]),#<N>(32,1,'integer',['unsigned'|['big']]),#<NoCollsB>(112,8,'binary',['unsigned'|['big']]),#<MD5>(16,8,'binary',['unsigned'|['big']]),#<FlBase>(32,1,'integer',['unsigned'|['big']])}#> when 'true' -> case Bin of <#{#<_40>(12,8,'binary',['unsigned'|['big']]),#<MD5DigestedPart>(156,8,'binary',['unsigned'|['big']]),#<_41>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case call 'dets_utils':'position_close' (_0,_1,'eof') of <{'ok',EOF}> when 'true' -> let <_10> = call 'erlang':'-' (EOF,4) in case call 'dets_utils':'pread_close' (_0,_1,_10,4) of <{'ok',#{#<FileSize>(32,1,'integer',['unsigned'|['big']])}#}> when 'true' -> let <_18> = fun (_15,_14) -> case <_15,_14> of <LSz,{Acc,#{#<NN>(32,1,'integer',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' -> case <> of <> when call 'erlang':'=:=' (NN,0) -> {Acc,R}
<> when 'true' -> {[{LSz,NN}|Acc],R} end
(<_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16})-|[{'function_name',{'-read_file_header/2-fun-0-',2}}] )-|['compiler_generated'] ) end in let <_13> = call 'lists':'seq' (4,31) in case call 'lists':'foldl' (_18,{[],NoCollsB},_13) of <{CL,#{}#}> when 'true' -> let <_22> = case <> of <> when let <_20> = call 'erlang':'=:=' (CL,[]) in let <_21> = call 'erlang':'>' (NoObjects,0) in call 'erlang':'and' (_20,_21) -> 'undefined'
<> when 'true' -> call 'lists':'reverse' (CL) end in let <_31> = case FlBase of <0> when 'true' -> 1336
<_42> when 'true' -> FlBase end in let <_36> = call 'dets_utils':'code_to_type' (Type2) in let <_35> = call 'erlang':'=/=' (#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,MD5) in let <_34> = call 'erlang':'md5' (MD5DigestedPart) in let <_33> = call 'erlang':'+' (FileSize,FlBase) in let <FH> = {'fileheader',FreeList,_31,Cookie,CP,_36,Version,M,Next,Kp,NoObjects,NoKeys,MinNoSlots,MaxNoSlots,_22,HashMethod,MD5,_35,_34,_33,EOF,N} in {'ok',_0,FH}
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'check_file_header'/2 = fun (_0,_1) -> (case _0 of (<({'fileheader',_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_rec3,_104,_105,_106,_107,_108,_109}-|['compiler_generated'] )> when 'true' -> let <HashBif> = apply 'code_to_hash_method'/1 (_rec3) in let <_52> = case <> of <> when (try (let <_7> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_5-|['compiler_generated'] )> when 'true' -> (_5-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_8> = call 'erlang':'=:=' ((_7-|['compiler_generated'] ),'true') in let <_9> = call 'erlang':'element' (4,_0) in let <_10> = call 'erlang':'=/=' (_9,11259375) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_10)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','not_a_dets_file'}
<> when (try (let <_13> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_11-|['compiler_generated'] )> when 'true' -> (_11-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_14> = call 'erlang':'=:=' ((_13-|['compiler_generated'] ),'true') in let <_15> = call 'erlang':'element' (6,_0) in let <_16> = call 'erlang':'=:=' (_15,'badtype') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_14,_16)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','invalid_type_code'}
<> when (try (let <_19> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_17-|['compiler_generated'] )> when 'true' -> (_17-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_20> = call 'erlang':'=:=' ((_19-|['compiler_generated'] ),'true') in let <_21> = call 'erlang':'element' (7,_0) in let <_22> = call 'erlang':'=/=' (_21,9) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_20,_22)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','bad_version'}
<> when (try (let <_25> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_23-|['compiler_generated'] )> when 'true' -> (_23-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_26> = call 'erlang':'=:=' ((_25-|['compiler_generated'] ),'true') in let <_27> = call 'erlang':'element' (18,_0) in let <_28> = call 'erlang':'=:=' (_27,'true') in let <_29> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_26,_28) in let <_31> = call 'erlang':'element' (17,_0) in let <_30> = call 'erlang':'element' (19,_0) in let <_32> = call 'erlang':'=/=' (_31,_30) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_29,_32)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','not_a_dets_file'}
<> when (try (let <_35> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_33-|['compiler_generated'] )> when 'true' -> (_33-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_36> = call 'erlang':'=:=' ((_35-|['compiler_generated'] ),'true') in let <_38> = call 'erlang':'element' (20,_0) in let <_37> = call 'erlang':'element' (21,_0) in let <_39> = call 'erlang':'=/=' (_38,_37) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_36,_39)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','not_closed'}
<> when call 'erlang':'=:=' (HashBif,'undefined') -> {'error','bad_hash_bif'}
<> when (try (let <_42> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_40-|['compiler_generated'] )> when 'true' -> (_40-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_43> = call 'erlang':'=:=' ((_42-|['compiler_generated'] ),'true') in let <_44> = call 'erlang':'element' (5,_0) in let <_45> = call 'erlang':'=:=' (_44,1) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_43,_45)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'ok'
<> when (try (let <_48> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_46-|['compiler_generated'] )> when 'true' -> (_46-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_49> = call 'erlang':'=:=' ((_48-|['compiler_generated'] ),'true') in let <_50> = call 'erlang':'element' (5,_0) in let <_51> = call 'erlang':'=:=' (_50,0) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_49,_51)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','not_closed'}
<> when 'true' -> {'error','not_a_dets_file'} end in case _52 of <'ok'> when 'true' -> (case _0 of (<({'fileheader',_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_rec4,_124,_125,_126,_127,_128,_129,_130}-|['compiler_generated'] )> when 'true' -> let <MaxObjSize> = case _rec4 of (<(NoColls = ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> NoColls-|['compiler_generated'] )
(<NoColls> when ('true'-|['compiler_generated'] ) -> (apply 'max_objsize'/2 (NoColls,(0-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case _0 of (<({'fileheader',_132,_133,_134,_135,_136,_137,_rec5,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_153,_154,_155,_156,_157,_158,_rec6,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172}-|['compiler_generated'] )> when 'true' -> let <_83> = call 'erlang':'*' (_rec6,2) in (case _0 of (<({'fileheader',_174,_175,_176,_177,_178,_179,_180,_rec7,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_195,_196,_197,_198,_199,_200,_201,_202,_203,_rec8,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_rec9,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252,_253,_254,_255,_256,_rec10}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_258,_259,_260,_261,_rec11,_262,_263,_264,_265,_266,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276,_277}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_279,_280,_281,_282,_283,_284,_285,_286,_rec12,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_297,_298}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_rec13,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_317,_318,_319}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_rec14,_334,_335,_336,_337,_338,_339,_340}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354,_355,_356,_357,_rec15,_358,_359,_360,_361}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_rec16,_374,_375,_376,_377,_378,_379,_380,_381,_382}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_384,_385,_386,_387,_388,_389,_390,_391,_392,_393,_394,_395,_rec17,_396,_397,_398,_399,_400,_401,_402,_403}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'fileheader',_405,_rec18,_406,_407,_408,_409,_410,_411,_412,_413,_414,_415,_416,_417,_418,_419,_420,_421,_422,_423,_424}-|['compiler_generated'] )> when 'true' -> let <H> = {'head',_rec5,_83,_rec7,_1,_rec8,_rec9,MaxObjSize,_rec10,_rec11,_rec12,'undefined',_rec13,_rec14,'infinity','saved','false',HashBif,_rec15,_rec16,_rec17,'undefined','undefined','read_write','false','undefined','undefined','undefined',16,_rec18} in {'ok',H}-|['compiler_generated'] )
(<_425> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_404> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_383> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_362> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_341> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_320> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_299> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_278> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_257> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_236> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_215> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_194> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_173> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_131> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Error> when 'true' -> Error end-|['compiler_generated'] )
(<_110> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'max_objsize'/1 = fun (_0) -> case _0 of <NoColls = 'undefined'> when 'true' -> NoColls
<NoColls> when 'true' -> apply 'max_objsize'/2 (NoColls,0) end
'max_objsize'/2 = fun (_0,_1) -> case <_0,_1> of <[],Max> when 'true' -> Max
<[{_4,0}|L],Max> when 'true' -> apply 'max_objsize'/2 (L,Max)
<[{I,_5}|L],_X_Max> when 'true' -> apply 'max_objsize'/2 (L,I)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'max_objsize',2}}] )-|['compiler_generated'] ) end
'cache_segps'/3 = fun (_0,_1,_2) -> let <NoParts> = apply 'no_parts'/1 (_2) in let <_11> = call 'erlang':'*' (4,NoParts) in case call 'dets_utils':'pread_close' (_0,_1,312,_11) of <{'ok',Bin}> when 'true' -> apply 'cache_arrparts'/4 (Bin,312,_0,_1)
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
'cache_arrparts'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<ArrPartPos>(32,1,'integer',['unsigned'|['big']]),#<B>('all',8,'binary',['unsigned'|['big']])}#,Pos,Fd,FileName> when 'true' -> do apply 'arrpart_cache'/2 (Pos,ArrPartPos) case call 'dets_utils':'pread_close' (Fd,FileName,ArrPartPos,2048) of <{'ok',ArrPartBin}> when 'true' -> do apply 'cache_segps1'/3 (Fd,ArrPartBin,ArrPartPos) let <_6> = call 'erlang':'+' (Pos,4) in apply 'cache_arrparts'/4 (B,_6,Fd,FileName)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<#{}#,_X_Pos,_X_Fd,_X_FileName> when 'true' -> 'ok'
(<_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|[{'function_name',{'cache_arrparts',4}}] )-|['compiler_generated'] ) end
'cache_segps1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_Fd,#{#<0>(32,1,'integer',['unsigned'|['big']]),#<_7>('all',8,'binary',['unsigned'|['big']])}#,_X_P> when 'true' -> 'ok'
<Fd,#{#<S>(32,1,'integer',['unsigned'|['big']]),#<B>('all',8,'binary',['unsigned'|['big']])}#,P> when 'true' -> do call 'dets_utils':'disk_map_segment_p' (Fd,S) do (call ('erlang'-|['compiler_generated'] ):('put'-|['compiler_generated'] ) (P,S)-|['compiler_generated'] ) let <_3> = call 'erlang':'+' (P,4) in apply 'cache_segps1'/3 (Fd,B,_3)
<_X_Fd,#{}#,_X_P> when 'true' -> 'ok'
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'cache_segps1',3}}] )-|['compiler_generated'] ) end
'no_parts'/1 = fun (_0) -> let <_2> = call 'erlang':'-' (_0,1) in let <_3> = call 'erlang':'div' (_2,131072) in call 'erlang':'+' (_3,1)
'no_segs'/1 = fun (_0) -> let <_1> = call 'erlang':'-' (_0,1) in let <_2> = call 'erlang':'div' (_1,256) in call 'erlang':'+' (_2,1)
'bulk_input'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'make_ref' () in apply 'bulk_input'/4 (_0,_1,_3,0)
'bulk_input'/4 = fun (_0,_1,_2,_3) -> (fun (_19) -> case _19 of <'close'> when 'true' -> catch apply _1 (('close'-|['result_not_wanted'] ))
<'read'> when 'true' -> let <_7> = catch let <_6> = apply _1 ('read') in {_2,_6} in case _7 of <{_25,'end_of_input'}> when call 'erlang':'=:=' (_25,_2) -> 'end_of_input'
<{_26,{L0,NewInitFun}}> when let <_27> = call 'erlang':'=:=' (_26,_2) in let <_28> = try let <_8> = call 'erlang':'is_list' (L0) in let <_9> = call 'erlang':'is_function' (NewInitFun) in call 'erlang':'and' (_8,_9) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'and' (_27,_28) -> (case _0 of (<({'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_rec19,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> let <_13> = catch apply 'bulk_objects'/5 (L0,_0,_rec19,_3,[]) in case _13 of <{'EXIT',_X_Error}> when 'true' -> do try apply NewInitFun (('close'-|['result_not_wanted'] )) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' {'error','invalid_objects_list'}
<{L,NSeq}> when 'true' -> let <_16> = apply 'bulk_input'/4 (_0,NewInitFun,_2,NSeq) in {L,_16}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{_58,Value}> when call 'erlang':'=:=' (_58,_2) -> {'error',{'init_fun',Value}}
<Error> when 'true' -> call 'erlang':'throw' ({'thrown',Error}) end
(<_20> when 'true' -> (primop 'match_fail' ({'function_clause',_20})-|[{'function_name',{'-bulk_input/4-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-bulk_input/4-fun-0-'}}] )
'bulk_objects'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[T|Ts],Head,Kp,Seq,L> when 'true' -> let <BT> = call 'erlang':'term_to_binary' (T) in let <Key> = call 'erlang':'element' (Kp,T) in let <_8> = call 'erlang':'+' (Seq,1) in (let <Slot> = apply 'db_hash'/2 (Key,Head) in let <_7> = #{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<Seq>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<BT>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}# in apply 'bulk_objects'/5 (Ts,Head,Kp,_8,[_7|L])-|['compiler_generated'] )
<[],_X_Head,Kp,Seq,L> when let <_9> = call 'erlang':'is_integer' (Kp) in let <_10> = call 'erlang':'is_integer' (Seq) in call 'erlang':'and' (_9,_10) -> {L,Seq}
(<_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11})-|[{'function_name',{'bulk_objects',5}}] )-|['compiler_generated'] ) end
'output_objs'/3 = fun (_0,_1,_2) -> (fun (_15) -> case _15 of <'close'> when 'true' -> case call 'ets':'insert' (_2,{1,0,[],0}) of <'true'> when 'true' -> case call 'ets':'insert' (_2,{'no',0,0}) of <'true'> when 'true' -> let <Fun> = apply 'output_objs2'/7 ('foo',[],_0,{},_2,_1,'bar') in apply Fun ('close')
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<[]> when 'true' -> apply 'output_objs'/3 (_0,_1,_2)
<L> when 'true' -> case call 'ets':'delete_all_objects' (_2) of <'true'> when 'true' -> case call 'ets':'insert' (_2,{'no',0,0}) of <'true'> when 'true' -> (case _0 of (<({'head',_20,_21,_22,_23,_24,_25,_26,_27,_28,_rec20,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> let <Es> = apply 'bin2term'/2 (L,_rec20) in case apply 'output_slots'/6 (Es,_0,{},_2,0,0) of <{NE,NAcc,NCache}> when 'true' -> apply 'output_objs2'/7 (NE,NAcc,_0,NCache,_2,_1,1)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end-|[{'id',{0,0,'-output_objs/3-fun-0-'}}] )
'output_objs2'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <E,Acc,Head,Cache,SizeT,SlotNums,0> when 'true' -> let <NCache> = apply 'write_all_sizes'/4 (Cache,SizeT,Head,'more') in let <_8> = call 'erlang':'tuple_size' (NCache) in let <_9> = call 'erlang':'min' (_8,10) in let <Max> = call 'erlang':'max' (1,_9) in apply 'output_objs2'/7 (E,Acc,Head,NCache,SizeT,SlotNums,Max)
<E,Acc,Head,Cache,SizeT,SlotNums,ChunkI> when 'true' -> (fun (_41) -> case _41 of <'close'> when 'true' -> let <_11> = case <> of <> when call 'erlang':'=:=' (Acc,[]) -> {'foo',[],Cache}
<> when 'true' -> apply 'output_slot'/7 (Acc,Head,Cache,[],SizeT,0,0) end in case _11 of <{_50,[],Cache1}> when 'true' -> do apply 'write_all_sizes'/4 (Cache1,SizeT,Head,'no_more') case call 'dets_utils':'alloc' (Head,(2047-|['compiler_generated'] )) of <{_51,SegEnd,_52}> when 'true' -> case call 'ets':'lookup' (SizeT,'no') of <[{'no',NoObjects,NoKeys}|[]]> when 'true' -> case Head of <{'head',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81}> when 'true' -> let <_19> = call 'erlang':'setelement' (7,Head,NoKeys) in let <_21> = call 'erlang':'setelement' (6,_19,NoObjects) in case call 'ets':'delete' (SizeT,'no') of <'true'> when 'true' -> case apply 'allocate_all_objects'/2 (_21,SizeT) of <{NewHead,NL,_X_MaxSz,_X_End}> when 'true' -> do apply 'segment_file'/4 (SizeT,NewHead,NL,SegEnd) case SlotNums of <{MinSlots,EstNoSlots,MaxSlots}> when 'true' -> case <> of <> when call 'erlang':'=:=' (EstNoSlots,'bulk_init') -> {'ok',0,NewHead}
<> when 'true' -> let <EstNoSegs> = apply 'no_segs'/1 (EstNoSlots) in let <MinNoSegs> = apply 'no_segs'/1 (MinSlots) in let <MaxNoSegs> = apply 'no_segs'/1 (MaxSlots) in let <NoSegs> = apply 'no_segs'/1 (NoKeys) in let <_30> = call 'erlang':'-' (NoSegs,EstNoSegs) in let <Diff> = call 'erlang':'abs' (_30) in case <> of <> when try let <_32> = call 'erlang':'>' (Diff,5) in let <_33> = call 'erlang':'=<' (NoSegs,MaxNoSegs) in let <_34> = call 'erlang':'>=' (NoSegs,MinNoSegs) in let <_35> = call 'erlang':'and' (_33,_34) in call 'erlang':'and' (_32,_35) of <Try> -> Try catch <T,R> -> 'false' -> {'try_again',NoKeys}
<> when 'true' -> {'ok',0,NewHead} end end
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
(<_24> when 'true' -> primop 'match_fail' ({'badmatch',_24})-|['compiler_generated'] ) end
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<L> when 'true' -> (case Head of (<({'head',_83,_84,_85,_86,_87,_88,_89,_90,_91,_rec22,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110}-|['compiler_generated'] )> when 'true' -> let <Es> = apply 'bin2term'/2 (L,_rec22) in case apply 'output_slots'/8 (E,Es,Acc,Head,Cache,SizeT,0,0) of <{NE,NAcc,NCache}> when 'true' -> let <_40> = call 'erlang':'-' (ChunkI,1) in apply 'output_objs2'/7 (NE,NAcc,Head,NCache,SizeT,SlotNums,_40)
(<_39> when 'true' -> primop 'match_fail' ({'badmatch',_39})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_111> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|[{'id',{0,0,'-output_objs2/7-fun-0-'}}] ) end
'compact_init'/3 = fun (_0,_1,_2) -> let <SizeT> = call 'ets':'new' ('dets_compact',[]) in case _0 of <{'head',_20,_21,_22,_23,NoObjects,NoKeys,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}> when 'true' -> (case _2 of (<({'$hash2',_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_rec23}-|['compiler_generated'] )> when 'true' -> case apply 'prepare_file_init'/5 (NoObjects,NoKeys,_rec23,SizeT,_1) of <{NewWriteHead,Bases,SegAddr,SegEnd}> when 'true' -> let <_9> = call 'erlang':'tuple_size' (Bases) in let <Input> = apply 'compact_input'/4 (_0,NewWriteHead,SizeT,_9) in let <Output> = apply 'fast_output'/5 (NewWriteHead,SizeT,Bases,SegAddr,SegEnd) in (case NewWriteHead of (<({'head',_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_rec24,_82,_83,_84,_85,_86,_87,_88}-|['compiler_generated'] )> when 'true' -> let <TmpDir> = call 'filename':'dirname' (_rec24) in let <_15> = catch call 'file_sorter':'sort' (Input,Output,[{'format','binary'}|[{'tmpdir',TmpDir}|[{'header',1}]]]) in do call 'ets':'delete' (SizeT) _15-|['compiler_generated'] )
(<_89> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_60> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','$hash2'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
'compact_input'/4 = fun (_0,_1,_2,_3) -> let <L> = call 'dets_utils':'all_allocated_as_list' (_0) in let <_6> = call 'erlang':'-' (_3,0) in let <_7> = call 'lists':'duplicate' (_6,[0]) in let <Cache> = call 'erlang':'list_to_tuple' (_7) in apply 'compact_input'/5 (_0,_1,_2,Cache,L)
'compact_input'/5 = fun (_0,_1,_2,_3,_4) -> (fun (_5) -> case _5 of <'close'> when 'true' -> 'ok'
<'read'> when 'true' -> apply 'compact_read'/8 (_0,_1,_2,_3,_4,0,[],0)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'-compact_input/5-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-compact_input/5-fun-0-'}}] )
'compact_read'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <_X_Head,WHead,SizeT,Cache,[],_X_Min,[],_X_ASz> when 'true' -> do apply 'fast_write_all_sizes'/3 (Cache,SizeT,WHead) 'end_of_input'
<Head,WHead,SizeT,Cache,L,Min,SegBs,ASz> when try let <_10> = call 'erlang':'+' (ASz,Min) in let <_11> = call 'erlang':'>=' (_10,491520) in let <_12> = call 'erlang':'>' (ASz,0) in call 'erlang':'and' (_11,_12) of <Try> -> Try catch <T,R> -> 'false' -> let <NCache> = apply 'fast_write_all_sizes'/3 (Cache,SizeT,WHead) in let <_14> = apply 'compact_input'/5 (Head,WHead,SizeT,NCache,L) in {SegBs,_14}
<Head,WHead,SizeT,Cache,[[From|To]|L],Min,SegBs,ASz> when 'true' -> let <Max> = call 'erlang':'max' (24576,Min) in case apply 'check_pread_arg'/2 (Max,Head) of <'true'> when 'true' -> (case Head of (<({'head',_33,_34,_35,_rec25,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'pread_n' (_rec25,From,Max) of <'eof'> when 'true' -> 'not_ok'
<Bin1> when try let <_19> = call 'erlang':'byte_size' (Bin1) in call 'erlang':'<' (_19,Min) of <Try> -> Try catch <T,R> -> 'false' -> let <_20> = call 'erlang':'byte_size' (Bin1) in let <Pad> = call 'erlang':'-' (Min,_20) in let <NewBin> = #{#<Bin1>('all',8,'binary',['unsigned'|['big']]),#<0>(Pad,8,'integer',['unsigned'|['big']])}# in apply 'compact_objs'/10 (Head,WHead,SizeT,NewBin,L,From,To,SegBs,Cache,ASz)
<NewBin> when 'true' -> apply 'compact_objs'/10 (Head,WHead,SizeT,NewBin,L,From,To,SegBs,Cache,ASz) end-|['compiler_generated'] )
(<_61> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'not_ok'
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end
(<_32,_31,_30,_29,_28,_27,_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_32,_31,_30,_29,_28,_27,_26,_25})-|[{'function_name',{'compact_read',8}}] )-|['compiler_generated'] ) end
'compact_objs'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <Head,WHead,SizeT,Bin,L,From,To,SegBs,Cache,ASz> when call 'erlang':'=:=' (From,To) -> case L of <[]> when 'true' -> let <_10> = apply 'compact_input'/5 (Head,WHead,SizeT,Cache,L) in {SegBs,_10}
<[[From1|To1]|L1]> when 'true' -> let <Skip1> = call 'erlang':'-' (From1,From) in case Bin of <#{#<_58>(Skip1,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'compact_objs'/10 (Head,WHead,SizeT,NewBin,L1,From1,To1,SegBs,Cache,ASz)
<_59> when try let <_12> = call 'erlang':'byte_size' (Bin) in call 'erlang':'<' (_12,Skip1) of <Try> -> Try catch <T,R> -> 'false' -> apply 'compact_read'/8 (Head,WHead,SizeT,Cache,L,0,SegBs,ASz)
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
<Head,WHead,SizeT,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<St>(32,1,'integer',['unsigned'|['big']]),#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#,L,From,To,SegBs,Cache,ASz> when call 'erlang':'=:=' (St,305419896) -> (let <_97> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (Size) in let <LSize> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_97) in let <_16> = call 'erlang':'-' (LSize,1) in let <Size2> = call 'erlang':'bsl' (1,_16) in case <> of <> when try let <_18> = call 'erlang':'byte_size' (Bin) in call 'erlang':'>=' (_18,Size2) of <Try> -> Try catch <T,R> -> 'false' -> let <NASz> = call 'erlang':'+' (ASz,Size2) in case Bin of <#{#<SlotObjs>(Size2,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_28> = case <> of <> when (try (let <_23> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_21-|['compiler_generated'] )> when 'true' -> (_21-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_24> = call 'erlang':'=:=' ((_23-|['compiler_generated'] ),'true') in let <_25> = call 'erlang':'element' (10,Head) in let <_26> = call 'erlang':'=:=' (_25,'set') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_24,_26)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'binary_to_term' (KO)
<> when 'true' -> case KO of <#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),#<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> call 'erlang':'binary_to_term' (B2)
(<_27> when 'true' -> primop 'match_fail' ({'badmatch',_27})-|['compiler_generated'] ) end end in (case Head of (<({'head',_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec26,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}-|['compiler_generated'] )> when 'true' -> let <Key> = call 'erlang':'element' (_rec26,_28) in let <Slot> = apply 'db_hash'/2 (Key,Head) in let <From1> = call 'erlang':'+' (From,Size2) in case call 'erlang':'element' (LSize,Cache) of <[Addr|AL]> when 'true' -> let <_36> = call 'erlang':'+' (Addr,Size2) in let <NCache> = call 'erlang':'setelement' (LSize,Cache,[_36|[SlotObjs|AL]]) in let <_38> = #{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<Size>(32,1,'integer',['unsigned'|['big']]),#<Addr>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']])}# in let <NSegBs> = [_38|SegBs] in apply 'compact_objs'/10 (Head,WHead,SizeT,NewBin,L,From1,To,NSegBs,NCache,NASz)
(<_35> when 'true' -> primop 'match_fail' ({'badmatch',_35})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
<> when 'true' -> apply 'compact_read'/8 (Head,WHead,SizeT,Cache,[[From|To]|L],Size2,SegBs,ASz) end-|['compiler_generated'] )
<Head,WHead,SizeT,Bin = #{#<_89>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<_90>(32,1,'integer',['unsigned'|['big']]),#<_91>('all',8,'binary',['unsigned'|['big']])}#,L,From,To,SegBs,Cache,ASz> when try let <_41> = call 'erlang':'byte_size' (Bin) in call 'erlang':'>=' (_41,2048) of <Try> -> Try catch <T,R> -> 'false' -> case Bin of <#{#<_92>(2048,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_44> = call 'erlang':'+' (From,2048) in apply 'compact_objs'/10 (Head,WHead,SizeT,NewBin,L,_44,To,SegBs,Cache,ASz)
(<_42> when 'true' -> primop 'match_fail' ({'badmatch',_42})-|['compiler_generated'] ) end
<Head,WHead,SizeT,Bin = #{#<_93>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<_94>(32,1,'integer',['unsigned'|['big']]),#<_95>('all',8,'binary',['unsigned'|['big']])}#,L,From,To,SegBs,Cache,ASz> when try let <_46> = call 'erlang':'byte_size' (Bin) in call 'erlang':'<' (_46,2048) of <Try> -> Try catch <T,R> -> 'false' -> apply 'compact_read'/8 (Head,WHead,SizeT,Cache,[[From|To]|L],2048,SegBs,ASz)
<Head,WHead,SizeT,_X_Bin,L,From,To,SegBs,Cache,ASz> when 'true' -> apply 'compact_read'/8 (Head,WHead,SizeT,Cache,[[From|To]|L],0,SegBs,ASz) end
'read_bchunks'/2 = fun (_0,_1) -> apply 'read_bchunks'/5 (_0,_1,0,[],0)
'read_bchunks'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Head,L,Min,Bs,ASz> when try let <_6> = call 'erlang':'+' (ASz,Min) in let <_7> = call 'erlang':'>=' (_6,32768) in let <_8> = call 'erlang':'=/=' (Bs,[]) in call 'erlang':'and' (_7,_8) of <Try> -> Try catch <T,R> -> 'false' -> let <_9> = call 'lists':'reverse' (Bs) in {_9,L}
<Head,{From,To,L},Min,Bs,ASz> when 'true' -> let <Max> = call 'erlang':'max' (16384,Min) in case apply 'check_pread_arg'/2 (Max,Head) of <'true'> when 'true' -> (case Head of (<({'head',_29,_30,_31,_rec27,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'pread_n' (_rec27,From,Max) of <'eof'> when 'true' -> {'error','premature_eof'}
<NewBin> when try let <_14> = call 'erlang':'byte_size' (NewBin) in call 'erlang':'>=' (_14,Min) of <Try> -> Try catch <T,R> -> 'false' -> apply 'bchunks'/7 (Head,L,NewBin,Bs,ASz,From,To)
<Bin1> when try let <_15> = call 'erlang':'-' (To,From) in let <_16> = call 'erlang':'=:=' (_15,Min) in let <_17> = call 'erlang':'=:=' (L,#{}#) in call 'erlang':'and' (_16,_17) of <Try> -> Try catch <T,R> -> 'false' -> let <_18> = call 'erlang':'byte_size' (Bin1) in let <Pad> = call 'erlang':'-' (Min,_18) in let <NewBin> = #{#<Bin1>('all',8,'binary',['unsigned'|['big']]),#<0>(Pad,8,'integer',['unsigned'|['big']])}# in apply 'bchunks'/7 (Head,L,NewBin,Bs,ASz,From,To)
<_58> when 'true' -> {'error','premature_eof'} end-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> let <_22> = call 'dets_utils':'bad_object' ('bad_object',{'read_bchunks',Max}) in {'error',_22}
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
(<_28,_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24})-|[{'function_name',{'read_bchunks',5}}] )-|['compiler_generated'] ) end
'bchunks'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Head,L,Bin,Bs,ASz,From,To> when call 'erlang':'=:=' (From,To) -> case <> of <> when call 'erlang':'=:=' (L,#{}#) -> let <_7> = call 'lists':'reverse' (Bs) in {'finished',_7}
<> when 'true' -> case L of <#{#<From1>(32,1,'integer',['unsigned'|['big']]),#<To1>(32,1,'integer',['unsigned'|['big']]),#<L1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Skip1> = call 'erlang':'-' (From1,From) in case Bin of <#{#<_50>(Skip1,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'bchunks'/7 (Head,L1,NewBin,Bs,ASz,From1,To1)
<_51> when try let <_10> = call 'erlang':'byte_size' (Bin) in call 'erlang':'<' (_10,Skip1) of <Try> -> Try catch <T,R> -> 'false' -> apply 'read_bchunks'/5 (Head,{From1,To1,L1},0,Bs,ASz)
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end
<Head,L,Bin = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<St>(32,1,'integer',['unsigned'|['big']]),#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To> when let <_12> = call 'erlang':'=:=' (St,305419896) in let <_13> = call 'erlang':'=:=' (St,61591023) in call 'erlang':'or' (_12,_13) -> (let <_89> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (Size) in let <LSize> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_89) in let <_15> = call 'erlang':'-' (LSize,1) in let <Size2> = call 'erlang':'bsl' (1,_15) in case <> of <> when try let <_17> = call 'erlang':'byte_size' (Bin) in call 'erlang':'>=' (_17,Size2) of <Try> -> Try catch <T,R> -> 'false' -> case Bin of <#{#<B0>(Size2,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_26> = case <> of <> when (try (let <_21> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_19-|['compiler_generated'] )> when 'true' -> (_19-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_22> = call 'erlang':'=:=' ((_21-|['compiler_generated'] ),'true') in let <_23> = call 'erlang':'element' (10,Head) in let <_24> = call 'erlang':'=:=' (_23,'set') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_22,_24)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> call 'erlang':'binary_to_term' (KO)
<> when 'true' -> case KO of <#{#<_X_KSz>(32,1,'integer',['unsigned'|['big']]),#<B2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> call 'erlang':'binary_to_term' (B2)
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end end in (case Head of (<({'head',_52,_53,_54,_55,_56,_57,_58,_59,_60,_rec28,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79}-|['compiler_generated'] )> when 'true' -> let <Key> = call 'erlang':'element' (_rec28,_26) in let <Slot> = apply 'db_hash'/2 (Key,Head) in let <B> = {LSize,Slot,B0} in let <_34> = call 'erlang':'+' (ASz,Size2) in let <_33> = call 'erlang':'+' (From,Size2) in apply 'bchunks'/7 (Head,L,NewBin,[B|Bs],_34,_33,To)-|['compiler_generated'] )
(<_80> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
<> when 'true' -> apply 'read_bchunks'/5 (Head,{From,To,L},Size2,Bs,ASz) end-|['compiler_generated'] )
<Head,L,Bin = #{#<_81>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<_82>(32,1,'integer',['unsigned'|['big']]),#<_83>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To> when try let <_36> = call 'erlang':'byte_size' (Bin) in call 'erlang':'>=' (_36,2048) of <Try> -> Try catch <T,R> -> 'false' -> case Bin of <#{#<_84>(2048,8,'binary',['unsigned'|['big']]),#<NewBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_39> = call 'erlang':'+' (From,2048) in apply 'bchunks'/7 (Head,L,NewBin,Bs,ASz,_39,To)
(<_37> when 'true' -> primop 'match_fail' ({'badmatch',_37})-|['compiler_generated'] ) end
<Head,L,Bin = #{#<_85>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<_86>(32,1,'integer',['unsigned'|['big']]),#<_87>('all',8,'binary',['unsigned'|['big']])}#,Bs,ASz,From,To> when try let <_41> = call 'erlang':'byte_size' (Bin) in call 'erlang':'<' (_41,2048) of <Try> -> Try catch <T,R> -> 'false' -> apply 'read_bchunks'/5 (Head,{From,To,L},2048,Bs,ASz)
<Head,L,_X_Bin,Bs,ASz,From,To> when 'true' -> apply 'read_bchunks'/5 (Head,{From,To,L},0,Bs,ASz) end
'bchunk_init'/2 = fun (_0,_1) -> let <Ref> = call 'erlang':'make_ref' () in let <_4> = catch let <_3> = apply _1 ('read') in {Ref,_3} in case _4 of <{_35,'end_of_input'}> when call 'erlang':'=:=' (_35,Ref) -> {'error',{'init_fun','end_of_input'}}
<{_36,{[],NInitFun}}> when let <_37> = call 'erlang':'=:=' (_36,Ref) in let <_38> = call 'erlang':'is_function' (NInitFun) in call 'erlang':'and' (_37,_38) -> apply 'bchunk_init'/2 (_0,NInitFun)
<{_39,{[ParmsBin|L],NInitFun}}> when let <_40> = call 'erlang':'=:=' (_39,Ref) in let <_41> = try let <_5> = call 'erlang':'is_list' (L) in let <_6> = call 'erlang':'is_function' (NInitFun) in call 'erlang':'and' (_5,_6) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'and' (_40,_41) -> case _0 of <{'head',_42,_43,_44,Fd,_45,_46,_47,_48,Type,Kp,_49,_50,_51,Auto,_52,_53,_54,_55,_56,_57,Cache,Fname,_58,Ram,Tab,_59,_60,_61,_62}> when 'true' -> case apply 'try_bchunk_header'/2 (ParmsBin,_0) of <{'ok',Parms}> when 'true' -> case Parms of <{'$hash2',_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,NoObjects,NoKeys,NoObjsPerSize}> when 'true' -> let <CacheSz> = call 'dets_utils':'cache_size' (Cache) in case apply 'prep_table_copy'/9 (Fd,Tab,Fname,Type,Kp,Ram,CacheSz,Auto,Parms) of <{'ok',Head1}> when 'true' -> let <SizeT> = call 'ets':'new' ('dets_init',[]) in case apply 'prepare_file_init'/5 (NoObjects,NoKeys,NoObjsPerSize,SizeT,Head1) of <{NewHead,Bases,SegAddr,SegEnd}> when 'true' -> let <_14> = call 'erlang':'tuple_size' (Bases) in let <_15> = call 'erlang':'-' (_14,0) in let <_16> = call 'lists':'duplicate' (_15,[0]) in let <ECache> = call 'erlang':'list_to_tuple' (_16) in let <Input> = fun (_22) -> case _22 of <'close'> when 'true' -> catch apply NInitFun (('close'-|['result_not_wanted'] ))
<'read'> when 'true' -> apply 'do_make_slots'/7 (L,ECache,SizeT,NewHead,Ref,0,NInitFun)
(<_23> when 'true' -> (primop 'match_fail' ({'function_clause',_23})-|[{'function_name',{'-bchunk_init/2-fun-0-',1}}] )-|['compiler_generated'] ) end in let <Output> = apply 'fast_output'/5 (NewHead,SizeT,Bases,SegAddr,SegEnd) in (case _0 of (<({'head',_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_rec29,_95,_96,_97,_98,_99,_100,_101}-|['compiler_generated'] )> when 'true' -> let <TmpDir> = call 'filename':'dirname' (_rec29) in let <_29> = catch call 'file_sorter':'sort' (Input,Output,[{'format','binary'}|[{'tmpdir',TmpDir}|[{'header',1}]]]) in do call 'ets':'delete' (SizeT) _29-|['compiler_generated'] )
(<_102> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<'not_ok'> when 'true' -> {'error',{'init_fun',ParmsBin}}
(<_31> when 'true' -> primop 'match_fail' ({'case_clause',_31})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{_103,Value}> when call 'erlang':'=:=' (_103,Ref) -> {'error',{'init_fun',Value}}
<Error> when 'true' -> {'thrown',Error} end
'try_bchunk_header'/2 = fun (_0,_1) -> case _1 of <{'head',_24,_25,_26,_27,_28,_29,_30,_31,Type,Kp,_32,_33,_34,_35,_36,_37,HashBif,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}> when 'true' -> let <HashMethod> = apply 'hash_method_to_code'/1 (HashBif) in let <_4> = catch call 'erlang':'binary_to_term' (_0) in case _4 of <Parms = {'$hash2',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}> when (try let <_9> = call 'erlang':'element' (5,Parms) in let <_10> = call 'erlang':'=:=' (_9,Type) in let <_12> = call 'erlang':'element' (6,Parms) in let <_13> = call 'erlang':'=:=' (_12,Kp) in let <_14> = call 'erlang':'element' (7,Parms) in let <_15> = call 'erlang':'=:=' (_14,HashMethod) in let <_16> = call 'erlang':'element' (3,Parms) in let <_17> = call 'erlang':'=:=' (_16,1) in let <_18> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_15,_17) in let <_19> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_13,_18) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_10,_19)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'ok',Parms}
<_64> when 'true' -> 'not_ok' end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'bchunk_input'/6 = fun (_0,_1,_2,_3,_4,_5) -> (fun (_14) -> case _14 of <'close'> when 'true' -> catch apply _0 (('close'-|['result_not_wanted'] ))
<'read'> when 'true' -> let <_9> = catch let <_8> = apply _0 ('read') in {_3,_8} in case _9 of <{_22,'end_of_input'}> when call 'erlang':'=:=' (_22,_3) -> do apply 'fast_write_all_sizes'/3 (_4,_1,_2) 'end_of_input'
<{_23,{L,NInitFun}}> when let <_24> = call 'erlang':'=:=' (_23,_3) in let <_25> = try let <_11> = call 'erlang':'is_list' (L) in let <_12> = call 'erlang':'is_function' (NInitFun) in call 'erlang':'and' (_11,_12) of <Try> -> Try catch <T,R> -> 'false' in call 'erlang':'and' (_24,_25) -> apply 'do_make_slots'/7 (L,_4,_1,_2,_3,_5,NInitFun)
<{_26,Value}> when call 'erlang':'=:=' (_26,_3) -> {'error',{'init_fun',Value}}
<Error> when 'true' -> call 'erlang':'throw' ({'thrown',Error}) end
(<_15> when 'true' -> (primop 'match_fail' ({'function_clause',_15})-|[{'function_name',{'-bchunk_input/6-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-bchunk_input/6-fun-0-'}}] )
'do_make_slots'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <_7> = catch apply 'make_slots'/4 (_0,_1,[],_5) in case _7 of <{'EXIT',_22}> when 'true' -> do try apply _6 (('close'-|['result_not_wanted'] )) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' {'error','invalid_objects_list'}
<{Cache1,SegBs,NASz}> when call 'erlang':'>' (NASz,491520) -> let <NCache> = apply 'fast_write_all_sizes'/3 (Cache1,_2,_3) in let <F> = apply 'bchunk_input'/6 (_6,_2,_3,_4,NCache,0) in {SegBs,F}
<{NCache,SegBs,NASz}> when 'true' -> let <F> = apply 'bchunk_input'/6 (_6,_2,_3,_4,NCache,NASz) in {SegBs,F}
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
'make_slots'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[{LSize,Slot,Bin0 = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<St>(32,1,'integer',['unsigned'|['big']]),#<Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#}|Bins],Cache,SegBs,ASz> when 'true' -> let <_4> = case <> of <> when call 'erlang':'=:=' (St,305419896) -> Bin0
<> when call 'erlang':'=:=' (St,61591023) -> #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']]),#<Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end in let <BSz> = call 'erlang':'byte_size' (Bin0) in let <_7> = call 'erlang':'-' (LSize,1) in let <_8> = call 'erlang':'bsl' (1,_7) in case call 'erlang':'=:=' (BSz,_8) of <'true'> when 'true' -> let <NASz> = call 'erlang':'+' (ASz,BSz) in case call 'erlang':'element' (LSize,Cache) of <[Addr|L]> when 'true' -> let <_12> = #{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<Size>(32,1,'integer',['unsigned'|['big']]),#<Addr>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']])}# in let <NSegBs> = [_12|SegBs] in let <_14> = call 'erlang':'+' (Addr,BSz) in let <NCache> = call 'erlang':'setelement' (LSize,Cache,[_14|[_4|L]]) in apply 'make_slots'/4 (Bins,NCache,NSegBs,NASz)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<[],Cache,SegBs,ASz> when 'true' -> {Cache,SegBs,ASz}
(<_19,_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16})-|[{'function_name',{'make_slots',4}}] )-|['compiler_generated'] ) end
'fast_output'/5 = fun (_0,_1,_2,_3,_4) -> (fun (_11) -> case _11 of <'close'> when 'true' -> apply 'fast_output_end'/2 (_0,_1)
<L> when 'true' -> (case _0 of (<({'head',_18,_19,_20,_rec30,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45}-|['compiler_generated'] )> when 'true' -> case call 'file':'position' (_rec30,_3) of <{'ok',_47}> when call 'erlang':'=:=' (_47,_3) -> let <NewSegAddr> = case <L,_2,_0,_3,_3> of (<([(#{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<BSize>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<AddrToBe>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<LSize>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )|Bins]-|['compiler_generated'] ),_82,_83,_84,SS> when ('true'-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),Slot) in (let <Pos> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (SS,_7) in (apply 'write_segment_file'/10 (Bins,_82,_83,([]-|['compiler_generated'] ),_84,SS,Pos,BSize,AddrToBe,LSize)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([]-|['compiler_generated'] ),_X_Bases,_86,_87,_X_SS> when ('true'-|['compiler_generated'] ) -> (do (call ('dets_utils'-|['compiler_generated'] ):('write'-|['compiler_generated'] ) (_86,([]-|['compiler_generated'] ))-|['compiler_generated'] ) _87-|['compiler_generated'] )-|['compiler_generated'] )
(<_14,_13,_12,_10,_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_14,_13,_12,([]-|['compiler_generated'] ),_10,_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'fast_output2'/6 (_0,_1,_2,NewSegAddr,_3,_4)
<Error> when 'true' -> catch (case _0 of (<({'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_rec31,_69,_70,_71,_72,_73,_74,_75}-|['compiler_generated'] )> when 'true' -> call 'dets_utils':'file_error' (Error,_rec31)-|['compiler_generated'] )
(<_76> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_46> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|[{'id',{0,0,'-fast_output/5-fun-0-'}}] )
'fast_output2'/6 = fun (_0,_1,_2,_3,_4,_5) -> (fun (_9) -> case _9 of <'close'> when 'true' -> let <FinalZ> = call 'erlang':'-' (_5,_3) in let <_7> = call 'dets_utils':'make_zeros' (FinalZ) in do call 'dets_utils':'write' (_0,_7) apply 'fast_output_end'/2 (_0,_1)
<L> when 'true' -> let <NewSegAddr> = case <L,_2,_0,_3,_4> of (<([(#{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<BSize>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<AddrToBe>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<LSize>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )|Bins]-|['compiler_generated'] ),_23,_24,_25,_26> when ('true'-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),Slot) in (let <Pos> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_26,_7) in (apply 'write_segment_file'/10 (Bins,_23,_24,([]-|['compiler_generated'] ),_25,_26,Pos,BSize,AddrToBe,LSize)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([]-|['compiler_generated'] ),_X_Bases,_27,_28,_X_SS> when ('true'-|['compiler_generated'] ) -> (do (call ('dets_utils'-|['compiler_generated'] ):('write'-|['compiler_generated'] ) (_27,([]-|['compiler_generated'] ))-|['compiler_generated'] ) _28-|['compiler_generated'] )-|['compiler_generated'] )
(<_14,_13,_12,_10,_29> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_14,_13,_12,([]-|['compiler_generated'] ),_10,_29}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'fast_output2'/6 (_0,_1,_2,NewSegAddr,_4,_5) end-|[{'id',{0,0,'-fast_output2/6-fun-0-'}}] )
'fast_output_end'/2 = fun (_0,_1) -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{_X_Sz,_X_Pos,Cnt,NoC},Acc> when 'true' -> let <_2> = call 'erlang':'=:=' (Cnt,NoC) in call 'erlang':'and' (_2,Acc)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'-fast_output_end/2-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'ets':'foldl' (_7,'true',_1) of <'true'> when 'true' -> {'ok',_0}
<'false'> when 'true' -> {'error','invalid_objects_list'}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'write_segment_file'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<BSize>(32,1,'integer',['unsigned'|['big']]),#<AddrToBe>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']])}#|Bins],Bases,Head,Ws,SegAddr,SS> when 'true' -> let <_7> = call 'erlang':'*' (8,Slot) in let <Pos> = call 'erlang':'+' (SS,_7) in apply 'write_segment_file'/10 (Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,AddrToBe,LSize)
<[],_X_Bases,Head,Ws,SegAddr,_X_SS> when 'true' -> do call 'dets_utils':'write' (Head,Ws) SegAddr
(<_14,_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12,_11,_10,_9})-|[{'function_name',{'write_segment_file',6}}] )-|['compiler_generated'] ) end
'write_segment_file'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,AddrToBe,LSize> when call 'erlang':'=:=' (Pos,SegAddr) -> let <_10> = call 'erlang':'element' (LSize,Bases) in let <Addr> = call 'erlang':'+' (AddrToBe,_10) in let <_12> = #{#<BSize>(32,1,'integer',['unsigned'|['big']]),#<Addr>(32,1,'integer',['unsigned'|['big']])}# in let <NWs> = [Ws|_12] in let <_15> = call 'erlang':'+' (SegAddr,8) in (case <Bins,Bases,Head,NWs,_15,SS> of (<([(#{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_50>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_51>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_52>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )|_53]-|['compiler_generated'] ),_54,_55,_56,_57,_58> when ('true'-|['compiler_generated'] ) -> (let <_60> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),Slot) in (let <_61> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_58,_60) in (apply 'write_segment_file'/10 (_53,_54,_55,_56,_57,_58,_61,_50,_51,_52)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([]-|['compiler_generated'] ),_X_Bases,_62,_63,_64,_X_SS> when ('true'-|['compiler_generated'] ) -> (do (call ('dets_utils'-|['compiler_generated'] ):('write'-|['compiler_generated'] ) (_62,_63)-|['compiler_generated'] ) _64-|['compiler_generated'] )-|['compiler_generated'] )
(<_65,_13,_66,_11,_67,_68> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_65,_13,_66,_11,_67,_68}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,AddrToBe,LSize> when try let <_16> = call 'erlang':'-' (Pos,SegAddr) in call 'erlang':'<' (_16,100) of <Try> -> Try catch <T,R> -> 'false' -> let <_17> = call 'erlang':'element' (LSize,Bases) in let <Addr> = call 'erlang':'+' (AddrToBe,_17) in let <NoZeros> = call 'erlang':'-' (Pos,SegAddr) in let <_20> = #{#<0>(NoZeros,8,'integer',['unsigned'|['big']]),#<BSize>(32,1,'integer',['unsigned'|['big']]),#<Addr>(32,1,'integer',['unsigned'|['big']])}# in let <NWs> = [Ws|_20] in let <_23> = call 'erlang':'+' (SegAddr,NoZeros) in let <NSegAddr> = call 'erlang':'+' (_23,8) in (case <Bins,Bases,Head,NWs,NSegAddr,SS> of (<([(#{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_75>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_76>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_77>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )|_78]-|['compiler_generated'] ),_79,_80,_81,_82,_83> when ('true'-|['compiler_generated'] ) -> (let <_85> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),Slot) in (let <_86> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_83,_85) in (apply 'write_segment_file'/10 (_78,_79,_80,_81,_82,_83,_86,_75,_76,_77)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([]-|['compiler_generated'] ),_X_Bases,_87,_88,_89,_X_SS> when ('true'-|['compiler_generated'] ) -> (do (call ('dets_utils'-|['compiler_generated'] ):('write'-|['compiler_generated'] ) (_87,_88)-|['compiler_generated'] ) _89-|['compiler_generated'] )-|['compiler_generated'] )
(<_14,_13,_12,_11,_10,_90> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_14,_13,_12,_11,_10,_90}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Bins,Bases,Head,Ws,SegAddr,SS,Pos,BSize,AddrToBe,LSize> when 'true' -> let <_25> = call 'erlang':'element' (LSize,Bases) in let <Addr> = call 'erlang':'+' (AddrToBe,_25) in let <NoZeros> = call 'erlang':'-' (Pos,SegAddr) in let <_28> = call 'dets_utils':'make_zeros' (NoZeros) in let <_29> = #{#<BSize>(32,1,'integer',['unsigned'|['big']]),#<Addr>(32,1,'integer',['unsigned'|['big']])}# in let <NWs> = [Ws|[_28|_29]] in let <_32> = call 'erlang':'+' (SegAddr,NoZeros) in let <NSegAddr> = call 'erlang':'+' (_32,8) in (case <Bins,Bases,Head,NWs,NSegAddr,SS> of (<([(#{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_97>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_98>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_99>((8-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )|_100]-|['compiler_generated'] ),_101,_102,_103,_104,_105> when ('true'-|['compiler_generated'] ) -> (let <_107> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),Slot) in (let <_108> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_105,_107) in (apply 'write_segment_file'/10 (_100,_101,_102,_103,_104,_105,_108,_97,_98,_99)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<([]-|['compiler_generated'] ),_X_Bases,_109,_110,_111,_X_SS> when ('true'-|['compiler_generated'] ) -> (do (call ('dets_utils'-|['compiler_generated'] ):('write'-|['compiler_generated'] ) (_109,_110)-|['compiler_generated'] ) _111-|['compiler_generated'] )-|['compiler_generated'] )
(<_14,_13,_12,_11,_10,_112> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_14,_13,_12,_11,_10,_112}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'fast_write_all_sizes'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'tuple_to_list' (_0) in let <CacheL> = call 'lists':'reverse' (_3) in let <_5> = call 'erlang':'tuple_size' (_0) in apply 'fast_write_sizes'/6 (CacheL,_5,_1,_2,[],[])
'fast_write_sizes'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[],_X_Sz,_X_SizeT,Head,NCL,PwriteList> when 'true' -> case Head of <{'head',_25,_26,_27,Fd,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,FileName,_45,_46,_47,_48,_49,_50,_51}> when 'true' -> case call 'dets_utils':'pwrite' (Fd,FileName,PwriteList) of <'ok'> when 'true' -> call 'erlang':'list_to_tuple' (NCL)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[C = [_X_Addr|[]]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' -> let <_8> = call 'erlang':'-' (Sz,1) in apply 'fast_write_sizes'/6 (CL,_8,SizeT,Head,[C|NCL],PwriteList)
<[[Addr|C]|CL],Sz,SizeT,Head,NCL,PwriteList> when 'true' -> case call 'ets':'lookup' (SizeT,Sz) of <[]> when 'true' -> call 'erlang':'throw' ({'error','invalid_objects_list'})
<[{_52,Position,_X_ObjCounter,_X_NoCollections}|[]]> when call 'erlang':'=:=' (_52,Sz) -> let <NoColls> = call 'erlang':'length' (C) in do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,Sz,({(3-|['result_not_wanted'] ),NoColls}-|['result_not_wanted'] ))-|['result_not_wanted'] ) let <_14> = call 'erlang':'+' (Position,Addr) in let <_11> = call 'erlang':'-' (Sz,1) in let <_12> = call 'erlang':'bsl' (1,_11) in let <_13> = call 'erlang':'*' (NoColls,_12) in let <Pos> = call 'erlang':'-' (_14,_13) in let <_17> = call 'erlang':'-' (Sz,1) in let <_16> = call 'lists':'reverse' (C) in apply 'fast_write_sizes'/6 (CL,_17,SizeT,Head,[[Addr|[]]|NCL],[{Pos,_16}|PwriteList])
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end
(<_24,_23,_22,_21,_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20,_19})-|[{'function_name',{'fast_write_sizes',6}}] )-|['compiler_generated'] ) end
'prepare_file_init'/5 = fun (_0,_1,_2,_3,_4) -> case call 'dets_utils':'alloc' (_4,(2047-|['compiler_generated'] )) of <{_48,SegEnd,_49}> when 'true' -> case _4 of <{'head',_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78}> when 'true' -> let <_9> = call 'erlang':'setelement' (7,_4,_1) in let <_11> = call 'erlang':'setelement' (6,_9,_0) in case call 'ets':'insert' (_3,{1,0,[],0}) of <'true'> when 'true' -> let <_18> = fun (_16) -> case _16 of <{LogSz,NoColls}> when 'true' -> let <_14> = call 'erlang':'+' (LogSz,1) in let <_80> = call 'ets':'insert' (_3,{_14,0,0,NoColls}) in case _80 of <'true'> when 'true' -> (_80-|['compiler_generated'] )
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_17> when 'true' -> (primop 'match_fail' ({'function_clause',_17})-|[{'function_name',{'-prepare_file_init/5-fun-0-',1}}] )-|['compiler_generated'] ) end in do call 'lists':'foreach' (_18,_2) case apply 'allocate_all_objects'/2 (_11,_3) of <{NewHead,NL0,MaxSz,EndOfFile}> when 'true' -> case NL0 of <[{1,SegAddr,[],0}|NL]> when 'true' -> case call 'ets':'delete_all_objects' (_3) of <'true'> when 'true' -> let <_25> = fun (_23) -> let <_81> = call 'ets':'insert' (_3,_23) in case _81 of <'true'> when 'true' -> (_81-|['compiler_generated'] )
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_25,NL) let <_31> = fun (_28,_27) -> case <_28,_27> of <{LSz,P,_X_D,_X_N},A> when 'true' -> call 'erlang':'setelement' (LSz,A,P)
(<_30,_29> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29})-|[{'function_name',{'-prepare_file_init/5-fun-2-',2}}] )-|['compiler_generated'] ) end in let <_26> = call 'erlang':'make_tuple' (MaxSz,0) in let <Bases> = call 'lists':'foldl' (_31,_26,NL) in let <_40> = fun (_37,_36) -> case <_37,_36> of <{LSz,_82,_83,N},A> when 'true' -> let <_33> = call 'erlang':'-' (LSz,1) in let <_34> = call 'erlang':'bsl' (1,_33) in let <_35> = call 'erlang':'*' (_34,N) in call 'erlang':'+' (A,_35)
(<_39,_38> when 'true' -> (primop 'match_fail' ({'function_clause',_39,_38})-|[{'function_name',{'-prepare_file_init/5-fun-3-',2}}] )-|['compiler_generated'] ) end in let <Est> = call 'lists':'foldl' (_40,0,NL) in case apply 'write_bytes'/3 (NewHead,EndOfFile,Est) of <'ok'> when 'true' -> {NewHead,Bases,SegAddr,SegEnd}
(<_42> when 'true' -> primop 'match_fail' ({'badmatch',_42})-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_79> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'write_bytes'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_Head,_X_EndOfFile,Est> when call 'erlang':'<' (Est,491520) -> 'ok'
<Head,EndOfFile,_X_Est> when 'true' -> (case Head of (<({'head',_17,_18,_19,_rec33,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> case call 'file':'position' (_rec33,'eof') of <{'ok',Start}> when 'true' -> let <BytesToWrite> = call 'erlang':'-' (EndOfFile,Start) in let <_10> = call 'lists':'seq' (0,255) in let <_12> = call 'lists':'duplicate' (256,_10) in let <Bin> = call 'erlang':'list_to_binary' (_12) in apply 'write_loop'/3 (Head,BytesToWrite,Bin)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'write_loop'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,BytesToWrite,Bin> when try let <_3> = call 'erlang':'byte_size' (Bin) in call 'erlang':'>=' (BytesToWrite,_3) of <Try> -> Try catch <T,R> -> 'false' -> (case Head of (<({'head',_15,_16,_17,_rec34,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}-|['compiler_generated'] )> when 'true' -> case call 'file':'write' (_rec34,Bin) of <'ok'> when 'true' -> let <_6> = call 'erlang':'byte_size' (Bin) in let <_7> = call 'erlang':'-' (BytesToWrite,_6) in apply 'write_loop'/3 (Head,_7,Bin)
<Error> when 'true' -> (case Head of (<({'head',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_rec35,_65,_66,_67,_68,_69,_70,_71}-|['compiler_generated'] )> when 'true' -> call 'dets_utils':'file_error' (Error,_rec35)-|['compiler_generated'] )
(<_72> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_43> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_X_Head,0,_X_Bin> when 'true' -> 'ok'
<Head,BytesToWrite,Bin> when 'true' -> case Bin of <#{#<SmallBin>(BytesToWrite,8,'binary',['unsigned'|['big']]),#<_73>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'write_loop'/3 (Head,BytesToWrite,SmallBin)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
'allocate_all_objects'/2 = fun (_0,_1) -> let <_2> = call 'ets':'tab2list' (_1) in let <_3> = call 'lists':'keysort' (1,_2) in let <DTL> = call 'lists':'reverse' (_3) in let <_5> = call 'erlang':'hd' (DTL) in let <MaxSz> = call 'erlang':'element' (1,_5) in case apply 'allocate_all'/3 (_0,DTL,[]) of <{Head1,NL}> when 'true' -> case call 'dets_utils':'alloc' (Head1,16) of <{_X_Head,EndOfFile,_18}> when 'true' -> (case Head1 of (<({'head',_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_rec38,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}-|['compiler_generated'] )> when 'true' -> let <_rec36> = case _rec38 of (<(NoColls = ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> NoColls-|['compiler_generated'] )
(<NoColls> when ('true'-|['compiler_generated'] ) -> (apply 'max_objsize'/2 (NoColls,(0-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case Head1 of <{'head',_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76}> when 'true' -> let <_14> = call 'erlang':'setelement' (8,Head1,_rec36) in {_14,NL,MaxSz,EndOfFile}
(<_77> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'allocate_all'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,[{1,_34,Data,_35}|[]],L> when 'true' -> (case Head of (<({'head',_36,_37,_rec39,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}-|['compiler_generated'] )> when 'true' -> let <NoParts> = apply 'no_parts'/1 (_rec39) in let <_6> = call 'erlang':'*' (NoParts,4) in let <_7> = call 'erlang':'*' (_6,512) in let <Addr> = call 'erlang':'+' (1336,_7) in {Head,[{1,Addr,Data,0}|L]}-|['compiler_generated'] )
(<_64> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Head,[{LSize,_65,Data,NoCollections}|DTL],L> when 'true' -> let <_16> = call 'erlang':'-' (LSize,1) in let <Size> = call 'erlang':'bsl' (1,_16) in let <_18> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (Size,(1-|['compiler_generated'] )) in case call 'dets_utils':'alloc' (Head,_18) of <{_X_Head,Addr,_66}> when 'true' -> let <Head1> = call 'dets_utils':'alloc_many' (Head,Size,NoCollections,Addr) in (case Head1 of (<({'head',_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_rec40,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94}-|['compiler_generated'] )> when 'true' -> let <_24> = call 'erlang':'-' (LSize,1) in let <NewNoColls> = call 'orddict':'update_counter' (_24,NoCollections,_rec40) in case Head1 of <{'head',_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124}> when 'true' -> let <_28> = call 'erlang':'setelement' (14,Head1,NewNoColls) in let <E> = {LSize,Addr,Data,NoCollections} in apply 'allocate_all'/3 (_28,DTL,[E|L])
(<_125> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_33,_32,_31> when 'true' -> (primop 'match_fail' ({'function_clause',_33,_32,_31})-|[{'function_name',{'allocate_all',3}}] )-|['compiler_generated'] ) end
'bin2term'/2 = fun (_0,_1) -> apply 'bin2term1'/3 (_0,_1,[])
'bin2term1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<Seq>(32,1,'integer',['unsigned'|['big']]),#<BinTerm>('all',8,'binary',['unsigned'|['big']])}#|BTs],Kp,L> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (BinTerm) in let <Key> = call 'erlang':'element' (Kp,Term) in apply 'bin2term1'/3 (BTs,Kp,[{Slot,Key,Seq,Term,BinTerm}|L])
<[],_X_Kp,L> when 'true' -> call 'lists':'reverse' (L)
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'bin2term1',3}}] )-|['compiler_generated'] ) end
'write_all_sizes'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Cache = {},_X_SizeT,_X_Head,_X_More> when 'true' -> Cache
<Cache,SizeT,Head,More> when 'true' -> let <_4> = call 'erlang':'tuple_to_list' (Cache) in let <CacheL> = call 'lists':'reverse' (_4) in let <Sz> = call 'erlang':'length' (CacheL) in let <_8> = case call 'ets':'info' (SizeT,'size') of <1> when call 'erlang':'=:=' (More,'no_more') -> apply 'all_sizes'/3 (CacheL,Sz,SizeT)
<_14> when 'true' -> apply 'write_sizes'/4 (CacheL,Sz,SizeT,Head) end in call 'erlang':'list_to_tuple' (_8) end
'all_sizes'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <CL = [],_X_Sz,_X_SizeT> when 'true' -> CL
<[C = []|CL],Sz,SizeT> when 'true' -> let <_3> = call 'erlang':'-' (Sz,1) in let <_4> = apply 'all_sizes'/3 (CL,_3,SizeT) in [C|_4]
<[C0|CL],Sz,SizeT> when 'true' -> let <C> = call 'lists':'reverse' (C0) in let <NoCollections> = call 'erlang':'length' (C) in case call 'ets':'insert' (SizeT,{Sz,0,C,NoCollections}) of <'true'> when 'true' -> let <_8> = call 'erlang':'-' (Sz,1) in let <_9> = apply 'all_sizes'/3 (CL,_8,SizeT) in [[]|_9]
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'all_sizes',3}}] )-|['compiler_generated'] ) end
'write_sizes'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <CL = [],_X_Sz,_X_SizeT,_X_Head> when 'true' -> CL
<[C = []|CL],Sz,SizeT,Head> when 'true' -> let <_4> = call 'erlang':'-' (Sz,1) in let <_5> = apply 'write_sizes'/4 (CL,_4,SizeT,Head) in [C|_5]
<[C|CL],Sz,SizeT,Head> when 'true' -> let <_7> = case call 'ets':'lookup' (SizeT,Sz) of <[]> when 'true' -> apply 'temp_file'/3 (Head,SizeT,Sz)
<[{_19,_20,_@r0 = {FN,F},_21}|[]]> when 'true' -> _@r0
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end in case _7 of <{FileName,Fd}> when 'true' -> let <NoCollections> = call 'erlang':'length' (C) in do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,Sz,({(4-|['result_not_wanted'] ),NoCollections}-|['result_not_wanted'] ))-|['result_not_wanted'] ) let <_11> = call 'lists':'reverse' (C) in case call 'file':'write' (Fd,_11) of <'ok'> when 'true' -> let <_12> = call 'erlang':'-' (Sz,1) in let <_13> = apply 'write_sizes'/4 (CL,_12,SizeT,Head) in [[]|_13]
<Error> when 'true' -> call 'dets_utils':'file_error' (FileName,Error) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_18,_17,_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15})-|[{'function_name',{'write_sizes',4}}] )-|['compiler_generated'] ) end
'output_slots'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[E|Es],Head,Cache,SizeT,NoKeys,NoObjs> when 'true' -> apply 'output_slots'/8 (E,Es,[E|[]],Head,Cache,SizeT,NoKeys,NoObjs)
<[],_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' -> do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,('no'-|['result_not_wanted'] ),({(2-|['result_not_wanted'] ),NoObjs}-|['result_not_wanted'] ))-|['result_not_wanted'] ) do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,('no'-|['result_not_wanted'] ),({(3-|['result_not_wanted'] ),NoKeys}-|['result_not_wanted'] ))-|['result_not_wanted'] ) {'not_a_tuple',[],Cache}
(<_13,_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10,_9,_8})-|[{'function_name',{'output_slots',6}}] )-|['compiler_generated'] ) end
'output_slots'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <E,[E1|Es],Acc,Head,Cache,SizeT,NoKeys,NoObjs> when try let <_9> = call 'erlang':'element' (1,E) in let <_8> = call 'erlang':'element' (1,E1) in call 'erlang':'=:=' (_9,_8) of <Try> -> Try catch <T,R> -> 'false' -> apply 'output_slots'/8 (E1,Es,[E1|Acc],Head,Cache,SizeT,NoKeys,NoObjs)
<E,[],Acc,_X_Head,Cache,SizeT,NoKeys,NoObjs> when 'true' -> do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,('no'-|['result_not_wanted'] ),({(2-|['result_not_wanted'] ),NoObjs}-|['result_not_wanted'] ))-|['result_not_wanted'] ) do (call ('ets'-|['result_not_wanted'] ):('update_counter'-|['result_not_wanted'] ) (SizeT,('no'-|['result_not_wanted'] ),({(3-|['result_not_wanted'] ),NoKeys}-|['result_not_wanted'] ))-|['result_not_wanted'] ) {E,Acc,Cache}
<_X_E,L,Acc,Head,Cache,SizeT,NoKeys,NoObjs> when 'true' -> apply 'output_slot'/7 (Acc,Head,Cache,L,SizeT,NoKeys,NoObjs) end
'output_slot'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <_7> = call 'erlang':'hd' (_0) in let <Slot> = call 'erlang':'element' (1,_7) in let <_9> = call 'lists':'sort' (_0) in case apply 'prep_slot'/2 (_9,_1) of <{Bins,Size,No,KNo}> when 'true' -> let <NNoKeys> = call 'erlang':'+' (_5,KNo) in let <NNoObjs> = call 'erlang':'+' (_6,No) in let <BSize> = call 'erlang':'+' (Size,8) in (let <_42> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (BSize) in let <LSize> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_42) in let <_15> = call 'erlang':'-' (LSize,1) in let <Size2> = call 'erlang':'bsl' (1,_15) in let <_17> = call 'erlang':'-' (Size2,BSize) in let <Pad> = #{#<0>(_17,8,'integer',['unsigned'|['big']])}# in let <_19> = #{#<BSize>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']])}# in let <BinObject> = [_19|[Bins|Pad]] in let <_29> = case <> of <> when try let <_21> = call 'erlang':'tuple_size' (_2) in call 'erlang':'>' (LSize,_21) of <Try> -> Try catch <T,R> -> 'false' -> let <_25> = call 'erlang':'tuple_to_list' (_2) in let <_22> = call 'erlang':'tuple_size' (_2) in let <_23> = call 'erlang':'-' (LSize,_22) in let <_24> = call 'lists':'duplicate' (_23,[]) in let <_26> = call 'erlang':'++' (_25,_24) in let <C1> = call 'erlang':'list_to_tuple' (_26) in call 'erlang':'setelement' (LSize,C1,[BinObject|[]])
<> when 'true' -> let <CL> = call 'erlang':'element' (LSize,_2) in call 'erlang':'setelement' (LSize,_2,[BinObject|CL]) end in let <PBin> = #{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<BSize>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']])}# in let <PL> = call 'erlang':'element' (1,_29) in let <NCache> = call 'erlang':'setelement' (1,_29,[PBin|PL]) in apply 'output_slots'/6 (_3,_1,NCache,_4,NNoKeys,NNoObjs)-|['compiler_generated'] )
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
'prep_slot'/2 = fun (_0,_1) -> case <_0,_1> of <L,Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}> when (try let <_6> = call 'erlang':'element' (10,Head) in call 'erlang':'=/=' (_6,'set') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> apply 'prep_slot'/3 (L,Head,[])
<[{_X_Slot,Key,_X_Seq,_X_T,BT}|L],_X_Head> when 'true' -> apply 'prep_set_slot'/7 (L,Key,BT,0,0,0,[])
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'prep_slot',2}}] )-|['compiler_generated'] ) end
'prep_slot'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{_X_Slot,Key,Seq,T,_X_BT}|L],Head,W> when 'true' -> apply 'prep_slot'/3 (L,Head,[{Key,{Seq,{'insert',T}}}|W])
<[],Head,W> when 'true' -> let <WLs> = call 'dets_utils':'family' (W) in (case Head of (<({'head',_10,_11,_12,_13,_14,_15,_16,_17,_rec42,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37}-|['compiler_generated'] )> when 'true' -> case apply 'eval_slot'/9 (WLs,[],_rec42,[],[],0,0,0,'false') of <{[],Bins,Size,No,KNo,_39}> when 'true' -> {Bins,Size,No,KNo}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'prep_slot',3}}] )-|['compiler_generated'] ) end
'prep_set_slot'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[{_27,K,_X_Seq,_X_T1,BT1}|L],_28,_X_BT,Sz,NoKeys,NoObjs,Ws> when call 'erlang':'=:=' (_28,K) -> apply 'prep_set_slot'/7 (L,K,BT1,Sz,NoKeys,NoObjs,Ws)
<[{_29,K1,_X_Seq,_X_T1,BT1}|L],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' -> let <_7> = call 'erlang':'byte_size' (BT) in let <BSize> = call 'erlang':'+' (_7,4) in let <_9> = #{#<BSize>(32,1,'integer',['unsigned'|['big']])}# in let <NWs> = [Ws|[_9|BT]] in let <_13> = call 'erlang':'+' (Sz,BSize) in let <_12> = call 'erlang':'+' (NoKeys,1) in let <_11> = call 'erlang':'+' (NoObjs,1) in apply 'prep_set_slot'/7 (L,K1,BT1,_13,_12,_11,NWs)
<[],_X_K,BT,Sz,NoKeys,NoObjs,Ws> when 'true' -> let <_14> = call 'erlang':'byte_size' (BT) in let <BSize> = call 'erlang':'+' (_14,4) in let <_19> = #{#<BSize>(32,1,'integer',['unsigned'|['big']])}# in let <_18> = call 'erlang':'+' (Sz,BSize) in let <_17> = call 'erlang':'+' (NoKeys,1) in let <_16> = call 'erlang':'+' (NoObjs,1) in {[Ws|[_19|BT]],_18,_17,_16}
(<_26,_25,_24,_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_26,_25,_24,_23,_22,_21,_20})-|[{'function_name',{'prep_set_slot',7}}] )-|['compiler_generated'] ) end
'segment_file'/4 = fun (_0,_1,_2,_3) -> case call 'ets':'delete_all_objects' (_0) of <'true'> when 'true' -> let <_9> = fun (_7) -> let <_32> = call 'ets':'insert' (_0,_7) in case _32 of <'true'> when 'true' -> (_32-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_9,_2) case _2 of <[{1,SegAddr,Data,0}|FileData1]> when 'true' -> let <_21> = case Data of <{InFile,In0}> when 'true' -> case apply 'temp_file'/3 (_1,_0,2) of <_@r0 = {OutFile,Out}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (In0)-|['result_not_wanted'] ) case call 'dets_utils':'open' (InFile,['raw'|['binary'|['read']]]) of <{'ok',In}> when 'true' -> case call 'dets_utils':'position' (In,InFile,'bof') of <{'ok',0}> when 'true' -> do apply 'seg_file'/8 (SegAddr,SegAddr,In,InFile,Out,OutFile,_0,_3) do (call ('file'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (In)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (InFile)-|['result_not_wanted'] ) _@r0
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<Objects> when 'true' -> case apply 'seg_file'/5 (Objects,SegAddr,SegAddr,_0,[]) of <{LastAddr,B}> when 'true' -> do call 'dets_utils':'disk_map_segment' (SegAddr,B) let <FinalZ> = call 'erlang':'-' (_3,LastAddr) in let <_19> = call 'dets_utils':'make_zeros' (FinalZ) in [B|_19]
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end end in case call 'ets':'delete_all_objects' (_0) of <'true'> when 'true' -> let <_27> = fun (_25) -> let <_35> = call 'ets':'insert' (_0,_25) in case _35 of <'true'> when 'true' -> (_35-|['compiler_generated'] )
(<_24> when 'true' -> primop 'match_fail' ({'badmatch',_24})-|['compiler_generated'] ) end in do call 'lists':'foreach' (_27,[{10000,SegAddr,_21,0}|FileData1]) 'ok'
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'seg_file'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case call 'dets_utils':'read_n' (_2,4500) of <'eof'> when 'true' -> let <FinalZ> = call 'erlang':'-' (_7,_0) in let <_9> = call 'dets_utils':'make_zeros' (FinalZ) in call 'dets_utils':'fwrite' (_4,_5,_9)
<Bin> when 'true' -> case apply 'seg_file'/5 (Bin,_0,_1,_6,[]) of <{NewAddr,L}> when 'true' -> do call 'dets_utils':'disk_map_segment' (_0,L) case call 'dets_utils':'fwrite' (_4,_5,L) of <'ok'> when 'true' -> apply 'seg_file'/8 (NewAddr,_1,_2,_3,_4,_5,_6,_7)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end end
'seg_file'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <#{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<BSize>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,Addr,SS,SizeT,L> when 'true' -> apply 'seg_file_item'/8 (T,Addr,SS,SizeT,L,Slot,BSize,LSize)
<[#{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<BSize>(32,1,'integer',['unsigned'|['big']]),#<LSize>(8,1,'integer',['unsigned'|['big']])}#|T],Addr,SS,SizeT,L> when 'true' -> apply 'seg_file_item'/8 (T,Addr,SS,SizeT,L,Slot,BSize,LSize)
<[],Addr,_X_SS,_X_SizeT,L> when 'true' -> let <_5> = call 'lists':'reverse' (L) in {Addr,_5}
<#{}#,Addr,_X_SS,_X_SizeT,L> when 'true' -> let <_6> = call 'lists':'reverse' (L) in {Addr,_6}
(<_11,_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7})-|[{'function_name',{'seg_file',5}}] )-|['compiler_generated'] ) end
'seg_file_item'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <_9> = call 'erlang':'*' (8,_5) in let <SlotPos> = call 'erlang':'+' (_2,_9) in let <NoZeros> = call 'erlang':'-' (SlotPos,_1) in let <PSize> = call 'erlang':'+' (NoZeros,8) in let <_14> = call 'erlang':'-' (_7,1) in let <Inc> = call 'erlang':'bsl' (1,_14) in let <_16> = call 'ets':'update_counter' (_3,_7,Inc) in let <CollP> = call 'erlang':'-' (_16,Inc) in let <_20> = case <> of <> when call 'erlang':'=:=' (NoZeros,0) -> #{#<_6>(32,1,'integer',['unsigned'|['big']]),#<CollP>(32,1,'integer',['unsigned'|['big']])}#
<> when call 'erlang':'>' (NoZeros,100) -> let <_18> = call 'dets_utils':'make_zeros' (NoZeros) in let <_19> = #{#<_6>(32,1,'integer',['unsigned'|['big']]),#<CollP>(32,1,'integer',['unsigned'|['big']])}# in [_18|_19]
<> when 'true' -> #{#<0>(NoZeros,8,'integer',['unsigned'|['big']]),#<_6>(32,1,'integer',['unsigned'|['big']]),#<CollP>(32,1,'integer',['unsigned'|['big']])}# end in let <_22> = call 'erlang':'+' (_1,PSize) in apply 'seg_file'/5 (_0,_22,_2,_3,[_20|_4])
'temp_file'/3 = fun (_0,_1,_2) -> (case _0 of (<({'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_rec43,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )> when 'true' -> let <TmpName> = call 'lists':'concat' ([_rec43|['.'|[_2|[]]]]) in case call 'dets_utils':'open' (TmpName,['raw'|['binary'|['write']]]) of <{'ok',Fd}> when 'true' -> case call 'ets':'insert' (_1,{_2,0,{TmpName,Fd},0}) of <'true'> when 'true' -> {TmpName,Fd}
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fsck_input'/4 = fun (_0,_1,_2,_3) -> (case _3 of (<({'fileheader',_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec44,_48,_49,_50,_51}-|['compiler_generated'] )> when 'true' -> let <_17> = case _rec44 of <'true'> when (try (let <_8> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_3,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_6-|['compiler_generated'] )> when 'true' -> (_6-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_9> = call 'erlang':'=:=' ((_8-|['compiler_generated'] ),'true') in let <_10> = call 'erlang':'element' (15,_3) in let <_11> = call 'erlang':'is_list' (_10) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_9,_11)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case _3 of (<({'fileheader',_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_rec45,_66,_67,_68,_69,_70,_71,_72}-|['compiler_generated'] )> when 'true' -> let <_14> = case _rec45 of (<(NoColls = ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> NoColls-|['compiler_generated'] )
(<NoColls> when ('true'-|['compiler_generated'] ) -> (apply 'max_objsize'/2 (NoColls,(0-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in call 'erlang':'bsl' (1,_14)-|['compiler_generated'] )
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_74> when 'true' -> case call 'file':'position' (_1,'eof') of <{'ok',Pos}> when 'true' -> Pos
<_75> when 'true' -> 4294967296 end end in let <MaxSz> = call 'erlang':'max' (_17,8192) in let <State0> = apply 'fsck_read'/4 (1336,_1,[],0) in apply 'fsck_input'/5 (_0,State0,_1,MaxSz,_2)-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','fileheader'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'fsck_input'/5 = fun (_0,_1,_2,_3,_4) -> (fun (_14) -> case _14 of <'close'> when 'true' -> 'ok'
<'read'> when 'true' -> case _1 of <'done'> when 'true' -> 'end_of_input'
<{'done',L,_X_Seq}> when 'true' -> let <R> = apply 'count_input'/1 (L) in let <_6> = apply 'fsck_input'/5 (_0,'done',_2,_3,_4) in {R,_6}
<{'cont',L,Bin,Pos,Seq}> when 'true' -> let <R> = apply 'count_input'/1 (L) in (case _0 of (<({'head',_21,_22,_23,_24,_25,_26,_27,_28,_29,_rec46,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48}-|['compiler_generated'] )> when 'true' -> let <FR> = apply 'fsck_objs'/5 (Bin,_rec46,_0,[],Seq) in let <NewState> = apply 'fsck_read'/5 (FR,Pos,_2,_3,_0) in let <_12> = apply 'fsck_input'/5 (_0,NewState,_2,_3,_4) in {R,_12}-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_15> when 'true' -> (primop 'match_fail' ({'function_clause',_15})-|[{'function_name',{'-fsck_input/5-fun-0-',1}}] )-|['compiler_generated'] ) end-|[{'id',{0,0,'-fsck_input/5-fun-0-'}}] )
'count_input'/1 = fun (_0) -> call 'lists':'reverse' (_0)
'fsck_read'/4 = fun (_0,_1,_2,_3) -> case call 'file':'position' (_1,_0) of <{'ok',_9}> when 'true' -> apply 'read_more_bytes'/6 ([],0,_0,_1,_2,_3)
<_X_Error> when 'true' -> {'done',_2,_3} end
'fsck_read'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <{'more',Bin,Sz,L,Seq},Pos,F,MaxSz,Head> when call 'erlang':'>' (Sz,MaxSz) -> (case Head of (<({'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_rec47,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when 'true' -> let <FR> = case Bin of (<(#{(#<_52>((16-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<Tail>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'fsck_objs'/5 (Tail,_rec47,Head,L,Seq)-|['compiler_generated'] )-|['compiler_generated'] )
(<_53> when (try (let <_54> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_54,(16-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) ((16-|['compiler_generated'] ),_7) in ({('new'-|['compiler_generated'] ),_8,L,Seq}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'fsck_read'/5 (FR,Pos,F,MaxSz,Head)-|['compiler_generated'] )
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'more',Bin,Sz,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' -> apply 'read_more_bytes'/6 (Bin,Sz,Pos,F,L,Seq)
<{'new',Skip,L,Seq},Pos,F,_X_MaxSz,_X_Head> when 'true' -> let <NewPos> = call 'erlang':'+' (Pos,Skip) in apply 'fsck_read'/4 (NewPos,F,L,Seq)
(<_13,_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10,_9})-|[{'function_name',{'fsck_read',5}}] )-|['compiler_generated'] ) end
'read_more_bytes'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_6> = case <> of <> when call 'erlang':'<' (_1,8192) -> 8192
<> when 'true' -> _1 end in case call 'dets_utils':'read_n' (_3,_6) of <'eof'> when 'true' -> {'done',_4,_5}
<Bin> when 'true' -> let <_8> = call 'erlang':'byte_size' (Bin) in let <NewPos> = call 'erlang':'+' (_2,_8) in let <_10> = call 'erlang':'list_to_binary' ([_0|[Bin|[]]]) in {'cont',_4,_10,NewPos,_5} end
'fsck_objs'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Bin = #{#<Sz>(32,1,'integer',['unsigned'|['big']]),#<Status>(32,1,'integer',['unsigned'|['big']]),#<Tail>('all',8,'binary',['unsigned'|['big']])}#,Kp,Head,L,Seq> when 'true' -> case <> of <> when call 'erlang':'=:=' (Status,305419896) -> let <Sz1> = call 'erlang':'-' (Sz,8) in case Tail of <#{#<BinTerm>(Sz1,8,'binary',['unsigned'|['big']]),#<Tail2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_6> = catch apply 'bin2keybins'/2 (BinTerm,Head) in case _6 of <{'EXIT',_X_Reason}> when 'true' -> (case Bin of (<(#{(#<_16>((16-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_31>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'fsck_objs'/5 (_31,Kp,Head,L,Seq)-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when (try (let <_32> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_32,(16-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) ((16-|['compiler_generated'] ),_7) in ({('new'-|['compiler_generated'] ),_8,L,Seq}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<BOs> when 'true' -> case apply 'make_objects'/5 (BOs,Seq,Kp,Head,L) of <{NL,NSeq}> when 'true' -> (let <_39> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (Sz) in let <_8> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_39) in let <_9> = call 'erlang':'-' (_8,1) in let <_10> = call 'erlang':'bsl' (1,_9) in let <Skip> = call 'erlang':'-' (_10,Sz) in (case Tail2 of (<(#{(#<_16>(Skip,(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_52>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'fsck_objs'/5 (_52,Kp,Head,NL,NSeq)-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when (try (let <_53> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Tail2) in (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_53,Skip)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Tail2) in (let <_54> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (Skip,_7) in ({('new'-|['compiler_generated'] ),_54,NL,NSeq}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_55> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_55}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
<_20> when try let <_13> = call 'erlang':'byte_size' (Tail) in call 'erlang':'<' (_13,Sz1) of <Try> -> Try catch <T,R> -> 'false' -> {'more',Bin,Sz,L,Seq}
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
<> when 'true' -> (case Bin of (<(#{(#<_16>((16-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<_72>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}#-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'fsck_objs'/5 (_72,Kp,Head,L,Seq)-|['compiler_generated'] )-|['compiler_generated'] )
(<_17> when (try (let <_6> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (call ('erlang'-|['compiler_generated'] ):('<'-|['compiler_generated'] ) (_6,(16-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (let <_7> = call ('erlang'-|['compiler_generated'] ):('byte_size'-|['compiler_generated'] ) (Bin) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) ((16-|['compiler_generated'] ),_7) in ({('new'-|['compiler_generated'] ),_8,L,Seq}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<Bin,_X_Kp,_X_Head,L,Seq> when 'true' -> {'more',Bin,0,L,Seq} end
'make_objects'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <[{K,BT}|Os],Seq,Kp,Head,L> when 'true' -> (let <Slot> = apply 'db_hash'/2 (K,Head) in let <Obj> = #{(#<Slot>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<Seq>((32-|['compiler_generated'] ),(1-|['compiler_generated'] ),('integer'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] ),(#<BT>(('all'-|['compiler_generated'] ),(8-|['compiler_generated'] ),('binary'-|['compiler_generated'] ),(['unsigned'|['big']]-|['compiler_generated'] ))-|['compiler_generated'] )}# in let <_6> = call 'erlang':'+' (Seq,1) in apply 'make_objects'/5 (Os,_6,Kp,Head,[Obj|L])-|['compiler_generated'] )
<[],Seq,_X_Kp,_X_Head,L> when 'true' -> {L,Seq}
(<_11,_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8,_7})-|[{'function_name',{'make_objects',5}}] )-|['compiler_generated'] ) end
'make_object'/4 = fun (_0,_1,_2,_3) -> let <Slot> = apply 'db_hash'/2 (_1,_0) in #{#<Slot>(32,1,'integer',['unsigned'|['big']]),#<_2>(32,1,'integer',['unsigned'|['big']]),#<_3>('all',8,'binary',['unsigned'|['big']])}#
'skip_bytes'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _0 of <#{#<_16>(_1,8,'binary',['unsigned'|['big']]),#<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> apply 'fsck_objs'/5 (Tail,_2,_3,_4,_5)
<_17> when try let <_6> = call 'erlang':'byte_size' (_0) in call 'erlang':'<' (_6,_1) of <Try> -> Try catch <T,R> -> 'false' -> let <_7> = call 'erlang':'byte_size' (_0) in let <_8> = call 'erlang':'-' (_1,_7) in {'new',_8,_4,_5}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'do_perform_save'/1 = fun (_0) -> case call 'dets_utils':'position' (_0,'eof') of <{'ok',FreeListsPointer}> when 'true' -> case _0 of <{'head',_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67}> when 'true' -> let <_4> = call 'erlang':'setelement' (13,_0,FreeListsPointer) in case apply 'free_lists_to_file'/1 (_4) of <{FLW,FLSize}> when 'true' -> let <_7> = call 'erlang':'+' (FreeListsPointer,FLSize) in let <FileSize> = call 'erlang':'+' (_7,4) in (case _0 of (<({'head',_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec49}-|['compiler_generated'] )> when 'true' -> let <_12> = case _rec49 of <1336> when 'true' -> FileSize
<Base> when 'true' -> call 'erlang':'-' (FileSize,Base) end in let <_14> = #{#<_12>(32,1,'integer',['unsigned'|['big']])}# in case call 'dets_utils':'write' (_4,[FLW|_14]) of <'ok'> when 'true' -> let <FileHeader> = apply 'file_header'/3 (_4,FreeListsPointer,1) in case call 'dets_utils':'debug_mode' () of <'true'> when 'true' -> case _4 of <{'head',_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}> when 'true' -> let <_19> = call 'erlang':'setelement' (17,_4,'false') in let <TmpHead0> = apply 'init_freelist'/1 (_19) in (case _4 of (<({'head',_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec53}-|['compiler_generated'] )> when 'true' -> case TmpHead0 of <{'head',_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185}> when 'true' -> let <_26> = call 'erlang':'setelement' (30,TmpHead0,_rec53) in let <_30> = catch let <_29> = call 'dets_utils':'all_allocated_as_list' (_26) in let <_28> = call 'dets_utils':'all_allocated_as_list' (_4) in call 'erlang':'=:=' (_29,_28) in case _30 of <'true'> when 'true' -> call 'dets_utils':'pwrite' (_4,[{0,FileHeader}|[]])
<_187> when 'true' -> (case _26 of (<({'head',_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_rec54,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215}-|['compiler_generated'] )> when 'true' -> (case _4 of (<({'head',_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_rec55,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244}-|['compiler_generated'] )> when 'true' -> let <_35> = call 'dets_utils':'corrupt_reason' (_4,{'failed_to_save_free_lists',FreeListsPointer,_rec54,_rec55}) in call 'erlang':'throw' (_35)-|['compiler_generated'] )
(<_245> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_216> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_186> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_156> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_127> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<'false'> when 'true' -> call 'dets_utils':'pwrite' (_4,[{0,FileHeader}|[]])
(<_37> when 'true' -> primop 'match_fail' ({'case_clause',_37})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_97> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'file_header'/3 = fun (_0,_1,_2) -> (case _0 of (<({'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_rec56,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> let <_6> = case _rec56 of <'undefined'> when 'true' -> []
<NC> when 'true' -> NC end in let <_20> = fun (_16,_15,_14) -> call 'erlang':'+' (_15,_14) in let <_12> = fun (_10) -> {_10,0} in let <_9> = call 'lists':'seq' (4,31) in let <_13> = call 'lists':'map' (_12,_9) in let <L> = call 'orddict':'merge' (_20,_6,_13) in let <_24> = fun (_22) -> case _22 of <{_X_LSz,N}> when 'true' -> #{#<N>(32,1,'integer',['unsigned'|['big']])}#
(<_23> when 'true' -> (primop 'match_fail' ({'function_clause',_23})-|[{'function_name',{'-file_header/3-fun-2-',1}}] )-|['compiler_generated'] ) end in let <CW> = call 'lists':'map' (_24,L) in apply 'file_header'/4 (_0,_1,_2,CW)-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'file_header'/4 = fun (_0,_1,_2,_3) -> (case _0 of (<({'head',_46,_47,_48,_49,_50,_51,_52,_53,_rec57,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73}-|['compiler_generated'] )> when 'true' -> let <TypeCode> = call 'dets_utils':'type_to_code' (_rec57) in (case _0 of (<({'head',_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_rec58,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102}-|['compiler_generated'] )> when 'true' -> let <HashMethod> = apply 'hash_method_to_code'/1 (_rec58) in let <H1> = #{#<_1>(32,1,'integer',['unsigned'|['big']]),#<11259375>(32,1,'integer',['unsigned'|['big']]),#<_2>(32,1,'integer',['unsigned'|['big']])}# in (case _0 of (<({'head',_rec66,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_133,_134,_rec65,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_162,_163,_164,_165,_166,_167,_168,_169,_170,_rec64,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_191,_192,_193,_194,_rec63,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210,_211,_212,_213,_214,_215,_216,_217,_218}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_220,_221,_222,_223,_224,_rec62,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239,_240,_241,_242,_243,_244,_245,_246,_247}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_rec61,_267,_268,_269,_270,_271,_272,_273,_274,_275,_276}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_278,_279,_280,_281,_282,_283,_284,_285,_286,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296,_rec60,_297,_298,_299,_300,_301,_302,_303,_304,_305}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_307,_308,_309,_310,_311,_312,_313,_rec59,_314,_315,_316,_317,_318,_319,_320,_321,_322,_323,_324,_325,_326,_327,_328,_329,_330,_331,_332,_333,_334}-|['compiler_generated'] )> when 'true' -> let <H2> = #{#<TypeCode>(32,1,'integer',['unsigned'|['big']]),#<9>(32,1,'integer',['unsigned'|['big']]),#<_rec66>(32,1,'integer',['unsigned'|['big']]),#<_rec65>(32,1,'integer',['unsigned'|['big']]),#<_rec64>(32,1,'integer',['unsigned'|['big']]),#<_rec63>(32,1,'integer',['unsigned'|['big']]),#<_rec62>(32,1,'integer',['unsigned'|['big']]),#<_rec61>(32,1,'integer',['unsigned'|['big']]),#<_rec60>(32,1,'integer',['unsigned'|['big']]),#<HashMethod>(32,1,'integer',['unsigned'|['big']]),#<_rec59>(32,1,'integer',['unsigned'|['big']])}# in let <DigH> = [H2|_3] in (case _0 of (<({'head',_336,_337,_338,_339,_340,_341,_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_rec67,_353,_354,_355,_356,_357,_358,_359,_360,_361,_362,_363}-|['compiler_generated'] )> when 'true' -> let <_34> = case _rec67 of <'true'> when 'true' -> call 'erlang':'md5' (DigH)
<'false'> when 'true' -> #{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#
(<_33> when 'true' -> primop 'match_fail' ({'case_clause',_33})-|['compiler_generated'] ) end in (case _0 of (<({'head',_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383,_384,_385,_386,_387,_388,_389,_390,_391,_392,_rec68}-|['compiler_generated'] )> when 'true' -> let <_39> = case _rec68 of <1336> when 'true' -> #{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#
<FlBase> when 'true' -> #{#<FlBase>(32,1,'integer',['unsigned'|['big']])}# end in let <_41> = #{#<0>(124,8,'integer',['unsigned'|['big']])}# in [H1|[DigH|[_34|[_39|_41]]]]-|['compiler_generated'] )
(<_393> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_364> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_335> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_306> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_277> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_248> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_219> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_190> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_161> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_132> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_103> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_74> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'free_lists_to_file'/1 = fun (_0) -> let <FL> = call 'dets_utils':'get_freelists' (_0) in let <_2> = call 'erlang':'tuple_size' (FL) in apply 'free_list_to_file'/6 (FL,_0,1,_2,[],0)
'free_list_to_file'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_X_Ftab,_X_H,Pos,Sz,Ws,WsSz> when call 'erlang':'>' (Pos,Sz) -> let <_6> = call 'erlang':'+' (WsSz,4) in let <_7> = call 'erlang':'+' (_6,8) in {[Ws|#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<12>(8,1,'integer',['unsigned'|['big']]),#<3>(8,1,'integer',['unsigned'|['big']]),#<171>(8,1,'integer',['unsigned'|['big']]),#<205>(8,1,'integer',['unsigned'|['big']]),#<239>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<48>(8,1,'integer',['unsigned'|['big']]),#<57>(8,1,'integer',['unsigned'|['big']])}#],_7}
<Ftab,H,Pos,Sz,Ws,WsSz> when 'true' -> let <F> = fun (_30,_29,_28,_27) -> case <_30,_29,_28,_27> of <N,L,W,S> when call 'erlang':'=:=' (N,0) -> {N,L,W,S}
<N,L,W,S> when 'true' -> let <_45,_46,_47> = case <> of <> when call 'erlang':'>' (N,1021) -> let <_15> = call 'lists':'sublist' (L,1021) in let <_14> = call 'erlang':'-' (N,1021) in let <_13> = call 'lists':'nthtail' (1021,L) in <_15,1021,{_14,_13}>
<> when 'true' -> <L,N,'no_more'> end in let <_18> = call 'erlang':'*' ((_46-|['compiler_generated'] ),4) in let <_19> = call 'erlang':'+' (_18,4) in let <Size> = call 'erlang':'+' (_19,8) in let <Header> = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<61591023>(32,1,'integer',['unsigned'|['big']]),#<Pos>(32,1,'integer',['unsigned'|['big']])}# in let <NW> = [W|[Header|(_45-|['compiler_generated'] )]] in case (_47-|['compiler_generated'] ) of <'no_more'> when 'true' -> let <_23> = call 'erlang':'+' (S,Size) in {0,[],NW,_23}
<{NN,NL}> when 'true' -> case call 'dets_utils':'write' (H,NW) of <'ok'> when 'true' -> let <_25> = call 'erlang':'+' (S,Size) in {NN,NL,[],_25}
(<_24> when 'true' -> primop 'match_fail' ({'badmatch',_24})-|['compiler_generated'] ) end
(<_26> when 'true' -> primop 'match_fail' ({'case_clause',_26})-|['compiler_generated'] ) end end in let <_36> = call 'erlang':'element' (Pos,Ftab) in case call 'dets_utils':'tree_to_bin' (_36,F,1021,Ws,WsSz) of <{NWs,NWsSz}> when 'true' -> let <_38> = call 'erlang':'+' (Pos,1) in apply 'free_list_to_file'/6 (Ftab,H,_38,Sz,NWs,NWsSz)
(<_37> when 'true' -> primop 'match_fail' ({'badmatch',_37})-|['compiler_generated'] ) end end
'free_lists_from_file'/2 = fun (_0,_1) -> (case _0 of (<({'head',_25,_26,_27,_rec69,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_rec70,_75,_76,_77,_78,_79,_80,_81}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'position' (_rec69,_rec70,_1) of <{'ok',_83}> when call 'erlang':'=:=' (_83,_1) -> let <FL> = call 'dets_utils':'empty_free_lists' () in let <_9> = catch apply 'bin_to_tree'/6 ([],_0,'start',FL,-1,[]) in case _9 of <{'EXIT',_84}> when 'true' -> (case _0 of (<({'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_rec71,_106,_107,_108,_109,_110,_111,_112}-|['compiler_generated'] )> when 'true' -> call 'erlang':'throw' ({'error',{'bad_freelists',_rec71}})-|['compiler_generated'] )
(<_113> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Ftab> when 'true' -> case _0 of <{'head',_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}> when 'true' -> let <_20> = call 'erlang':'setelement' (30,_0,1336) in call 'erlang':'setelement' (12,_20,Ftab)
(<_143> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_53> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'bin_to_tree'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _0 of <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),#<61591023>(32,1,'integer',['unsigned'|['big']]),#<12345>(32,1,'integer',['unsigned'|['big']]),#<_31>('all',8,'binary',['unsigned'|['big']])}#> when call 'erlang':'=:=' (_5,[]) -> _3
<#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),#<61591023>(32,1,'integer',['unsigned'|['big']]),#<12345>(32,1,'integer',['unsigned'|['big']]),#<_32>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_6> = call 'dets_utils':'list_to_tree' (_5) in call 'erlang':'setelement' (_2,_3,_6)
<#{#<Size>(32,1,'integer',['unsigned'|['big']]),#<61591023>(32,1,'integer',['unsigned'|['big']]),#<Pos>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when try let <_9> = call 'erlang':'byte_size' (T) in let <_7> = call 'erlang':'-' (Size,4) in let <_8> = call 'erlang':'-' (_7,8) in call 'erlang':'>=' (_9,_8) of <Try> -> Try catch <T,R> -> 'false' -> let <_63,_64,_65> = case <> of <> when let <_10> = call 'erlang':'=/=' (Pos,_2) in let <_11> = call 'erlang':'=/=' (_2,'start') in call 'erlang':'and' (_10,_11) -> let <Tree> = call 'dets_utils':'list_to_tree' (_5) in let <_14> = call 'erlang':'setelement' (_2,_3,Tree) in <_14,[],-1>
<> when 'true' -> <_3,_5,_4> end in let <_17> = call 'erlang':'-' (Size,8) in let <_18> = call 'erlang':'-' (_17,4) in case apply 'bin_to_tree1'/4 (T,_18,(_65-|['compiler_generated'] ),(_64-|['compiler_generated'] )) of <{NL,B2,A2}> when 'true' -> apply 'bin_to_tree'/6 (B2,_1,Pos,(_63-|['compiler_generated'] ),A2,NL)
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
<_33> when 'true' -> (case _1 of (<({'head',_34,_35,_36,_rec74,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61}-|['compiler_generated'] )> when 'true' -> let <Bin2> = call 'dets_utils':'read_n' (_rec74,4096) in let <_23> = call 'erlang':'list_to_binary' ([_0|Bin2]) in apply 'bin_to_tree'/6 (_23,_1,_2,_3,_4,_5)-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'bin_to_tree1'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <#{#<A1>(32,1,'integer',['unsigned'|['big']]),#<A2>(32,1,'integer',['unsigned'|['big']]),#<A3>(32,1,'integer',['unsigned'|['big']]),#<A4>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,Size,A,L> when try let <_4> = call 'erlang':'>=' (Size,16) in let <_5> = call 'erlang':'<' (A,A1) in let <_6> = call 'erlang':'<' (A1,A2) in let <_7> = call 'erlang':'<' (A2,A3) in let <_8> = call 'erlang':'<' (A3,A4) in let <_9> = call 'erlang':'and' (_7,_8) in let <_10> = call 'erlang':'and' (_6,_9) in let <_11> = call 'erlang':'and' (_5,_10) in call 'erlang':'and' (_4,_11) of <Try> -> Try catch <T,R> -> 'false' -> let <_12> = call 'erlang':'-' (Size,16) in apply 'bin_to_tree1'/4 (T,_12,A4,[A4|[A3|[A2|[A1|L]]]])
<#{#<A1>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,Size,A,L> when let <_13> = call 'erlang':'>=' (Size,4) in let <_14> = call 'erlang':'<' (A,A1) in call 'erlang':'and' (_13,_14) -> let <_15> = call 'erlang':'-' (Size,4) in apply 'bin_to_tree1'/4 (T,_15,A1,[A1|L])
<B,0,A,L> when 'true' -> {L,B,A}
(<_19,_18,_17,_16> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16})-|[{'function_name',{'bin_to_tree1',4}}] )-|['compiler_generated'] ) end
'slot_objs'/2 = fun (_0,_1) -> case <_0,_1> of <H = {'head',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39},Slot> when (try let <_6> = call 'erlang':'element' (4,H) in call 'erlang':'>=' (Slot,_6) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> '$end_of_table'
<H,Slot> when 'true' -> case apply 'slot_objects'/2 (H,Slot) of <{'ok',_X_Pointer,Objects}> when 'true' -> Objects
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end
'h'/2 = fun (_0,_1) -> case <_0,_1> of <I,'phash2'> when 'true' -> call 'erlang':'phash2' (I)
<I,'phash'> when 'true' -> let <_2> = call 'erlang':'phash' (I,67108863) in call 'erlang':'-' (_2,1)
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'h',2}}] )-|['compiler_generated'] ) end
'db_hash'/2 = fun (_0,_1) -> case <_0,_1> of <Key,Head = {'head',_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}> when (try let <_6> = call 'erlang':'element' (18,Head) in call 'erlang':'=:=' (_6,'phash2') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <H> = call 'erlang':'phash2' (Key) in (case Head of (<({'head',_rec75,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94}-|['compiler_generated'] )> when 'true' -> let <_11> = call 'erlang':'-' (_rec75,1) in let <Hash> = call 'erlang':'band' (H,_11) in case <> of <> when (try (let <_15> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_13-|['compiler_generated'] )> when 'true' -> (_13-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_16> = call 'erlang':'=:=' ((_15-|['compiler_generated'] ),'true') in let <_17> = call 'erlang':'element' (9,Head) in let <_18> = call 'erlang':'<' (Hash,_17) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_16,_18)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Head of (<({'head',_96,_rec76,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122,_123}-|['compiler_generated'] )> when 'true' -> let <_21> = call 'erlang':'-' (_rec76,1) in call 'erlang':'band' (H,_21)-|['compiler_generated'] )
(<_124> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> Hash end-|['compiler_generated'] )
(<_95> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Key,Head> when 'true' -> (case Head of (<({'head',_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_rec77,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151,_152}-|['compiler_generated'] )> when 'true' -> let <H> = case <Key,_rec77> of (<I,('phash2'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('phash2'-|['compiler_generated'] ) (I)-|['compiler_generated'] )-|['compiler_generated'] )
(<I,('phash'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_2> = call ('erlang'-|['compiler_generated'] ):('phash'-|['compiler_generated'] ) (I,(67108863-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (_2,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_4,_3> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_4,_3}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case Head of (<({'head',_rec78,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181}-|['compiler_generated'] )> when 'true' -> let <Hash> = call 'erlang':'rem' (H,_rec78) in case <> of <> when (try (let <_30> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_28-|['compiler_generated'] )> when 'true' -> (_28-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_31> = call 'erlang':'=:=' ((_30-|['compiler_generated'] ),'true') in let <_32> = call 'erlang':'element' (9,Head) in let <_33> = call 'erlang':'<' (Hash,_32) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_31,_33)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Head of (<({'head',_183,_rec79,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209,_210}-|['compiler_generated'] )> when 'true' -> call 'erlang':'rem' (H,_rec79)-|['compiler_generated'] )
(<_211> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> Hash end-|['compiler_generated'] )
(<_182> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_153> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'hash_method_to_code'/1 = fun (_0) -> case _0 of <'phash2'> when 'true' -> 1
<'phash'> when 'true' -> 0
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'hash_method_to_code',1}}] )-|['compiler_generated'] ) end
'code_to_hash_method'/1 = fun (_0) -> case _0 of <1> when 'true' -> 'phash2'
<0> when 'true' -> 'phash'
<_2> when 'true' -> 'undefined' end
'no_slots'/1 = fun (_0) -> (case _0 of (<({'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_rec80,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_37,_38,_rec81,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec82,_85,_86,_87,_88,_89,_90,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> {_rec80,_rec81,_rec82}-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_65> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'table_parameters'/1 = fun (_0) -> (case _0 of (<({'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_rec83,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63}-|['compiler_generated'] )> when 'true' -> case _rec83 of <'undefined'> when 'true' -> 'undefined'
<CL> when 'true' -> let <_7> = fun (_4,_3) -> case <_4,_3> of <{_65,0},A> when 'true' -> A
<E,A> when 'true' -> [E|A] end in let <NoColls0> = call 'lists':'foldl' (_7,[],CL) in let <NoColls> = call 'lists':'reverse' (NoColls0) in (case _0 of (<({'head',_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_rec84,_87,_88,_89,_90,_91,_92,_93}-|['compiler_generated'] )> when 'true' -> let <_33> = call 'filename':'basename' (_rec84) in (case _0 of (<({'head',_95,_96,_97,_98,_99,_100,_101,_102,_rec85,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121,_122}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_124,_125,_126,_127,_128,_129,_130,_131,_132,_rec86,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_rec87,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180}-|['compiler_generated'] )> when 'true' -> let <_26> = apply 'hash_method_to_code'/1 (_rec87) in (case _0 of (<({'head',_182,_183,_184,_185,_186,_187,_188,_rec88,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_rec89,_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_240,_241,_rec90,_242,_243,_244,_245,_246,_247,_248,_249,_250,_251,_252,_253,_254,_255,_256,_257,_258,_259,_260,_261,_262,_263,_264,_265,_266,_267}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_269,_270,_271,_272,_273,_274,_275,_276,_277,_278,_279,_280,_281,_282,_283,_284,_285,_286,_rec91,_287,_288,_289,_290,_291,_292,_293,_294,_295,_296}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_298,_299,_300,_301,_302,_303,_304,_305,_306,_307,_308,_309,_310,_311,_312,_313,_314,_315,_316,_rec92,_317,_318,_319,_320,_321,_322,_323,_324,_325}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_327,_328,_329,_330,_rec93,_331,_332,_333,_334,_335,_336,_337,_338,_339,_340,_341,_342,_343,_344,_345,_346,_347,_348,_349,_350,_351,_352,_353,_354}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_356,_357,_358,_359,_360,_rec94,_361,_362,_363,_364,_365,_366,_367,_368,_369,_370,_371,_372,_373,_374,_375,_376,_377,_378,_379,_380,_381,_382,_383}-|['compiler_generated'] )> when 'true' -> {'$hash2',9,1,_33,_rec85,_rec86,_26,_rec88,_rec89,_rec90,_rec91,_rec92,_rec93,_rec94,NoColls}-|['compiler_generated'] )
(<_384> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_355> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_326> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_297> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_268> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_239> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_210> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_181> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_123> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_94> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_64> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
're_hash'/2 = fun (_0,_1) -> let <FromSlotPos> = apply 'slot_position'/1 (_1) in (case _0 of (<({'head',_rec95,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> let <_5> = call 'erlang':'+' (_1,_rec95) in let <ToSlotPos> = apply 'slot_position'/1 (_5) in let <RSpec> = [{FromSlotPos,2048}|[]] in case call 'dets_utils':'pread' (RSpec,_0) of <{'ok',[FromBin|[]]}> when 'true' -> apply 'split_bins'/7 (FromBin,_0,FromSlotPos,ToSlotPos,[],[],0)
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'split_bins'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <#{}#,Head,_X_Pos1,_X_Pos2,_X_ToRead,_X_L,0> when 'true' -> {Head,'ok'}
<#{}#,Head,Pos1,Pos2,ToRead,L,_X_SoFar> when 'true' -> apply 're_hash_write'/5 (Head,ToRead,L,Pos1,Pos2)
<FB,Head,Pos1,Pos2,ToRead,L,SoFar> when 'true' -> case FB of <#{#<Sz1>(32,1,'integer',['unsigned'|['big']]),#<P1>(32,1,'integer',['unsigned'|['big']]),#<FT>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case FB of <#{#<B1>(8,8,'binary',['unsigned'|['big']]),#<_28>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <NSoFar> = call 'erlang':'+' (SoFar,Sz1) in let <NPos1> = call 'erlang':'+' (Pos1,8) in let <NPos2> = call 'erlang':'+' (Pos2,8) in case <> of <> when let <_15> = call 'erlang':'>' (NSoFar,81920) in let <_16> = call 'erlang':'=/=' (ToRead,[]) in call 'erlang':'and' (_15,_16) -> case apply 're_hash_write'/5 (Head,ToRead,L,Pos1,Pos2) of <{NewHead,'ok'}> when 'true' -> apply 'split_bins'/7 (FB,NewHead,Pos1,Pos2,[],[],0)
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
<> when call 'erlang':'=:=' (Sz1,0) -> let <E> = {'skip',B1} in apply 'split_bins'/7 (FT,Head,NPos1,NPos2,ToRead,[E|L],NSoFar)
<> when 'true' -> let <E> = {Sz1,P1,B1,Pos1,Pos2} in let <NewToRead> = [{P1,Sz1}|ToRead] in apply 'split_bins'/7 (FT,Head,NPos1,NPos2,NewToRead,[E|L],NSoFar) end
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
're_hash_write'/5 = fun (_0,_1,_2,_3,_4) -> do apply 'check_pread2_arg'/2 (_1,_0) case call 'dets_utils':'pread' (_1,_0) of <{'ok',Bins}> when 'true' -> case apply 're_hash_slots'/7 (Bins,_2,_0,#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#,[],[],[]) of <{Head1,BinFS,BinTS,WsB}> when 'true' -> let <_8> = call 'erlang':'length' (_2) in let <_10> = call 'erlang':'*' (8,_8) in let <WPos1> = call 'erlang':'-' (_3,_10) in let <_12> = call 'erlang':'length' (_2) in let <_14> = call 'erlang':'*' (8,_12) in let <WPos2> = call 'erlang':'-' (_4,_14) in let <ToWrite> = [{WPos1,BinFS}|[{WPos2,BinTS}|WsB]] in call 'dets_utils':'pwrite' (Head1,ToWrite)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
're_hash_slots'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Bins,[{'skip',B1}|L],Head,Z,BinFS,BinTS,WsB> when 'true' -> apply 're_hash_slots'/7 (Bins,L,Head,Z,[B1|BinFS],[Z|BinTS],WsB)
<[FB|Bins],[E|L],Head,Z,BinFS,BinTS,WsB> when 'true' -> case E of <{Sz1,P1,B1,Pos1,Pos2}> when 'true' -> let <_8> = catch apply 'per_key'/2 (Head,FB) in let <_12> = case _8 of <{'EXIT',_X_Error}> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('re_hash_slots',{FB,E}) in let <_10> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_10)
<Else> when 'true' -> Else end in case apply 're_hash_split'/6 (_12,Head,[],0,[],0) of <{_X_KL,_X_KSz,[],0}> when 'true' -> case call 'erlang':'+' (_X_KSz,8) of <_39> when call 'erlang':'=:=' (_39,Sz1) -> apply 're_hash_slots'/7 (Bins,L,Head,Z,[B1|BinFS],[Z|BinTS],WsB)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<{[],0,_X_ML,_X_MSz}> when 'true' -> case call 'erlang':'+' (_X_MSz,8) of <_40> when call 'erlang':'=:=' (_40,Sz1) -> apply 're_hash_slots'/7 (Bins,L,Head,Z,[Z|BinFS],[B1|BinTS],WsB)
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<{KL,KSz,ML,MSz}> when try let <_16> = call 'erlang':'=/=' (KL,[]) in let <_17> = call 'erlang':'>' (KSz,0) in let <_18> = call 'erlang':'=/=' (ML,[]) in let <_19> = call 'erlang':'>' (MSz,0) in let <_20> = call 'erlang':'and' (_18,_19) in let <_21> = call 'erlang':'and' (_17,_20) in call 'erlang':'and' (_16,_21) of <Try> -> Try catch <T,R> -> 'false' -> case apply 'updated'/9 (Head,P1,Sz1,KSz,Pos1,KL,'true','foo','bar') of <{Head1,FS1,Ws1}> when 'true' -> case apply 'updated'/9 (Head1,0,0,MSz,Pos2,ML,'true','foo','bar') of <{NewHead,[{_41,Bin2}|[]],Ws2}> when call 'erlang':'=:=' (_41,Pos2) -> let <_25> = case FS1 of <[{_42,Bin1}|[]]> when call 'erlang':'=:=' (_42,Pos1) -> [Bin1|BinFS]
<[]> when 'true' -> [B1|BinFS]
(<_24> when 'true' -> primop 'match_fail' ({'case_clause',_24})-|['compiler_generated'] ) end in let <NewBinTS> = [Bin2|BinTS] in let <_28> = call 'erlang':'++' (Ws1,WsB) in let <NewWsB> = call 'erlang':'++' (Ws2,_28) in apply 're_hash_slots'/7 (Bins,L,NewHead,Z,_25,NewBinTS,NewWsB)
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
(<_30> when 'true' -> primop 'match_fail' ({'case_clause',_30})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<[],[],Head,_X_Z,BinFS,BinTS,WsB> when 'true' -> let <_31> = call 'lists':'reverse' (WsB) in {Head,BinFS,BinTS,_31}
(<_38,_37,_36,_35,_34,_33,_32> when 'true' -> (primop 'match_fail' ({'function_clause',_38,_37,_36,_35,_34,_33,_32})-|[{'function_name',{'re_hash_slots',7}}] )-|['compiler_generated'] ) end
're_hash_split'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[E|KeyObjs],Head,KL,KSz,ML,MSz> when 'true' -> case E of <{Key,Sz,Bin,_X_Item,_X_Objs}> when 'true' -> (case Head of (<({'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_rec96,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56}-|['compiler_generated'] )> when 'true' -> let <_11> = case <Key,_rec96> of (<I,('phash2'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('phash2'-|['compiler_generated'] ) (I)-|['compiler_generated'] )-|['compiler_generated'] )
(<I,('phash'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_89> = call ('erlang'-|['compiler_generated'] ):('phash'-|['compiler_generated'] ) (I,(67108863-|['compiler_generated'] )) in (call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (_89,(1-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_90,_91> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_90,_91}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case Head of (<({'head',_58,_rec97,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85}-|['compiler_generated'] )> when 'true' -> let <New> = call 'erlang':'rem' (_11,_rec97) in case <> of <> when (try (let <_15> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_13-|['compiler_generated'] )> when 'true' -> (_13-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_16> = call 'erlang':'=:=' ((_15-|['compiler_generated'] ),'true') in let <_17> = call 'erlang':'element' (2,Head) in let <_18> = call 'erlang':'>=' (New,_17) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_16,_18)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_19> = call 'erlang':'+' (MSz,Sz) in apply 're_hash_split'/6 (KeyObjs,Head,KL,KSz,[Bin|ML],_19)
<> when 'true' -> let <_20> = call 'erlang':'+' (KSz,Sz) in apply 're_hash_split'/6 (KeyObjs,Head,[Bin|KL],_20,ML,MSz) end-|['compiler_generated'] )
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_57> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[],_X_Head,KL,KSz,ML,MSz> when 'true' -> let <_22> = call 'lists':'reverse' (KL) in let <_21> = call 'lists':'reverse' (ML) in {_22,KSz,_21,MSz}
(<_28,_27,_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24,_23})-|[{'function_name',{'re_hash_split',6}}] )-|['compiler_generated'] ) end
'write_cache'/1 = fun (_0) -> (case _0 of (<({'head',_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_rec98,_34,_35,_36,_37,_38,_39,_40,_41}-|['compiler_generated'] )> when 'true' -> case call 'dets_utils':'is_empty_cache' (_rec98) of <'true'> when 'true' -> {_0,[],[]}
<'false'> when 'true' -> case call 'dets_utils':'reset_cache' (_rec98) of <{NewC,MaxInserts,PerKey}> when 'true' -> let <_5> = call 'erlang':'length' (PerKey) in let <MaxNoInsertedKeys> = call 'erlang':'min' (MaxInserts,_5) in case _0 of <{'head',_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71}> when 'true' -> let <_9> = call 'erlang':'setelement' (22,_0,NewC) in case apply 'may_grow'/3 (_9,MaxNoInsertedKeys,'once') of <{Head2,'ok'}> when 'true' -> apply 'eval_work_list'/2 (Head2,PerKey)
<HeadError> when 'true' -> call 'erlang':'throw' (HeadError) end
(<_72> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'may_grow'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,0,'once'> when 'true' -> {Head,'ok'}
<Head = {'head',_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57},_X_N,_X_How> when (try let <_7> = call 'erlang':'element' (17,Head) in call 'erlang':'=/=' (_7,'false') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {Head,'ok'}
<Head = {'head',_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,'read',_80,_81,_82,_83,_84,_85},_X_N,_X_How> when 'true' -> {Head,'ok'}
<Head = {'head',_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114},_X_N,_X_How> when (try let <_14> = call 'erlang':'element' (4,Head) in let <_13> = call 'erlang':'element' (21,Head) in call 'erlang':'>=' (_14,_13) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {Head,'ok'}
<Head,N,How> when 'true' -> (case Head of (<({'head',_115,_116,_117,_118,_119,_rec100,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}-|['compiler_generated'] )> when 'true' -> let <_20> = call 'erlang':'+' (_rec100,N) in (case Head of (<({'head',_144,_145,_rec101,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}-|['compiler_generated'] )> when 'true' -> let <_21> = call 'erlang':'-' (_20,_rec101) in let <Extra> = call 'erlang':'min' (512,_21) in let <_24> = catch apply 'may_grow1'/3 (Head,Extra,How) in case _24 of <Error = {'error',_X_Reason}> when 'true' -> call 'dets_utils':'corrupt' (Head,Error)
<_@r0 = {NewHead,Reply}> when (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,'head',30)-|['compiler_generated'] ) -> _@r0
(<_25> when 'true' -> primop 'match_fail' ({'case_clause',_25})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_172> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_143> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'may_grow1'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,Extra,'many_times'> when call 'erlang':'>' (Extra,256) -> let <Reply> = apply 'grow'/3 (Head,1,'undefined') in let <_5> = call 'erlang':'self' () in let <_4> = call 'erlang':'self' () in do call 'erlang':'!' (_5,{'$dets_call',_4,'may_grow'}) Reply
<Head,Extra,_X_How> when 'true' -> apply 'grow'/3 (Head,Extra,'undefined') end
'grow'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Head,Extra,_X_SegZero> when call 'erlang':'=<' (Extra,0) -> {Head,'ok'}
<Head,Extra,'undefined'> when 'true' -> let <_3> = apply 'seg_zero'/0 () in apply 'grow'/3 (Head,Extra,_3)
<Head = {'head',_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65},_X_Extra,_X_SegZero> when (try let <_9> = call 'erlang':'element' (4,Head) in let <_8> = call 'erlang':'element' (21,Head) in call 'erlang':'>=' (_9,_8) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {Head,'ok'}
<Head,Extra,SegZero> when 'true' -> case Head of <{'head',M,_66,Next,_67,_68,_69,_70,N,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91}> when 'true' -> let <SegNum> = call 'erlang':'div' (Next,256) in case apply 'allocate_segment'/3 (Head,SegZero,SegNum) of <{Head0,W,Ws1}> when 'true' -> case call 'dets_utils':'pwrite' (Head0,[W|Ws1]) of <{Head1,'ok'}> when 'true' -> case apply 're_hash'/2 (Head1,N) of <{Head2,'ok'}> when 'true' -> let <_30> = case <> of <> when try let <_16> = call 'erlang':'+' (N,256) in call 'erlang':'=:=' (_16,M) of <Try> -> Try catch <T,R> -> 'false' -> let <_rec102> = call 'erlang':'+' (Next,256) in let <_rec103> = call 'erlang':'*' (2,M) in let <_rec104> = call 'erlang':'*' (4,M) in case Head2 of <{'head',_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120}> when 'true' -> let <_21> = call 'erlang':'setelement' (9,Head2,0) in let <_22> = call 'erlang':'setelement' (4,_21,_rec102) in let <_23> = call 'erlang':'setelement' (3,_22,_rec104) in call 'erlang':'setelement' (2,_23,_rec103)
(<_121> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> let <_rec106> = call 'erlang':'+' (N,256) in let <_rec107> = call 'erlang':'+' (Next,256) in case Head2 of <{'head',_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150}> when 'true' -> let <_28> = call 'erlang':'setelement' (9,Head2,_rec106) in call 'erlang':'setelement' (4,_28,_rec107)
(<_151> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end in case apply 'hash_invars'/1 (_30) of <'true'> when 'true' -> let <_33> = call 'erlang':'-' (Extra,256) in apply 'grow'/3 (_30,_33,SegZero)
(<_32> when 'true' -> primop 'match_fail' ({'badmatch',_32})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
'hash_invars'/1 = fun (_0) -> (case _0 of (<({'head',_12,_13,_14,_15,_16,_17,_18,_rec109,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_rec110,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_70,_71,_rec111,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_rec112,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'head',_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_rec113,_147,_148,_149,_150,_151,_152,_153,_154,_155}-|['compiler_generated'] )> when 'true' -> apply 'hash_invars'/5 (_rec109,_rec110,_rec111,_rec112,_rec113)-|['compiler_generated'] )
(<_156> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_127> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_98> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_69> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'hash_invars'/5 = fun (_0,_1,_2,_3,_4) -> let <_29> = call 'erlang':'band' (_0,255) in let <_30> = call 'erlang':'=:=' (_29,0) in let <_26> = call 'erlang':'band' (_1,255) in let <_27> = call 'erlang':'=:=' (_26,0) in let <_31> = call 'erlang':'and' (_30,_27) in let <_23> = call 'erlang':'band' (_2,255) in let <_24> = call 'erlang':'=:=' (_23,0) in let <_32> = call 'erlang':'and' (_31,_24) in let <_20> = call 'erlang':'band' (_3,255) in let <_21> = call 'erlang':'=:=' (_20,0) in let <_33> = call 'erlang':'and' (_32,_21) in let <_17> = call 'erlang':'band' (_4,255) in let <_18> = call 'erlang':'=:=' (_17,0) in let <_34> = call 'erlang':'and' (_33,_18) in let <_15> = call 'erlang':'=<' (0,_0) in let <_35> = call 'erlang':'and' (_34,_15) in let <_14> = call 'erlang':'=<' (_0,_1) in let <_36> = call 'erlang':'and' (_35,_14) in let <_12> = call 'erlang':'*' (2,_2) in let <_13> = call 'erlang':'=<' (_0,_12) in let <_37> = call 'erlang':'and' (_36,_13) in let <_11> = call 'erlang':'=<' (_1,_2) in let <_38> = call 'erlang':'and' (_37,_11) in let <_9> = call 'erlang':'*' (2,_1) in let <_10> = call 'erlang':'=<' (_2,_9) in let <_39> = call 'erlang':'and' (_38,_10) in let <_8> = call 'erlang':'=<' (0,_3) in let <_40> = call 'erlang':'and' (_39,_8) in let <_7> = call 'erlang':'=<' (_3,_2) in let <_41> = call 'erlang':'and' (_40,_7) in let <_6> = call 'erlang':'=<' (_2,_4) in let <_42> = call 'erlang':'and' (_41,_6) in let <_5> = call 'erlang':'=<' (_3,_1) in call 'erlang':'and' (_42,_5)
'seg_zero'/0 = fun () -> #{#<0>(2048,8,'integer',['unsigned'|['big']])}#
'find_object'/2 = fun (_0,_1) -> (case _0 of (<({'head',_8,_9,_10,_11,_12,_13,_14,_15,_16,_rec114,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}-|['compiler_generated'] )> when 'true' -> let <Key> = call 'erlang':'element' (_rec114,_1) in let <Slot> = apply 'db_hash'/2 (Key,_0) in apply 'find_object'/3 (_0,_1,Slot)-|['compiler_generated'] )
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'find_object'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <H = {'head',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43},_X_Obj,Slot> when (try let <_7> = call 'erlang':'element' (4,H) in call 'erlang':'>=' (Slot,_7) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'false'
<H,Obj,Slot> when 'true' -> let <_9> = catch apply 'slot_objects'/2 (H,Slot) in case _9 of <{'ok',Pointer,Objects}> when 'true' -> case call 'lists':'member' (Obj,Objects) of <'true'> when 'true' -> {'ok',Pointer}
<'false'> when 'true' -> 'false'
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<_44> when 'true' -> 'false' end end
'slot_objects'/2 = fun (_0,_1) -> let <SlotPos> = apply 'slot_position'/1 (_1) in let <MaxSize> = case _0 of (<(_69 = ({('head'-|['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )-|['compiler_generated'] )> when (try (let <_5> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),_69) in (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_5,('undefined'-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (4294967296-|['compiler_generated'] )-|['compiler_generated'] )
(<_70> when ('true'-|['compiler_generated'] ) -> (case _70 of (<({('head'-|['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_rec128)-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] ) end in case call 'dets_utils':'ipread' (_0,SlotPos,MaxSize) of <{'ok',{BucketSz,Pointer,#{#<_16>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<KeysObjs>('all',8,'binary',['unsigned'|['big']])}#}}> when call 'erlang':'=:=' (_16,BucketSz) -> let <_6> = catch (case _0 of (<({'head',_17,_18,_19,_20,_21,_22,_23,_24,_rec115,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> apply 'bin2objs'/3 (KeysObjs,_rec115,[])-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in case _6 of <{'EXIT',_X_Error}> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('slot_objects',{SlotPos,KeysObjs}) in let <_8> = call 'dets_utils':'corrupt_reason' (_0,Bad) in call 'erlang':'throw' (_8)
<Objs> when call 'erlang':'is_list' (_6) -> let <_9> = call 'lists':'reverse' (Objs) in {'ok',Pointer,_9}
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<[]> when 'true' -> {'ok',0,[]}
<BadRead> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('slot_objects',{SlotPos,BadRead}) in let <_12> = call 'dets_utils':'corrupt_reason' (_0,Bad) in call 'erlang':'throw' (_12) end
'eval_work_list'/2 = fun (_0,_1) -> case <_0,_1> of <Head,[{Key,[{_X_Seq,{'lookup',Pid}}|[]]}|[]]> when 'true' -> let <_2> = apply 'db_hash'/2 (Key,Head) in let <SlotPos> = apply 'slot_position'/1 (_2) in let <MaxSize> = case Head of (<(_69 = ({('head'-|['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )-|['compiler_generated'] )> when (try (let <_5> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),_69) in (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_5,('undefined'-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (4294967296-|['compiler_generated'] )-|['compiler_generated'] )
(<_70> when ('true'-|['compiler_generated'] ) -> (case _70 of (<({('head'-|['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_rec128)-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_17> = case call 'dets_utils':'ipread' (Head,SlotPos,MaxSize) of <{'ok',{_X_BucketSz,_X_Pointer,Bin}}> when 'true' -> let <_5> = catch apply 'per_key'/2 (Head,Bin) in case _5 of <{'EXIT',_X_Error}> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('eval_work_list',{SlotPos,Bin}) in let <_7> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_7)
<KeyObjs> when call 'erlang':'is_list' (_5) -> case call 'dets_utils':'mkeysearch' (Key,1,KeyObjs) of <'false'> when 'true' -> []
<{'value',{_25,_X_KS,_X_KB,O,Os}}> when call 'erlang':'=:=' (_25,Key) -> let <_8> = catch apply 'binobjs2terms'/1 (Os) in case _8 of <{'EXIT',_X_Error}> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('eval_work_list',{SlotPos,Bin,KeyObjs}) in let <_10> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_10)
<Terms> when call 'erlang':'is_list' (_8) -> apply 'get_objects'/1 ([O|Terms])
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
<[]> when 'true' -> []
<BadRead> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('eval_work_list',{SlotPos,BadRead}) in let <_15> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_15) end in {Head,[{Pid,_17}|[]],[]}
<Head,PerKey> when 'true' -> let <SWLs> = apply 'tag_with_slot'/3 (PerKey,Head,[]) in let <P1> = call 'dets_utils':'family' (SWLs) in case apply 'remove_slot_tag'/3 (P1,[],[]) of <{PerSlot,SlotPositions}> when 'true' -> case call 'dets_utils':'pread' (SlotPositions,Head) of <{'ok',Bins}> when 'true' -> apply 'read_buckets'/11 (PerSlot,SlotPositions,Bins,Head,[],[],[],[],0,0,0)
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end end
'tag_with_slot'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[WL = {K,_7}|WLs],Head,L> when 'true' -> let <_3> = apply 'db_hash'/2 (K,Head) in apply 'tag_with_slot'/3 (WLs,Head,[{_3,WL}|L])
<[],_X_Head,L> when 'true' -> L
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'tag_with_slot',3}}] )-|['compiler_generated'] ) end
'remove_slot_tag'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{S,SWLs}|SSWLs],Ls,SPs> when 'true' -> let <_4> = apply 'slot_position'/1 (S) in apply 'remove_slot_tag'/3 (SSWLs,[SWLs|Ls],[{_4,8}|SPs])
<[],Ls,SPs> when 'true' -> {Ls,SPs}
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'remove_slot_tag',3}}] )-|['compiler_generated'] ) end
'read_buckets'/11 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of <[WLs|SPs],[{P1,_X_8}|Ss],[#{#<_X_Zero>(32,1,'integer',['unsigned'|['big']]),#<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,PWLs,ToRead,LU,Ws,NoObjs,NoKeys,SoFar> when call 'erlang':'=:=' (P2,0) -> case apply 'eval_bucket_keys'/8 (WLs,P1,0,0,[],Head,Ws,LU) of <{NewHead,NLU,NWs,No,KNo}> when 'true' -> let <NewNoObjs> = call 'erlang':'+' (No,NoObjs) in let <NewNoKeys> = call 'erlang':'+' (KNo,NoKeys) in apply 'read_buckets'/11 (SPs,Ss,Bs,NewHead,PWLs,ToRead,NLU,NWs,NewNoObjs,NewNoKeys,SoFar)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<[WorkLists|SPs],[{P1,_X_8}|Ss],[#{#<Size>(32,1,'integer',['unsigned'|['big']]),#<P2>(32,1,'integer',['unsigned'|['big']])}#|Bs],Head,PWLs,ToRead,LU,Ws,NoObjs,NoKeys,SoFar> when let <_16> = try let <_15> = call 'erlang':'+' (SoFar,Size) in call 'erlang':'<' (_15,81920) of <Try> -> Try catch <T,R> -> 'false' in let <_17> = call 'erlang':'=:=' (ToRead,[]) in call 'erlang':'or' (_16,_17) -> let <NewToRead> = [{P2,Size}|ToRead] in let <NewPWLs> = [{P2,P1,WorkLists}|PWLs] in let <NewSoFar> = call 'erlang':'+' (SoFar,Size) in apply 'read_buckets'/11 (SPs,Ss,Bs,Head,NewPWLs,NewToRead,LU,Ws,NoObjs,NoKeys,NewSoFar)
<SPs,Ss,Bs,Head,PWLs0,ToRead0,LU,Ws,NoObjs,NoKeys,SoFar> when call 'erlang':'>' (SoFar,0) -> let <PWLs> = call 'lists':'keysort' (1,PWLs0) in let <ToRead> = call 'lists':'keysort' (1,ToRead0) in do apply 'check_pread2_arg'/2 (ToRead,Head) case call 'dets_utils':'pread' (ToRead,Head) of <{'ok',Bins}> when 'true' -> let <_24> = catch apply 'eval_buckets'/7 (Bins,PWLs,Head,LU,Ws,0,0) in case _24 of <{'ok',NewHead,NLU,[],0,0}> when 'true' -> apply 'read_buckets'/11 (SPs,Ss,Bs,NewHead,[],[],NLU,[],NoObjs,NoKeys,0)
<{'ok',Head1,NLU,NWs,No,KNo}> when 'true' -> let <NewNoObjs> = call 'erlang':'+' (NoObjs,No) in let <NewNoKeys> = call 'erlang':'+' (NoKeys,KNo) in let <_27> = call 'lists':'reverse' (NWs) in case call 'dets_utils':'pwrite' (Head1,_27) of <{NewHead,'ok'}> when 'true' -> apply 'read_buckets'/11 (SPs,Ss,Bs,NewHead,[],[],NLU,[],NewNoObjs,NewNoKeys,0)
(<_28> when 'true' -> primop 'match_fail' ({'badmatch',_28})-|['compiler_generated'] ) end
<Error> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('read_buckets',{Bins,Error}) in let <_30> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_30) end
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end
<[],[],[],Head,[],[],LU,Ws,NoObjs,NoKeys,0> when 'true' -> case apply 'update_no_keys'/4 (Head,Ws,NoObjs,NoKeys) of <{NewHead,NWs}> when 'true' -> let <_33> = call 'lists':'reverse' (NWs) in {NewHead,LU,_33}
(<_32> when 'true' -> primop 'match_fail' ({'badmatch',_32})-|['compiler_generated'] ) end
(<_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34> when 'true' -> (primop 'match_fail' ({'function_clause',_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34})-|[{'function_name',{'read_buckets',11}}] )-|['compiler_generated'] ) end
'eval_buckets'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <[Bin|Bins],[SP|SPs],Head,LU,Ws,NoObjs,NoKeys> when 'true' -> case SP of <{Pos,P1,WLs}> when 'true' -> let <KeyObjs> = apply 'per_key'/2 (Head,Bin) in let <_9> = call 'erlang':'byte_size' (Bin) in case apply 'eval_bucket_keys'/8 (WLs,P1,Pos,_9,KeyObjs,Head,Ws,LU) of <{NewHead,NLU,NWs,No,KNo}> when 'true' -> let <_12> = call 'erlang':'+' (NoObjs,No) in let <_11> = call 'erlang':'+' (NoKeys,KNo) in apply 'eval_buckets'/7 (Bins,SPs,NewHead,NLU,NWs,_12,_11)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<[],[],Head,LU,Ws,NoObjs,NoKeys> when 'true' -> {'ok',Head,LU,Ws,NoObjs,NoKeys}
(<_19,_18,_17,_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13})-|[{'function_name',{'eval_buckets',7}}] )-|['compiler_generated'] ) end
'eval_bucket_keys'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> (case _5 of (<({'head',_22,_23,_24,_25,_26,_27,_28,_29,_rec116,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49}-|['compiler_generated'] )> when 'true' -> case apply 'eval_slot'/9 (_0,_4,_rec116,_7,[],0,0,0,'false') of <{NLU,Bins,BSize,No,KNo,Ch}> when 'true' -> case apply 'updated'/9 (_5,_2,_3,BSize,_1,Bins,Ch,No,KNo) of <{NewHead,W1,W2}> when 'true' -> let <_12> = call 'erlang':'++' (W1,_6) in let <_13> = call 'erlang':'++' (W2,_12) in {NewHead,NLU,_13,No,KNo}
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_50> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'updated'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> let <BinsSize> = call 'erlang':'+' (_3,8) in case <> of <> when let <_10> = call 'erlang':'=:=' (_1,0) in let <_11> = call 'erlang':'=:=' (_3,0) in call 'erlang':'and' (_10,_11) -> {_0,[],[]}
<> when let <_12> = call 'erlang':'=:=' (_1,0) in let <_13> = call 'erlang':'>' (_3,0) in call 'erlang':'and' (_12,_13) -> let <_14> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (BinsSize,(1-|['compiler_generated'] )) in case call 'dets_utils':'alloc' (_0,_14) of <{Head1,NewPos,FPos}> when 'true' -> let <_16> = call 'erlang':'-' (FPos,1) in let <NewHead> = apply 'one_bucket_added'/2 (Head1,_16) in let <_18> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']])}# in let <W1> = {NewPos,[_18|_5]} in let <_20> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<NewPos>(32,1,'integer',['unsigned'|['big']])}# in let <W2> = {_4,_20} in {NewHead,[W2|[]],[W1|[]]}
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
<> when let <_22> = call 'erlang':'=/=' (_1,0) in let <_23> = call 'erlang':'=:=' (_3,0) in call 'erlang':'and' (_22,_23) -> let <_24> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (_2,(1-|['compiler_generated'] )) in case call 'dets_utils':'free' (_0,_1,_24) of <{Head1,FPos}> when 'true' -> let <_26> = call 'erlang':'-' (FPos,1) in let <NewHead> = apply 'one_bucket_removed'/2 (Head1,_26) in let <_28> = call 'erlang':'+' (_1,4) in let <W1> = {_28,#{#<3>(8,1,'integer',['unsigned'|['big']]),#<171>(8,1,'integer',['unsigned'|['big']]),#<205>(8,1,'integer',['unsigned'|['big']]),#<239>(8,1,'integer',['unsigned'|['big']])}#} in let <W2> = {_4,#{#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']]),#<0>(8,1,'integer',['unsigned'|['big']])}#} in {NewHead,[W2|[]],[W1|[]]}
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
<> when try let <_31> = call 'erlang':'=/=' (_1,0) in let <_32> = call 'erlang':'>' (_3,0) in let <_33> = call 'erlang':'=:=' (_6,'false') in let <_34> = call 'erlang':'and' (_32,_33) in call 'erlang':'and' (_31,_34) of <Try> -> Try catch <T,R> -> 'false' -> {_0,[],[]}
<> when let <_35> = call 'erlang':'=/=' (_1,0) in let <_36> = call 'erlang':'>' (_3,0) in call 'erlang':'and' (_35,_36) -> let <_39> = case <> of <> when call 'erlang':'=:=' (_2,BinsSize) -> 'same'
<> when 'true' -> (let <_88> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (_2) in let <_38> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_88) in (let <_91> = call ('dets_utils'-|['compiler_generated'] ):('log2'-|['compiler_generated'] ) (BinsSize) in let <_37> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_91) in call 'erlang':'=:=' (_38,_37)-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_51> = case <> of <> when (try (let <_43> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_41-|['compiler_generated'] )> when 'true' -> (_41-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_44> = call 'erlang':'=:=' ((_43-|['compiler_generated'] ),'true') in let <_45> = call 'erlang':'element' (17,_0) in let <_46> = call 'erlang':'=/=' (_45,'false') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_44,_46)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_49> = call 'erlang':'=/=' (_39,'false') in let <_48> = call 'erlang':'=:=' (_7,0) in let <_50> = call 'erlang':'and' (_49,_48) in let <_47> = call 'erlang':'=:=' (_8,0) in call 'erlang':'and' (_50,_47)
<> when 'true' -> _39 end in case <> of <> when call 'erlang':'=:=' (_51,'same') -> let <_53> = call 'erlang':'+' (_1,8) in let <W1> = {_53,_5} in {_0,[],[W1|[]]}
<> when (call 'erlang':'=:=' (_51,'true')-|['compiler_generated'] ) -> let <_55> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']])}# in let <W1> = {_1,[_55|_5]} in let <_57> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<_1>(32,1,'integer',['unsigned'|['big']])}# in let <W2> = {_4,_57} in {_0,[W2|[]],[W1|[]]}
<> when 'true' -> let <_59> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (_2,(1-|['compiler_generated'] )) in case call 'dets_utils':'free' (_0,_1,_59) of <{Head1,FPosF}> when 'true' -> let <_61> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (BinsSize,(1-|['compiler_generated'] )) in case call 'dets_utils':'alloc' (Head1,_61) of <{Head2,NewPos,FPosA}> when 'true' -> let <_63> = call 'erlang':'-' (FPosA,1) in let <Head3> = apply 'one_bucket_added'/2 (Head2,_63) in let <_65> = call 'erlang':'-' (FPosF,1) in let <NewHead> = apply 'one_bucket_removed'/2 (Head3,_65) in let <_67> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']])}# in let <W0> = {NewPos,[_67|_5]} in let <_69> = #{#<BinsSize>(32,1,'integer',['unsigned'|['big']]),#<NewPos>(32,1,'integer',['unsigned'|['big']])}# in let <W2> = {_4,_69} in let <_72> = case <> of <> when call 'erlang':'=/=' (_1,NewPos) -> let <_71> = call 'erlang':'+' (_1,4) in [W0|[{_71,#{#<3>(8,1,'integer',['unsigned'|['big']]),#<171>(8,1,'integer',['unsigned'|['big']]),#<205>(8,1,'integer',['unsigned'|['big']]),#<239>(8,1,'integer',['unsigned'|['big']])}#}|[]]]
<> when 'true' -> [W0|[]] end in {NewHead,[W2|[]],_72}
(<_62> when 'true' -> primop 'match_fail' ({'badmatch',_62})-|['compiler_generated'] ) end
(<_60> when 'true' -> primop 'match_fail' ({'badmatch',_60})-|['compiler_generated'] ) end end
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end
'one_bucket_added'/2 = fun (_0,_1) -> case <_0,_1> of <H = {'head',_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55},_X_Log2> when (try let <_6> = call 'erlang':'element' (14,H) in call 'erlang':'=:=' (_6,'undefined') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> H
<H = {'head',_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84},Log2> when (try let <_12> = call 'erlang':'element' (8,H) in call 'erlang':'>=' (_12,Log2) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case H of (<({'head',_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_rec117,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112}-|['compiler_generated'] )> when 'true' -> let <NewNoColls> = call 'orddict':'update_counter' (Log2,1,_rec117) in case H of <{'head',_114,_115,_116,_117,_118,_119,_120,_121,_122,_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142}> when 'true' -> call 'erlang':'setelement' (14,H,NewNoColls)
(<_143> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_113> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H,Log2> when 'true' -> (case H of (<({'head',_144,_145,_146,_147,_148,_149,_150,_151,_152,_153,_154,_155,_rec119,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171}-|['compiler_generated'] )> when 'true' -> let <NewNoColls> = call 'orddict':'update_counter' (Log2,1,_rec119) in case H of <{'head',_173,_174,_175,_176,_177,_178,_179,_180,_181,_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_194,_195,_196,_197,_198,_199,_200,_201}> when 'true' -> let <_23> = call 'erlang':'setelement' (14,H,NewNoColls) in call 'erlang':'setelement' (8,_23,Log2)
(<_202> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_172> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'one_bucket_removed'/2 = fun (_0,_1) -> case <_0,_1> of <H = {'head',_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64},_X_FPos> when (try let <_6> = call 'erlang':'element' (14,H) in call 'erlang':'=:=' (_6,'undefined') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> H
<H = {'head',_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93},Log2> when (try let <_12> = call 'erlang':'element' (8,H) in call 'erlang':'>' (_12,Log2) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case H of (<({'head',_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_rec121,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117,_118,_119,_120,_121}-|['compiler_generated'] )> when 'true' -> let <NewNoColls> = call 'orddict':'update_counter' (Log2,-1,_rec121) in case H of <{'head',_123,_124,_125,_126,_127,_128,_129,_130,_131,_132,_133,_134,_135,_136,_137,_138,_139,_140,_141,_142,_143,_144,_145,_146,_147,_148,_149,_150,_151}> when 'true' -> call 'erlang':'setelement' (14,H,NewNoColls)
(<_152> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_122> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<H = {'head',_153,_154,_155,_156,_157,_158,_159,_160,_161,_162,_163,_164,_165,_166,_167,_168,_169,_170,_171,_172,_173,_174,_175,_176,_177,_178,_179,_180,_181},Log2> when (try let <_24> = call 'erlang':'element' (8,H) in call 'erlang':'=:=' (_24,Log2) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case H of (<({'head',_182,_183,_184,_185,_186,_187,_188,_189,_190,_191,_192,_193,_rec123,_194,_195,_196,_197,_198,_199,_200,_201,_202,_203,_204,_205,_206,_207,_208,_209}-|['compiler_generated'] )> when 'true' -> let <NewNoColls> = call 'orddict':'update_counter' (Log2,-1,_rec123) in let <MaxObjSize> = case NewNoColls of (<(NoColls = ('undefined'-|['compiler_generated'] )-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> NoColls-|['compiler_generated'] )
(<NoColls> when ('true'-|['compiler_generated'] ) -> (apply 'max_objsize'/2 (NoColls,(0-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case H of <{'head',_211,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221,_222,_223,_224,_225,_226,_227,_228,_229,_230,_231,_232,_233,_234,_235,_236,_237,_238,_239}> when 'true' -> let <_32> = call 'erlang':'setelement' (14,H,NewNoColls) in call 'erlang':'setelement' (8,_32,MaxObjSize)
(<_240> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_210> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_35,_34> when 'true' -> (primop 'match_fail' ({'function_clause',_35,_34})-|[{'function_name',{'one_bucket_removed',2}}] )-|['compiler_generated'] ) end
'eval_slot'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <WLs0 = [{Key,Commands}|WLs],KOs = [{K,KS,KB,O,Os}|KOs1],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' -> case call 'dets_utils':'cmp' (K,Key) of <0> when 'true' -> let <_9> = apply 'binobjs2terms'/1 (Os) in let <Old> = [O|_9] in case apply 'eval_key'/9 (Key,Commands,Old,Type,KB,KS,LU,Ws,Ch) of <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' -> let <_14> = call 'erlang':'+' (No1,No) in let <_13> = call 'erlang':'+' (KNo1,KNo) in let <_12> = call 'erlang':'+' (Sz,BSz) in apply 'eval_slot'/9 (WLs,KOs1,Type,NLU,NWs,_14,_13,_12,NCh)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<-1> when 'true' -> let <_15> = call 'erlang':'+' (KS,BSz) in apply 'eval_slot'/9 (WLs0,KOs1,Type,LU,[Ws|KB],No,KNo,_15,Ch)
<1> when 'true' -> case apply 'eval_key'/9 (Key,Commands,[],Type,[],0,LU,Ws,Ch) of <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' -> let <_19> = call 'erlang':'+' (No1,No) in let <_18> = call 'erlang':'+' (KNo1,KNo) in let <_17> = call 'erlang':'+' (Sz,BSz) in apply 'eval_slot'/9 (WLs,KOs,Type,NLU,NWs,_19,_18,_17,NCh)
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_20> when 'true' -> primop 'match_fail' ({'case_clause',_20})-|['compiler_generated'] ) end
<[{Key,Commands}|WLs],[],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' -> case apply 'eval_key'/9 (Key,Commands,[],Type,[],0,LU,Ws,Ch) of <{NLU,NWs,Sz,No1,KNo1,NCh}> when 'true' -> let <_24> = call 'erlang':'+' (No1,No) in let <_23> = call 'erlang':'+' (KNo1,KNo) in let <_22> = call 'erlang':'+' (Sz,BSz) in apply 'eval_slot'/9 (WLs,[],Type,NLU,NWs,_24,_23,_22,NCh)
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
<[],[{_X_Key,Size,KeyBin,_35,_36}|KOs],Type,LU,Ws,No,KNo,BSz,Ch> when 'true' -> let <_25> = call 'erlang':'+' (Size,BSz) in apply 'eval_slot'/9 ([],KOs,Type,LU,[Ws|KeyBin],No,KNo,_25,Ch)
<[],[],_X_Type,LU,Ws,No,KNo,BSz,Ch> when 'true' -> {LU,Ws,BSz,No,KNo,Ch}
(<_34,_33,_32,_31,_30,_29,_28,_27,_26> when 'true' -> (primop 'match_fail' ({'function_clause',_34,_33,_32,_31,_30,_29,_28,_27,_26})-|[{'function_name',{'eval_slot',9}}] )-|['compiler_generated'] ) end
'eval_key'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <_X_K,[{_X_Seq,{'lookup',Pid}}|[]],[],_X_Type,_X_KeyBin,_X_KeySz,LU,Ws,Ch> when 'true' -> let <NLU> = [{Pid,[]}|LU] in {NLU,Ws,0,0,0,Ch}
<_X_K,[{_X_Seq,{'lookup',Pid}}|[]],Old0,_X_Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' -> let <Old> = call 'lists':'keysort' (2,Old0) in let <Objs> = apply 'get_objects'/1 (Old) in let <NLU> = [{Pid,Objs}|LU] in {NLU,[Ws|KeyBin],KeySz,0,0,Ch}
<K,Comms,Orig,Type,KeyBin,KeySz,LU,Ws,Ch> when 'true' -> let <Old> = call 'dets_utils':'msort' (Orig) in case apply 'eval_key1'/9 (Comms,[],Old,Type,K,LU,Ws,0,Orig) of <{'ok',NLU}> when call 'erlang':'=:=' (Old,[]) -> {NLU,Ws,0,0,0,Ch}
<{'ok',NLU}> when 'true' -> {NLU,[Ws|KeyBin],KeySz,0,0,Ch}
<{NLU,NWs,NSz,No}> when let <_14> = call 'erlang':'=:=' (Old,[]) in let <_15> = call 'erlang':'>' (NSz,0) in call 'erlang':'and' (_14,_15) -> {NLU,NWs,NSz,No,1,'true'}
<{NLU,NWs,NSz,No}> when let <_16> = call 'erlang':'=/=' (Old,[]) in let <_17> = call 'erlang':'=:=' (NSz,0) in call 'erlang':'and' (_16,_17) -> {NLU,NWs,NSz,No,-1,'true'}
<{NLU,NWs,NSz,No}> when 'true' -> {NLU,NWs,NSz,No,0,'true'}
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end end
'eval_key1'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <[{_X_Seq,{'insert',Term}}|L],Cs,Old = [{_31,_32,_33}|[]],Type = 'set',K,LU,Ws,No,Orig> when call 'erlang':'=:=' (_31,Term) -> apply 'eval_key1'/9 (L,Cs,Old,Type,K,LU,Ws,No,Orig)
<[{Seq,{'insert',Term}}|L],Cs,Old,Type = 'set',K,LU,Ws,No,Orig> when 'true' -> let <_10> = call 'erlang':'+' (No,1) in let <_9> = call 'erlang':'length' (Old) in let <NNo> = call 'erlang':'-' (_10,_9) in apply 'eval_key1'/9 (L,Cs,[{Term,Seq,'insert'}|[]],Type,K,LU,Ws,NNo,Orig)
<[{_X_Seq,{'lookup',Pid}}|L],Cs,Old,Type,Key,LU,Ws,No,Orig> when 'true' -> case apply 'eval_comms'/4 (Cs,Old,Type,No) of <{'ok',New0,NewNo}> when 'true' -> let <New> = call 'lists':'keysort' (2,New0) in let <Objs> = apply 'get_objects'/1 (New) in let <NLU> = [{Pid,Objs}|LU] in case <> of <> when call 'erlang':'=:=' (L,[]) -> apply 'eval_end'/6 (New,NLU,Type,Ws,NewNo,Orig)
<> when 'true' -> let <NewOld> = call 'dets_utils':'msort' (New) in apply 'eval_key1'/9 (L,[],NewOld,Type,Key,NLU,Ws,NewNo,Orig) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<[{_X_Seq,'delete_key'}|L],_X_Cs,Old,Type,K,LU,Ws,No,Orig> when 'true' -> let <_17> = call 'erlang':'length' (Old) in let <NewNo> = call 'erlang':'-' (No,_17) in apply 'eval_key1'/9 (L,[],[],Type,K,LU,Ws,NewNo,Orig)
<[{_X_Seq,{'delete_object',Term}}|L],Cs,[{_34,_35,_36}|[]],Type = 'set',K,LU,Ws,No,Orig> when call 'erlang':'=:=' (_34,Term) -> let <_19> = call 'erlang':'-' (No,1) in apply 'eval_key1'/9 (L,Cs,[],Type,K,LU,Ws,_19,Orig)
<[{_X_Seq,{'delete_object',_X_T}}|L],Cs,Old1,Type = 'set',K,LU,Ws,No,Orig> when 'true' -> apply 'eval_key1'/9 (L,Cs,Old1,Type,K,LU,Ws,No,Orig)
<[{Seq,{Comm,Term}}|L],Cs,Old,Type,K,LU,Ws,No,Orig> when call 'erlang':'=/=' (Type,'set') -> apply 'eval_key1'/9 (L,[{Term,Seq,Comm}|Cs],Old,Type,K,LU,Ws,No,Orig)
<[],Cs,Old,Type = 'set',_X_Key,LU,Ws,No,Orig> when 'true' -> case Cs of <[]> when 'true' -> apply 'eval_end'/6 (Old,LU,Type,Ws,No,Orig)
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
<[],Cs,Old,Type,_X_Key,LU,Ws,No,Orig> when 'true' -> case apply 'eval_comms'/4 (Cs,Old,Type,No) of <{'ok',New,NewNo}> when 'true' -> apply 'eval_end'/6 (New,LU,Type,Ws,NewNo,Orig)
(<_21> when 'true' -> primop 'match_fail' ({'badmatch',_21})-|['compiler_generated'] ) end
(<_30,_29,_28,_27,_26,_25,_24,_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_30,_29,_28,_27,_26,_25,_24,_23,_22})-|[{'function_name',{'eval_key1',9}}] )-|['compiler_generated'] ) end
'eval_comms'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[],L,_X_Type = 'set',No> when 'true' -> {'ok',L,No}
<Cs,Old,Type,No> when 'true' -> let <Commands> = call 'dets_utils':'msort' (Cs) in case Type of <'bag'> when 'true' -> apply 'eval_bag'/4 (Commands,Old,[],No)
<'duplicate_bag'> when 'true' -> apply 'eval_dupbag'/4 (Commands,Old,[],No)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end end
'eval_end'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <New> = call 'lists':'keysort' (2,_0) in let <_9> = case <> of <> when try let <_8> = call 'erlang':'length' (New) in let <_7> = call 'erlang':'length' (_5) in call 'erlang':'=/=' (_8,_7) of <Try> -> Try catch <T,R> -> 'false' -> 'false'
<> when 'true' -> apply 'same_terms'/2 (_5,New) end in case <> of <> when (call 'erlang':'=:=' (_9,'true')-|['compiler_generated'] ) -> {'ok',_1}
<> when call 'erlang':'=:=' (New,[]) -> {_1,_3,0,_4}
<> when 'true' -> case apply 'make_bins'/3 (New,[],0) of <{Ws1,Sz}> when 'true' -> case <> of <> when call 'erlang':'=:=' (_2,'set') -> {_1,[_3|Ws1],Sz,_4}
<> when 'true' -> let <NSz> = call 'erlang':'+' (Sz,4) in let <_13> = #{#<NSz>(32,1,'integer',['unsigned'|['big']])}# in {_1,[_3|[_13|Ws1]],NSz,_4} end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
'same_terms'/2 = fun (_0,_1) -> case <_0,_1> of <[E1|L1],[E2|L2]> when try let <_3> = call 'erlang':'element' (1,E1) in let <_2> = call 'erlang':'element' (1,E2) in call 'erlang':'=:=' (_3,_2) of <Try> -> Try catch <T,R> -> 'false' -> apply 'same_terms'/2 (L1,L2)
<[],[]> when 'true' -> 'true'
<_X_L1,_X_L2> when 'true' -> 'false' end
'make_bins'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[{_X_Term,_X_Seq,B}|L],W,Sz> when call 'erlang':'is_binary' (B) -> let <_3> = call 'erlang':'byte_size' (B) in let <_4> = call 'erlang':'+' (Sz,_3) in apply 'make_bins'/3 (L,[W|B],_4)
<[{Term,_X_Seq,'insert'}|L],W,Sz> when 'true' -> let <B> = call 'erlang':'term_to_binary' (Term) in let <_6> = call 'erlang':'byte_size' (B) in let <BSize> = call 'erlang':'+' (_6,4) in let <_9> = #{#<BSize>(32,1,'integer',['unsigned'|['big']])}# in let <_8> = call 'erlang':'+' (Sz,BSize) in apply 'make_bins'/3 (L,[W|[[_9|B]|[]]],_8)
<[],W,Sz> when 'true' -> {W,Sz}
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'make_bins',3}}] )-|['compiler_generated'] ) end
'get_objects'/1 = fun (_0) -> case _0 of <[{T,_X_S,_X_BT}|L]> when 'true' -> let <_1> = apply 'get_objects'/1 (L) in [T|_1]
<[]> when 'true' -> []
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'get_objects',1}}] )-|['compiler_generated'] ) end
'eval_bag'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_12,_13}|Old],New,No> when 'true' -> let <_4> = call 'dets_utils':'cmp' (Term1,Term2) in case <Op,_4> of <'delete_object',-1> when 'true' -> apply 'eval_bag'/4 (L,Old0,New,No)
<'insert',-1> when 'true' -> apply 'bag_object'/6 (L,Old0,New,No,[N|[]],Term1)
<'delete_object',0> when 'true' -> let <_5> = call 'erlang':'-' (No,1) in apply 'bag_object'/6 (L,Old,New,_5,[],Term1)
<'insert',0> when 'true' -> let <_6> = call 'erlang':'-' (No,1) in apply 'bag_object'/6 (L,Old,New,_6,[N|[]],Term1)
<_14,(1-|['compiler_generated'] )> when 'true' -> apply 'eval_bag'/4 (L0,Old,[O|New],No)
(<(_15-|['compiler_generated'] ),(_16-|['compiler_generated'] )> when 'true' -> let <_7> = {(_15-|['compiler_generated'] ),(_16-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' -> apply 'eval_bag'/4 (L,Old,New,No)
<[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' -> apply 'bag_object'/6 (L,Old,New,No,[N|[]],Term)
<L = [],[O|Old],New,No> when 'true' -> apply 'eval_bag'/4 (L,Old,[O|New],No)
<[],[],New,No> when 'true' -> {'ok',New,No}
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'eval_bag',4}}] )-|['compiler_generated'] ) end
'bag_object'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[N = {Term,_13,'insert'}|L],Old,New,No,_X_N,_14> when call 'erlang':'=:=' (_14,Term) -> apply 'bag_object'/6 (L,Old,New,No,[N|[]],Term)
<[{Term,_15,'delete_object'}|L],Old,New,No,_X_N,_16> when call 'erlang':'=:=' (_16,Term) -> apply 'bag_object'/6 (L,Old,New,No,[],Term)
<L,Old,New,No,[],_X_Term> when 'true' -> apply 'eval_bag'/4 (L,Old,New,No)
<L,Old,New,No,[N|[]],_X_Term> when 'true' -> let <_6> = call 'erlang':'+' (No,1) in apply 'eval_bag'/4 (L,Old,[N|New],_6)
(<_12,_11,_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9,_8,_7})-|[{'function_name',{'bag_object',6}}] )-|['compiler_generated'] ) end
'eval_dupbag'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <L0 = [N = {Term1,_X_S1,Op}|L],Old0 = [O = {Term2,_12,_13}|Old],New,No> when 'true' -> let <_4> = call 'dets_utils':'cmp' (Term1,Term2) in case <Op,_4> of <'delete_object',-1> when 'true' -> apply 'eval_dupbag'/4 (L,Old0,New,No)
<'insert',-1> when 'true' -> let <_5> = call 'erlang':'+' (No,1) in apply 'dup_object'/6 (L,Old0,New,_5,Term1,[N|[]])
<_14,(0-|['compiler_generated'] )> when 'true' -> apply 'old_dup_object'/6 (L0,Old,New,No,Term1,[O|[]])
<_15,(1-|['compiler_generated'] )> when 'true' -> apply 'eval_dupbag'/4 (L0,Old,[O|New],No)
(<(_16-|['compiler_generated'] ),(_17-|['compiler_generated'] )> when 'true' -> let <_6> = {(_16-|['compiler_generated'] ),(_17-|['compiler_generated'] )} in primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<[{_X_Term1,_X_Seq1,'delete_object'}|L],Old = [],New,No> when 'true' -> apply 'eval_dupbag'/4 (L,Old,New,No)
<[N = {Term,_X_Seq1,'insert'}|L],Old = [],New,No> when 'true' -> let <_7> = call 'erlang':'+' (No,1) in apply 'dup_object'/6 (L,Old,New,_7,Term,[N|[]])
<L = [],[O|Old],New,No> when 'true' -> apply 'eval_dupbag'/4 (L,Old,[O|New],No)
<[],[],New,No> when 'true' -> {'ok',New,No}
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'eval_dupbag',4}}] )-|['compiler_generated'] ) end
'old_dup_object'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <L,[Obj = {Term,_12,_13}|Old],New,No,_14,N> when call 'erlang':'=:=' (_14,Term) -> apply 'old_dup_object'/6 (L,Old,New,No,Term,[Obj|N])
<L,Old,New,No,Term,N> when 'true' -> apply 'dup_object'/6 (L,Old,New,No,Term,N) end
'dup_object'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <[Obj = {Term,_16,'insert'}|L],Old,New,No,_17,Q> when call 'erlang':'=:=' (_17,Term) -> let <_6> = call 'erlang':'+' (No,1) in apply 'dup_object'/6 (L,Old,New,_6,Term,[Obj|Q])
<[{Term,_X_Seq,'delete_object'}|L],Old,New,No,_18,Q> when call 'erlang':'=:=' (_18,Term) -> let <_7> = call 'erlang':'length' (Q) in let <NewNo> = call 'erlang':'-' (No,_7) in apply 'dup_object'/6 (L,Old,New,NewNo,Term,[])
<L,Old,New,No,_X_Term,Q> when 'true' -> let <_9> = call 'erlang':'++' (Q,New) in apply 'eval_dupbag'/4 (L,Old,_9,No) end
'update_no_keys'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Head,Ws,0,0> when 'true' -> {Head,Ws}
<Head,Ws,DeltaObjects,DeltaKeys> when 'true' -> (case Head of (<({'head',_31,_32,_33,_34,_35,_rec125,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}-|['compiler_generated'] )> when 'true' -> let <NewNoKeys> = call 'erlang':'+' (_rec125,DeltaKeys) in (case Head of (<({'head',_60,_61,_62,_63,_rec126,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87}-|['compiler_generated'] )> when 'true' -> let <NewNoObject> = call 'erlang':'+' (_rec126,DeltaObjects) in case Head of <{'head',_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103,_104,_105,_106,_107,_108,_109,_110,_111,_112,_113,_114,_115,_116,_117}> when 'true' -> let <_12> = call 'erlang':'setelement' (7,Head,NewNoKeys) in let <_14> = call 'erlang':'setelement' (6,_12,NewNoObject) in let <_25> = case <> of <> when (try (let <_18> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_14,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_16-|['compiler_generated'] )> when 'true' -> (_16-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_19> = call 'erlang':'=:=' ((_18-|['compiler_generated'] ),'true') in let <_20> = call 'erlang':'element' (21,_14) in let <_21> = call 'erlang':'>' (NewNoKeys,_20) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_19,_21)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> Ws
<> when try let <_23> = call 'erlang':'div' (_rec125,256) in let <_22> = call 'erlang':'div' (NewNoKeys,256) in call 'erlang':'=:=' (_23,_22) of <Try> -> Try catch <T,R> -> 'false' -> Ws
<> when 'true' -> let <_24> = apply 'file_header'/3 (_14,0,0) in [{0,_24}|Ws] end in {_14,_25}
(<_118> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_59> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'slot_position'/1 = fun (_0) -> let <SegNo> = call 'erlang':'bsr' (_0,8) in let <_2> = call 'erlang':'bsr' (SegNo,9) in let <_3> = call 'erlang':'*' (4,_2) in let <PartPos> = call 'erlang':'+' (312,_3) in let <Part> = call ('erlang'-|['compiler_generated'] ):('get'-|['compiler_generated'] ) (PartPos) in let <_12> = call 'erlang':'band' (SegNo,511) in let <_13> = call 'erlang':'*' (4,_12) in let <Pos> = call 'erlang':'+' (Part,_13) in let <_19> = call ('erlang'-|['compiler_generated'] ):('get'-|['compiler_generated'] ) (Pos) in let <_16> = call 'erlang':'band' (_0,255) in let <_18> = call 'erlang':'*' (8,_16) in call 'erlang':'+' (_19,_18)
'check_pread2_arg'/2 = fun (_0,_1) -> case <_0,_1> of <[{_X_Pos,Sz}|[]],Head> when call 'erlang':'>' (Sz,81920) -> case apply 'check_pread_arg'/2 (Sz,Head) of <'true'> when 'true' -> 'ok'
<'false'> when 'true' -> let <Bad> = call 'dets_utils':'bad_object' ('check_pread2_arg',Sz) in let <_4> = call 'dets_utils':'corrupt_reason' (Head,Bad) in call 'erlang':'throw' (_4)
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<_X_ToRead,_X_Head> when 'true' -> 'ok' end
'check_pread_arg'/2 = fun (_0,_1) -> case <_0,_1> of <Sz,Head> when call 'erlang':'>' (Sz,81920) -> let <_3> = case Head of (<(_69 = ({('head'-|['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )-|['compiler_generated'] )> when (try (let <_5> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),_69) in (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_5,('undefined'-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (4294967296-|['compiler_generated'] )-|['compiler_generated'] )
(<_70> when ('true'-|['compiler_generated'] ) -> (case _70 of (<({('head'-|['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_rec128)-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] ) end in call 'erlang':'>=' (_3,Sz)
<_X_Sz,_X_Head> when 'true' -> 'true' end
'segp_cache'/2 = fun (_0,_1) -> call 'erlang':'put' (_0,_1)
'get_segp'/1 = fun (_0) -> call 'erlang':'get' (_0)
'arrpart_cache'/2 = fun (_0,_1) -> call 'erlang':'put' (_0,_1)
'get_arrpart'/1 = fun (_0) -> call 'erlang':'get' (_0)
'sz2pos'/1 = fun (_0) -> let <_1> = call 'dets_utils':'log2' (_0) in call 'erlang':'+' (1,_1)
'adjsz'/1 = fun (_0) -> call 'erlang':'-' (_0,1)
'maxobjsize'/1 = fun (_0) -> case _0 of <Head = {'head',_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}> when (try let <_5> = call 'erlang':'element' (8,Head) in call 'erlang':'=:=' (_5,'undefined') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 4294967296
<Head> when 'true' -> (case Head of (<({'head',_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when 'true' -> call 'erlang':'bsl' (1,_rec128)-|['compiler_generated'] )
(<_67> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'scan_objs'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <_8> = catch apply 'scan_skip'/8 (_1,_2,_3,_4,_5,_6,_7,0) in case _8 of <{'EXIT',_X_Reason}> when 'true' -> 'bad_object'
<Reply = {'more',_X_From1,_X_To,_X_L,_X_Ts,_X_R,Size}> when call 'erlang':'>' (Size,81920) -> case apply 'check_pread_arg'/2 (Size,_0) of <'true'> when 'true' -> Reply
<'false'> when 'true' -> 'bad_object'
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
<Reply> when 'true' -> Reply end
'scan_skip'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <From1> = call 'erlang':'+' (_1,_7) in case _0 of <_30> when call 'erlang':'>=' (From1,_2) -> case <> of <> when let <_9> = call 'erlang':'>' (From1,_2) in let <_10> = call 'erlang':'=:=' (_3,#{}#) in call 'erlang':'or' (_9,_10) -> {'more',From1,_2,_3,_4,_5,0}
<> when 'true' -> case _3 of <#{#<From2>(32,1,'integer',['unsigned'|['big']]),#<To1>(32,1,'integer',['unsigned'|['big']]),#<L1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Skip1> = call 'erlang':'-' (From2,_1) in apply 'scan_skip'/8 (_0,_1,To1,L1,_4,_5,_6,Skip1)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
<#{#<_31>(_7,8,'binary',['unsigned'|['big']]),#<_X_Size>(32,1,'integer',['unsigned'|['big']]),#<St>(32,1,'integer',['unsigned'|['big']]),#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#> when let <_13> = call 'erlang':'=/=' (St,305419896) in let <_14> = call 'erlang':'=/=' (St,61591023) in call 'erlang':'and' (_13,_14) -> let <_17> = call 'erlang':'+' (From1,12) in apply 'scan_skip'/8 (KO,_17,_2,_3,_4,_5,_6,2036)
<#{#<_32>(_7,8,'binary',['unsigned'|['big']]),#<Size>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<Sz>(32,1,'integer',['unsigned'|['big']]),#<KO>('all',8,'binary',['unsigned'|['big']])}#> when try let <_19> = call 'erlang':'-' (Size,12) in let <_18> = call 'erlang':'byte_size' (KO) in call 'erlang':'=<' (_19,_18) of <Try> -> Try catch <T,R> -> 'false' -> let <_20> = call 'erlang':'+' (From1,12) in apply 'bin2bins'/9 (KO,_20,_2,_3,_4,_5,_6,Size,Sz)
<#{#<_33>(_7,8,'binary',['unsigned'|['big']]),#<Size>(32,1,'integer',['unsigned'|['big']]),#<_X_St>(32,1,'integer',['unsigned'|['big']]),#<_X_Sz>(32,1,'integer',['unsigned'|['big']]),#<_X_KO>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> {'more',From1,_2,_3,_4,_5,Size}
<_34> when call 'erlang':'>=' (_7,0) -> {'more',From1,_2,_3,_4,_5,0}
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
'bin2bins'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <Bin,From,To,L,Ts,R,Type = 'set',Size,ObjSz0> when 'true' -> let <ObjsSz1> = call 'erlang':'-' (Size,ObjSz0) in case <> of <> when call 'erlang':'=:=' (ObjsSz1,8) -> apply 'slot_end'/9 (Bin,From,To,L,[Bin|Ts],R,Type,Size,1)
<> when 'true' -> let <ObjSz> = call 'erlang':'-' (ObjSz0,4) in case Bin of <#{#<_26>(ObjSz,8,'binary',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_12> = call 'erlang':'-' (ObjsSz1,NObjSz) in apply 'bins_set'/12 (T,From,To,L,[Bin|Ts],R,Type,Size,2,NObjSz,_12,Bin)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end end
<KO = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}#,From,To,L,Ts,R,Type,Size,Sz> when 'true' -> let <_15> = call 'erlang':'-' (Sz,ObjSz) in let <_16> = call 'erlang':'-' (_15,4) in let <_14> = call 'erlang':'-' (ObjSz,4) in let <_13> = call 'erlang':'-' (Size,Sz) in apply 'bins_bag'/13 (Bin,From,To,L,Ts,R,Type,Size,1,_16,_14,_13,KO)
(<_25,_24,_23,_22,_21,_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_25,_24,_23,_22,_21,_20,_19,_18,_17})-|[{'function_name',{'bin2bins',9}}] )-|['compiler_generated'] ) end
'bins_set'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_ObjSz0,8,KO> when 'true' -> apply 'slot_end'/9 (KO,From,To,L,[Bin|Ts],R,Type,Size,NoObjs)
<Bin,From,To,L,Ts,R,Type,Size,NoObjs,ObjSz0,ObjsSz,KO> when 'true' -> let <ObjSz> = call 'erlang':'-' (ObjSz0,4) in case Bin of <#{#<_28>(ObjSz,8,'binary',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_15> = call 'erlang':'+' (NoObjs,1) in let <_14> = call 'erlang':'-' (ObjsSz,NObjSz) in apply 'bins_set'/12 (T,From,To,L,[Bin|Ts],R,Type,Size,_15,NObjSz,_14,KO)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end end
'bins_bag'/13 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of <Bin,From,To,L,Ts,R,Type,Size,NoObjs,Sz,ObjSz,ObjsSz,KO> when call 'erlang':'>' (Sz,0) -> case Bin of <#{#<_36>(ObjSz,8,'binary',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_16> = call 'erlang':'+' (NoObjs,1) in let <_15> = call 'erlang':'-' (Sz,NObjSz) in let <_14> = call 'erlang':'-' (NObjSz,4) in apply 'bins_bag'/13 (T,From,To,L,[Bin|Ts],R,Type,Size,_16,_15,_14,ObjsSz,KO)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,_X_ObjSz,8,KO> when 'true' -> apply 'slot_end'/9 (KO,From,To,L,[Bin|Ts],R,Type,Size,NoObjs)
<Bin,From,To,L,Ts,R,Type,Size,NoObjs,_X_Z,ObjSz,ObjsSz,KO> when 'true' -> case Bin of <#{#<_37>(ObjSz,8,'binary',['unsigned'|['big']]),#<Sz>(32,1,'integer',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_22> = call 'erlang':'+' (NoObjs,1) in let <_20> = call 'erlang':'-' (Sz,NObjSz) in let <_21> = call 'erlang':'-' (_20,4) in let <_19> = call 'erlang':'-' (NObjSz,4) in let <_18> = call 'erlang':'-' (ObjsSz,Sz) in apply 'bins_bag'/13 (T,From,To,L,[Bin|Ts],R,Type,Size,_22,_21,_19,_18,KO)
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end end
'slot_end'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> let <_9> = call 'dets_utils':'log2' (_7) in let <_10> = call 'erlang':'bsl' (1,_9) in let <Skip> = call 'erlang':'-' (_10,12) in case <> of <> when call 'erlang':'>=' (_5,0) -> let <_12> = call 'erlang':'+' (_5,_7) in apply 'scan_skip'/8 (_0,_1,_2,_3,_4,_12,_6,Skip)
<> when 'true' -> case call 'erlang':'+' (_5,_8) of <R1> when call 'erlang':'>=' (R1,-1) -> let <From1> = call 'erlang':'+' (_1,Skip) in let <_16> = case _0 of <#{#<_28>(Skip,8,'binary',['unsigned'|['big']]),#<B>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> B
<_29> when 'true' -> #{}# end in {'stop',_16,From1,_2,_3,_4}
<R1> when 'true' -> apply 'scan_skip'/8 (_0,_1,_2,_3,_4,R1,_6,Skip) end end
'file_info'/1 = fun (_0) -> case _0 of <{'fileheader',_15,_16,_17,CP,Type,Version,M,Next,Kp,NoObjects,NoKeys,_18,_19,_20,_21,_22,_23,_24,_25,_26,N}> when 'true' -> case <> of <> when call 'erlang':'=:=' (CP,0) -> {'error','not_closed'}
<> when (try (let <_4> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_2-|['compiler_generated'] )> when 'true' -> (_2-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_5> = call 'erlang':'=:=' ((_4-|['compiler_generated'] ),'true') in let <_6> = call 'erlang':'element' (4,_0) in let <_7> = call 'erlang':'=/=' (_6,11259375) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_5,_7)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','not_a_dets_file'}
<> when (try (let <_10> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('fileheader'-|['compiler_generated'] ),(22-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_8-|['compiler_generated'] )> when 'true' -> (_8-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_11> = call 'erlang':'=:=' ((_10-|['compiler_generated'] ),'true') in let <_12> = call 'erlang':'element' (7,_0) in let <_13> = call 'erlang':'=/=' (_12,9) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_11,_13)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'error','bad_version'}
<> when 'true' -> {'ok',[{'closed_properly',CP}|[{'keypos',Kp}|[{'m',M}|[{'n',N}|[{'next',Next}|[{'no_objects',NoObjects}|[{'no_keys',NoKeys}|[{'type',Type}|[{'version',Version}|[]]]]]]]]]]} end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'v_segments'/1 = fun (_0) -> case _0 of <H = {'head',_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30}> when 'true' -> apply 'v_parts'/3 (H,0,0)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'v_segments',1}}] )-|['compiler_generated'] ) end
'v_parts'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_H,256,_X_SegNo> when 'true' -> 'done'
<H,PartNo,SegNo> when 'true' -> (case H of (<({'head',_20,_21,_22,_rec129,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47}-|['compiler_generated'] )> when 'true' -> let <_6> = call 'erlang':'*' (4,PartNo) in let <_12> = call 'erlang':'+' (312,_6) in let <PartPos> = call 'dets_utils':'read_4' (_rec129,_12) in case <> of <> when call 'erlang':'=:=' (PartPos,0) -> 'done'
<> when 'true' -> let <PartBin> = call 'dets_utils':'pread_n' (_rec129,PartPos,2048) in let <_16> = call 'erlang':'+' (PartNo,1) in apply 'v_segments'/4 (H,PartBin,_16,SegNo) end-|['compiler_generated'] )
(<_48> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'v_segments'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <H,#{}#,PartNo,SegNo> when 'true' -> apply 'v_parts'/3 (H,PartNo,SegNo)
<_X_H,#{#<0>(32,1,'integer',['unsigned'|['big']]),#<_9>('all',8,'binary',['unsigned'|['big']])}#,_X_PartNo,_X_SegNo> when 'true' -> 'done'
<H,#{#<Seg>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,PartNo,SegNo> when 'true' -> do call 'io':'format' ([60|[126|[119|[62|[83|[69|[71|[77|[69|[78|[84|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]],[Seg|[SegNo|[]]]) do apply 'v_segment'/4 (H,SegNo,Seg,0) let <_4> = call 'erlang':'+' (SegNo,1) in apply 'v_segments'/4 (H,T,PartNo,_4)
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'v_segments',4}}] )-|['compiler_generated'] ) end
'v_segment'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_H,_18,_X_SegPos,256> when 'true' -> 'done'
<H,SegNo,SegPos,SegSlot> when 'true' -> let <_4> = call 'erlang':'*' (SegNo,256) in let <Slot> = call 'erlang':'+' (SegSlot,_4) in let <_7> = call 'erlang':'*' (8,SegSlot) in let <BucketP> = call 'erlang':'+' (SegPos,_7) in let <_11> = catch (case H of (<({'head',_19,_20,_21,_22,_23,_24,_25,_26,_rec130,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}-|['compiler_generated'] )> when 'true' -> apply 'read_bucket'/3 (H,BucketP,_rec130)-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) in do case _11 of <{'EXIT',Reason}> when 'true' -> do call 'dets_utils':'vformat' ([42|[42|[32|[100|[101|[116|[115|[58|[32|[67|[111|[114|[114|[117|[112|[116|[32|[111|[114|[32|[116|[114|[117|[110|[99|[97|[116|[101|[100|[32|[100|[101|[116|[115|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]) call 'io':'format' ([126|[110|[69|[82|[82|[79|[82|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]],[Reason|[]])
<[]> when 'true' -> 'ok'
<{Size,CollP,Objects}> when 'true' -> call 'io':'format' ([32|[32|[32|[60|[126|[119|[62|[126|[119|[58|[32|[60|[126|[119|[58|[126|[112|[62|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]],[BucketP|[Slot|[CollP|[Size|[Objects|[]]]]]])
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end let <_13> = call 'erlang':'+' (SegSlot,1) in apply 'v_segment'/4 (H,SegNo,SegPos,_13) end
'read_bucket'/3 = fun (_0,_1,_2) -> let <MaxSize> = case _0 of (<(_69 = ({('head'-|['compiler_generated'] ),_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}-|['compiler_generated'] )-|['compiler_generated'] )> when (try (let <_5> = call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) ((8-|['compiler_generated'] ),_69) in (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_5,('undefined'-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) -> (4294967296-|['compiler_generated'] )-|['compiler_generated'] )
(<_70> when ('true'-|['compiler_generated'] ) -> (case _70 of (<({('head'-|['compiler_generated'] ),_39,_40,_41,_42,_43,_44,_rec128,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_rec128)-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] ) end in case call 'dets_utils':'ipread' (_0,_1,MaxSize) of <{'ok',{Size,Pointer,#{#<_10>(32,1,'integer',['unsigned'|['big']]),#<_X_Status>(32,1,'integer',['unsigned'|['big']]),#<KeysObjs>('all',8,'binary',['unsigned'|['big']])}#}}> when call 'erlang':'=:=' (_10,Size) -> let <Objs> = apply 'bin2objs'/3 (KeysObjs,_2,[]) in let <_5> = call 'lists':'reverse' (Objs) in {Size,Pointer,_5}
<[]> when 'true' -> []
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
'per_key'/2 = fun (_0,_1) -> case <_0,_1> of <Head,B = #{#<BinSize>(32,1,'integer',['unsigned'|['big']]),#<305419896>(32,1,'integer',['unsigned'|['big']]),#<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_2> = call 'erlang':'byte_size' (B) in case call 'erlang':'=:=' (_2,BinSize) of <'true'> when 'true' -> case <> of <> when (try (let <_6> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (Head,('head'-|['compiler_generated'] ),(30-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_4-|['compiler_generated'] )> when 'true' -> (_4-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_7> = call 'erlang':'=:=' ((_6-|['compiler_generated'] ),'true') in let <_8> = call 'erlang':'element' (10,Head) in let <_9> = call 'erlang':'=:=' (_8,'set') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_7,_9)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Head of (<({'head',_16,_17,_18,_19,_20,_21,_22,_23,_24,_rec131,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43}-|['compiler_generated'] )> when 'true' -> apply 'per_set_key'/3 (Bin,_rec131,[])-|['compiler_generated'] )
(<_44> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<> when 'true' -> (case Head of (<({'head',_45,_46,_47,_48,_49,_50,_51,_52,_53,_rec132,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72}-|['compiler_generated'] )> when 'true' -> apply 'per_bag_key'/3 (Bin,_rec132,[])-|['compiler_generated'] )
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14})-|[{'function_name',{'per_key',2}}] )-|['compiler_generated'] ) end
'per_set_key'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' -> case B of <#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (T) in let <Key> = call 'erlang':'element' (KeyPos,Term) in let <Item> = {Term,-67108864,KeyBin} in apply 'per_set_key'/3 (R,KeyPos,[{Key,Size,KeyBin,Item,[]}|L])
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<#{}#,KeyPos,L> when call 'erlang':'is_integer' (KeyPos) -> call 'lists':'reverse' (L)
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'per_set_key',3}}] )-|['compiler_generated'] ) end
'per_bag_key'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <B = #{#<Size>(32,1,'integer',['unsigned'|['big']]),#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,KeyPos,L> when 'true' -> case B of <#{#<KeyBin>(Size,8,'binary',['unsigned'|['big']]),#<R>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <ObjSz1> = call 'erlang':'-' (ObjSz,4) in let <_5> = call 'erlang':'-' (Size,ObjSz) in let <Size1> = call 'erlang':'-' (_5,4) in case T of <#{#<_17>(ObjSz1,8,'binary',['unsigned'|['big']]),#<KeyObjs>(Size1,8,'binary',['unsigned'|['big']]),#<_18>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case B of <#{#<_X_Size>(32,1,'integer',['unsigned'|['big']]),#<Bin>(ObjSz,8,'binary',['unsigned'|['big']]),#<_19>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (T) in let <Key> = call 'erlang':'element' (KeyPos,Term) in let <Item> = {Term,-67108864,Bin} in apply 'per_bag_key'/3 (R,KeyPos,[{Key,Size,KeyBin,Item,KeyObjs}|L])
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<#{}#,KeyPos,L> when call 'erlang':'is_integer' (KeyPos) -> call 'lists':'reverse' (L)
(<_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14})-|[{'function_name',{'per_bag_key',3}}] )-|['compiler_generated'] ) end
'binobjs2terms'/1 = fun (_0) -> case _0 of <B = #{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_4> = call 'erlang':'byte_size' (B) in let <_5> = call 'erlang':'-' (_4,ObjSz) in apply 'binobjs2terms'/6 (B,T,ObjSz,_5,-67108863,[])
<B = []> when 'true' -> B
<#{}#> when 'true' -> []
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'binobjs2terms',1}}] )-|['compiler_generated'] ) end
'binobjs2terms'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Bin,Obj,_X_ObjSz,_X_Size = 0,N,L> when 'true' -> let <_6> = call 'erlang':'binary_to_term' (Obj) in call 'lists':'reverse' (L,[{_6,N,Bin}|[]])
<Bin,Bin1,ObjSz,Size,N,L> when 'true' -> case Bin of <#{#<B>(ObjSz,8,'binary',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> case T of <#{#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_9> = call 'erlang':'binary_to_term' (Bin1) in let <Item> = {_9,N,B} in let <_12> = call 'erlang':'-' (Size,NObjSz) in let <_11> = call 'erlang':'+' (N,1) in apply 'binobjs2terms'/6 (T,T1,NObjSz,_12,_11,[Item|L])
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'bin2objs'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <KeysObjs,'set',Ts> when 'true' -> case KeysObjs of <#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_6> = call 'erlang':'-' (ObjSz,4) in let <_4> = call 'erlang':'byte_size' (KeysObjs) in let <_5> = call 'erlang':'-' (_4,ObjSz) in apply 'bin2objs'/4 (T,_6,_5,Ts)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<KeysObjs,_X_Type,Ts> when 'true' -> apply 'bin2objs2'/2 (KeysObjs,Ts) end
'bin2objs2'/2 = fun (_0,_1) -> case <_0,_1> of <#{#<Size>(32,1,'integer',['unsigned'|['big']]),#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,Ts> when 'true' -> let <_4> = call 'erlang':'-' (ObjSz,4) in let <_2> = call 'erlang':'-' (Size,ObjSz) in let <_3> = call 'erlang':'-' (_2,4) in apply 'bin2objs'/4 (T,_4,_3,Ts)
<#{}#,Ts> when 'true' -> Ts
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'bin2objs2',2}}] )-|['compiler_generated'] ) end
'bin2objs'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Bin,ObjSz,_X_Size = 0,Ts> when 'true' -> case Bin of <#{#<_14>(ObjSz,8,'binary',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_5> = call 'erlang':'binary_to_term' (Bin) in apply 'bin2objs2'/2 (T,[_5|Ts])
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<Bin,ObjSz,Size,Ts> when 'true' -> case Bin of <#{#<_15>(ObjSz,8,'binary',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <_9> = call 'erlang':'-' (NObjSz,4) in let <_8> = call 'erlang':'-' (Size,NObjSz) in let <_7> = call 'erlang':'binary_to_term' (Bin) in apply 'bin2objs'/4 (T,_9,_8,[_7|Ts])
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end end
'bin2keybins'/2 = fun (_0,_1) -> case <_0,_1> of <KeysObjs,Head = {'head',_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46}> when (try let <_6> = call 'erlang':'element' (10,Head) in call 'erlang':'=:=' (_6,'set') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> case KeysObjs of <#{#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> (case Head of (<({'head',_47,_48,_49,_50,_51,_52,_53,_54,_55,_rec133,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74}-|['compiler_generated'] )> when 'true' -> let <_11> = call 'erlang':'-' (ObjSz,4) in let <_9> = call 'erlang':'byte_size' (KeysObjs) in let <_10> = call 'erlang':'-' (_9,ObjSz) in apply 'bin2keybins'/5 (T,_rec133,_11,_10,[])-|['compiler_generated'] )
(<_75> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<KeysObjs,Head> when 'true' -> (case Head of (<({'head',_76,_77,_78,_79,_80,_81,_82,_83,_84,_rec134,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_100,_101,_102,_103}-|['compiler_generated'] )> when 'true' -> apply 'bin2keybins2'/3 (KeysObjs,_rec134,[])-|['compiler_generated'] )
(<_104> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','head'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'bin2keybins2'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <#{#<Size>(32,1,'integer',['unsigned'|['big']]),#<ObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#,Kp,L> when 'true' -> let <_5> = call 'erlang':'-' (ObjSz,4) in let <_3> = call 'erlang':'-' (Size,ObjSz) in let <_4> = call 'erlang':'-' (_3,4) in apply 'bin2keybins'/5 (T,Kp,_5,_4,L)
<#{}#,Kp,L> when call 'erlang':'is_integer' (Kp) -> call 'lists':'reverse' (L)
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'bin2keybins2',3}}] )-|['compiler_generated'] ) end
'bin2keybins'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Bin,Kp,ObjSz,_X_Size = 0,L> when 'true' -> case Bin of <#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (Obj) in let <_7> = call 'erlang':'element' (Kp,Term) in apply 'bin2keybins2'/3 (T,Kp,[{_7,Obj}|L])
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<Bin,Kp,ObjSz,Size,L> when 'true' -> case Bin of <#{#<Obj>(ObjSz,8,'binary',['unsigned'|['big']]),#<NObjSz>(32,1,'integer',['unsigned'|['big']]),#<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' -> let <Term> = call 'erlang':'binary_to_term' (Obj) in let <_12> = call 'erlang':'-' (NObjSz,4) in let <_11> = call 'erlang':'-' (Size,NObjSz) in let <_10> = call 'erlang':'element' (Kp,Term) in apply 'bin2keybins'/5 (T,Kp,_12,_11,[{_10,Obj}|L])
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('dets_v9')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('dets_v9',_0) end