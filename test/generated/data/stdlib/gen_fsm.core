module 'gen_fsm' ['behaviour_info'/1,'cancel_timer'/1,'enter_loop'/4,'enter_loop'/5,'enter_loop'/6,'format_log'/1,'format_log'/2,'format_status'/2,'init_it'/6,'module_info'/0,'module_info'/1,'reply'/2,'send_all_state_event'/2,'send_event'/2,'send_event_after'/2,'start'/3,'start'/4,'start_link'/3,'start_link'/4,'start_timer'/2,'stop'/1,'stop'/3,'sync_send_all_state_event'/2,'sync_send_all_state_event'/3,'sync_send_event'/2,'sync_send_event'/3,'system_code_change'/4,'system_continue'/3,'system_get_state'/1,'system_replace_state'/2,'system_terminate'/4,'wake_hib'/7] attributes [ 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],1}]
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],109}]
, 'callback' = [{{'init',1},[{'type',136,'fun',[{'type',136,'product',[{'ann_type',136,[{'var',136,'Args'}|[{'type',136,'term',[]}]]}]}|[{'type',137,'union',[{'type',137,'tuple',[{'atom',137,'ok'}|[{'ann_type',137,[{'var',137,'StateName'}|[{'type',137,'atom',[]}]]}|[{'ann_type',137,[{'var',137,'StateData'}|[{'type',137,'term',[]}]]}]]]}|[{'type',138,'tuple',[{'atom',138,'ok'}|[{'ann_type',138,[{'var',138,'StateName'}|[{'type',138,'atom',[]}]]}|[{'ann_type',138,[{'var',138,'StateData'}|[{'type',138,'term',[]}]]}|[{'type',138,'union',[{'type',138,'timeout',[]}|[{'atom',138,'hibernate'}]]}]]]]}|[{'type',139,'tuple',[{'atom',139,'stop'}|[{'ann_type',139,[{'var',139,'Reason'}|[{'type',139,'term',[]}]]}]]}|[{'atom',139,'ignore'}]]]]}]]}]}]
, 'callback' = [{{'handle_event',3},[{'type',140,'fun',[{'type',140,'product',[{'ann_type',140,[{'var',140,'Event'}|[{'type',140,'term',[]}]]}|[{'ann_type',140,[{'var',140,'StateName'}|[{'type',140,'atom',[]}]]}|[{'ann_type',141,[{'var',141,'StateData'}|[{'type',141,'term',[]}]]}]]]}|[{'type',142,'union',[{'type',142,'tuple',[{'atom',142,'next_state'}|[{'ann_type',142,[{'var',142,'NextStateName'}|[{'type',142,'atom',[]}]]}|[{'ann_type',142,[{'var',142,'NewStateData'}|[{'type',142,'term',[]}]]}]]]}|[{'type',143,'tuple',[{'atom',143,'next_state'}|[{'ann_type',143,[{'var',143,'NextStateName'}|[{'type',143,'atom',[]}]]}|[{'ann_type',143,[{'var',143,'NewStateData'}|[{'type',143,'term',[]}]]}|[{'type',144,'union',[{'type',144,'timeout',[]}|[{'atom',144,'hibernate'}]]}]]]]}|[{'type',145,'tuple',[{'atom',145,'stop'}|[{'ann_type',145,[{'var',145,'Reason'}|[{'type',145,'term',[]}]]}|[{'ann_type',145,[{'var',145,'NewStateData'}|[{'type',145,'term',[]}]]}]]]}]]]}]]}]}]
, 'callback' = [{{'handle_sync_event',4},[{'type',146,'fun',[{'type',146,'product',[{'ann_type',146,[{'var',146,'Event'}|[{'type',146,'term',[]}]]}|[{'ann_type',146,[{'var',146,'From'}|[{'type',146,'tuple',[{'type',146,'pid',[]}|[{'ann_type',146,[{'var',146,'Tag'}|[{'type',146,'term',[]}]]}]]}]]}|[{'ann_type',147,[{'var',147,'StateName'}|[{'type',147,'atom',[]}]]}|[{'ann_type',147,[{'var',147,'StateData'}|[{'type',147,'term',[]}]]}]]]]}|[{'type',148,'union',[{'type',148,'tuple',[{'atom',148,'reply'}|[{'ann_type',148,[{'var',148,'Reply'}|[{'type',148,'term',[]}]]}|[{'ann_type',148,[{'var',148,'NextStateName'}|[{'type',148,'atom',[]}]]}|[{'ann_type',148,[{'var',148,'NewStateData'}|[{'type',148,'term',[]}]]}]]]]}|[{'type',149,'tuple',[{'atom',149,'reply'}|[{'ann_type',149,[{'var',149,'Reply'}|[{'type',149,'term',[]}]]}|[{'ann_type',149,[{'var',149,'NextStateName'}|[{'type',149,'atom',[]}]]}|[{'ann_type',149,[{'var',149,'NewStateData'}|[{'type',149,'term',[]}]]}|[{'type',150,'union',[{'type',150,'timeout',[]}|[{'atom',150,'hibernate'}]]}]]]]]}|[{'type',151,'tuple',[{'atom',151,'next_state'}|[{'ann_type',151,[{'var',151,'NextStateName'}|[{'type',151,'atom',[]}]]}|[{'ann_type',151,[{'var',151,'NewStateData'}|[{'type',151,'term',[]}]]}]]]}|[{'type',152,'tuple',[{'atom',152,'next_state'}|[{'ann_type',152,[{'var',152,'NextStateName'}|[{'type',152,'atom',[]}]]}|[{'ann_type',152,[{'var',152,'NewStateData'}|[{'type',152,'term',[]}]]}|[{'type',153,'union',[{'type',153,'timeout',[]}|[{'atom',153,'hibernate'}]]}]]]]}|[{'type',154,'tuple',[{'atom',154,'stop'}|[{'ann_type',154,[{'var',154,'Reason'}|[{'type',154,'term',[]}]]}|[{'ann_type',154,[{'var',154,'Reply'}|[{'type',154,'term',[]}]]}|[{'ann_type',154,[{'var',154,'NewStateData'}|[{'type',154,'term',[]}]]}]]]]}|[{'type',155,'tuple',[{'atom',155,'stop'}|[{'ann_type',155,[{'var',155,'Reason'}|[{'type',155,'term',[]}]]}|[{'ann_type',155,[{'var',155,'NewStateData'}|[{'type',155,'term',[]}]]}]]]}]]]]]]}]]}]}]
, 'callback' = [{{'handle_info',3},[{'type',156,'fun',[{'type',156,'product',[{'ann_type',156,[{'var',156,'Info'}|[{'type',156,'term',[]}]]}|[{'ann_type',156,[{'var',156,'StateName'}|[{'type',156,'atom',[]}]]}|[{'ann_type',157,[{'var',157,'StateData'}|[{'type',157,'term',[]}]]}]]]}|[{'type',158,'union',[{'type',158,'tuple',[{'atom',158,'next_state'}|[{'ann_type',158,[{'var',158,'NextStateName'}|[{'type',158,'atom',[]}]]}|[{'ann_type',158,[{'var',158,'NewStateData'}|[{'type',158,'term',[]}]]}]]]}|[{'type',159,'tuple',[{'atom',159,'next_state'}|[{'ann_type',159,[{'var',159,'NextStateName'}|[{'type',159,'atom',[]}]]}|[{'ann_type',159,[{'var',159,'NewStateData'}|[{'type',159,'term',[]}]]}|[{'type',160,'union',[{'type',160,'timeout',[]}|[{'atom',160,'hibernate'}]]}]]]]}|[{'type',161,'tuple',[{'atom',161,'stop'}|[{'ann_type',161,[{'var',161,'Reason'}|[{'type',161,'union',[{'atom',161,'normal'}|[{'type',161,'term',[]}]]}]]}|[{'ann_type',161,[{'var',161,'NewStateData'}|[{'type',161,'term',[]}]]}]]]}]]]}]]}]}]
, 'callback' = [{{'terminate',3},[{'type',162,'fun',[{'type',162,'product',[{'ann_type',162,[{'var',162,'Reason'}|[{'type',162,'union',[{'atom',162,'normal'}|[{'atom',162,'shutdown'}|[{'type',162,'tuple',[{'atom',162,'shutdown'}|[{'type',162,'term',[]}]]}|[{'type',163,'term',[]}]]]]}]]}|[{'ann_type',163,[{'var',163,'StateName'}|[{'type',163,'atom',[]}]]}|[{'ann_type',163,[{'var',163,'StateData'}|[{'type',163,'term',[]}]]}]]]}|[{'type',164,'term',[]}]]}]}]
, 'callback' = [{{'code_change',4},[{'type',165,'fun',[{'type',165,'product',[{'ann_type',165,[{'var',165,'OldVsn'}|[{'type',165,'union',[{'type',165,'term',[]}|[{'type',165,'tuple',[{'atom',165,'down'}|[{'type',165,'term',[]}]]}]]}]]}|[{'ann_type',165,[{'var',165,'StateName'}|[{'type',165,'atom',[]}]]}|[{'ann_type',166,[{'var',166,'StateData'}|[{'type',166,'term',[]}]]}|[{'ann_type',166,[{'var',166,'Extra'}|[{'type',166,'term',[]}]]}]]]]}|[{'type',167,'tuple',[{'atom',167,'ok'}|[{'ann_type',167,[{'var',167,'NextStateName'}|[{'type',167,'atom',[]}]]}|[{'ann_type',167,[{'var',167,'NewStateData'}|[{'type',167,'term',[]}]]}]]]}]]}]}]
, 'callback' = [{{'format_status',2},[{'type',168,'bounded_fun',[{'type',168,'fun',[{'type',168,'product',[{'var',168,'Opt'}|[{'var',168,'StatusData'}]]}|[{'var',168,'Status'}]]}|[[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Opt'}|[{'type',169,'union',[{'atom',169,'normal'}|[{'atom',169,'terminate'}]]}]]]]}|[{'type',170,'constraint',[{'atom',170,'is_subtype'}|[[{'var',170,'StatusData'}|[{'type',170,'list',[{'type',170,'union',[{'var',170,'PDict'}|[{'var',170,'State'}]]}]}]]]]}|[{'type',171,'constraint',[{'atom',171,'is_subtype'}|[[{'var',171,'PDict'}|[{'type',171,'list',[{'type',171,'tuple',[{'ann_type',171,[{'var',171,'Key'}|[{'type',171,'term',[]}]]}|[{'ann_type',171,[{'var',171,'Value'}|[{'type',171,'term',[]}]]}]]}]}]]]]}|[{'type',172,'constraint',[{'atom',172,'is_subtype'}|[[{'var',172,'State'}|[{'type',172,'term',[]}]]]]}|[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Status'}|[{'type',173,'term',[]}]]]]}]]]]]]]}]}]
, 'optional_callbacks' = [{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]
, 'spec' = [{{'system_terminate',4},[{'type',411,'fun',[{'type',411,'product',[{'type',411,'term',[]}|[{'var',411,'_'}|[{'var',411,'_'}|[{'type',411,'nonempty_list',[{'type',411,'term',[]}]}]]]]}|[{'type',411,'no_return',[]}]]}]}]
, 'spec' = [{{'terminate',8},[{'type',577,'fun',[{'type',577,'product',[{'type',577,'term',[]}|[{'var',577,'_'}|[{'var',577,'_'}|[{'var',577,'_'}|[{'type',577,'atom',[]}|[{'var',577,'_'}|[{'var',577,'_'}|[{'var',577,'_'}]]]]]]]]}|[{'type',577,'no_return',[]}]]}]}] ] 'start'/3 = fun (_0,_1,_2) -> call 'gen':'start' ('gen_fsm','nolink',_0,_1,_2)
'start'/4 = fun (_0,_1,_2,_3) -> call 'gen':'start' ('gen_fsm','nolink',_0,_1,_2,_3)
'start_link'/3 = fun (_0,_1,_2) -> call 'gen':'start' ('gen_fsm','link',_0,_1,_2)
'start_link'/4 = fun (_0,_1,_2,_3) -> call 'gen':'start' ('gen_fsm','link',_0,_1,_2,_3)
'stop'/1 = fun (_0) -> call 'gen':'stop' (_0)
'stop'/3 = fun (_0,_1,_2) -> call 'gen':'stop' (_0,_1,_2)
'send_event'/2 = fun (_0,_1) -> case <_0,_1> of <{'global',Name},Event> when 'true' -> do try call 'global':'send' (Name,{'$gen_event',Event}) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<{'via',Mod,Name},Event> when 'true' -> do try call Mod:'send' (Name,{'$gen_event',Event}) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<Name,Event> when 'true' -> do call 'erlang':'!' (Name,{'$gen_event',Event}) 'ok' end
'sync_send_event'/2 = fun (_0,_1) -> let <_2> = catch call 'gen':'call' (_0,'$gen_sync_event',_1) in case _2 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_fsm','sync_send_event',[_0|[_1|[]]]}})
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'sync_send_event'/3 = fun (_0,_1,_2) -> let <_3> = catch call 'gen':'call' (_0,'$gen_sync_event',_1,_2) in case _3 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_fsm','sync_send_event',[_0|[_1|[_2|[]]]]}})
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'send_all_state_event'/2 = fun (_0,_1) -> case <_0,_1> of <{'global',Name},Event> when 'true' -> do try call 'global':'send' (Name,{'$gen_all_state_event',Event}) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<{'via',Mod,Name},Event> when 'true' -> do try call Mod:'send' (Name,{'$gen_all_state_event',Event}) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<Name,Event> when 'true' -> do call 'erlang':'!' (Name,{'$gen_all_state_event',Event}) 'ok' end
'sync_send_all_state_event'/2 = fun (_0,_1) -> let <_2> = catch call 'gen':'call' (_0,'$gen_sync_all_state_event',_1) in case _2 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_fsm','sync_send_all_state_event',[_0|[_1|[]]]}})
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'sync_send_all_state_event'/3 = fun (_0,_1,_2) -> let <_3> = catch call 'gen':'call' (_0,'$gen_sync_all_state_event',_1,_2) in case _3 of <{'ok',Res}> when 'true' -> Res
<{'EXIT',Reason}> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_fsm','sync_send_all_state_event',[_0|[_1|[_2|[]]]]}})
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'start_timer'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in call 'erlang':'start_timer' (_0,_2,{'$gen_timer',_1})
'send_event_after'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in call 'erlang':'start_timer' (_0,_2,{'$gen_event',_1})
'cancel_timer'/1 = fun (_0) -> case call 'erlang':'cancel_timer' (_0) of <'false'> when 'true' -> receive <{'timeout',_3,_4}> when call 'erlang':'=:=' (_3,_0) -> 0 after 0 -> 'false'
<RemainingTime> when 'true' -> RemainingTime end
'enter_loop'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'self' () in apply 'enter_loop'/6 (_0,_1,_2,_3,_4,'infinity')
'enter_loop'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Mod,Options,StateName,StateData,ServerName = {Scope,_13}> when let <_5> = call 'erlang':'=:=' (Scope,'local') in let <_6> = call 'erlang':'=:=' (Scope,'global') in call 'erlang':'or' (_5,_6) -> apply 'enter_loop'/6 (Mod,Options,StateName,StateData,ServerName,'infinity')
<Mod,Options,StateName,StateData,ServerName = {'via',_14,_15}> when 'true' -> apply 'enter_loop'/6 (Mod,Options,StateName,StateData,ServerName,'infinity')
<Mod,Options,StateName,StateData,Timeout> when 'true' -> let <_7> = call 'erlang':'self' () in apply 'enter_loop'/6 (Mod,Options,StateName,StateData,_7,Timeout) end
'enter_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <Name> = call 'gen':'get_proc_name' (_4) in let <Parent> = call 'gen':'get_parent' () in let <Debug> = call 'gen':'debug_options' (Name,_1) in let <HibernateAfterTimeout> = call 'gen':'hibernate_after' (_1) in apply 'loop'/8 (Parent,Name,_2,_3,_0,_5,HibernateAfterTimeout,Debug)
'init_it'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Starter,'self',Name,Mod,Args,Options> when 'true' -> let <_6> = call 'erlang':'self' () in apply 'init_it'/6 (Starter,_6,Name,Mod,Args,Options)
<Starter,Parent,Name0,Mod,Args,Options> when 'true' -> let <Name> = call 'gen':'name' (Name0) in let <Debug> = call 'gen':'debug_options' (Name,Options) in let <HibernateAfterTimeout> = call 'gen':'hibernate_after' (Options) in let <_10> = catch call Mod:'init' (Args) in case _10 of <{'ok',StateName,StateData}> when 'true' -> let <_11> = call 'erlang':'self' () in do call 'proc_lib':'init_ack' (Starter,{'ok',_11}) apply 'loop'/8 (Parent,Name,StateName,StateData,Mod,'infinity',HibernateAfterTimeout,Debug)
<{'ok',StateName,StateData,Timeout}> when 'true' -> let <_12> = call 'erlang':'self' () in do call 'proc_lib':'init_ack' (Starter,{'ok',_12}) apply 'loop'/8 (Parent,Name,StateName,StateData,Mod,Timeout,HibernateAfterTimeout,Debug)
<{'stop',Reason}> when 'true' -> do call 'gen':'unregister_name' (Name0) do call 'proc_lib':'init_ack' (Starter,{'error',Reason}) call 'erlang':'exit' (Reason)
<'ignore'> when 'true' -> do call 'gen':'unregister_name' (Name0) do call 'proc_lib':'init_ack' (Starter,'ignore') call 'erlang':'exit' ('normal')
<{'EXIT',Reason}> when 'true' -> do call 'gen':'unregister_name' (Name0) do call 'proc_lib':'init_ack' (Starter,{'error',Reason}) call 'erlang':'exit' (Reason)
<Else> when 'true' -> let <Error> = {'bad_return_value',Else} in do call 'proc_lib':'init_ack' (Starter,{'error',Error}) call 'erlang':'exit' (Error) end end
'loop'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Parent,Name,StateName,StateData,Mod,'hibernate',HibernateAfterTimeout,Debug> when 'true' -> call 'proc_lib':'hibernate' ('gen_fsm','wake_hib',[Parent|[Name|[StateName|[StateData|[Mod|[HibernateAfterTimeout|[Debug|[]]]]]]]])
<Parent,Name,StateName,StateData,Mod,'infinity',HibernateAfterTimeout,Debug> when 'true' -> receive <Msg> when 'true' -> apply 'decode_msg'/10 (Msg,Parent,Name,StateName,StateData,Mod,'infinity',HibernateAfterTimeout,Debug,'false') after HibernateAfterTimeout -> apply 'loop'/8 (Parent,Name,StateName,StateData,Mod,'hibernate',HibernateAfterTimeout,Debug)
<Parent,Name,StateName,StateData,Mod,Time,HibernateAfterTimeout,Debug> when 'true' -> let <_8> = receive <Input> when 'true' -> Input after Time -> {'$gen_event','timeout'} in apply 'decode_msg'/10 (_8,Parent,Name,StateName,StateData,Mod,Time,HibernateAfterTimeout,Debug,'false') end
'wake_hib'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <_7> = receive <Input> when 'true' -> Input after 'infinity' -> 'true' in apply 'decode_msg'/10 (_7,_0,_1,_2,_3,_4,'hibernate',_5,_6,'true')
'decode_msg'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case _0 of <{'system',From,Req}> when 'true' -> call 'sys':'handle_system_msg' (Req,From,_1,'gen_fsm',_8,[_2|[_3|[_4|[_5|[_6|[_7|[]]]]]]],_9)
<{'EXIT',_23,Reason}> when call 'erlang':'=:=' (_23,_1) -> apply 'terminate'/8 (Reason,_2,'undefined',_0,_5,_3,_4,_8)
<_X_Msg> when call 'erlang':'=:=' (_8,[]) -> apply 'handle_msg'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<_X_Msg> when 'true' -> let <_10> = 'print_event'/3 in let <Debug1> = call 'sys':'handle_debug' (_8,_10,_2,{'in',_0,_3}) in apply 'handle_msg'/9 (_0,_1,_2,_3,_4,_5,_6,_7,Debug1) end
'system_continue'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Parent,Debug,[Name|[StateName|[StateData|[Mod|[Time|[HibernateAfterTimeout|[]]]]]]]> when 'true' -> apply 'loop'/8 (Parent,Name,StateName,StateData,Mod,Time,HibernateAfterTimeout,Debug)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'system_continue',3}}] )-|['compiler_generated'] ) end
'system_terminate'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reason,_X_Parent,Debug,[Name|[StateName|[StateData|[Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]> when 'true' -> apply 'terminate'/8 (Reason,Name,'undefined',[],Mod,StateName,StateData,Debug)
(<_7,_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5,_4})-|[{'function_name',{'system_terminate',4}}] )-|['compiler_generated'] ) end
'system_code_change'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[Name|[StateName|[StateData|_@r0 = [Mod|[Time|[HibernateAfterTimeout|[]]]]]]],_X_Module,OldVsn,Extra> when 'true' -> let <_4> = catch call Mod:'code_change' (OldVsn,StateName,StateData,Extra) in case _4 of <{'ok',NewStateName,NewStateData}> when 'true' -> {'ok',[Name|[NewStateName|[NewStateData|_@r0]]]}
<Else> when 'true' -> Else end
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'system_code_change',4}}] )-|['compiler_generated'] ) end
'system_get_state'/1 = fun (_0) -> case _0 of <[_X_Name|[StateName|[StateData|[_X_Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]> when 'true' -> {'ok',{StateName,StateData}}
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'system_get_state',1}}] )-|['compiler_generated'] ) end
'system_replace_state'/2 = fun (_0,_1) -> case <_0,_1> of <StateFun,[Name|[StateName|[StateData|_@r0 = [Mod|[Time|[HibernateAfterTimeout|[]]]]]]]> when 'true' -> case apply StateFun ({StateName,StateData}) of <Result = {NStateName,NStateData}> when 'true' -> {'ok',Result,[Name|[NStateName|[NStateData|_@r0]]]}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'system_replace_state',2}}] )-|['compiler_generated'] ) end
'print_event'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Dev,{'in',Msg,StateName},Name> when 'true' -> case Msg of <{'$gen_event',Event}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[StateName|[]]]])
<{'$gen_all_state_event',Event}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[97|[108|[108|[95|[115|[116|[97|[116|[101|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[StateName|[]]]])
<{'$gen_sync_event',{From,_X_Tag},Event}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[115|[121|[110|[99|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[From|[StateName|[]]]]])
<{'$gen_sync_all_state_event',{From,_X_Tag},Event}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[115|[121|[110|[99|[95|[97|[108|[108|[95|[115|[116|[97|[116|[101|[95|[101|[118|[101|[110|[116|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[From|[StateName|[]]]]])
<{'timeout',Ref,{'$gen_timer',Message}}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[{'timeout',Ref,Message}|[StateName|[]]]])
<{'timeout',_X_Ref,{'$gen_event',Event}}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[StateName|[]]]])
<_7> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Msg|[StateName|[]]]]) end
<Dev,{'out',Msg,{To,_X_Tag},StateName},Name> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[101|[110|[116|[32|[126|[116|[112|[32|[116|[111|[32|[126|[116|[119|[126|[110|[32|[32|[32|[32|[32|[32|[97|[110|[100|[32|[115|[119|[105|[116|[99|[104|[101|[100|[32|[116|[111|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Msg|[To|[StateName|[]]]]])
<Dev,{'noreply',StateName},Name> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[119|[105|[116|[99|[104|[101|[100|[32|[116|[111|[32|[115|[116|[97|[116|[101|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[StateName|[]]])
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'print_event',3}}] )-|['compiler_generated'] ) end
'handle_msg'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <From> = apply 'from'/1 (_0) in let <_9> = catch apply 'dispatch'/4 (_0,_5,_3,_4) in case _9 of <{'next_state',NStateName,NStateData}> when 'true' -> apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,'infinity',_7,[])
<{'next_state',NStateName,NStateData,Time1}> when 'true' -> apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,Time1,_7,[])
<{'reply',Reply,NStateName,NStateData}> when call 'erlang':'=/=' (From,'undefined') -> do apply 'reply'/2 (From,Reply) apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,'infinity',_7,[])
<{'reply',Reply,NStateName,NStateData,Time1}> when call 'erlang':'=/=' (From,'undefined') -> do apply 'reply'/2 (From,Reply) apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,Time1,_7,[])
<{'stop',Reason,NStateData}> when 'true' -> apply 'terminate'/8 (Reason,_2,From,_0,_5,_3,NStateData,[])
<{'stop',Reason,Reply,NStateData}> when call 'erlang':'=/=' (From,'undefined') -> let <_10> = catch apply 'terminate'/8 (Reason,_2,From,_0,_5,_3,NStateData,[]) in case _10 of <{'EXIT',R}> when 'true' -> do apply 'reply'/2 (From,Reply) call 'erlang':'exit' (R)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<{'EXIT',{'undef',[{_27,'handle_info',[_28|[_29|[_30|[]]]],_31}|_32]}}> when call 'erlang':'=:=' (_27,_5) -> do case call 'logger':'allow' ('warning','gen_fsm') of <'true'> when 'true' -> let <_12> = ~{'module'=>_5,'message'=>_0|~{'label'=>{'gen_fsm','no_handle_info'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],'line'=>496,'mfa'=>{'gen_fsm','handle_msg',8}}~,'warning',_12,~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_fsm':'format_log'/1,'tag'=>'warning_msg'}~,'report_cb'=>fun 'gen_fsm':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end apply 'loop'/8 (_1,_2,_3,_4,_5,'infinity',_7,[])
<{'EXIT',What}> when 'true' -> apply 'terminate'/8 (What,_2,From,_0,_5,_3,_4,[])
<Reply> when 'true' -> apply 'terminate'/8 ({'bad_return_value',Reply},_2,From,_0,_5,_3,_4,[]) end
'handle_msg'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> let <From> = apply 'from'/1 (_0) in let <_10> = catch apply 'dispatch'/4 (_0,_5,_3,_4) in case _10 of <{'next_state',NStateName,NStateData}> when 'true' -> let <_11> = 'print_event'/3 in let <Debug1> = call 'sys':'handle_debug' (_8,_11,_2,{'noreply',NStateName}) in apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,'infinity',_7,Debug1)
<{'next_state',NStateName,NStateData,Time1}> when 'true' -> let <_13> = 'print_event'/3 in let <Debug1> = call 'sys':'handle_debug' (_8,_13,_2,{'noreply',NStateName}) in apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,Time1,_7,Debug1)
<{'reply',Reply,NStateName,NStateData}> when call 'erlang':'=/=' (From,'undefined') -> let <Debug1> = apply 'reply'/5 (_2,From,Reply,_8,NStateName) in apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,'infinity',_7,Debug1)
<{'reply',Reply,NStateName,NStateData,Time1}> when call 'erlang':'=/=' (From,'undefined') -> let <Debug1> = apply 'reply'/5 (_2,From,Reply,_8,NStateName) in apply 'loop'/8 (_1,_2,NStateName,NStateData,_5,Time1,_7,Debug1)
<{'stop',Reason,NStateData}> when 'true' -> apply 'terminate'/8 (Reason,_2,From,_0,_5,_3,NStateData,_8)
<{'stop',Reason,Reply,NStateData}> when call 'erlang':'=/=' (From,'undefined') -> let <_17> = catch apply 'terminate'/8 (Reason,_2,From,_0,_5,_3,NStateData,_8) in case _17 of <{'EXIT',R}> when 'true' -> do apply 'reply'/5 (_2,From,Reply,_8,_3) call 'erlang':'exit' (R)
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
<{'EXIT',What}> when 'true' -> apply 'terminate'/8 (What,_2,From,_0,_5,_3,_4,_8)
<Reply> when 'true' -> apply 'terminate'/8 ({'bad_return_value',Reply},_2,From,_0,_5,_3,_4,_8) end
'dispatch'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{'$gen_event',Event},Mod,StateName,StateData> when 'true' -> call Mod:StateName (Event,StateData)
<{'$gen_all_state_event',Event},Mod,StateName,StateData> when 'true' -> call Mod:'handle_event' (Event,StateName,StateData)
<{'$gen_sync_event',From,Event},Mod,StateName,StateData> when 'true' -> call Mod:StateName (Event,From,StateData)
<{'$gen_sync_all_state_event',From,Event},Mod,StateName,StateData> when 'true' -> call Mod:'handle_sync_event' (Event,From,StateName,StateData)
<{'timeout',Ref,{'$gen_timer',Msg}},Mod,StateName,StateData> when 'true' -> call Mod:StateName ({'timeout',Ref,Msg},StateData)
<{'timeout',_X_Ref,{'$gen_event',Event}},Mod,StateName,StateData> when 'true' -> call Mod:StateName (Event,StateData)
<Info,Mod,StateName,StateData> when 'true' -> call Mod:'handle_info' (Info,StateName,StateData) end
'from'/1 = fun (_0) -> case _0 of <{'$gen_sync_event',From,_X_Event}> when 'true' -> From
<{'$gen_sync_all_state_event',From,_X_Event}> when 'true' -> From
<_2> when 'true' -> 'undefined' end
'reply'/2 = fun (_0,_1) -> case <_0,_1> of <{To,Tag},Reply> when 'true' -> catch call 'erlang':'!' (To,{Tag,Reply})
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'reply',2}}] )-|['compiler_generated'] ) end
'reply'/5 = fun (_0,_1,_2,_3,_4) -> do apply 'reply'/2 (_1,_2) let <_5> = 'print_event'/3 in call 'sys':'handle_debug' (_3,_5,_0,{'out',_2,_1,_4})
'terminate'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> do case call 'erlang':'function_exported' (_4,'terminate',3) of <'true'> when 'true' -> let <_8> = catch call _4:'terminate' (_0,_5,_6) in case _8 of <{'EXIT',R}> when 'true' -> let <_9> = call 'erlang':'get' () in let <FmtStateData> = apply 'format_status'/4 ('terminate',_4,_9,_6) in do apply 'error_info'/7 (R,_1,_2,_3,_5,FmtStateData,_7) call 'erlang':'exit' (R)
<_24> when 'true' -> 'ok' end
<'false'> when 'true' -> 'ok'
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end case _0 of <'normal'> when 'true' -> call 'erlang':'exit' ('normal')
<'shutdown'> when 'true' -> call 'erlang':'exit' ('shutdown')
<Shutdown = {'shutdown',_25}> when 'true' -> call 'erlang':'exit' (Shutdown)
<_26> when 'true' -> let <_13> = call 'erlang':'get' () in let <FmtStateData1> = apply 'format_status'/4 ('terminate',_4,_13,_6) in do apply 'error_info'/7 (_0,_1,_2,_3,_5,FmtStateData1,_7) call 'erlang':'exit' (_0) end
'error_info'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> let <Log> = call 'sys':'get_log' (_6) in do case call 'logger':'allow' ('error','gen_fsm') of <'true'> when 'true' -> let <_8> = apply 'client_stacktrace'/1 (_2) in let <_9> = ~{'name'=>_1,'last_message'=>_3,'state_name'=>_4,'state_data'=>_5,'log'=>Log,'reason'=>_0,'client_info'=>_8|~{'label'=>{'gen_fsm','terminate'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[102|[115|[109|[46|[101|[114|[108]]]]]]]]]]]]]]],'line'=>610,'mfa'=>{'gen_fsm','error_info',7}}~,'error',_9,~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_fsm':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_fsm':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end 'ok'
'client_stacktrace'/1 = fun (_0) -> case _0 of <'undefined'> when 'true' -> 'undefined'
<{Pid,_X_Tag}> when 'true' -> apply 'client_stacktrace'/1 (Pid)
<Pid> when try let <_1> = call 'erlang':'is_pid' (_0) in let <_3> = call 'erlang':'node' (_0) in let <_2> = call 'erlang':'node' () in let <_4> = call 'erlang':'=:=' (_3,_2) in call 'erlang':'and' (_1,_4) of <Try> -> Try catch <T,R> -> 'false' -> case call 'erlang':'process_info' (Pid,['current_stacktrace'|['registered_name']]) of <'undefined'> when 'true' -> {Pid,'dead'}
<[{'current_stacktrace',Stacktrace}|[{'registered_name',[]}]]> when 'true' -> {Pid,{Pid,Stacktrace}}
<[{'current_stacktrace',Stacktrace}|[{'registered_name',Name}|[]]]> when 'true' -> {Pid,{Name,Stacktrace}}
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<Pid> when call 'erlang':'is_pid' (_0) -> {Pid,'remote'}
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'client_stacktrace',1}}] )-|['compiler_generated'] ) end
'format_log'/1 = fun (_0) -> let <Depth> = call 'error_logger':'get_format_depth' () in let <FormatOpts> = ~{'depth'=>Depth,'single_line'=>'false','encoding'=>'utf8'|~{'chars_limit'=>'unlimited'}~}~ in let <_3> = apply 'limit_report'/2 (_0,Depth) in apply 'format_log_multi'/2 (_3,FormatOpts)
'limit_report'/2 = fun (_0,_1) -> case <_0,_1> of <Report,'unlimited'> when 'true' -> Report
<Report = ~{'reason':=Reason,'state_data':=StateData,'log':=Log,'label':={'gen_fsm','terminate'},'client_info':=ClientInfo,'last_message':=Msg}~,Depth> when 'true' -> let <_2> = call 'io_lib':'limit_term' (Msg,Depth) in let <_3> = call 'io_lib':'limit_term' (StateData,Depth) in let <_9> = letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[L|_5]> when 'true' -> let <_7> = call 'io_lib':'limit_term' (L,Depth) in let <_8> = apply 'lc$^0'/1 (_5) in ([_7|_8]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_15> when 'true' -> (primop 'match_fail' ({'function_clause',_15})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Log) in let <_10> = call 'io_lib':'limit_term' (Reason,Depth) in let <_11> = apply 'limit_client_report'/2 (ClientInfo,Depth) in case <> of (<> when call 'erlang':'is_map' (Report) -> ~{'last_message'=>_2,'state_data'=>_3,'log'=>_9,'reason'=>_10,'client_info'=>_11|Report}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Report})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<Report = ~{'label':={'gen_fsm','no_handle_info'},'message':=Msg}~,Depth> when 'true' -> let <_12> = call 'io_lib':'limit_term' (Msg,Depth) in case <> of (<> when call 'erlang':'is_map' (Report) -> ~{'message'=>_12|Report}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Report})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13})-|[{'function_name',{'limit_report',2}}] )-|['compiler_generated'] ) end
'limit_client_report'/2 = fun (_0,_1) -> case <_0,_1> of <{From,{Name,Stacktrace}},Depth> when 'true' -> let <_2> = call 'io_lib':'limit_term' (Stacktrace,Depth) in {From,{Name,_2}}
<Client,_5> when 'true' -> Client end
'format_log'/2 = fun (_0,_1) -> let <FormatOpts> = call 'maps':'merge' (~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~,_1) in let <_5> = case FormatOpts of <~{'chars_limit':='unlimited'}~> when 'true' -> []
<~{'chars_limit':=Limit}~> when 'true' -> [{'chars_limit',Limit}|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case apply 'format_log_single'/2 (_0,FormatOpts) of <{Format,Args}> when 'true' -> call 'io_lib':'format' (Format,Args,_5)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'format_log_single'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':=Reason,'state_data':=StateData,'log':=Log,'label':={'gen_fsm','terminate'},'client_info':=ClientInfo,'state_name':=StateName,'last_message':=Msg,'name':=Name}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <FixedReason> = apply 'fix_reason'/1 (Reason) in case apply 'format_client_log_single'/3 (ClientInfo,P,Depth) of <{ClientFmt,ClientArgs}> when 'true' -> let <_6> = case Log of <[]> when 'true' -> []
<_27> when 'true' -> call 'erlang':'++' ([46|[32|[76|[111|[103|[58|[32]]]]]]],P) end in let <Format> = call 'lists':'append' ([[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]]]]]|[P|[[46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]]|[P|[[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|[[46|[32|[68|[97|[116|[97|[58|[32]]]]]]]]|[P|[_6|[[46]]]]]]]]]]]]]) in let <_10> = apply 'get_msg'/1 (Msg) in let <_9> = case Log of <[]> when 'true' -> []
<_28> when 'true' -> [Log|[]] end in let <Args0> = [Name|[FixedReason|[_10|[StateName|[StateData|_9]]]]] in let <_16> = case Depth of <'unlimited'> when 'true' -> Args0
<_29> when 'true' -> let <_14> = fun (_12) -> [_12|[Depth|[]]] in call 'lists':'flatmap' (_14,Args0) end in let <_19> = call 'erlang':'++' (Format,ClientFmt) in let <_18> = call 'erlang':'++' (_16,ClientArgs) in {_19,_18}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<~{'label':={'gen_fsm','no_handle_info'},'message':=Msg,'module':=Mod}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[46|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[46]]]]]]) in let <_23> = case Depth of <'unlimited'> when 'true' -> [Mod|[Msg|[]]]
<_30> when 'true' -> [Mod|[Depth|[Msg|[Depth|[]]]]] end in {Format,_23}
<Report,FormatOpts> when 'true' -> apply 'format_log_multi'/2 (Report,FormatOpts) end
'format_log_multi'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':=Reason,'state_data':=StateData,'log':=Log,'label':={'gen_fsm','terminate'},'client_info':=ClientInfo,'state_name':=StateName,'last_message':=Msg,'name':=Name}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <FixedReason> = apply 'fix_reason'/1 (Reason) in case apply 'format_client_log'/3 (ClientInfo,P,Depth) of <{ClientFmt,ClientArgs}> when 'true' -> let <_5> = apply 'get_msg_str'/2 (Msg,P) in let <_6> = call 'erlang':'++' (_5,[42|[42|[32|[87|[104|[101|[110|[32|[83|[116|[97|[116|[101|[32|[61|[61|[32]]]]]]]]]]]]]]]]]) in let <_7> = call 'erlang':'++' ([32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[10]]]]]]]]]]]]]],_6) in let <_10> = case Log of <[]> when 'true' -> []
<_32> when 'true' -> let <_8> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[111|[103|[32|[61|[61|[126|[110|[42|[42]]]]]]]]]]]]],_8) end in let <Format> = call 'lists':'append' ([[42|[42|[32|[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]]]]|[P|[_7|[P|[[126|[110]]|[[42|[42|[32|[32|[32|[32|[32|[32|[68|[97|[116|[97|[32|[32|[61|[61|[32]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[102|[111|[114|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[111|[110|[32|[61|[61|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[_10|[]]]]]]]]]]]]]) in let <_14> = apply 'get_msg'/1 (Msg) in let <_13> = case Log of <[]> when 'true' -> []
<_33> when 'true' -> [Log|[]] end in let <Args0> = [Name|call 'erlang':'++' (_14,[StateName|[StateData|[FixedReason|_13]]])] in let <_20> = case Depth of <'unlimited'> when 'true' -> Args0
<_34> when 'true' -> let <_18> = fun (_16) -> [_16|[Depth|[]]] in call 'lists':'flatmap' (_18,Args0) end in let <_23> = call 'erlang':'++' (Format,ClientFmt) in let <_22> = call 'erlang':'++' (_20,ClientArgs) in {_23,_22}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<~{'label':={'gen_fsm','no_handle_info'},'message':=Msg,'module':=Mod}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <_25> = call 'erlang':'++' (P,[126|[110]]) in let <Format> = call 'erlang':'++' ([42|[42|[32|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32|[126|[112|[126|[110|[42|[42|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_25) in let <_28> = case Depth of <'unlimited'> when 'true' -> [Mod|[Msg|[]]]
<_35> when 'true' -> [Mod|[Msg|[Depth|[]]]] end in {Format,_28}
(<_31,_30> when 'true' -> (primop 'match_fail' ({'function_clause',_31,_30})-|[{'function_name',{'format_log_multi',2}}] )-|['compiler_generated'] ) end
'fix_reason'/1 = fun (_0) -> case _0 of <Reason = {'undef',_@r0 = [{M,F,A,L}|MFAs]}> when 'true' -> case call 'code':'is_loaded' (M) of <'false'> when 'true' -> {'module could not be loaded',_@r0}
<_5> when 'true' -> let <_1> = call 'erlang':'length' (A) in case call 'erlang':'function_exported' (M,F,_1) of <'true'> when 'true' -> Reason
<'false'> when 'true' -> {'function not exported',_@r0}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end end
<Reason> when 'true' -> Reason end
'get_msg_str'/2 = fun (_0,_1) -> case <_0,_1> of <{'$gen_event',_X_Event},P> when 'true' -> let <_2> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]],_2)
<{'$gen_sync_event',_X_From,_X_Event},P> when 'true' -> let <_3> = call 'erlang':'++' (P,[32|[102|[114|[111|[109|[32|[126|[116|[119|[126|[110]]]]]]]]]]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[115|[121|[110|[99|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]],_3)
<{'$gen_all_state_event',_X_Event},P> when 'true' -> let <_4> = call 'erlang':'++' (P,[32|[40|[102|[111|[114|[32|[97|[108|[108|[32|[115|[116|[97|[116|[101|[115|[41|[126|[110]]]]]]]]]]]]]]]]]]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]],_4)
<{'$gen_sync_all_state_event',_X_From,_X_Event},P> when 'true' -> let <_5> = call 'erlang':'++' (P,[126|[110]]) in let <_6> = call 'erlang':'++' ([32|[40|[102|[111|[114|[32|[97|[108|[108|[32|[115|[116|[97|[116|[101|[115|[41|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]]]],_5) in let <_7> = call 'erlang':'++' (P,_6) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[115|[121|[110|[99|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]],_7)
<{'timeout',_X_Ref,{'$gen_timer',_X_Msg}},P> when 'true' -> let <_8> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[116|[105|[109|[101|[114|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]],_8)
<{'timeout',_X_Ref,{'$gen_event',_X_Msg}},P> when 'true' -> let <_9> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[116|[105|[109|[101|[114|[32|[101|[118|[101|[110|[116|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]],_9)
<_X_Msg,P> when 'true' -> let <_10> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[109|[101|[115|[115|[97|[103|[101|[32|[105|[110|[32|[119|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]],_10) end
'get_msg'/1 = fun (_0) -> case _0 of <{'$gen_event',Event}> when 'true' -> [Event|[]]
<{'$gen_sync_event',{From,_X_Tag},Event}> when 'true' -> [Event|[From|[]]]
<{'$gen_all_state_event',Event}> when 'true' -> [Event|[]]
<{'$gen_sync_all_state_event',{From,_X_Tag},Event}> when 'true' -> [Event|[From|[]]]
<{'timeout',Ref,{'$gen_timer',Msg}}> when 'true' -> [{'timeout',Ref,Msg}|[]]
<{'timeout',_X_Ref,{'$gen_event',Event}}> when 'true' -> [Event|[]]
<Msg> when 'true' -> [Msg|[]] end
'format_client_log_single'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'undefined',_12,_13> when 'true' -> {[],[]}
<{Pid,'dead'},_14,_15> when 'true' -> {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[100|[101|[97|[100|[46]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
<{Pid,'remote'},_16,_17> when 'true' -> let <_3> = call 'erlang':'node' (Pid) in {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[48|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
<{_X_Pid,{Name,Stacktrace0}},P,Depth> when 'true' -> let <Stacktrace> = call 'lists':'sublist' (Stacktrace0,4) in let <Format> = call 'lists':'append' ([[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32]]]]]]]]]]]]]|[P|[[46]]]]]]) in let <_7> = case Depth of <'unlimited'> when 'true' -> [Name|[Stacktrace|[]]]
<_18> when 'true' -> [Name|[Depth|[Stacktrace|[Depth|[]]]]] end in {Format,_7}
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'format_client_log_single',3}}] )-|['compiler_generated'] ) end
'format_client_log'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'undefined',_11,_12> when 'true' -> {[],[]}
<{Pid,'dead'},_13,_14> when 'true' -> {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[100|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
<{Pid,'remote'},_15,_16> when 'true' -> let <_3> = call 'erlang':'node' (Pid) in {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
<{_X_Pid,{Name,Stacktrace}},P,Depth> when 'true' -> let <Format> = call 'lists':'append' ([[42|[42|[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]) in let <_6> = case Depth of <'unlimited'> when 'true' -> [Name|[Stacktrace|[]]]
<_17> when 'true' -> [Name|[Depth|[Stacktrace|[Depth|[]]]]] end in {Format,_6}
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'format_client_log',3}}] )-|['compiler_generated'] ) end
'p'/1 = fun (_0) -> case _0 of <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' -> let <_4> = apply 'single'/1 (Single) in let <_2> = apply 'mod'/1 (Enc) in let <_1> = apply 'p'/1 (Depth) in let <_3> = call 'erlang':'++' (_2,_1) in let <_5> = call 'erlang':'++' (_4,_3) in [126|_5]
<'unlimited'> when 'true' -> [112]
<_X_Depth> when 'true' -> [80] end
'single'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> [48]
<'false'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'single',1}}] )-|['compiler_generated'] ) end
'mod'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'format_status'/2 = fun (_0,_1) -> case _1 of <[PDict|[SysState|[Parent|[Debug|[[Name|[StateName|[StateData|[Mod|[_X_Time|[_X_HibernateAfterTimeout|[]]]]]]]|[]]]]]]> when 'true' -> let <Header> = call 'gen':'format_status_header' ([83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[115|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]]]]]],Name) in let <Log> = call 'sys':'get_log' (Debug) in let <_6> = case apply 'format_status'/4 (_0,Mod,PDict,StateData) of <S> when call 'erlang':'is_list' (S) -> S
<S> when 'true' -> [S|[]] end in [{'header',Header}|[{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|[{[80|[97|[114|[101|[110|[116]]]]]],Parent}|[{[76|[111|[103|[103|[101|[100|[32|[101|[118|[101|[110|[116|[115]]]]]]]]]]]]],Log}|[{[83|[116|[97|[116|[101|[78|[97|[109|[101]]]]]]]]],StateName}|[]]]]]}|_6]]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'format_status'/4 = fun (_0,_1,_2,_3) -> let <_5> = case _0 of <'terminate'> when 'true' -> _3
<_14> when 'true' -> [{'data',[{[83|[116|[97|[116|[101|[68|[97|[116|[97]]]]]]]]],_3}|[]]}|[]] end in case call 'erlang':'function_exported' (_1,'format_status',2) of <'true'> when 'true' -> let <_7> = catch call _1:'format_status' (_0,[_2|[_3|[]]]) in case _7 of <{'EXIT',_15}> when 'true' -> _5
<Else> when 'true' -> Else end
<_16> when 'true' -> _5 end
'behaviour_info'/1 = fun (_0) -> case _0 of <'callbacks'> when 'true' -> [{'init',1}|[{'handle_event',3}|[{'handle_sync_event',4}|[{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]]]]
<'optional_callbacks'> when 'true' -> [{'handle_info',3}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'behaviour_info',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('gen_fsm')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('gen_fsm',_0) end