module 'gen_event' ['add_handler'/3,'add_sup_handler'/3,'behaviour_info'/1,'call'/3,'call'/4,'check_response'/2,'delete_handler'/3,'format_log'/1,'format_log'/2,'format_status'/2,'init_it'/6,'module_info'/0,'module_info'/1,'notify'/2,'send_request'/3,'start'/0,'start'/1,'start'/2,'start_link'/0,'start_link'/1,'start_link'/2,'start_monitor'/0,'start_monitor'/1,'start_monitor'/2,'stop'/1,'stop'/3,'swap_handler'/3,'swap_sup_handler'/3,'sync_notify'/2,'system_code_change'/4,'system_continue'/3,'system_get_state'/1,'system_replace_state'/2,'system_terminate'/4,'wait_response'/2,'wake_hib'/5,'which_handlers'/1] attributes [ 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],1}]
, 'export_type' = [{'handler',0}|[{'handler_args',0}|[{'add_handler_ret',0}|[{'del_handler_ret',0}]]]]
, 'record' = [{'handler',[{'typed_record_field',{'record_field',63,{'atom',63,'module'}},{'type',63,'atom',[]}}|[{'record_field',64,{'atom',64,'id'},{'atom',64,'false'}}|[{'record_field',65,{'atom',65,'state'}}|[{'typed_record_field',{'record_field',66,{'atom',66,'supervised'},{'atom',66,'false'}},{'type',66,'union',[{'atom',66,'false'}|[{'type',66,'pid',[]}]]}}]]]]}]
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],69}]
, 'callback' = [{{'init',1},[{'type',84,'fun',[{'type',84,'product',[{'ann_type',84,[{'var',84,'InitArgs'}|[{'type',84,'term',[]}]]}]}|[{'type',85,'union',[{'type',85,'tuple',[{'atom',85,'ok'}|[{'ann_type',85,[{'var',85,'State'}|[{'type',85,'term',[]}]]}]]}|[{'type',86,'tuple',[{'atom',86,'ok'}|[{'ann_type',86,[{'var',86,'State'}|[{'type',86,'term',[]}]]}|[{'atom',86,'hibernate'}]]]}|[{'type',87,'tuple',[{'atom',87,'error'}|[{'ann_type',87,[{'var',87,'Reason'}|[{'type',87,'term',[]}]]}]]}]]]}]]}]}]
, 'callback' = [{{'handle_event',2},[{'type',88,'fun',[{'type',88,'product',[{'ann_type',88,[{'var',88,'Event'}|[{'type',88,'term',[]}]]}|[{'ann_type',88,[{'var',88,'State'}|[{'type',88,'term',[]}]]}]]}|[{'type',89,'union',[{'type',89,'tuple',[{'atom',89,'ok'}|[{'ann_type',89,[{'var',89,'NewState'}|[{'type',89,'term',[]}]]}]]}|[{'type',90,'tuple',[{'atom',90,'ok'}|[{'ann_type',90,[{'var',90,'NewState'}|[{'type',90,'term',[]}]]}|[{'atom',90,'hibernate'}]]]}|[{'type',91,'tuple',[{'atom',91,'swap_handler'}|[{'ann_type',91,[{'var',91,'Args1'}|[{'type',91,'term',[]}]]}|[{'ann_type',91,[{'var',91,'NewState'}|[{'type',91,'term',[]}]]}|[{'ann_type',92,[{'var',92,'Handler2'}|[{'type',92,'union',[{'type',92,'atom',[]}|[{'type',92,'tuple',[{'type',92,'atom',[]}|[{'ann_type',92,[{'var',92,'Id'}|[{'type',92,'term',[]}]]}]]}]]}]]}|[{'ann_type',92,[{'var',92,'Args2'}|[{'type',92,'term',[]}]]}]]]]]}|[{'atom',93,'remove_handler'}]]]]}]]}]}]
, 'callback' = [{{'handle_call',2},[{'type',94,'fun',[{'type',94,'product',[{'ann_type',94,[{'var',94,'Request'}|[{'type',94,'term',[]}]]}|[{'ann_type',94,[{'var',94,'State'}|[{'type',94,'term',[]}]]}]]}|[{'type',95,'union',[{'type',95,'tuple',[{'atom',95,'ok'}|[{'ann_type',95,[{'var',95,'Reply'}|[{'type',95,'term',[]}]]}|[{'ann_type',95,[{'var',95,'NewState'}|[{'type',95,'term',[]}]]}]]]}|[{'type',96,'tuple',[{'atom',96,'ok'}|[{'ann_type',96,[{'var',96,'Reply'}|[{'type',96,'term',[]}]]}|[{'ann_type',96,[{'var',96,'NewState'}|[{'type',96,'term',[]}]]}|[{'atom',96,'hibernate'}]]]]}|[{'type',97,'tuple',[{'atom',97,'swap_handler'}|[{'ann_type',97,[{'var',97,'Reply'}|[{'type',97,'term',[]}]]}|[{'ann_type',97,[{'var',97,'Args1'}|[{'type',97,'term',[]}]]}|[{'ann_type',97,[{'var',97,'NewState'}|[{'type',97,'term',[]}]]}|[{'ann_type',98,[{'var',98,'Handler2'}|[{'type',98,'union',[{'type',98,'atom',[]}|[{'type',98,'tuple',[{'type',98,'atom',[]}|[{'ann_type',98,[{'var',98,'Id'}|[{'type',98,'term',[]}]]}]]}]]}]]}|[{'ann_type',98,[{'var',98,'Args2'}|[{'type',98,'term',[]}]]}]]]]]]}|[{'type',99,'tuple',[{'atom',99,'remove_handler'}|[{'ann_type',99,[{'var',99,'Reply'}|[{'type',99,'term',[]}]]}]]}]]]]}]]}]}]
, 'callback' = [{{'handle_info',2},[{'type',100,'fun',[{'type',100,'product',[{'ann_type',100,[{'var',100,'Info'}|[{'type',100,'term',[]}]]}|[{'ann_type',100,[{'var',100,'State'}|[{'type',100,'term',[]}]]}]]}|[{'type',101,'union',[{'type',101,'tuple',[{'atom',101,'ok'}|[{'ann_type',101,[{'var',101,'NewState'}|[{'type',101,'term',[]}]]}]]}|[{'type',102,'tuple',[{'atom',102,'ok'}|[{'ann_type',102,[{'var',102,'NewState'}|[{'type',102,'term',[]}]]}|[{'atom',102,'hibernate'}]]]}|[{'type',103,'tuple',[{'atom',103,'swap_handler'}|[{'ann_type',103,[{'var',103,'Args1'}|[{'type',103,'term',[]}]]}|[{'ann_type',103,[{'var',103,'NewState'}|[{'type',103,'term',[]}]]}|[{'ann_type',104,[{'var',104,'Handler2'}|[{'type',104,'union',[{'type',104,'atom',[]}|[{'type',104,'tuple',[{'type',104,'atom',[]}|[{'ann_type',104,[{'var',104,'Id'}|[{'type',104,'term',[]}]]}]]}]]}]]}|[{'ann_type',104,[{'var',104,'Args2'}|[{'type',104,'term',[]}]]}]]]]]}|[{'atom',105,'remove_handler'}]]]]}]]}]}]
, 'callback' = [{{'terminate',2},[{'type',106,'fun',[{'type',106,'product',[{'ann_type',106,[{'var',106,'Args'}|[{'type',106,'union',[{'type',106,'term',[]}|[{'type',106,'tuple',[{'atom',106,'stop'}|[{'ann_type',106,[{'var',106,'Reason'}|[{'type',106,'term',[]}]]}]]}|[{'atom',107,'stop'}|[{'atom',107,'remove_handler'}|[{'type',108,'tuple',[{'atom',108,'error'}|[{'type',108,'tuple',[{'atom',108,'EXIT'}|[{'ann_type',108,[{'var',108,'Reason'}|[{'type',108,'term',[]}]]}]]}]]}|[{'type',109,'tuple',[{'atom',109,'error'}|[{'type',109,'term',[]}]]}]]]]]]}]]}|[{'ann_type',110,[{'var',110,'State'}|[{'type',110,'term',[]}]]}]]}|[{'type',111,'term',[]}]]}]}]
, 'callback' = [{{'code_change',3},[{'type',112,'fun',[{'type',112,'product',[{'ann_type',112,[{'var',112,'OldVsn'}|[{'type',112,'union',[{'type',112,'term',[]}|[{'type',112,'tuple',[{'atom',112,'down'}|[{'type',112,'term',[]}]]}]]}]]}|[{'ann_type',113,[{'var',113,'State'}|[{'type',113,'term',[]}]]}|[{'ann_type',113,[{'var',113,'Extra'}|[{'type',113,'term',[]}]]}]]]}|[{'type',114,'tuple',[{'atom',114,'ok'}|[{'ann_type',114,[{'var',114,'NewState'}|[{'type',114,'term',[]}]]}]]}]]}]}]
, 'callback' = [{{'format_status',2},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'Opt'}|[{'var',115,'StatusData'}]]}|[{'var',115,'Status'}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Opt'}|[{'type',116,'union',[{'atom',116,'normal'}|[{'atom',116,'terminate'}]]}]]]]}|[{'type',117,'constraint',[{'atom',117,'is_subtype'}|[[{'var',117,'StatusData'}|[{'type',117,'list',[{'type',117,'union',[{'var',117,'PDict'}|[{'var',117,'State'}]]}]}]]]]}|[{'type',118,'constraint',[{'atom',118,'is_subtype'}|[[{'var',118,'PDict'}|[{'type',118,'list',[{'type',118,'tuple',[{'ann_type',118,[{'var',118,'Key'}|[{'type',118,'term',[]}]]}|[{'ann_type',118,[{'var',118,'Value'}|[{'type',118,'term',[]}]]}]]}]}]]]]}|[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'State'}|[{'type',119,'term',[]}]]]]}|[{'type',120,'constraint',[{'atom',120,'is_subtype'}|[[{'var',120,'Status'}|[{'type',120,'term',[]}]]]]}]]]]]]]}]}]
, 'optional_callbacks' = [{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]]
, 'type' = [{'handler',{'type',127,'union',[{'type',127,'atom',[]}|[{'type',127,'tuple',[{'type',127,'atom',[]}|[{'type',127,'term',[]}]]}]]},[]}]
, 'type' = [{'handler_args',{'type',128,'term',[]},[]}]
, 'type' = [{'add_handler_ret',{'type',129,'union',[{'atom',129,'ok'}|[{'type',129,'term',[]}|[{'type',129,'tuple',[{'atom',129,'EXIT'}|[{'type',129,'term',[]}]]}]]]},[]}]
, 'type' = [{'del_handler_ret',{'type',130,'union',[{'atom',130,'ok'}|[{'type',130,'term',[]}|[{'type',130,'tuple',[{'atom',130,'EXIT'}|[{'type',130,'term',[]}]]}]]]},[]}]
, 'type' = [{'emgr_name',{'type',132,'union',[{'type',132,'tuple',[{'atom',132,'local'}|[{'type',132,'atom',[]}]]}|[{'type',132,'tuple',[{'atom',132,'global'}|[{'type',132,'term',[]}]]}|[{'type',133,'tuple',[{'atom',133,'via'}|[{'type',133,'atom',[]}|[{'type',133,'term',[]}]]]}]]]},[]}]
, 'type' = [{'debug_flag',{'type',134,'union',[{'atom',134,'trace'}|[{'atom',134,'log'}|[{'atom',134,'statistics'}|[{'atom',134,'debug'}|[{'type',135,'tuple',[{'atom',135,'logfile'}|[{'type',135,'string',[]}]]}]]]]]},[]}]
, 'type' = [{'option',{'type',136,'union',[{'type',136,'tuple',[{'atom',136,'timeout'}|[{'type',136,'timeout',[]}]]}|[{'type',137,'tuple',[{'atom',137,'debug'}|[{'type',137,'list',[{'user_type',137,'debug_flag',[]}]}]]}|[{'type',138,'tuple',[{'atom',138,'spawn_opt'}|[{'type',138,'list',[{'remote_type',138,[{'atom',138,'proc_lib'}|[{'atom',138,'start_spawn_option'}|[[]]]]}]}]]}|[{'type',139,'tuple',[{'atom',139,'hibernate_after'}|[{'type',139,'timeout',[]}]]}]]]]},[]}]
, 'type' = [{'emgr_ref',{'type',140,'union',[{'type',140,'atom',[]}|[{'type',140,'tuple',[{'type',140,'atom',[]}|[{'type',140,'atom',[]}]]}|[{'type',140,'tuple',[{'atom',140,'global'}|[{'type',140,'term',[]}]]}|[{'type',141,'tuple',[{'atom',141,'via'}|[{'type',141,'atom',[]}|[{'type',141,'term',[]}]]]}|[{'type',141,'pid',[]}]]]]]},[]}]
, 'type' = [{'start_ret',{'type',142,'union',[{'type',142,'tuple',[{'atom',142,'ok'}|[{'type',142,'pid',[]}]]}|[{'type',142,'tuple',[{'atom',142,'error'}|[{'type',142,'term',[]}]]}]]},[]}]
, 'type' = [{'start_mon_ret',{'type',143,'union',[{'type',143,'tuple',[{'atom',143,'ok'}|[{'type',143,'tuple',[{'type',143,'pid',[]}|[{'type',143,'reference',[]}]]}]]}|[{'type',143,'tuple',[{'atom',143,'error'}|[{'type',143,'term',[]}]]}]]},[]}]
, 'type' = [{'request_id',{'type',144,'term',[]},[]}]
, 'spec' = [{{'start',0},[{'type',167,'fun',[{'type',167,'product',[]}|[{'user_type',167,'start_ret',[]}]]}]}]
, 'spec' = [{{'start',1},[{'type',171,'fun',[{'type',171,'product',[{'type',171,'union',[{'user_type',171,'emgr_name',[]}|[{'type',171,'list',[{'user_type',171,'option',[]}]}]]}]}|[{'user_type',171,'start_ret',[]}]]}]}]
, 'spec' = [{{'start',2},[{'type',177,'fun',[{'type',177,'product',[{'user_type',177,'emgr_name',[]}|[{'type',177,'list',[{'user_type',177,'option',[]}]}]]}|[{'user_type',177,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_link',0},[{'type',181,'fun',[{'type',181,'product',[]}|[{'user_type',181,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_link',1},[{'type',185,'fun',[{'type',185,'product',[{'type',185,'union',[{'user_type',185,'emgr_name',[]}|[{'type',185,'list',[{'user_type',185,'option',[]}]}]]}]}|[{'user_type',185,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_link',2},[{'type',191,'fun',[{'type',191,'product',[{'user_type',191,'emgr_name',[]}|[{'type',191,'list',[{'user_type',191,'option',[]}]}]]}|[{'user_type',191,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_monitor',0},[{'type',195,'fun',[{'type',195,'product',[]}|[{'user_type',195,'start_mon_ret',[]}]]}]}]
, 'spec' = [{{'start_monitor',1},[{'type',199,'fun',[{'type',199,'product',[{'type',199,'union',[{'user_type',199,'emgr_name',[]}|[{'type',199,'list',[{'user_type',199,'option',[]}]}]]}]}|[{'user_type',199,'start_mon_ret',[]}]]}]}]
, 'spec' = [{{'start_monitor',2},[{'type',205,'fun',[{'type',205,'product',[{'user_type',205,'emgr_name',[]}|[{'type',205,'list',[{'user_type',205,'option',[]}]}]]}|[{'user_type',205,'start_mon_ret',[]}]]}]}]
, 'spec' = [{{'add_handler',3},[{'type',220,'fun',[{'type',220,'product',[{'user_type',220,'emgr_ref',[]}|[{'user_type',220,'handler',[]}|[{'type',220,'term',[]}]]]}|[{'type',220,'term',[]}]]}]}]
, 'spec' = [{{'add_sup_handler',3},[{'type',223,'fun',[{'type',223,'product',[{'user_type',223,'emgr_ref',[]}|[{'user_type',223,'handler',[]}|[{'type',223,'term',[]}]]]}|[{'type',223,'term',[]}]]}]}]
, 'spec' = [{{'notify',2},[{'type',227,'fun',[{'type',227,'product',[{'user_type',227,'emgr_ref',[]}|[{'type',227,'term',[]}]]}|[{'atom',227,'ok'}]]}]}]
, 'spec' = [{{'sync_notify',2},[{'type',230,'fun',[{'type',230,'product',[{'user_type',230,'emgr_ref',[]}|[{'type',230,'term',[]}]]}|[{'atom',230,'ok'}]]}]}]
, 'spec' = [{{'call',3},[{'type',233,'fun',[{'type',233,'product',[{'user_type',233,'emgr_ref',[]}|[{'user_type',233,'handler',[]}|[{'type',233,'term',[]}]]]}|[{'type',233,'term',[]}]]}]}]
, 'spec' = [{{'call',4},[{'type',236,'fun',[{'type',236,'product',[{'user_type',236,'emgr_ref',[]}|[{'user_type',236,'handler',[]}|[{'type',236,'term',[]}|[{'type',236,'timeout',[]}]]]]}|[{'type',236,'term',[]}]]}]}]
, 'spec' = [{{'send_request',3},[{'type',239,'fun',[{'type',239,'product',[{'user_type',239,'emgr_ref',[]}|[{'user_type',239,'handler',[]}|[{'type',239,'term',[]}]]]}|[{'user_type',239,'request_id',[]}]]}]}]
, 'spec' = [{{'wait_response',2},[{'type',243,'fun',[{'type',243,'product',[{'ann_type',243,[{'var',243,'RequestId'}|[{'user_type',243,'request_id',[]}]]}|[{'type',243,'timeout',[]}]]}|[{'type',244,'union',[{'type',244,'tuple',[{'atom',244,'reply'}|[{'ann_type',244,[{'var',244,'Reply'}|[{'type',244,'term',[]}]]}]]}|[{'atom',244,'timeout'}|[{'type',244,'tuple',[{'atom',244,'error'}|[{'type',244,'tuple',[{'ann_type',244,[{'var',244,'Reason'}|[{'type',244,'term',[]}]]}|[{'user_type',244,'emgr_ref',[]}]]}]]}]]]}]]}]}]
, 'spec' = [{{'check_response',2},[{'type',251,'fun',[{'type',251,'product',[{'ann_type',251,[{'var',251,'Msg'}|[{'type',251,'term',[]}]]}|[{'ann_type',251,[{'var',251,'RequestId'}|[{'user_type',251,'request_id',[]}]]}]]}|[{'type',252,'union',[{'type',252,'tuple',[{'atom',252,'reply'}|[{'ann_type',252,[{'var',252,'Reply'}|[{'type',252,'term',[]}]]}]]}|[{'atom',252,'no_reply'}|[{'type',252,'tuple',[{'atom',252,'error'}|[{'type',252,'tuple',[{'ann_type',252,[{'var',252,'Reason'}|[{'type',252,'term',[]}]]}|[{'user_type',252,'emgr_ref',[]}]]}]]}]]]}]]}]}]
, 'spec' = [{{'delete_handler',3},[{'type',259,'fun',[{'type',259,'product',[{'user_type',259,'emgr_ref',[]}|[{'user_type',259,'handler',[]}|[{'type',259,'term',[]}]]]}|[{'type',259,'term',[]}]]}]}]
, 'spec' = [{{'swap_handler',3},[{'type',262,'fun',[{'type',262,'product',[{'user_type',262,'emgr_ref',[]}|[{'type',262,'tuple',[{'user_type',262,'handler',[]}|[{'type',262,'term',[]}]]}|[{'type',262,'tuple',[{'user_type',262,'handler',[]}|[{'type',262,'term',[]}]]}]]]}|[{'type',263,'union',[{'atom',263,'ok'}|[{'type',263,'tuple',[{'atom',263,'error'}|[{'type',263,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'swap_sup_handler',3},[{'type',266,'fun',[{'type',266,'product',[{'user_type',266,'emgr_ref',[]}|[{'type',266,'tuple',[{'user_type',266,'handler',[]}|[{'type',266,'term',[]}]]}|[{'type',266,'tuple',[{'user_type',266,'handler',[]}|[{'type',266,'term',[]}]]}]]]}|[{'type',267,'union',[{'atom',267,'ok'}|[{'type',267,'tuple',[{'atom',267,'error'}|[{'type',267,'term',[]}]]}]]}]]}]}]
, 'spec' = [{{'which_handlers',1},[{'type',271,'fun',[{'type',271,'product',[{'user_type',271,'emgr_ref',[]}]}|[{'type',271,'list',[{'user_type',271,'handler',[]}]}]]}]}]
, 'spec' = [{{'stop',1},[{'type',274,'fun',[{'type',274,'product',[{'user_type',274,'emgr_ref',[]}]}|[{'atom',274,'ok'}]]}]}]
, 'spec' = [{{'system_terminate',4},[{'type',448,'fun',[{'type',448,'product',[{'var',448,'_'}|[{'var',448,'_'}|[{'var',448,'_'}|[{'type',448,'list',[{'var',448,'_'}]}]]]]}|[{'type',448,'no_return',[]}]]}]}]
, 'spec' = [{{'split',2},[{'type',670,'fun',[{'type',670,'product',[{'user_type',670,'handler',[]}|[{'type',670,'list',[{'type',670,'record',[{'atom',670,'handler'}]}]}]]}|[{'type',671,'union',[{'type',671,'tuple',[{'type',671,'atom',[]}|[{'type',671,'record',[{'atom',671,'handler'}]}|[{'type',671,'list',[{'type',671,'record',[{'atom',671,'handler'}]}]}]]]}|[{'atom',671,'error'}]]}]]}]}] ] 'start'/0 = fun () -> call 'gen':'start' ('gen_event','nolink','no callback module',[],[])
'start'/1 = fun (_0) -> case _0 of <Name> when call 'erlang':'is_tuple' (_0) -> call 'gen':'start' ('gen_event','nolink',Name,'no callback module',[],[])
<Options> when call 'erlang':'is_list' (_0) -> call 'gen':'start' ('gen_event','nolink','no callback module',[],Options)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'start',1}}] )-|['compiler_generated'] ) end
'start'/2 = fun (_0,_1) -> call 'gen':'start' ('gen_event','nolink',_0,'no callback module',[],_1)
'start_link'/0 = fun () -> call 'gen':'start' ('gen_event','link','no callback module',[],[])
'start_link'/1 = fun (_0) -> case _0 of <Name> when call 'erlang':'is_tuple' (_0) -> call 'gen':'start' ('gen_event','link',Name,'no callback module',[],[])
<Options> when call 'erlang':'is_list' (_0) -> call 'gen':'start' ('gen_event','link','no callback module',[],Options)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'start_link',1}}] )-|['compiler_generated'] ) end
'start_link'/2 = fun (_0,_1) -> call 'gen':'start' ('gen_event','link',_0,'no callback module',[],_1)
'start_monitor'/0 = fun () -> call 'gen':'start' ('gen_event','monitor','no callback module',[],[])
'start_monitor'/1 = fun (_0) -> case _0 of <Name> when call 'erlang':'is_tuple' (_0) -> call 'gen':'start' ('gen_event','monitor',Name,'no callback module',[],[])
<Options> when call 'erlang':'is_list' (_0) -> call 'gen':'start' ('gen_event','monitor','no callback module',[],Options)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'start_monitor',1}}] )-|['compiler_generated'] ) end
'start_monitor'/2 = fun (_0,_1) -> call 'gen':'start' ('gen_event','monitor',_0,'no callback module',[],_1)
'init_it'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Starter,'self',Name,Mod,Args,Options> when 'true' -> let <_6> = call 'erlang':'self' () in apply 'init_it'/6 (Starter,_6,Name,Mod,Args,Options)
<Starter,Parent,Name0,_17,_18,Options> when 'true' -> do call 'erlang':'process_flag' ('trap_exit','true') let <Name> = call 'gen':'name' (Name0) in let <Debug> = call 'gen':'debug_options' (Name,Options) in let <HibernateAfterTimeout> = call 'gen':'hibernate_after' (Options) in let <_10> = call 'erlang':'self' () in do call 'proc_lib':'init_ack' (Starter,{'ok',_10}) apply 'loop'/6 (Parent,Name,[],HibernateAfterTimeout,Debug,'false') end
'add_handler'/3 = fun (_0,_1,_2) -> apply 'rpc'/2 (_0,{'add_handler',_1,_2})
'add_sup_handler'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'self' () in apply 'rpc'/2 (_0,{'add_sup_handler',_1,_2,_3})
'notify'/2 = fun (_0,_1) -> apply 'send'/2 (_0,{'notify',_1})
'sync_notify'/2 = fun (_0,_1) -> apply 'rpc'/2 (_0,{'sync_notify',_1})
'call'/3 = fun (_0,_1,_2) -> apply 'call1'/3 (_0,_1,_2)
'call'/4 = fun (_0,_1,_2,_3) -> apply 'call1'/4 (_0,_1,_2,_3)
'send_request'/3 = fun (_0,_1,_2) -> let <_3> = call 'erlang':'self' () in call 'gen':'send_request' (_0,_3,{'call',_1,_2})
'wait_response'/2 = fun (_0,_1) -> case call 'gen':'wait_response' (_0,_1) of <{'reply',Err = {'error',_5}}> when 'true' -> Err
<Return> when 'true' -> Return end
'check_response'/2 = fun (_0,_1) -> case call 'gen':'check_response' (_0,_1) of <{'reply',Err = {'error',_5}}> when 'true' -> Err
<Return> when 'true' -> Return end
'delete_handler'/3 = fun (_0,_1,_2) -> apply 'rpc'/2 (_0,{'delete_handler',_1,_2})
'swap_handler'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <M,{H1,A1},{H2,A2}> when 'true' -> apply 'rpc'/2 (M,{'swap_handler',H1,A1,H2,A2})
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'swap_handler',3}}] )-|['compiler_generated'] ) end
'swap_sup_handler'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <M,{H1,A1},{H2,A2}> when 'true' -> let <_3> = call 'erlang':'self' () in apply 'rpc'/2 (M,{'swap_sup_handler',H1,A1,H2,A2,_3})
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'swap_sup_handler',3}}] )-|['compiler_generated'] ) end
'which_handlers'/1 = fun (_0) -> apply 'rpc'/2 (_0,'which_handlers')
'stop'/1 = fun (_0) -> call 'gen':'stop' (_0)
'stop'/3 = fun (_0,_1,_2) -> call 'gen':'stop' (_0,_1,_2)
'rpc'/2 = fun (_0,_1) -> let <_2> = call 'erlang':'self' () in case call 'gen':'call' (_0,_2,_1,'infinity') of <{'ok',Reply}> when 'true' -> Reply
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'call1'/3 = fun (_0,_1,_2) -> let <Cmd> = {'call',_1,_2} in try let <_4> = call 'erlang':'self' () in call 'gen':'call' (_0,_4,Cmd) of <_5> -> case _5 of <{'ok',Res}> when 'true' -> Res
(<_6> when 'true' -> primop 'match_fail' ({'try_clause',_6})-|['compiler_generated'] ) end catch <_9,_8,_7> -> case <_9,_8,_7> of <('exit'-|['compiler_generated'] ),Reason,_13> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_event','call',[_0|[_1|[_2|[]]]]}})
(<_14,_15,_16> when 'true' -> primop 'raise' (_16,_15)-|['compiler_generated'] ) end
'call1'/4 = fun (_0,_1,_2,_3) -> let <Cmd> = {'call',_1,_2} in try let <_5> = call 'erlang':'self' () in call 'gen':'call' (_0,_5,Cmd,_3) of <_6> -> case _6 of <{'ok',Res}> when 'true' -> Res
(<_7> when 'true' -> primop 'match_fail' ({'try_clause',_7})-|['compiler_generated'] ) end catch <_10,_9,_8> -> case <_10,_9,_8> of <('exit'-|['compiler_generated'] ),Reason,_15> when 'true' -> call 'erlang':'exit' ({Reason,{'gen_event','call',[_0|[_1|[_2|[_3|[]]]]]}})
(<_16,_17,_18> when 'true' -> primop 'raise' (_18,_17)-|['compiler_generated'] ) end
'send'/2 = fun (_0,_1) -> case <_0,_1> of <{'global',Name},Cmd> when 'true' -> do try call 'global':'send' (Name,Cmd) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<{'via',Mod,Name},Cmd> when 'true' -> do try call Mod:'send' (Name,Cmd) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' 'ok'
<M,Cmd> when 'true' -> do call 'erlang':'!' (M,Cmd) 'ok' end
'loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Parent,ServerName,MSL,HibernateAfterTimeout,Debug,'true'> when 'true' -> call 'proc_lib':'hibernate' ('gen_event','wake_hib',[Parent|[ServerName|[MSL|[HibernateAfterTimeout|[Debug|[]]]]]])
<Parent,ServerName,MSL,HibernateAfterTimeout,Debug,_12> when 'true' -> apply 'fetch_msg'/6 (Parent,ServerName,MSL,HibernateAfterTimeout,Debug,'false') end
'wake_hib'/5 = fun (_0,_1,_2,_3,_4) -> apply 'fetch_msg'/6 (_0,_1,_2,_3,_4,'true')
'fetch_msg'/6 = fun (_0,_1,_2,_3,_4,_5) -> receive <{'system',From,Req}> when 'true' -> call 'sys':'handle_system_msg' (Req,From,_0,'gen_event',_4,[_1|[_2|[_3|[_5|[]]]]],_5)
<{'EXIT',_14,Reason}> when call 'erlang':'=:=' (_14,_0) -> apply 'terminate_server'/4 (Reason,_0,_2,_1)
<Msg> when call 'erlang':'=:=' (_4,[]) -> apply 'handle_msg'/6 (Msg,_0,_1,_2,_3,[])
<Msg> when 'true' -> let <_6> = 'print_event'/3 in let <Debug1> = call 'sys':'handle_debug' (_4,_6,_1,{'in',Msg}) in apply 'handle_msg'/6 (Msg,_0,_1,_2,_3,Debug1) after _3 -> apply 'loop'/6 (_0,_1,_2,_3,_4,'true')
'handle_msg'/6 = fun (_0,_1,_2,_3,_4,_5) -> case _0 of <{'notify',Event}> when 'true' -> case apply 'server_notify'/4 (Event,'handle_event',_3,_2) of <{Hib,MSL1}> when 'true' -> apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<{_X_From,Tag,{'sync_notify',Event}}> when 'true' -> case apply 'server_notify'/4 (Event,'handle_event',_3,_2) of <{Hib,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,'ok') apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{'EXIT',From,Reason}> when 'true' -> let <MSL1> = apply 'handle_exit'/4 (From,Reason,_3,_2) in apply 'loop'/6 (_1,_2,MSL1,_4,_5,'false')
<{_X_From,Tag,{'call',Handler,Query}}> when 'true' -> case apply 'server_call'/4 (Handler,Query,_3,_2) of <{Hib,Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
<{_X_From,Tag,{'add_handler',Handler,Args}}> when 'true' -> case apply 'server_add_handler'/3 (Handler,Args,_3) of <{Hib,Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end
<{_X_From,Tag,{'add_sup_handler',Handler,Args,SupP}}> when 'true' -> case apply 'server_add_sup_handler'/4 (Handler,Args,_3,SupP) of <{Hib,Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<{_X_From,Tag,{'delete_handler',Handler,Args}}> when 'true' -> case apply 'server_delete_handler'/4 (Handler,Args,_3,_2) of <{Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,'false')
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<{_X_From,Tag,{'swap_handler',Handler1,Args1,Handler2,Args2}}> when 'true' -> case apply 'server_swap_handler'/6 (Handler1,Args1,Handler2,Args2,_3,_2) of <{Hib,Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<{_X_From,Tag,{'swap_sup_handler',Handler1,Args1,Handler2,Args2,Sup}}> when 'true' -> case apply 'server_swap_handler'/7 (Handler1,Args1,Handler2,Args2,_3,Sup,_2) of <{Hib,Reply,MSL1}> when 'true' -> do apply 'reply'/2 (Tag,Reply) apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
<{_X_From,Tag,'stop'}> when 'true' -> do try apply 'terminate_server'/4 ('normal',_1,_3,_2) of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' apply 'reply'/2 (Tag,'ok')
<{_X_From,Tag,'which_handlers'}> when 'true' -> let <_15> = apply 'the_handlers'/1 (_3) in do apply 'reply'/2 (Tag,_15) apply 'loop'/6 (_1,_2,_3,_4,_5,'false')
<{_X_From,Tag,'get_modules'}> when 'true' -> let <_16> = apply 'get_modules'/1 (_3) in do apply 'reply'/2 (Tag,_16) apply 'loop'/6 (_1,_2,_3,_4,_5,'false')
<Other> when 'true' -> case apply 'server_notify'/4 (Other,'handle_info',_3,_2) of <{Hib,MSL1}> when 'true' -> apply 'loop'/6 (_1,_2,MSL1,_4,_5,Hib)
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end end
'terminate_server'/4 = fun (_0,_1,_2,_3) -> do apply 'stop_handlers'/2 (_2,_3) do apply 'do_unlink'/2 (_1,_2) call 'erlang':'exit' (_0)
'reply'/2 = fun (_0,_1) -> case <_0,_1> of <{From,Ref},Msg> when 'true' -> do call 'erlang':'!' (From,{Ref,Msg}) 'ok'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'reply',2}}] )-|['compiler_generated'] ) end
'do_unlink'/2 = fun (_0,_1) -> let <_18> = fun (_16) -> case _16 of <Handler = {'handler',_21,_22,_23,_24}> when (try let <_6> = call 'erlang':'element' (5,Handler) in call 'erlang':'=:=' (_6,_0) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> 'true'
<Handler = {'handler',_25,_26,_27,_28}> when (try let <_12> = call 'erlang':'element' (5,Handler) in call 'erlang':'is_pid' (_12) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Handler of (<({'handler',_29,_30,_31,_rec0}-|['compiler_generated'] )> when 'true' -> do call 'erlang':'unlink' (_rec0) 'true'-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_33> when 'true' -> 'true' end in call 'lists':'foreach' (_18,_1)
'handle_exit'/4 = fun (_0,_1,_2,_3) -> let <MSL1> = apply 'terminate_supervised'/4 (_0,_1,_2,_3) in case apply 'server_notify'/4 ({'EXIT',_0,_1},'handle_info',MSL1,_3) of <{_10,MSL2}> when 'true' -> MSL2
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'terminate_supervised'/4 = fun (_0,_1,_2,_3) -> let <F> = fun (_14) -> case _14 of <Ha = {'handler',_21,_22,_23,_24}> when (try let <_8> = call 'erlang':'element' (5,Ha) in call 'erlang':'=:=' (_8,_0) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case Ha of (<({'handler',_rec1,_25,_26,_27}-|['compiler_generated'] )> when 'true' -> (case Ha of (<({'handler',_29,_30,_rec2,_31}-|['compiler_generated'] )> when 'true' -> do apply 'do_terminate'/7 (_rec1,Ha,{'stop',_1},_rec2,{'parent_terminated',{_0,_1}},_3,'shutdown') 'false'-|['compiler_generated'] )
(<_32> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_33> when 'true' -> 'true' end in call 'lists':'filter' (F,_2)
'system_continue'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Parent,Debug,[ServerName|[MSL|[HibernateAfterTimeout|[Hib|[]]]]]> when 'true' -> apply 'loop'/6 (Parent,ServerName,MSL,HibernateAfterTimeout,Debug,Hib)
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'system_continue',3}}] )-|['compiler_generated'] ) end
'system_terminate'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reason,Parent,_X_Debug,[ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]> when 'true' -> apply 'terminate_server'/4 (Reason,Parent,MSL,ServerName)
(<_7,_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5,_4})-|[{'function_name',{'system_terminate',4}}] )-|['compiler_generated'] ) end
'system_code_change'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <[ServerName|[MSL|_@r0 = [HibernateAfterTimeout|[Hib|[]]]]],Module,OldVsn,Extra> when 'true' -> let <_18> = fun (_16) -> case _16 of <H = {'handler',_24,_25,_26,_27}> when (try let <_8> = call 'erlang':'element' (2,H) in call 'erlang':'=:=' (_8,Module) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> (case H of (<({'handler',_28,_29,_rec3,_30}-|['compiler_generated'] )> when 'true' -> case call Module:'code_change' (OldVsn,_rec3,Extra) of <{'ok',NewState}> when 'true' -> case H of <{'handler',_32,_33,_34,_35}> when 'true' -> let <_15> = call 'erlang':'setelement' (4,H,NewState) in {'true',_15}
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_37> when 'true' -> 'true' end in let <MSL1> = call 'lists':'zf' (_18,MSL) in {'ok',[ServerName|[MSL1|_@r0]]}
(<_23,_22,_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22,_21,_20})-|[{'function_name',{'system_code_change',4}}] )-|['compiler_generated'] ) end
'system_get_state'/1 = fun (_0) -> case _0 of <[_X_ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]> when 'true' -> let <_5> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[{'handler',Mod,Id,State,_7}|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([{Mod,Id,State}|_4]-|['compiler_generated'] )
(<[_1|_2]> when 'true' -> apply 'lc$^0'/1 (_2)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (MSL) in {'ok',_5}
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'system_get_state',1}}] )-|['compiler_generated'] ) end
'system_replace_state'/2 = fun (_0,_1) -> case <_0,_1> of <StateFun,[ServerName|[MSL|_@r0 = [HibernateAfterTimeout|[Hib|[]]]]]> when 'true' -> let <_16> = letrec 'lc$^0'/1 = fun (_4) -> case _4 of <[HS = {'handler',Mod,Id,State,_20}|_3]> when 'true' -> let <Cur> = {Mod,Id,State} in let <_14> = try case apply StateFun (Cur) of <NState = {_21,_22,NS}> when let <_23> = call 'erlang':'=:=' (_21,Mod) in let <_24> = call 'erlang':'=:=' (_22,Id) in call 'erlang':'and' (_23,_24) -> case HS of <{'handler',_25,_26,_27,_28}> when 'true' -> let <_9> = call 'erlang':'setelement' (4,HS,NS) in {_9,NState}
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end of <_10> -> _10 catch <_13,_12,_11> -> {HS,Cur} in let <_15> = apply 'lc$^0'/1 (_3) in ([_14|_15]-|['compiler_generated'] )
(<[_2|_3]> when 'true' -> apply 'lc$^0'/1 (_3)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_36> when 'true' -> (primop 'match_fail' ({'function_clause',_36})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (MSL) in case call 'lists':'unzip' (_16) of <{NMSL,NStates}> when 'true' -> {'ok',NStates,[ServerName|[NMSL|_@r0]]}
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'system_replace_state',2}}] )-|['compiler_generated'] ) end
'print_event'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Dev,{'in',Msg},Name> when 'true' -> case Msg of <{'notify',Event}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[101|[118|[101|[110|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Event|[]]])
<{_7,_8,{'call',Handler,Query}}> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[40|[126|[116|[112|[41|[32|[103|[111|[116|[32|[99|[97|[108|[108|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Handler|[Query|[]]]])
<_9> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[103|[111|[116|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]],[Name|[Msg|[]]]) end
<Dev,Dbg,Name> when 'true' -> call 'io':'format' (Dev,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[58|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]],[Name|[Dbg|[]]]) end
'server_add_handler'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{Mod,Id},Args,MSL> when 'true' -> let <Handler> = {'handler',Mod,Id,'undefined','false'} in apply 'server_add_handler'/4 (Mod,Handler,Args,MSL)
<Mod,Args,MSL> when 'true' -> let <Handler> = {'handler',Mod,'false','undefined','false'} in apply 'server_add_handler'/4 (Mod,Handler,Args,MSL) end
'server_add_handler'/4 = fun (_0,_1,_2,_3) -> let <_4> = catch call _0:'init' (_2) in case _4 of <{'ok',State}> when 'true' -> case _1 of <{'handler',_16,_17,_18,_19}> when 'true' -> let <_7> = call 'erlang':'setelement' (4,_1,State) in {'false','ok',[_7|_3]}
(<_20> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',State,'hibernate'}> when 'true' -> case _1 of <{'handler',_21,_22,_23,_24}> when 'true' -> let <_10> = call 'erlang':'setelement' (4,_1,State) in {'true','ok',[_10|_3]}
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Other> when 'true' -> {'false',Other,_3} end
'server_add_sup_handler'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{Mod,Id},Args,MSL,Parent> when 'true' -> do call 'erlang':'link' (Parent) let <Handler> = {'handler',Mod,Id,'undefined',Parent} in apply 'server_add_handler'/4 (Mod,Handler,Args,MSL)
<Mod,Args,MSL,Parent> when 'true' -> do call 'erlang':'link' (Parent) let <Handler> = {'handler',Mod,'false','undefined',Parent} in apply 'server_add_handler'/4 (Mod,Handler,Args,MSL) end
'server_delete_handler'/4 = fun (_0,_1,_2,_3) -> case apply 'split'/2 (_0,_2) of <{Mod,Handler,MSL1}> when 'true' -> (case Handler of (<({'handler',_12,_13,_rec8,_14}-|['compiler_generated'] )> when 'true' -> let <_6> = apply 'do_terminate'/7 (Mod,Handler,_1,_rec8,'delete',_3,'normal') in {_6,MSL1}-|['compiler_generated'] )
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'error'> when 'true' -> {{'error','module_not_found'},_2}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'server_swap_handler'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'split_and_terminate'/6 (_0,_1,_4,_5,_2,'false') of <{State2,Sup,MSL1}> when 'true' -> case apply 's_s_h'/4 (Sup,_2,{_3,State2},MSL1) of <_@r0 = {Hib,'ok',MSL2}> when 'true' -> _@r0
<{Hib,What,MSL2}> when 'true' -> {Hib,{'error',What},MSL2}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
'server_swap_handler'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case apply 'split_and_terminate'/6 (_0,_1,_4,_6,_2,_5) of <{State2,_16,MSL1}> when 'true' -> case apply 's_s_h'/4 (_5,_2,{_3,State2},MSL1) of <_@r0 = {Hib,'ok',MSL2}> when 'true' -> _@r0
<{Hib,What,MSL2}> when 'true' -> {Hib,{'error',What},MSL2}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
's_s_h'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'false',Handler,Args,MSL> when 'true' -> apply 'server_add_handler'/3 (Handler,Args,MSL)
<Pid,Handler,Args,MSL> when 'true' -> apply 'server_add_sup_handler'/4 (Handler,Args,MSL,Pid) end
'split_and_terminate'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'split'/2 (_0,_2) of <{Mod,Handler,MSL1}> when 'true' -> (case Handler of (<({'handler',_22,_23,_24,_rec9}-|['compiler_generated'] )> when 'true' -> let <_10> = case <> of <> when (call 'erlang':'=:=' (_5,'false')-|['compiler_generated'] ) -> _rec9
<> when 'true' -> _5 end in (case Handler of (<({'handler',_26,_27,_rec10,_28}-|['compiler_generated'] )> when 'true' -> let <_14> = apply 'do_terminate'/7 (Mod,Handler,_1,_rec10,'swapped',_3,{'swapped',_4,_10}) in {_14,_rec9,MSL1}-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'error'> when 'true' -> {'error','false',_2}
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
'server_notify'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Event,Func,[Handler|T],SName> when 'true' -> case apply 'server_update'/4 (Handler,Func,Event,SName) of <{'ok',Handler1}> when 'true' -> case apply 'server_notify'/4 (Event,Func,T,SName) of <{Hib,NewHandlers}> when 'true' -> {Hib,[Handler1|NewHandlers]}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{'hibernate',Handler1}> when 'true' -> case apply 'server_notify'/4 (Event,Func,T,SName) of <{_X_Hib,NewHandlers}> when 'true' -> {'true',[Handler1|NewHandlers]}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<'no'> when 'true' -> apply 'server_notify'/4 (Event,Func,T,SName)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<_11,_12,[],_13> when 'true' -> {'false',[]}
(<_10,_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7})-|[{'function_name',{'server_notify',4}}] )-|['compiler_generated'] ) end
'server_update'/4 = fun (_0,_1,_2,_3) -> (case _0 of (<({'handler',_rec11,_28,_29,_30}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'handler',_32,_33,_rec12,_34}-|['compiler_generated'] )> when 'true' -> let <_10> = catch call _rec11:_1 (_2,_rec12) in case _10 of <{'ok',State1}> when 'true' -> case _0 of <{'handler',_36,_37,_38,_39}> when 'true' -> let <_13> = call 'erlang':'setelement' (4,_0,State1) in {'ok',_13}
(<_40> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',State1,'hibernate'}> when 'true' -> case _0 of <{'handler',_41,_42,_43,_44}> when 'true' -> let <_16> = call 'erlang':'setelement' (4,_0,State1) in {'hibernate',_16}
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'swap_handler',Args1,State1,Handler2,Args2}> when 'true' -> apply 'do_swap'/7 (_rec11,_0,Args1,State1,Handler2,Args2,_3)
<'remove_handler'> when 'true' -> do apply 'do_terminate'/7 (_rec11,_0,'remove_handler',_rec12,'remove',_3,'normal') 'no'
<{'EXIT',{'undef',[{_46,'handle_info',[_47|[_48|[]]],_49}|_50]}}> when call 'erlang':'=:=' (_46,_rec11) -> do case call 'logger':'allow' ('warning','gen_event') of <'true'> when 'true' -> let <_17> = ~{'module'=>_rec11,'message'=>_2|~{'label'=>{'gen_event','no_handle_info'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],'line'=>632,'mfa'=>{'gen_event','server_update',4}}~,'warning',_17,~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_event':'format_log'/1,'tag'=>'warning_msg'}~,'report_cb'=>fun 'gen_event':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end {'ok',_0}
<Other> when 'true' -> do apply 'do_terminate'/7 (_rec11,_0,{'error',Other},_rec12,_2,_3,'crash') 'no' end-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'do_swap'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> (case _1 of (<({'handler',_23,_24,_25,_rec15}-|['compiler_generated'] )> when 'true' -> let <State2> = apply 'do_terminate'/7 (_0,_1,_2,_3,'swapped',_6,{'swapped',_4,_rec15}) in case apply 'new_handler'/2 (_4,_1) of <{Mod2,Handler}> when 'true' -> let <_11> = catch call Mod2:'init' ({_5,State2}) in case _11 of <{'ok',State2a}> when 'true' -> case Handler of <{'handler',_27,_28,_29,_30}> when 'true' -> let <_14> = call 'erlang':'setelement' (4,Handler,State2a) in {'ok',_14}
(<_31> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Other> when 'true' -> do apply 'report_terminate'/5 (Handler,'crash',{'error',Other},_6,'false') 'no' end
(<_10> when 'true' -> primop 'match_fail' ({'badmatch',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_26> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'new_handler'/2 = fun (_0,_1) -> case <_0,_1> of <{Mod,Id},Handler1> when 'true' -> (case Handler1 of (<({'handler',_8,_9,_10,_rec17}-|['compiler_generated'] )> when 'true' -> {Mod,{'handler',Mod,Id,'undefined',_rec17}}-|['compiler_generated'] )
(<_11> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Mod,Handler1> when 'true' -> (case Handler1 of (<({'handler',_12,_13,_14,_rec18}-|['compiler_generated'] )> when 'true' -> {Mod,{'handler',Mod,'false','undefined',_rec18}}-|['compiler_generated'] )
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'split'/2 = fun (_0,_1) -> apply 'split'/3 (_0,_1,[])
'split'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{Mod,Id},[Ha = {'handler',_26,_27,_28,_29}|T],L> when (try let <_7> = call 'erlang':'element' (2,Ha) in let <_8> = call 'erlang':'=:=' (_7,Mod) in let <_10> = call 'erlang':'element' (3,Ha) in let <_11> = call 'erlang':'=:=' (_10,Id) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_11)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_12> = call 'lists':'reverse' (L,T) in {Mod,Ha,_12}
<Mod,[Ha = {'handler',_30,_31,_32,_33}|T],L> when (try let <_17> = call 'erlang':'element' (2,Ha) in let <_18> = call 'erlang':'=:=' (_17,Mod) in let <_20> = call 'erlang':'element' (3,Ha) in let <_21> = call 'erlang':'=:=' (_20,'false') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_18,_21)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <_22> = call 'lists':'reverse' (L,T) in {Mod,Ha,_22}
<Ha,[H|T],L> when 'true' -> apply 'split'/3 (Ha,T,[H|L])
<_34,[],_35> when 'true' -> 'error'
(<_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_25,_24,_23})-|[{'function_name',{'split',3}}] )-|['compiler_generated'] ) end
'server_call'/4 = fun (_0,_1,_2,_3) -> case apply 'search'/2 (_0,_2) of <{'ok',Ha}> when 'true' -> case apply 'server_call_update'/3 (Ha,_1,_3) of <{'no',Reply}> when 'true' -> let <_4> = apply 'delete'/2 (_0,_2) in {'false',Reply,_4}
<{{'ok',Ha1},Reply}> when 'true' -> let <_5> = apply 'replace'/3 (_0,_2,Ha1) in {'false',Reply,_5}
<{{'hibernate',Ha1},Reply}> when 'true' -> let <_6> = apply 'replace'/3 (_0,_2,Ha1) in {'true',Reply,_6}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<'false'> when 'true' -> {'false',{'error','bad_module'},_2}
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end
'search'/2 = fun (_0,_1) -> case <_0,_1> of <{Mod,Id},[Ha = {'handler',_22,_23,_24,_25}|_X_MSL]> when (try let <_6> = call 'erlang':'element' (2,Ha) in let <_7> = call 'erlang':'=:=' (_6,Mod) in let <_9> = call 'erlang':'element' (3,Ha) in let <_10> = call 'erlang':'=:=' (_9,Id) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_7,_10)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'ok',Ha}
<Mod,[Ha = {'handler',_26,_27,_28,_29}|_X_MSL]> when (try let <_15> = call 'erlang':'element' (2,Ha) in let <_16> = call 'erlang':'=:=' (_15,Mod) in let <_18> = call 'erlang':'element' (3,Ha) in let <_19> = call 'erlang':'=:=' (_18,'false') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_16,_19)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> {'ok',Ha}
<Handler,[_30|MSL]> when 'true' -> apply 'search'/2 (Handler,MSL)
<_31,[]> when 'true' -> 'false'
(<_21,_20> when 'true' -> (primop 'match_fail' ({'function_clause',_21,_20})-|[{'function_name',{'search',2}}] )-|['compiler_generated'] ) end
'delete'/2 = fun (_0,_1) -> case <_0,_1> of <{Mod,Id},[Ha = {'handler',_23,_24,_25,_26}|MSL]> when (try let <_6> = call 'erlang':'element' (2,Ha) in let <_7> = call 'erlang':'=:=' (_6,Mod) in let <_9> = call 'erlang':'element' (3,Ha) in let <_10> = call 'erlang':'=:=' (_9,Id) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_7,_10)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> MSL
<Mod,[Ha = {'handler',_27,_28,_29,_30}|MSL]> when (try let <_15> = call 'erlang':'element' (2,Ha) in let <_16> = call 'erlang':'=:=' (_15,Mod) in let <_18> = call 'erlang':'element' (3,Ha) in let <_19> = call 'erlang':'=:=' (_18,'false') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_16,_19)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> MSL
<Handler,[Ha|MSL]> when 'true' -> let <_20> = apply 'delete'/2 (Handler,MSL) in [Ha|_20]
<_31,[]> when 'true' -> []
(<_22,_21> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21})-|[{'function_name',{'delete',2}}] )-|['compiler_generated'] ) end
'replace'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{Mod,Id},[Ha = {'handler',_25,_26,_27,_28}|MSL],NewHa> when (try let <_7> = call 'erlang':'element' (2,Ha) in let <_8> = call 'erlang':'=:=' (_7,Mod) in let <_10> = call 'erlang':'element' (3,Ha) in let <_11> = call 'erlang':'=:=' (_10,Id) in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_8,_11)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [NewHa|MSL]
<Mod,[Ha = {'handler',_29,_30,_31,_32}|MSL],NewHa> when (try let <_16> = call 'erlang':'element' (2,Ha) in let <_17> = call 'erlang':'=:=' (_16,Mod) in let <_19> = call 'erlang':'element' (3,Ha) in let <_20> = call 'erlang':'=:=' (_19,'false') in (call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_17,_20)-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> [NewHa|MSL]
<Handler,[Ha|MSL],NewHa> when 'true' -> let <_21> = apply 'replace'/3 (Handler,MSL,NewHa) in [Ha|_21]
<_33,[],NewHa> when 'true' -> [NewHa|[]]
(<_24,_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22})-|[{'function_name',{'replace',3}}] )-|['compiler_generated'] ) end
'server_call_update'/3 = fun (_0,_1,_2) -> (case _0 of (<({'handler',_rec19,_21,_22,_23}-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'handler',_25,_26,_rec20,_27}-|['compiler_generated'] )> when 'true' -> let <_9> = catch call _rec19:'handle_call' (_1,_rec20) in case _9 of <{'ok',Reply,State1}> when 'true' -> case _0 of <{'handler',_29,_30,_31,_32}> when 'true' -> let <_12> = call 'erlang':'setelement' (4,_0,State1) in {{'ok',_12},Reply}
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'ok',Reply,State1,'hibernate'}> when 'true' -> case _0 of <{'handler',_34,_35,_36,_37}> when 'true' -> let <_15> = call 'erlang':'setelement' (4,_0,State1) in {{'hibernate',_15},Reply}
(<_38> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'swap_handler',Reply,Args1,State1,Handler2,Args2}> when 'true' -> let <_16> = apply 'do_swap'/7 (_rec19,_0,Args1,State1,Handler2,Args2,_2) in {_16,Reply}
<{'remove_handler',Reply}> when 'true' -> do apply 'do_terminate'/7 (_rec19,_0,'remove_handler',_rec20,'remove',_2,'normal') {'no',Reply}
<Other> when 'true' -> do apply 'do_terminate'/7 (_rec19,_0,{'error',Other},_rec20,_1,_2,'crash') {'no',{'error',Other}} end-|['compiler_generated'] )
(<_28> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_24> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'do_terminate'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case call 'erlang':'function_exported' (_0,'terminate',2) of <'true'> when 'true' -> let <_7> = catch call _0:'terminate' (_2,_3) in do apply 'report_terminate'/7 (_1,_6,_2,_3,_4,_5,_7) _7
<'false'> when 'true' -> do apply 'report_terminate'/7 (_1,_6,_2,_3,_4,_5,'ok') 'ok'
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
'report_terminate'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Handler,'crash',{'error',Why},State,LastIn,SName,_14> when 'true' -> apply 'report_terminate'/5 (Handler,Why,State,LastIn,SName)
<Handler,How,_15,State,LastIn,SName,_16> when 'true' -> apply 'report_terminate'/5 (Handler,How,State,LastIn,SName) end
'report_terminate'/5 = fun (_0,_1,_2,_3,_4) -> do apply 'report_error'/5 (_0,_1,_2,_3,_4) (case _0 of (<({'handler',_14,_15,_16,_rec23}-|['compiler_generated'] )> when 'true' -> case _rec23 of <'false'> when 'true' -> 'ok'
<Pid> when 'true' -> let <_7> = apply 'handler'/1 (_0) in do call 'erlang':'!' (Pid,{'gen_event_EXIT',_7,_1}) 'ok' end-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
'report_error'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Handler,'normal',_21,_22,_23> when 'true' -> 'ok'
<_X_Handler,'shutdown',_24,_25,_26> when 'true' -> 'ok'
<_X_Handler,{'swapped',_27,_28},_29,_30,_31> when 'true' -> 'ok'
<Handler,Reason,State,LastIn,SName> when 'true' -> case call 'logger':'allow' ('error','gen_event') of <'true'> when 'true' -> let <_5> = apply 'handler'/1 (Handler) in (case Handler of (<({'handler',_rec24,_32,_33,_34}-|['compiler_generated'] )> when 'true' -> let <_6> = call 'erlang':'get' () in let <_9> = apply 'format_status'/4 ('terminate',_rec24,_6,State) in let <_10> = ~{'handler'=>_5,'name'=>SName,'last_message'=>LastIn,'state'=>_9,'reason'=>Reason|~{'label'=>{'gen_event','terminate'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[101|[118|[101|[110|[116|[46|[101|[114|[108]]]]]]]]]]]]]]]]],'line'=>792,'mfa'=>{'gen_event','report_error',5}}~,'error',_10,~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_event':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_event':'format_log'/2}~)-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'false'> when 'true' -> 'ok'
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end end
'format_log'/1 = fun (_0) -> let <Depth> = call 'error_logger':'get_format_depth' () in let <FormatOpts> = ~{'depth'=>Depth,'single_line'=>'false','encoding'=>'utf8'|~{'chars_limit'=>'unlimited'}~}~ in let <_3> = apply 'limit_report'/2 (_0,Depth) in apply 'format_log_multi'/2 (_3,FormatOpts)
'limit_report'/2 = fun (_0,_1) -> case <_0,_1> of <Report,'unlimited'> when 'true' -> Report
<Report = ~{'reason':=Reason,'label':={'gen_event','terminate'},'state':=State,'last_message':=LastIn}~,Depth> when 'true' -> let <_2> = call 'io_lib':'limit_term' (LastIn,Depth) in let <_3> = call 'io_lib':'limit_term' (State,Depth) in let <_4> = call 'io_lib':'limit_term' (Reason,Depth) in case <> of (<> when call 'erlang':'is_map' (Report) -> ~{'last_message'=>_2,'state'=>_3,'reason'=>_4|Report}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Report})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<Report = ~{'label':={'gen_event','no_handle_info'},'message':=Msg}~,Depth> when 'true' -> let <_5> = call 'io_lib':'limit_term' (Msg,Depth) in case <> of (<> when call 'erlang':'is_map' (Report) -> ~{'message'=>_5|Report}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Report})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'limit_report',2}}] )-|['compiler_generated'] ) end
'format_log'/2 = fun (_0,_1) -> let <FormatOpts> = call 'maps':'merge' (~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~,_1) in let <_5> = case FormatOpts of <~{'chars_limit':='unlimited'}~> when 'true' -> []
<~{'chars_limit':=Limit}~> when 'true' -> [{'chars_limit',Limit}|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case apply 'format_log_single'/2 (_0,FormatOpts) of <{Format,Args}> when 'true' -> call 'io_lib':'format' (Format,Args,_5)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'format_log_single'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':=Reason,'label':={'gen_event','terminate'},'handler':=Handler,'state':=State,'last_message':=LastIn,'name':=SName}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Reason1> = apply 'fix_reason'/1 (Reason) in let <Format1> = call 'lists':'append' ([[71|[101|[110|[101|[114|[105|[99|[32|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]]|[P|[[32|[99|[114|[97|[115|[104|[101|[100|[46|[32|[73|[110|[115|[116|[97|[108|[108|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]]|[P|[[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|[[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]|[P|[[46]]]]]]]]]]]]) in let <_6> = case Depth of <'unlimited'> when 'true' -> [Handler|[SName|[Reason1|[LastIn|[State|[]]]]]]
<_15> when 'true' -> [Handler|[Depth|[SName|[Depth|[Reason1|[Depth|[LastIn|[Depth|[State|[Depth|[]]]]]]]]]]] end in {Format1,_6}
<~{'label':={'gen_event','no_handle_info'},'message':=Msg,'module':=Mod}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[46|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[46]]]]]]) in let <_11> = case Depth of <'unlimited'> when 'true' -> [Mod|[Msg|[]]]
<_16> when 'true' -> [Mod|[Depth|[Msg|[Depth|[]]]]] end in {Format,_11}
<Report,FormatOpts> when 'true' -> apply 'format_log_multi'/2 (Report,FormatOpts) end
'format_log_multi'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':=Reason,'label':={'gen_event','terminate'},'handler':=Handler,'state':=State,'last_message':=LastIn,'name':=SName}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <Reason1> = apply 'fix_reason'/1 (Reason) in let <P> = apply 'p'/1 (FormatOpts) in let <Format> = call 'lists':'append' ([[42|[42|[32|[103|[101|[110|[95|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114|[32]]]]]]]]]]]]]]]]]]]]]|[P|[[32|[99|[114|[97|[115|[104|[101|[100|[46|[10]]]]]]]]]]|[[42|[42|[32|[87|[97|[115|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100|[32|[105|[110|[32]]]]]]]]]]]]]]]]]]]]|[P|[[10]|[[42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[119|[97|[115|[58|[32]]]]]]]]]]]]]]]]]]]|[P|[[10]|[[42|[42|[32|[87|[104|[101|[110|[32|[104|[97|[110|[100|[108|[101|[114|[32|[115|[116|[97|[116|[101|[32|[61|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[10]|[[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[61|[61|[32]]]]]]]]]]]]]|[P|[[10]]]]]]]]]]]]]]]]) in let <_6> = case Depth of <'unlimited'> when 'true' -> [Handler|[SName|[LastIn|[State|[Reason1|[]]]]]]
<_16> when 'true' -> [Handler|[Depth|[SName|[Depth|[LastIn|[Depth|[State|[Depth|[Reason1|[Depth|[]]]]]]]]]]] end in {Format,_6}
<~{'label':={'gen_event','no_handle_info'},'message':=Msg,'module':=Mod}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in let <_9> = call 'erlang':'++' (P,[10]) in let <Format> = call 'erlang':'++' ([42|[42|[32|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[95|[105|[110|[102|[111|[32|[105|[110|[32|[126|[112|[10|[42|[42|[32|[85|[110|[104|[97|[110|[100|[108|[101|[100|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_9) in let <_12> = case Depth of <'unlimited'> when 'true' -> [Mod|[Msg|[]]]
<_17> when 'true' -> [Mod|[Msg|[Depth|[]]]] end in {Format,_12}
(<_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14})-|[{'function_name',{'format_log_multi',2}}] )-|['compiler_generated'] ) end
'fix_reason'/1 = fun (_0) -> case _0 of <{'EXIT',Reason = {'undef',MFAs = [{M,F,A,_X_L}|_5]}}> when 'true' -> case call 'code':'is_loaded' (M) of <'false'> when 'true' -> {'module could not be loaded',MFAs}
<_6> when 'true' -> let <_1> = call 'erlang':'length' (A) in case call 'erlang':'function_exported' (M,F,_1) of <'true'> when 'true' -> Reason
<'false'> when 'true' -> {'function not exported',MFAs}
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end end
<{'EXIT',Reason}> when 'true' -> Reason
<Reason> when 'true' -> Reason end
'p'/1 = fun (_0) -> case _0 of <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' -> let <_4> = apply 'single'/1 (Single) in let <_2> = apply 'mod'/1 (Enc) in let <_1> = apply 'p'/1 (Depth) in let <_3> = call 'erlang':'++' (_2,_1) in let <_5> = call 'erlang':'++' (_4,_3) in [126|_5]
<'unlimited'> when 'true' -> [112]
<_X_Depth> when 'true' -> [80] end
'single'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> [48]
<'false'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'single',1}}] )-|['compiler_generated'] ) end
'mod'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'handler'/1 = fun (_0) -> case _0 of <Handler> when try (let <_3> = case (call ('erlang'-|['compiler_generated'] ):('is_record'-|['compiler_generated'] ) (_0,('handler'-|['compiler_generated'] ),(5-|['compiler_generated'] ))-|['compiler_generated'] ) of (<('true'-|['compiler_generated'] )> when 'true' -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> ('fail'-|['compiler_generated'] )-|['compiler_generated'] )
(<(_1-|['compiler_generated'] )> when 'true' -> (_1-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_4> = call 'erlang':'=:=' ((_3-|['compiler_generated'] ),'true') in let <_5> = call 'erlang':'element' (3,_0) in let <_6> = call 'erlang':'=:=' (_5,'true') in let <_7> = call ('erlang'-|['compiler_generated'] ):('and'-|['compiler_generated'] ) (_4,_6) in let <_8> = call 'erlang':'not' (_7) in let <_9> = call 'erlang':'is_boolean' (_5) in let <_10> = call 'erlang':'and' (_8,_9) in let <_11> = call 'erlang':'is_boolean' (_3) in (call 'erlang':'and' (_10,_11)-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> (case Handler of (<({'handler',_rec25,_18,_19,_20}-|['compiler_generated'] )> when 'true' -> _rec25-|['compiler_generated'] )
(<_21> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Handler> when 'true' -> (case Handler of (<({'handler',_rec26,_22,_23,_24}-|['compiler_generated'] )> when 'true' -> (case Handler of (<({'handler',_26,_rec27,_27,_28}-|['compiler_generated'] )> when 'true' -> {_rec26,_rec27}-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'the_handlers'/1 = fun (_0) -> (letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[Handler|_2]> when 'true' -> let <_4> = apply 'handler'/1 (Handler) in let <_5> = apply 'lc$^0'/1 (_2) in ([_4|_5]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0)-|['list_comprehension'] )
'stop_handlers'/2 = fun (_0,_1) -> case <_0,_1> of <[Handler|T],SName> when 'true' -> (case Handler of (<({'handler',_rec28,_9,_10,_11}-|['compiler_generated'] )> when 'true' -> (case Handler of (<({'handler',_13,_14,_rec29,_15}-|['compiler_generated'] )> when 'true' -> do apply 'do_terminate'/7 (_rec28,Handler,'stop',_rec29,'stop',SName,'shutdown') apply 'stop_handlers'/2 (T,SName)-|['compiler_generated'] )
(<_16> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_12> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[],_17> when 'true' -> []
(<_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7})-|[{'function_name',{'stop_handlers',2}}] )-|['compiler_generated'] ) end
'get_modules'/1 = fun (_0) -> let <_7> = letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[Handler|_2]> when 'true' -> (case Handler of (<({'handler',_rec30,_11,_12,_13}-|['compiler_generated'] )> when 'true' -> let <_6> = apply 'lc$^0'/1 (_2) in ([_rec30|_6]-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<[]> when 'true' -> []
(<_15> when 'true' -> (primop 'match_fail' ({'function_clause',_15})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (_0) in let <_9> = call 'ordsets':'from_list' (_7) in call 'ordsets':'to_list' (_9)
'format_status'/2 = fun (_0,_1) -> case _1 of <[PDict|[SysState|[Parent|[_X_Debug|[[ServerName|[MSL|[_X_HibernateAfterTimeout|[_X_Hib|[]]]]]|[]]]]]]> when 'true' -> let <Header> = call 'gen':'format_status_header' ([83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[101|[118|[101|[110|[116|[32|[104|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]],ServerName) in let <_12> = letrec 'lc$^0'/1 = fun (_6) -> case _6 of <[MS = {'handler',Mod,_16,State,_17}|_5]> when 'true' -> let <_rec31> = apply 'format_status'/4 (_0,Mod,PDict,State) in case MS of <{'handler',_18,_19,_20,_21}> when 'true' -> let <_10> = call 'erlang':'setelement' (4,MS,_rec31) in let <_11> = apply 'lc$^0'/1 (_5) in ([_10|_11]-|['compiler_generated'] )
(<_22> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','handler'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<[_4|_5]> when 'true' -> apply 'lc$^0'/1 (_5)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_23> when 'true' -> (primop 'match_fail' ({'function_clause',_23})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (MSL) in [{'header',Header}|[{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|[{[80|[97|[114|[101|[110|[116]]]]]],Parent}|[]]]}|[{'items',{[73|[110|[115|[116|[97|[108|[108|[101|[100|[32|[104|[97|[110|[100|[108|[101|[114|[115]]]]]]]]]]]]]]]]]],_12}}|[]]]]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'format_status'/4 = fun (_0,_1,_2,_3) -> case call 'erlang':'function_exported' (_1,'format_status',2) of <'true'> when 'true' -> let <Args> = [_2|[_3|[]]] in let <_5> = catch call _1:'format_status' (_0,Args) in case _5 of <{'EXIT',_12}> when 'true' -> _3
<Else> when 'true' -> Else end
<'false'> when 'true' -> _3
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
'behaviour_info'/1 = fun (_0) -> case _0 of <'callbacks'> when 'true' -> [{'init',1}|[{'handle_event',2}|[{'handle_call',2}|[{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]]]]]
<'optional_callbacks'> when 'true' -> [{'handle_info',2}|[{'terminate',2}|[{'code_change',3}|[{'format_status',2}]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'behaviour_info',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('gen_event')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('gen_event',_0) end