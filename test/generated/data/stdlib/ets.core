module 'ets' ['all'/0,'delete'/1,'delete'/2,'delete_all_objects'/1,'delete_object'/2,'file2tab'/1,'file2tab'/2,'filter'/3,'first'/1,'foldl'/3,'foldr'/3,'from_dets'/2,'fun2ms'/1,'give_away'/3,'i'/0,'i'/1,'i'/2,'i'/3,'info'/1,'info'/2,'init_table'/2,'insert'/2,'insert_new'/2,'internal_delete_all'/2,'internal_request_all'/0,'internal_select_delete'/2,'is_compiled_ms'/1,'last'/1,'lookup'/2,'lookup_element'/3,'match'/1,'match'/2,'match'/3,'match_delete'/2,'match_object'/1,'match_object'/2,'match_object'/3,'match_spec_compile'/1,'match_spec_run'/2,'match_spec_run_r'/3,'member'/2,'module_info'/0,'module_info'/1,'new'/2,'next'/2,'prev'/2,'rename'/2,'repair_continuation'/2,'safe_fixtable'/2,'select'/1,'select'/2,'select'/3,'select_count'/2,'select_delete'/2,'select_replace'/2,'select_reverse'/1,'select_reverse'/2,'select_reverse'/3,'setopts'/2,'slot'/2,'tab2file'/2,'tab2file'/3,'tab2list'/1,'tabfile_info'/1,'table'/1,'table'/2,'take'/2,'test_ms'/2,'to_dets'/2,'update_counter'/3,'update_counter'/4,'update_element'/3,'whereis'/1] attributes [ 'file' = [{[115|[114|[99|[47|[101|[116|[115|[46|[101|[114|[108]]]]]]]]]]],1}]
, 'export_type' = [{'tab',0}|[{'tid',0}|[{'match_spec',0}|[{'comp_match_spec',0}|[{'match_pattern',0}]]]]]
, 'type' = [{'access',{'type',50,'union',[{'atom',50,'public'}|[{'atom',50,'protected'}|[{'atom',50,'private'}]]]},[]}]
, 'type' = [{'tab',{'type',51,'union',[{'type',51,'atom',[]}|[{'user_type',51,'tid',[]}]]},[]}]
, 'type' = [{'type',{'type',52,'union',[{'atom',52,'set'}|[{'atom',52,'ordered_set'}|[{'atom',52,'bag'}|[{'atom',52,'duplicate_bag'}]]]]},[]}]
, 'type' = [{'continuation',{'type',53,'union',[{'atom',53,'$end_of_table'}|[{'type',54,'tuple',[{'user_type',54,'tab',[]}|[{'type',54,'integer',[]}|[{'type',54,'integer',[]}|[{'user_type',54,'comp_match_spec',[]}|[{'type',54,'list',[]}|[{'type',54,'integer',[]}]]]]]]}|[{'type',55,'tuple',[{'user_type',55,'tab',[]}|[{'var',55,'_'}|[{'var',55,'_'}|[{'type',55,'integer',[]}|[{'user_type',55,'comp_match_spec',[]}|[{'type',55,'list',[]}|[{'type',55,'integer',[]}|[{'type',55,'integer',[]}]]]]]]]]}]]]},[]}]
, 'opaque' = [{'tid',{'type',57,'reference',[]},[]}]
, 'type' = [{'match_pattern',{'type',59,'union',[{'type',59,'atom',[]}|[{'type',59,'tuple','any'}]]},[]}]
, 'type' = [{'match_spec',{'type',60,'list',[{'type',60,'tuple',[{'user_type',60,'match_pattern',[]}|[{'type',60,'list',[{'var',60,'_'}]}|[{'type',60,'list',[{'var',60,'_'}]}]]]}]},[]}]
, 'spec' = [{{'all',0},[{'type',84,'bounded_fun',[{'type',84,'fun',[{'type',84,'product',[]}|[{'type',84,'list',[{'var',84,'Tab'}]}]]}|[[{'type',85,'constraint',[{'atom',85,'is_subtype'}|[[{'var',85,'Tab'}|[{'user_type',85,'tab',[]}]]]]}]]]}]}]
, 'spec' = [{{'internal_request_all',0},[{'type',100,'fun',[{'type',100,'product',[]}|[{'type',100,'reference',[]}]]}]}]
, 'spec' = [{{'delete',1},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Tab'}]}|[{'atom',105,'true'}]]}|[[{'type',106,'constraint',[{'atom',106,'is_subtype'}|[[{'var',106,'Tab'}|[{'user_type',106,'tab',[]}]]]]}]]]}]}]
, 'spec' = [{{'delete',2},[{'type',111,'bounded_fun',[{'type',111,'fun',[{'type',111,'product',[{'var',111,'Tab'}|[{'var',111,'Key'}]]}|[{'atom',111,'true'}]]}|[[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'Tab'}|[{'user_type',112,'tab',[]}]]]]}|[{'type',113,'constraint',[{'atom',113,'is_subtype'}|[[{'var',113,'Key'}|[{'type',113,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'delete_all_objects',1},[{'type',118,'bounded_fun',[{'type',118,'fun',[{'type',118,'product',[{'var',118,'Tab'}]}|[{'atom',118,'true'}]]}|[[{'type',119,'constraint',[{'atom',119,'is_subtype'}|[[{'var',119,'Tab'}|[{'user_type',119,'tab',[]}]]]]}]]]}]}]
, 'spec' = [{{'internal_delete_all',2},[{'type',125,'bounded_fun',[{'type',125,'fun',[{'type',125,'product',[{'var',125,'Tab'}|[{'atom',125,'undefined'}]]}|[{'var',125,'NumDeleted'}]]}|[[{'type',126,'constraint',[{'atom',126,'is_subtype'}|[[{'var',126,'Tab'}|[{'user_type',126,'tab',[]}]]]]}|[{'type',127,'constraint',[{'atom',127,'is_subtype'}|[[{'var',127,'NumDeleted'}|[{'type',127,'non_neg_integer',[]}]]]]}]]]]}]}]
, 'spec' = [{{'delete_object',2},[{'type',132,'bounded_fun',[{'type',132,'fun',[{'type',132,'product',[{'var',132,'Tab'}|[{'var',132,'Object'}]]}|[{'atom',132,'true'}]]}|[[{'type',133,'constraint',[{'atom',133,'is_subtype'}|[[{'var',133,'Tab'}|[{'user_type',133,'tab',[]}]]]]}|[{'type',134,'constraint',[{'atom',134,'is_subtype'}|[[{'var',134,'Object'}|[{'type',134,'tuple','any'}]]]]}]]]]}]}]
, 'spec' = [{{'first',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'Tab'}]}|[{'type',139,'union',[{'var',139,'Key'}|[{'atom',139,'$end_of_table'}]]}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Tab'}|[{'user_type',140,'tab',[]}]]]]}|[{'type',141,'constraint',[{'atom',141,'is_subtype'}|[[{'var',141,'Key'}|[{'type',141,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'give_away',3},[{'type',146,'bounded_fun',[{'type',146,'fun',[{'type',146,'product',[{'var',146,'Tab'}|[{'var',146,'Pid'}|[{'var',146,'GiftData'}]]]}|[{'atom',146,'true'}]]}|[[{'type',147,'constraint',[{'atom',147,'is_subtype'}|[[{'var',147,'Tab'}|[{'user_type',147,'tab',[]}]]]]}|[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Pid'}|[{'type',148,'pid',[]}]]]]}|[{'type',149,'constraint',[{'atom',149,'is_subtype'}|[[{'var',149,'GiftData'}|[{'type',149,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'info',1},[{'type',154,'bounded_fun',[{'type',154,'fun',[{'type',154,'product',[{'var',154,'Tab'}]}|[{'type',154,'union',[{'var',154,'InfoList'}|[{'atom',154,'undefined'}]]}]]}|[[{'type',155,'constraint',[{'atom',155,'is_subtype'}|[[{'var',155,'Tab'}|[{'user_type',155,'tab',[]}]]]]}|[{'type',156,'constraint',[{'atom',156,'is_subtype'}|[[{'var',156,'InfoList'}|[{'type',156,'list',[{'var',156,'InfoTuple'}]}]]]]}|[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'InfoTuple'}|[{'type',157,'union',[{'type',157,'tuple',[{'atom',157,'compressed'}|[{'type',157,'boolean',[]}]]}|[{'type',158,'tuple',[{'atom',158,'decentralized_counters'}|[{'type',158,'boolean',[]}]]}|[{'type',159,'tuple',[{'atom',159,'heir'}|[{'type',159,'union',[{'type',159,'pid',[]}|[{'atom',159,'none'}]]}]]}|[{'type',160,'tuple',[{'atom',160,'id'}|[{'user_type',160,'tid',[]}]]}|[{'type',161,'tuple',[{'atom',161,'keypos'}|[{'type',161,'pos_integer',[]}]]}|[{'type',162,'tuple',[{'atom',162,'memory'}|[{'type',162,'non_neg_integer',[]}]]}|[{'type',163,'tuple',[{'atom',163,'name'}|[{'type',163,'atom',[]}]]}|[{'type',164,'tuple',[{'atom',164,'named_table'}|[{'type',164,'boolean',[]}]]}|[{'type',165,'tuple',[{'atom',165,'node'}|[{'type',165,'node',[]}]]}|[{'type',166,'tuple',[{'atom',166,'owner'}|[{'type',166,'pid',[]}]]}|[{'type',167,'tuple',[{'atom',167,'protection'}|[{'user_type',167,'access',[]}]]}|[{'type',168,'tuple',[{'atom',168,'size'}|[{'type',168,'non_neg_integer',[]}]]}|[{'type',169,'tuple',[{'atom',169,'type'}|[{'user_type',169,'type',[]}]]}|[{'type',170,'tuple',[{'atom',170,'write_concurrency'}|[{'type',170,'boolean',[]}]]}|[{'type',171,'tuple',[{'atom',171,'read_concurrency'}|[{'type',171,'boolean',[]}]]}]]]]]]]]]]]]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'info',2},[{'type',176,'bounded_fun',[{'type',176,'fun',[{'type',176,'product',[{'var',176,'Tab'}|[{'var',176,'Item'}]]}|[{'type',176,'union',[{'var',176,'Value'}|[{'atom',176,'undefined'}]]}]]}|[[{'type',177,'constraint',[{'atom',177,'is_subtype'}|[[{'var',177,'Tab'}|[{'user_type',177,'tab',[]}]]]]}|[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Item'}|[{'type',178,'union',[{'atom',178,'binary'}|[{'atom',178,'compressed'}|[{'atom',178,'decentralized_counters'}|[{'atom',178,'fixed'}|[{'atom',178,'heir'}|[{'atom',178,'id'}|[{'atom',178,'keypos'}|[{'atom',178,'memory'}|[{'atom',179,'name'}|[{'atom',179,'named_table'}|[{'atom',179,'node'}|[{'atom',179,'owner'}|[{'atom',179,'protection'}|[{'atom',180,'safe_fixed'}|[{'atom',180,'safe_fixed_monotonic_time'}|[{'atom',180,'size'}|[{'atom',180,'stats'}|[{'atom',180,'type'}|[{'atom',181,'write_concurrency'}|[{'atom',181,'read_concurrency'}]]]]]]]]]]]]]]]]]]]]}]]]]}|[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Value'}|[{'type',182,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'insert',2},[{'type',187,'bounded_fun',[{'type',187,'fun',[{'type',187,'product',[{'var',187,'Tab'}|[{'var',187,'ObjectOrObjects'}]]}|[{'atom',187,'true'}]]}|[[{'type',188,'constraint',[{'atom',188,'is_subtype'}|[[{'var',188,'Tab'}|[{'user_type',188,'tab',[]}]]]]}|[{'type',189,'constraint',[{'atom',189,'is_subtype'}|[[{'var',189,'ObjectOrObjects'}|[{'type',189,'union',[{'type',189,'tuple','any'}|[{'type',189,'list',[{'type',189,'tuple','any'}]}]]}]]]]}]]]]}]}]
, 'spec' = [{{'insert_new',2},[{'type',194,'bounded_fun',[{'type',194,'fun',[{'type',194,'product',[{'var',194,'Tab'}|[{'var',194,'ObjectOrObjects'}]]}|[{'type',194,'boolean',[]}]]}|[[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Tab'}|[{'user_type',195,'tab',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'ObjectOrObjects'}|[{'type',196,'union',[{'type',196,'tuple','any'}|[{'type',196,'list',[{'type',196,'tuple','any'}]}]]}]]]]}]]]]}]}]
, 'spec' = [{{'is_compiled_ms',1},[{'type',201,'bounded_fun',[{'type',201,'fun',[{'type',201,'product',[{'var',201,'Term'}]}|[{'type',201,'boolean',[]}]]}|[[{'type',202,'constraint',[{'atom',202,'is_subtype'}|[[{'var',202,'Term'}|[{'type',202,'term',[]}]]]]}]]]}]}]
, 'spec' = [{{'last',1},[{'type',207,'bounded_fun',[{'type',207,'fun',[{'type',207,'product',[{'var',207,'Tab'}]}|[{'type',207,'union',[{'var',207,'Key'}|[{'atom',207,'$end_of_table'}]]}]]}|[[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Tab'}|[{'user_type',208,'tab',[]}]]]]}|[{'type',209,'constraint',[{'atom',209,'is_subtype'}|[[{'var',209,'Key'}|[{'type',209,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'lookup',2},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Tab'}|[{'var',214,'Key'}]]}|[{'type',214,'list',[{'var',214,'Object'}]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Tab'}|[{'user_type',215,'tab',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Key'}|[{'type',216,'term',[]}]]]]}|[{'type',217,'constraint',[{'atom',217,'is_subtype'}|[[{'var',217,'Object'}|[{'type',217,'tuple','any'}]]]]}]]]]]}]}]
, 'spec' = [{{'lookup_element',3},[{'type',222,'bounded_fun',[{'type',222,'fun',[{'type',222,'product',[{'var',222,'Tab'}|[{'var',222,'Key'}|[{'var',222,'Pos'}]]]}|[{'var',222,'Elem'}]]}|[[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'Tab'}|[{'user_type',223,'tab',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Key'}|[{'type',224,'term',[]}]]]]}|[{'type',225,'constraint',[{'atom',225,'is_subtype'}|[[{'var',225,'Pos'}|[{'type',225,'pos_integer',[]}]]]]}|[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Elem'}|[{'type',226,'union',[{'type',226,'term',[]}|[{'type',226,'list',[{'type',226,'term',[]}]}]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match',2},[{'type',231,'bounded_fun',[{'type',231,'fun',[{'type',231,'product',[{'var',231,'Tab'}|[{'var',231,'Pattern'}]]}|[{'type',231,'list',[{'var',231,'Match'}]}]]}|[[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Tab'}|[{'user_type',232,'tab',[]}]]]]}|[{'type',233,'constraint',[{'atom',233,'is_subtype'}|[[{'var',233,'Pattern'}|[{'user_type',233,'match_pattern',[]}]]]]}|[{'type',234,'constraint',[{'atom',234,'is_subtype'}|[[{'var',234,'Match'}|[{'type',234,'list',[{'type',234,'term',[]}]}]]]]}]]]]]}]}]
, 'spec' = [{{'match',3},[{'type',239,'bounded_fun',[{'type',239,'fun',[{'type',239,'product',[{'var',239,'Tab'}|[{'var',239,'Pattern'}|[{'var',239,'Limit'}]]]}|[{'type',239,'union',[{'type',239,'tuple',[{'type',239,'list',[{'var',239,'Match'}]}|[{'var',239,'Continuation'}]]}|[{'atom',240,'$end_of_table'}]]}]]}|[[{'type',241,'constraint',[{'atom',241,'is_subtype'}|[[{'var',241,'Tab'}|[{'user_type',241,'tab',[]}]]]]}|[{'type',242,'constraint',[{'atom',242,'is_subtype'}|[[{'var',242,'Pattern'}|[{'user_type',242,'match_pattern',[]}]]]]}|[{'type',243,'constraint',[{'atom',243,'is_subtype'}|[[{'var',243,'Limit'}|[{'type',243,'pos_integer',[]}]]]]}|[{'type',244,'constraint',[{'atom',244,'is_subtype'}|[[{'var',244,'Match'}|[{'type',244,'list',[{'type',244,'term',[]}]}]]]]}|[{'type',245,'constraint',[{'atom',245,'is_subtype'}|[[{'var',245,'Continuation'}|[{'user_type',245,'continuation',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'match',1},[{'type',250,'bounded_fun',[{'type',250,'fun',[{'type',250,'product',[{'var',250,'Continuation'}]}|[{'type',250,'union',[{'type',250,'tuple',[{'type',250,'list',[{'var',250,'Match'}]}|[{'var',250,'Continuation'}]]}|[{'atom',251,'$end_of_table'}]]}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Match'}|[{'type',252,'list',[{'type',252,'term',[]}]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Continuation'}|[{'user_type',253,'continuation',[]}]]]]}]]]]}]}]
, 'spec' = [{{'match_object',2},[{'type',258,'bounded_fun',[{'type',258,'fun',[{'type',258,'product',[{'var',258,'Tab'}|[{'var',258,'Pattern'}]]}|[{'type',258,'list',[{'var',258,'Object'}]}]]}|[[{'type',259,'constraint',[{'atom',259,'is_subtype'}|[[{'var',259,'Tab'}|[{'user_type',259,'tab',[]}]]]]}|[{'type',260,'constraint',[{'atom',260,'is_subtype'}|[[{'var',260,'Pattern'}|[{'user_type',260,'match_pattern',[]}]]]]}|[{'type',261,'constraint',[{'atom',261,'is_subtype'}|[[{'var',261,'Object'}|[{'type',261,'tuple','any'}]]]]}]]]]]}]}]
, 'spec' = [{{'match_object',3},[{'type',266,'bounded_fun',[{'type',266,'fun',[{'type',266,'product',[{'var',266,'Tab'}|[{'var',266,'Pattern'}|[{'var',266,'Limit'}]]]}|[{'type',266,'union',[{'type',266,'tuple',[{'type',266,'list',[{'var',266,'Object'}]}|[{'var',266,'Continuation'}]]}|[{'atom',267,'$end_of_table'}]]}]]}|[[{'type',268,'constraint',[{'atom',268,'is_subtype'}|[[{'var',268,'Tab'}|[{'user_type',268,'tab',[]}]]]]}|[{'type',269,'constraint',[{'atom',269,'is_subtype'}|[[{'var',269,'Pattern'}|[{'user_type',269,'match_pattern',[]}]]]]}|[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'Limit'}|[{'type',270,'pos_integer',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'Object'}|[{'type',271,'tuple','any'}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Continuation'}|[{'user_type',272,'continuation',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'match_object',1},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Continuation'}]}|[{'type',277,'union',[{'type',277,'tuple',[{'type',277,'list',[{'var',277,'Object'}]}|[{'var',277,'Continuation'}]]}|[{'atom',278,'$end_of_table'}]]}]]}|[[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Object'}|[{'type',279,'tuple','any'}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Continuation'}|[{'user_type',280,'continuation',[]}]]]]}]]]]}]}]
, 'spec' = [{{'match_spec_compile',1},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'MatchSpec'}]}|[{'var',285,'CompiledMatchSpec'}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'MatchSpec'}|[{'user_type',286,'match_spec',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'CompiledMatchSpec'}|[{'user_type',287,'comp_match_spec',[]}]]]]}]]]]}]}]
, 'spec' = [{{'match_spec_run_r',3},[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'List'}|[{'var',292,'CompiledMatchSpec'}|[{'type',292,'list',[]}]]]}|[{'type',292,'list',[]}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'List'}|[{'type',293,'list',[{'type',293,'term',[]}]}]]]]}|[{'type',294,'constraint',[{'atom',294,'is_subtype'}|[[{'var',294,'CompiledMatchSpec'}|[{'user_type',294,'comp_match_spec',[]}]]]]}]]]]}]}]
, 'spec' = [{{'member',2},[{'type',299,'bounded_fun',[{'type',299,'fun',[{'type',299,'product',[{'var',299,'Tab'}|[{'var',299,'Key'}]]}|[{'type',299,'boolean',[]}]]}|[[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Tab'}|[{'user_type',300,'tab',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'Key'}|[{'type',301,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'new',2},[{'type',306,'bounded_fun',[{'type',306,'fun',[{'type',306,'product',[{'var',306,'Name'}|[{'var',306,'Options'}]]}|[{'type',306,'union',[{'user_type',306,'tid',[]}|[{'type',306,'atom',[]}]]}]]}|[[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'Name'}|[{'type',307,'atom',[]}]]]]}|[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Options'}|[{'type',308,'list',[{'var',308,'Option'}]}]]]]}|[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Option'}|[{'type',309,'union',[{'var',309,'Type'}|[{'var',309,'Access'}|[{'atom',309,'named_table'}|[{'type',309,'tuple',[{'atom',309,'keypos'}|[{'var',309,'Pos'}]]}|[{'type',310,'tuple',[{'atom',310,'heir'}|[{'ann_type',310,[{'var',310,'Pid'}|[{'type',310,'pid',[]}]]}|[{'var',310,'HeirData'}]]]}|[{'type',310,'tuple',[{'atom',310,'heir'}|[{'atom',310,'none'}]]}|[{'var',310,'Tweaks'}]]]]]]]}]]]]}|[{'type',311,'constraint',[{'atom',311,'is_subtype'}|[[{'var',311,'Type'}|[{'user_type',311,'type',[]}]]]]}|[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Access'}|[{'user_type',312,'access',[]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'Tweaks'}|[{'type',313,'union',[{'type',313,'tuple',[{'atom',313,'write_concurrency'}|[{'type',313,'boolean',[]}]]}|[{'type',314,'tuple',[{'atom',314,'read_concurrency'}|[{'type',314,'boolean',[]}]]}|[{'type',315,'tuple',[{'atom',315,'decentralized_counters'}|[{'type',315,'boolean',[]}]]}|[{'atom',316,'compressed'}]]]]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Pos'}|[{'type',317,'pos_integer',[]}]]]]}|[{'type',318,'constraint',[{'atom',318,'is_subtype'}|[[{'var',318,'HeirData'}|[{'type',318,'term',[]}]]]]}]]]]]]]]]]}]}]
, 'spec' = [{{'next',2},[{'type',323,'bounded_fun',[{'type',323,'fun',[{'type',323,'product',[{'var',323,'Tab'}|[{'var',323,'Key1'}]]}|[{'type',323,'union',[{'var',323,'Key2'}|[{'atom',323,'$end_of_table'}]]}]]}|[[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Tab'}|[{'user_type',324,'tab',[]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'Key1'}|[{'type',325,'term',[]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Key2'}|[{'type',326,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'prev',2},[{'type',331,'bounded_fun',[{'type',331,'fun',[{'type',331,'product',[{'var',331,'Tab'}|[{'var',331,'Key1'}]]}|[{'type',331,'union',[{'var',331,'Key2'}|[{'atom',331,'$end_of_table'}]]}]]}|[[{'type',332,'constraint',[{'atom',332,'is_subtype'}|[[{'var',332,'Tab'}|[{'user_type',332,'tab',[]}]]]]}|[{'type',333,'constraint',[{'atom',333,'is_subtype'}|[[{'var',333,'Key1'}|[{'type',333,'term',[]}]]]]}|[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Key2'}|[{'type',334,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'rename',2},[{'type',340,'bounded_fun',[{'type',340,'fun',[{'type',340,'product',[{'var',340,'Tab'}|[{'var',340,'Name'}]]}|[{'var',340,'Name'}]]}|[[{'type',341,'constraint',[{'atom',341,'is_subtype'}|[[{'var',341,'Tab'}|[{'user_type',341,'tab',[]}]]]]}|[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'Name'}|[{'type',342,'atom',[]}]]]]}]]]]}]}]
, 'spec' = [{{'safe_fixtable',2},[{'type',347,'bounded_fun',[{'type',347,'fun',[{'type',347,'product',[{'var',347,'Tab'}|[{'var',347,'Fix'}]]}|[{'atom',347,'true'}]]}|[[{'type',348,'constraint',[{'atom',348,'is_subtype'}|[[{'var',348,'Tab'}|[{'user_type',348,'tab',[]}]]]]}|[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Fix'}|[{'type',349,'boolean',[]}]]]]}]]]]}]}]
, 'spec' = [{{'select',2},[{'type',354,'bounded_fun',[{'type',354,'fun',[{'type',354,'product',[{'var',354,'Tab'}|[{'var',354,'MatchSpec'}]]}|[{'type',354,'list',[{'var',354,'Match'}]}]]}|[[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Tab'}|[{'user_type',355,'tab',[]}]]]]}|[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'MatchSpec'}|[{'user_type',356,'match_spec',[]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Match'}|[{'type',357,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'select',3},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'Tab'}|[{'var',362,'MatchSpec'}|[{'var',362,'Limit'}]]]}|[{'type',362,'union',[{'type',362,'tuple',[{'type',362,'list',[{'var',362,'Match'}]}|[{'var',362,'Continuation'}]]}|[{'atom',363,'$end_of_table'}]]}]]}|[[{'type',364,'constraint',[{'atom',364,'is_subtype'}|[[{'var',364,'Tab'}|[{'user_type',364,'tab',[]}]]]]}|[{'type',365,'constraint',[{'atom',365,'is_subtype'}|[[{'var',365,'MatchSpec'}|[{'user_type',365,'match_spec',[]}]]]]}|[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Limit'}|[{'type',366,'pos_integer',[]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Match'}|[{'type',367,'term',[]}]]]]}|[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'Continuation'}|[{'user_type',368,'continuation',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'select',1},[{'type',373,'bounded_fun',[{'type',373,'fun',[{'type',373,'product',[{'var',373,'Continuation'}]}|[{'type',373,'union',[{'type',373,'tuple',[{'type',373,'list',[{'var',373,'Match'}]}|[{'var',373,'Continuation'}]]}|[{'atom',373,'$end_of_table'}]]}]]}|[[{'type',374,'constraint',[{'atom',374,'is_subtype'}|[[{'var',374,'Match'}|[{'type',374,'term',[]}]]]]}|[{'type',375,'constraint',[{'atom',375,'is_subtype'}|[[{'var',375,'Continuation'}|[{'user_type',375,'continuation',[]}]]]]}]]]]}]}]
, 'spec' = [{{'select_count',2},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'Tab'}|[{'var',380,'MatchSpec'}]]}|[{'var',380,'NumMatched'}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Tab'}|[{'user_type',381,'tab',[]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'MatchSpec'}|[{'user_type',382,'match_spec',[]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'NumMatched'}|[{'type',383,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'select_delete',2},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'Tab'}|[{'var',388,'MatchSpec'}]]}|[{'var',388,'NumDeleted'}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Tab'}|[{'user_type',389,'tab',[]}]]]]}|[{'type',390,'constraint',[{'atom',390,'is_subtype'}|[[{'var',390,'MatchSpec'}|[{'user_type',390,'match_spec',[]}]]]]}|[{'type',391,'constraint',[{'atom',391,'is_subtype'}|[[{'var',391,'NumDeleted'}|[{'type',391,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'internal_select_delete',2},[{'type',398,'bounded_fun',[{'type',398,'fun',[{'type',398,'product',[{'var',398,'Tab'}|[{'var',398,'MatchSpec'}]]}|[{'var',398,'NumDeleted'}]]}|[[{'type',399,'constraint',[{'atom',399,'is_subtype'}|[[{'var',399,'Tab'}|[{'user_type',399,'tab',[]}]]]]}|[{'type',400,'constraint',[{'atom',400,'is_subtype'}|[[{'var',400,'MatchSpec'}|[{'user_type',400,'match_spec',[]}]]]]}|[{'type',401,'constraint',[{'atom',401,'is_subtype'}|[[{'var',401,'NumDeleted'}|[{'type',401,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'select_replace',2},[{'type',406,'bounded_fun',[{'type',406,'fun',[{'type',406,'product',[{'var',406,'Tab'}|[{'var',406,'MatchSpec'}]]}|[{'var',406,'NumReplaced'}]]}|[[{'type',407,'constraint',[{'atom',407,'is_subtype'}|[[{'var',407,'Tab'}|[{'user_type',407,'tab',[]}]]]]}|[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'MatchSpec'}|[{'user_type',408,'match_spec',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'NumReplaced'}|[{'type',409,'non_neg_integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'select_reverse',2},[{'type',414,'bounded_fun',[{'type',414,'fun',[{'type',414,'product',[{'var',414,'Tab'}|[{'var',414,'MatchSpec'}]]}|[{'type',414,'list',[{'var',414,'Match'}]}]]}|[[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Tab'}|[{'user_type',415,'tab',[]}]]]]}|[{'type',416,'constraint',[{'atom',416,'is_subtype'}|[[{'var',416,'MatchSpec'}|[{'user_type',416,'match_spec',[]}]]]]}|[{'type',417,'constraint',[{'atom',417,'is_subtype'}|[[{'var',417,'Match'}|[{'type',417,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'select_reverse',3},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'Tab'}|[{'var',422,'MatchSpec'}|[{'var',422,'Limit'}]]]}|[{'type',422,'union',[{'type',422,'tuple',[{'type',422,'list',[{'var',422,'Match'}]}|[{'var',422,'Continuation'}]]}|[{'atom',423,'$end_of_table'}]]}]]}|[[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'Tab'}|[{'user_type',424,'tab',[]}]]]]}|[{'type',425,'constraint',[{'atom',425,'is_subtype'}|[[{'var',425,'MatchSpec'}|[{'user_type',425,'match_spec',[]}]]]]}|[{'type',426,'constraint',[{'atom',426,'is_subtype'}|[[{'var',426,'Limit'}|[{'type',426,'pos_integer',[]}]]]]}|[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'Match'}|[{'type',427,'term',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Continuation'}|[{'user_type',428,'continuation',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'select_reverse',1},[{'type',433,'bounded_fun',[{'type',433,'fun',[{'type',433,'product',[{'var',433,'Continuation'}]}|[{'type',433,'union',[{'type',433,'tuple',[{'type',433,'list',[{'var',433,'Match'}]}|[{'var',433,'Continuation'}]]}|[{'atom',434,'$end_of_table'}]]}]]}|[[{'type',435,'constraint',[{'atom',435,'is_subtype'}|[[{'var',435,'Continuation'}|[{'user_type',435,'continuation',[]}]]]]}|[{'type',436,'constraint',[{'atom',436,'is_subtype'}|[[{'var',436,'Match'}|[{'type',436,'term',[]}]]]]}]]]]}]}]
, 'spec' = [{{'setopts',2},[{'type',441,'bounded_fun',[{'type',441,'fun',[{'type',441,'product',[{'var',441,'Tab'}|[{'var',441,'Opts'}]]}|[{'atom',441,'true'}]]}|[[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'Tab'}|[{'user_type',442,'tab',[]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'Opts'}|[{'type',443,'union',[{'var',443,'Opt'}|[{'type',443,'list',[{'var',443,'Opt'}]}]]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'Opt'}|[{'type',444,'union',[{'type',444,'tuple',[{'atom',444,'heir'}|[{'type',444,'pid',[]}|[{'var',444,'HeirData'}]]]}|[{'type',444,'tuple',[{'atom',444,'heir'}|[{'atom',444,'none'}]]}]]}]]]]}|[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'HeirData'}|[{'type',445,'term',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'slot',2},[{'type',450,'bounded_fun',[{'type',450,'fun',[{'type',450,'product',[{'var',450,'Tab'}|[{'var',450,'I'}]]}|[{'type',450,'union',[{'type',450,'list',[{'var',450,'Object'}]}|[{'atom',450,'$end_of_table'}]]}]]}|[[{'type',451,'constraint',[{'atom',451,'is_subtype'}|[[{'var',451,'Tab'}|[{'user_type',451,'tab',[]}]]]]}|[{'type',452,'constraint',[{'atom',452,'is_subtype'}|[[{'var',452,'I'}|[{'type',452,'non_neg_integer',[]}]]]]}|[{'type',453,'constraint',[{'atom',453,'is_subtype'}|[[{'var',453,'Object'}|[{'type',453,'tuple','any'}]]]]}]]]]]}]}]
, 'spec' = [{{'take',2},[{'type',458,'bounded_fun',[{'type',458,'fun',[{'type',458,'product',[{'var',458,'Tab'}|[{'var',458,'Key'}]]}|[{'type',458,'list',[{'var',458,'Object'}]}]]}|[[{'type',459,'constraint',[{'atom',459,'is_subtype'}|[[{'var',459,'Tab'}|[{'user_type',459,'tab',[]}]]]]}|[{'type',460,'constraint',[{'atom',460,'is_subtype'}|[[{'var',460,'Key'}|[{'type',460,'term',[]}]]]]}|[{'type',461,'constraint',[{'atom',461,'is_subtype'}|[[{'var',461,'Object'}|[{'type',461,'tuple','any'}]]]]}]]]]]}]}]
, 'spec' = [{{'update_counter',3},[{'type',466,'bounded_fun',[{'type',466,'fun',[{'type',466,'product',[{'var',466,'Tab'}|[{'var',466,'Key'}|[{'var',466,'UpdateOp'}]]]}|[{'var',466,'Result'}]]}|[[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'Tab'}|[{'user_type',467,'tab',[]}]]]]}|[{'type',468,'constraint',[{'atom',468,'is_subtype'}|[[{'var',468,'Key'}|[{'type',468,'term',[]}]]]]}|[{'type',469,'constraint',[{'atom',469,'is_subtype'}|[[{'var',469,'UpdateOp'}|[{'type',469,'union',[{'type',469,'tuple',[{'var',469,'Pos'}|[{'var',469,'Incr'}]]}|[{'type',469,'tuple',[{'var',469,'Pos'}|[{'var',469,'Incr'}|[{'var',469,'Threshold'}|[{'var',469,'SetValue'}]]]]}]]}]]]]}|[{'type',470,'constraint',[{'atom',470,'is_subtype'}|[[{'var',470,'Pos'}|[{'type',470,'integer',[]}]]]]}|[{'type',471,'constraint',[{'atom',471,'is_subtype'}|[[{'var',471,'Incr'}|[{'type',471,'integer',[]}]]]]}|[{'type',472,'constraint',[{'atom',472,'is_subtype'}|[[{'var',472,'Threshold'}|[{'type',472,'integer',[]}]]]]}|[{'type',473,'constraint',[{'atom',473,'is_subtype'}|[[{'var',473,'SetValue'}|[{'type',473,'integer',[]}]]]]}|[{'type',474,'constraint',[{'atom',474,'is_subtype'}|[[{'var',474,'Result'}|[{'type',474,'integer',[]}]]]]}]]]]]]]]]]}|[{'type',475,'bounded_fun',[{'type',475,'fun',[{'type',475,'product',[{'var',475,'Tab'}|[{'var',475,'Key'}|[{'type',475,'list',[{'var',475,'UpdateOp'}]}]]]}|[{'type',475,'list',[{'var',475,'Result'}]}]]}|[[{'type',476,'constraint',[{'atom',476,'is_subtype'}|[[{'var',476,'Tab'}|[{'user_type',476,'tab',[]}]]]]}|[{'type',477,'constraint',[{'atom',477,'is_subtype'}|[[{'var',477,'Key'}|[{'type',477,'term',[]}]]]]}|[{'type',478,'constraint',[{'atom',478,'is_subtype'}|[[{'var',478,'UpdateOp'}|[{'type',478,'union',[{'type',478,'tuple',[{'var',478,'Pos'}|[{'var',478,'Incr'}]]}|[{'type',478,'tuple',[{'var',478,'Pos'}|[{'var',478,'Incr'}|[{'var',478,'Threshold'}|[{'var',478,'SetValue'}]]]]}]]}]]]]}|[{'type',479,'constraint',[{'atom',479,'is_subtype'}|[[{'var',479,'Pos'}|[{'type',479,'integer',[]}]]]]}|[{'type',480,'constraint',[{'atom',480,'is_subtype'}|[[{'var',480,'Incr'}|[{'type',480,'integer',[]}]]]]}|[{'type',481,'constraint',[{'atom',481,'is_subtype'}|[[{'var',481,'Threshold'}|[{'type',481,'integer',[]}]]]]}|[{'type',482,'constraint',[{'atom',482,'is_subtype'}|[[{'var',482,'SetValue'}|[{'type',482,'integer',[]}]]]]}|[{'type',483,'constraint',[{'atom',483,'is_subtype'}|[[{'var',483,'Result'}|[{'type',483,'integer',[]}]]]]}]]]]]]]]]]}|[{'type',484,'bounded_fun',[{'type',484,'fun',[{'type',484,'product',[{'var',484,'Tab'}|[{'var',484,'Key'}|[{'var',484,'Incr'}]]]}|[{'var',484,'Result'}]]}|[[{'type',485,'constraint',[{'atom',485,'is_subtype'}|[[{'var',485,'Tab'}|[{'user_type',485,'tab',[]}]]]]}|[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'Key'}|[{'type',486,'term',[]}]]]]}|[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'Incr'}|[{'type',487,'integer',[]}]]]]}|[{'type',488,'constraint',[{'atom',488,'is_subtype'}|[[{'var',488,'Result'}|[{'type',488,'integer',[]}]]]]}]]]]]]}]]]}]
, 'spec' = [{{'update_counter',4},[{'type',493,'bounded_fun',[{'type',493,'fun',[{'type',493,'product',[{'var',493,'Tab'}|[{'var',493,'Key'}|[{'var',493,'UpdateOp'}|[{'var',493,'Default'}]]]]}|[{'var',493,'Result'}]]}|[[{'type',494,'constraint',[{'atom',494,'is_subtype'}|[[{'var',494,'Tab'}|[{'user_type',494,'tab',[]}]]]]}|[{'type',495,'constraint',[{'atom',495,'is_subtype'}|[[{'var',495,'Key'}|[{'type',495,'term',[]}]]]]}|[{'type',496,'constraint',[{'atom',496,'is_subtype'}|[[{'var',496,'UpdateOp'}|[{'type',496,'union',[{'type',496,'tuple',[{'var',496,'Pos'}|[{'var',496,'Incr'}]]}|[{'type',497,'tuple',[{'var',497,'Pos'}|[{'var',497,'Incr'}|[{'var',497,'Threshold'}|[{'var',497,'SetValue'}]]]]}]]}]]]]}|[{'type',498,'constraint',[{'atom',498,'is_subtype'}|[[{'var',498,'Pos'}|[{'type',498,'integer',[]}]]]]}|[{'type',499,'constraint',[{'atom',499,'is_subtype'}|[[{'var',499,'Incr'}|[{'type',499,'integer',[]}]]]]}|[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'Threshold'}|[{'type',500,'integer',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'SetValue'}|[{'type',501,'integer',[]}]]]]}|[{'type',502,'constraint',[{'atom',502,'is_subtype'}|[[{'var',502,'Result'}|[{'type',502,'integer',[]}]]]]}|[{'type',503,'constraint',[{'atom',503,'is_subtype'}|[[{'var',503,'Default'}|[{'type',503,'tuple','any'}]]]]}]]]]]]]]]]]}|[{'type',504,'bounded_fun',[{'type',504,'fun',[{'type',504,'product',[{'var',504,'Tab'}|[{'var',504,'Key'}|[{'type',504,'list',[{'var',504,'UpdateOp'}]}|[{'var',504,'Default'}]]]]}|[{'type',504,'list',[{'var',504,'Result'}]}]]}|[[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Tab'}|[{'user_type',505,'tab',[]}]]]]}|[{'type',506,'constraint',[{'atom',506,'is_subtype'}|[[{'var',506,'Key'}|[{'type',506,'term',[]}]]]]}|[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'UpdateOp'}|[{'type',507,'union',[{'type',507,'tuple',[{'var',507,'Pos'}|[{'var',507,'Incr'}]]}|[{'type',508,'tuple',[{'var',508,'Pos'}|[{'var',508,'Incr'}|[{'var',508,'Threshold'}|[{'var',508,'SetValue'}]]]]}]]}]]]]}|[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'Pos'}|[{'type',509,'integer',[]}]]]]}|[{'type',510,'constraint',[{'atom',510,'is_subtype'}|[[{'var',510,'Incr'}|[{'type',510,'integer',[]}]]]]}|[{'type',511,'constraint',[{'atom',511,'is_subtype'}|[[{'var',511,'Threshold'}|[{'type',511,'integer',[]}]]]]}|[{'type',512,'constraint',[{'atom',512,'is_subtype'}|[[{'var',512,'SetValue'}|[{'type',512,'integer',[]}]]]]}|[{'type',513,'constraint',[{'atom',513,'is_subtype'}|[[{'var',513,'Result'}|[{'type',513,'integer',[]}]]]]}|[{'type',514,'constraint',[{'atom',514,'is_subtype'}|[[{'var',514,'Default'}|[{'type',514,'tuple','any'}]]]]}]]]]]]]]]]]}|[{'type',515,'bounded_fun',[{'type',515,'fun',[{'type',515,'product',[{'var',515,'Tab'}|[{'var',515,'Key'}|[{'var',515,'Incr'}|[{'var',515,'Default'}]]]]}|[{'var',515,'Result'}]]}|[[{'type',516,'constraint',[{'atom',516,'is_subtype'}|[[{'var',516,'Tab'}|[{'user_type',516,'tab',[]}]]]]}|[{'type',517,'constraint',[{'atom',517,'is_subtype'}|[[{'var',517,'Key'}|[{'type',517,'term',[]}]]]]}|[{'type',518,'constraint',[{'atom',518,'is_subtype'}|[[{'var',518,'Incr'}|[{'type',518,'integer',[]}]]]]}|[{'type',519,'constraint',[{'atom',519,'is_subtype'}|[[{'var',519,'Result'}|[{'type',519,'integer',[]}]]]]}|[{'type',520,'constraint',[{'atom',520,'is_subtype'}|[[{'var',520,'Default'}|[{'type',520,'tuple','any'}]]]]}]]]]]]]}]]]}]
, 'spec' = [{{'update_element',3},[{'type',525,'bounded_fun',[{'type',525,'fun',[{'type',525,'product',[{'var',525,'Tab'}|[{'var',525,'Key'}|[{'ann_type',525,[{'var',525,'ElementSpec'}|[{'type',525,'tuple',[{'var',525,'Pos'}|[{'var',525,'Value'}]]}]]}]]]}|[{'type',525,'boolean',[]}]]}|[[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Tab'}|[{'user_type',526,'tab',[]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'Key'}|[{'type',527,'term',[]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'Pos'}|[{'type',528,'pos_integer',[]}]]]]}|[{'type',529,'constraint',[{'atom',529,'is_subtype'}|[[{'var',529,'Value'}|[{'type',529,'term',[]}]]]]}]]]]]]}|[{'type',530,'bounded_fun',[{'type',530,'fun',[{'type',530,'product',[{'var',530,'Tab'}|[{'var',530,'Key'}|[{'ann_type',530,[{'var',530,'ElementSpec'}|[{'type',530,'list',[{'type',530,'tuple',[{'var',530,'Pos'}|[{'var',530,'Value'}]]}]}]]}]]]}|[{'type',530,'boolean',[]}]]}|[[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Tab'}|[{'user_type',531,'tab',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Key'}|[{'type',532,'term',[]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Pos'}|[{'type',533,'pos_integer',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'Value'}|[{'type',534,'term',[]}]]]]}]]]]]]}]]}]
, 'spec' = [{{'whereis',1},[{'type',539,'bounded_fun',[{'type',539,'fun',[{'type',539,'product',[{'var',539,'TableName'}]}|[{'type',539,'union',[{'user_type',539,'tid',[]}|[{'atom',539,'undefined'}]]}]]}|[[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'TableName'}|[{'type',540,'atom',[]}]]]]}]]]}]}]
, 'opaque' = [{'comp_match_spec',{'type',546,'reference',[]},[]}]
, 'spec' = [{{'match_spec_run',2},[{'type',548,'bounded_fun',[{'type',548,'fun',[{'type',548,'product',[{'var',548,'List'}|[{'var',548,'CompiledMatchSpec'}]]}|[{'type',548,'list',[]}]]}|[[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'List'}|[{'type',549,'list',[{'type',549,'term',[]}]}]]]]}|[{'type',550,'constraint',[{'atom',550,'is_subtype'}|[[{'var',550,'CompiledMatchSpec'}|[{'user_type',550,'comp_match_spec',[]}]]]]}]]]]}]}]
, 'spec' = [{{'repair_continuation',2},[{'type',555,'bounded_fun',[{'type',555,'fun',[{'type',555,'product',[{'var',555,'Continuation'}|[{'var',555,'MatchSpec'}]]}|[{'var',555,'Continuation'}]]}|[[{'type',556,'constraint',[{'atom',556,'is_subtype'}|[[{'var',556,'Continuation'}|[{'user_type',556,'continuation',[]}]]]]}|[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'MatchSpec'}|[{'user_type',557,'match_spec',[]}]]]]}]]]]}]}]
, 'spec' = [{{'fun2ms',1},[{'type',591,'bounded_fun',[{'type',591,'fun',[{'type',591,'product',[{'var',591,'LiteralFun'}]}|[{'var',591,'MatchSpec'}]]}|[[{'type',592,'constraint',[{'atom',592,'is_subtype'}|[[{'var',592,'LiteralFun'}|[{'type',592,'function',[]}]]]]}|[{'type',593,'constraint',[{'atom',593,'is_subtype'}|[[{'var',593,'MatchSpec'}|[{'user_type',593,'match_spec',[]}]]]]}]]]]}]}]
, 'spec' = [{{'foldl',3},[{'type',617,'bounded_fun',[{'type',617,'fun',[{'type',617,'product',[{'var',617,'Function'}|[{'var',617,'Acc0'}|[{'var',617,'Tab'}]]]}|[{'var',617,'Acc1'}]]}|[[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'Function'}|[{'type',618,'fun',[{'type',618,'product',[{'ann_type',618,[{'var',618,'Element'}|[{'type',618,'term',[]}]]}|[{'var',618,'AccIn'}]]}|[{'var',618,'AccOut'}]]}]]]]}|[{'type',619,'constraint',[{'atom',619,'is_subtype'}|[[{'var',619,'Tab'}|[{'user_type',619,'tab',[]}]]]]}|[{'type',620,'constraint',[{'atom',620,'is_subtype'}|[[{'var',620,'Acc0'}|[{'type',620,'term',[]}]]]]}|[{'type',621,'constraint',[{'atom',621,'is_subtype'}|[[{'var',621,'Acc1'}|[{'type',621,'term',[]}]]]]}|[{'type',622,'constraint',[{'atom',622,'is_subtype'}|[[{'var',622,'AccIn'}|[{'type',622,'term',[]}]]]]}|[{'type',623,'constraint',[{'atom',623,'is_subtype'}|[[{'var',623,'AccOut'}|[{'type',623,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'foldr',3},[{'type',644,'bounded_fun',[{'type',644,'fun',[{'type',644,'product',[{'var',644,'Function'}|[{'var',644,'Acc0'}|[{'var',644,'Tab'}]]]}|[{'var',644,'Acc1'}]]}|[[{'type',645,'constraint',[{'atom',645,'is_subtype'}|[[{'var',645,'Function'}|[{'type',645,'fun',[{'type',645,'product',[{'ann_type',645,[{'var',645,'Element'}|[{'type',645,'term',[]}]]}|[{'var',645,'AccIn'}]]}|[{'var',645,'AccOut'}]]}]]]]}|[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'Tab'}|[{'user_type',646,'tab',[]}]]]]}|[{'type',647,'constraint',[{'atom',647,'is_subtype'}|[[{'var',647,'Acc0'}|[{'type',647,'term',[]}]]]]}|[{'type',648,'constraint',[{'atom',648,'is_subtype'}|[[{'var',648,'Acc1'}|[{'type',648,'term',[]}]]]]}|[{'type',649,'constraint',[{'atom',649,'is_subtype'}|[[{'var',649,'AccIn'}|[{'type',649,'term',[]}]]]]}|[{'type',650,'constraint',[{'atom',650,'is_subtype'}|[[{'var',650,'AccOut'}|[{'type',650,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'from_dets',2},[{'type',671,'bounded_fun',[{'type',671,'fun',[{'type',671,'product',[{'var',671,'Tab'}|[{'var',671,'DetsTab'}]]}|[{'atom',671,'true'}]]}|[[{'type',672,'constraint',[{'atom',672,'is_subtype'}|[[{'var',672,'Tab'}|[{'user_type',672,'tab',[]}]]]]}|[{'type',673,'constraint',[{'atom',673,'is_subtype'}|[[{'var',673,'DetsTab'}|[{'remote_type',673,[{'atom',673,'dets'}|[{'atom',673,'tab_name'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'to_dets',2},[{'type',689,'bounded_fun',[{'type',689,'fun',[{'type',689,'product',[{'var',689,'Tab'}|[{'var',689,'DetsTab'}]]}|[{'var',689,'DetsTab'}]]}|[[{'type',690,'constraint',[{'atom',690,'is_subtype'}|[[{'var',690,'Tab'}|[{'user_type',690,'tab',[]}]]]]}|[{'type',691,'constraint',[{'atom',691,'is_subtype'}|[[{'var',691,'DetsTab'}|[{'remote_type',691,[{'atom',691,'dets'}|[{'atom',691,'tab_name'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'test_ms',2},[{'type',707,'bounded_fun',[{'type',707,'fun',[{'type',707,'product',[{'var',707,'Tuple'}|[{'var',707,'MatchSpec'}]]}|[{'type',707,'union',[{'type',707,'tuple',[{'atom',707,'ok'}|[{'var',707,'Result'}]]}|[{'type',707,'tuple',[{'atom',707,'error'}|[{'var',707,'Errors'}]]}]]}]]}|[[{'type',708,'constraint',[{'atom',708,'is_subtype'}|[[{'var',708,'Tuple'}|[{'type',708,'tuple','any'}]]]]}|[{'type',709,'constraint',[{'atom',709,'is_subtype'}|[[{'var',709,'MatchSpec'}|[{'user_type',709,'match_spec',[]}]]]]}|[{'type',710,'constraint',[{'atom',710,'is_subtype'}|[[{'var',710,'Result'}|[{'type',710,'term',[]}]]]]}|[{'type',711,'constraint',[{'atom',711,'is_subtype'}|[[{'var',711,'Errors'}|[{'type',711,'list',[{'type',711,'tuple',[{'type',711,'union',[{'atom',711,'warning'}|[{'atom',711,'error'}]]}|[{'type',711,'string',[]}]]}]}]]]]}]]]]]]}]}]
, 'spec' = [{{'init_table',2},[{'type',721,'bounded_fun',[{'type',721,'fun',[{'type',721,'product',[{'var',721,'Tab'}|[{'var',721,'InitFun'}]]}|[{'atom',721,'true'}]]}|[[{'type',722,'constraint',[{'atom',722,'is_subtype'}|[[{'var',722,'Tab'}|[{'user_type',722,'tab',[]}]]]]}|[{'type',723,'constraint',[{'atom',723,'is_subtype'}|[[{'var',723,'InitFun'}|[{'type',723,'fun',[{'type',723,'product',[{'var',723,'Arg'}]}|[{'var',723,'Res'}]]}]]]]}|[{'type',724,'constraint',[{'atom',724,'is_subtype'}|[[{'var',724,'Arg'}|[{'type',724,'union',[{'atom',724,'read'}|[{'atom',724,'close'}]]}]]]]}|[{'type',725,'constraint',[{'atom',725,'is_subtype'}|[[{'var',725,'Res'}|[{'type',725,'union',[{'atom',725,'end_of_input'}|[{'type',725,'tuple',[{'ann_type',725,[{'var',725,'Objects'}|[{'type',725,'list',[{'type',725,'term',[]}]}]]}|[{'var',725,'InitFun'}]]}|[{'type',725,'term',[]}]]]}]]]]}]]]]]]}]}]
, 'spec' = [{{'match_delete',2},[{'type',750,'bounded_fun',[{'type',750,'fun',[{'type',750,'product',[{'var',750,'Tab'}|[{'var',750,'Pattern'}]]}|[{'atom',750,'true'}]]}|[[{'type',751,'constraint',[{'atom',751,'is_subtype'}|[[{'var',751,'Tab'}|[{'user_type',751,'tab',[]}]]]]}|[{'type',752,'constraint',[{'atom',752,'is_subtype'}|[[{'var',752,'Pattern'}|[{'user_type',752,'match_pattern',[]}]]]]}]]]]}]}]
, 'spec' = [{{'tab2list',1},[{'type',760,'bounded_fun',[{'type',760,'fun',[{'type',760,'product',[{'var',760,'Tab'}]}|[{'type',760,'list',[{'var',760,'Object'}]}]]}|[[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'Tab'}|[{'user_type',761,'tab',[]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Object'}|[{'type',762,'tuple','any'}]]]]}]]]]}]}]
, 'spec' = [{{'filter',3},[{'type',767,'fun',[{'type',767,'product',[{'user_type',767,'tab',[]}|[{'type',767,'function',[]}|[{'type',767,'list',[{'type',767,'term',[]}]}]]]}|[{'type',767,'list',[{'type',767,'term',[]}]}]]}]}]
, 'record' = [{'filetab_options',[{'typed_record_field',{'record_field',797,{'atom',797,'object_count'},{'atom',797,'false'}},{'type',797,'boolean',[]}}|[{'typed_record_field',{'record_field',798,{'atom',798,'md5sum'},{'atom',798,'false'}},{'type',798,'boolean',[]}}|[{'typed_record_field',{'record_field',799,{'atom',799,'sync'},{'atom',799,'false'}},{'type',799,'boolean',[]}}]]]}]
, 'spec' = [{{'tab2file',2},[{'type',802,'bounded_fun',[{'type',802,'fun',[{'type',802,'product',[{'var',802,'Tab'}|[{'var',802,'Filename'}]]}|[{'type',802,'union',[{'atom',802,'ok'}|[{'type',802,'tuple',[{'atom',802,'error'}|[{'var',802,'Reason'}]]}]]}]]}|[[{'type',803,'constraint',[{'atom',803,'is_subtype'}|[[{'var',803,'Tab'}|[{'user_type',803,'tab',[]}]]]]}|[{'type',804,'constraint',[{'atom',804,'is_subtype'}|[[{'var',804,'Filename'}|[{'remote_type',804,[{'atom',804,'file'}|[{'atom',804,'name'}|[[]]]]}]]]]}|[{'type',805,'constraint',[{'atom',805,'is_subtype'}|[[{'var',805,'Reason'}|[{'type',805,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'tab2file',3},[{'type',810,'bounded_fun',[{'type',810,'fun',[{'type',810,'product',[{'var',810,'Tab'}|[{'var',810,'Filename'}|[{'var',810,'Options'}]]]}|[{'type',810,'union',[{'atom',810,'ok'}|[{'type',810,'tuple',[{'atom',810,'error'}|[{'var',810,'Reason'}]]}]]}]]}|[[{'type',811,'constraint',[{'atom',811,'is_subtype'}|[[{'var',811,'Tab'}|[{'user_type',811,'tab',[]}]]]]}|[{'type',812,'constraint',[{'atom',812,'is_subtype'}|[[{'var',812,'Filename'}|[{'remote_type',812,[{'atom',812,'file'}|[{'atom',812,'name'}|[[]]]]}]]]]}|[{'type',813,'constraint',[{'atom',813,'is_subtype'}|[[{'var',813,'Options'}|[{'type',813,'list',[{'var',813,'Option'}]}]]]]}|[{'type',814,'constraint',[{'atom',814,'is_subtype'}|[[{'var',814,'Option'}|[{'type',814,'union',[{'type',814,'tuple',[{'atom',814,'extended_info'}|[{'type',814,'list',[{'var',814,'ExtInfo'}]}]]}|[{'type',814,'tuple',[{'atom',814,'sync'}|[{'type',814,'boolean',[]}]]}]]}]]]]}|[{'type',815,'constraint',[{'atom',815,'is_subtype'}|[[{'var',815,'ExtInfo'}|[{'type',815,'union',[{'atom',815,'md5sum'}|[{'atom',815,'object_count'}]]}]]]]}|[{'type',816,'constraint',[{'atom',816,'is_subtype'}|[[{'var',816,'Reason'}|[{'type',816,'term',[]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'file2tab',1},[{'type',989,'bounded_fun',[{'type',989,'fun',[{'type',989,'product',[{'var',989,'Filename'}]}|[{'type',989,'union',[{'type',989,'tuple',[{'atom',989,'ok'}|[{'var',989,'Tab'}]]}|[{'type',989,'tuple',[{'atom',989,'error'}|[{'var',989,'Reason'}]]}]]}]]}|[[{'type',990,'constraint',[{'atom',990,'is_subtype'}|[[{'var',990,'Filename'}|[{'remote_type',990,[{'atom',990,'file'}|[{'atom',990,'name'}|[[]]]]}]]]]}|[{'type',991,'constraint',[{'atom',991,'is_subtype'}|[[{'var',991,'Tab'}|[{'user_type',991,'tab',[]}]]]]}|[{'type',992,'constraint',[{'atom',992,'is_subtype'}|[[{'var',992,'Reason'}|[{'type',992,'term',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'file2tab',2},[{'type',997,'bounded_fun',[{'type',997,'fun',[{'type',997,'product',[{'var',997,'Filename'}|[{'var',997,'Options'}]]}|[{'type',997,'union',[{'type',997,'tuple',[{'atom',997,'ok'}|[{'var',997,'Tab'}]]}|[{'type',997,'tuple',[{'atom',997,'error'}|[{'var',997,'Reason'}]]}]]}]]}|[[{'type',998,'constraint',[{'atom',998,'is_subtype'}|[[{'var',998,'Filename'}|[{'remote_type',998,[{'atom',998,'file'}|[{'atom',998,'name'}|[[]]]]}]]]]}|[{'type',999,'constraint',[{'atom',999,'is_subtype'}|[[{'var',999,'Tab'}|[{'user_type',999,'tab',[]}]]]]}|[{'type',1000,'constraint',[{'atom',1000,'is_subtype'}|[[{'var',1000,'Options'}|[{'type',1000,'list',[{'var',1000,'Option'}]}]]]]}|[{'type',1001,'constraint',[{'atom',1001,'is_subtype'}|[[{'var',1001,'Option'}|[{'type',1001,'tuple',[{'atom',1001,'verify'}|[{'type',1001,'boolean',[]}]]}]]]]}|[{'type',1002,'constraint',[{'atom',1002,'is_subtype'}|[[{'var',1002,'Reason'}|[{'type',1002,'term',[]}]]]]}]]]]]]]}]}]
, 'spec' = [{{'tabfile_info',1},[{'type',1406,'bounded_fun',[{'type',1406,'fun',[{'type',1406,'product',[{'var',1406,'Filename'}]}|[{'type',1406,'union',[{'type',1406,'tuple',[{'atom',1406,'ok'}|[{'var',1406,'TableInfo'}]]}|[{'type',1406,'tuple',[{'atom',1406,'error'}|[{'var',1406,'Reason'}]]}]]}]]}|[[{'type',1407,'constraint',[{'atom',1407,'is_subtype'}|[[{'var',1407,'Filename'}|[{'remote_type',1407,[{'atom',1407,'file'}|[{'atom',1407,'name'}|[[]]]]}]]]]}|[{'type',1408,'constraint',[{'atom',1408,'is_subtype'}|[[{'var',1408,'TableInfo'}|[{'type',1408,'list',[{'var',1408,'InfoItem'}]}]]]]}|[{'type',1409,'constraint',[{'atom',1409,'is_subtype'}|[[{'var',1409,'InfoItem'}|[{'type',1409,'union',[{'type',1409,'tuple',[{'atom',1409,'name'}|[{'type',1409,'atom',[]}]]}|[{'type',1410,'tuple',[{'atom',1410,'type'}|[{'var',1410,'Type'}]]}|[{'type',1411,'tuple',[{'atom',1411,'protection'}|[{'var',1411,'Protection'}]]}|[{'type',1412,'tuple',[{'atom',1412,'named_table'}|[{'type',1412,'boolean',[]}]]}|[{'type',1413,'tuple',[{'atom',1413,'keypos'}|[{'type',1413,'non_neg_integer',[]}]]}|[{'type',1414,'tuple',[{'atom',1414,'size'}|[{'type',1414,'non_neg_integer',[]}]]}|[{'type',1415,'tuple',[{'atom',1415,'extended_info'}|[{'type',1415,'list',[{'var',1415,'ExtInfo'}]}]]}|[{'type',1416,'tuple',[{'atom',1416,'version'}|[{'type',1416,'tuple',[{'ann_type',1416,[{'var',1416,'Major'}|[{'type',1416,'non_neg_integer',[]}]]}|[{'ann_type',1417,[{'var',1417,'Minor'}|[{'type',1417,'non_neg_integer',[]}]]}]]}]]}]]]]]]]]}]]]]}|[{'type',1418,'constraint',[{'atom',1418,'is_subtype'}|[[{'var',1418,'ExtInfo'}|[{'type',1418,'union',[{'atom',1418,'md5sum'}|[{'atom',1418,'object_count'}]]}]]]]}|[{'type',1419,'constraint',[{'atom',1419,'is_subtype'}|[[{'var',1419,'Type'}|[{'type',1419,'union',[{'atom',1419,'bag'}|[{'atom',1419,'duplicate_bag'}|[{'atom',1419,'ordered_set'}|[{'atom',1419,'set'}]]]]}]]]]}|[{'type',1420,'constraint',[{'atom',1420,'is_subtype'}|[[{'var',1420,'Protection'}|[{'type',1420,'union',[{'atom',1420,'private'}|[{'atom',1420,'protected'}|[{'atom',1420,'public'}]]]}]]]]}|[{'type',1421,'constraint',[{'atom',1421,'is_subtype'}|[[{'var',1421,'Reason'}|[{'type',1421,'term',[]}]]]]}]]]]]]]]]}]}]
, 'spec' = [{{'table',1},[{'type',1468,'bounded_fun',[{'type',1468,'fun',[{'type',1468,'product',[{'var',1468,'Tab'}]}|[{'var',1468,'QueryHandle'}]]}|[[{'type',1469,'constraint',[{'atom',1469,'is_subtype'}|[[{'var',1469,'Tab'}|[{'user_type',1469,'tab',[]}]]]]}|[{'type',1470,'constraint',[{'atom',1470,'is_subtype'}|[[{'var',1470,'QueryHandle'}|[{'remote_type',1470,[{'atom',1470,'qlc'}|[{'atom',1470,'query_handle'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'table',2},[{'type',1475,'bounded_fun',[{'type',1475,'fun',[{'type',1475,'product',[{'var',1475,'Tab'}|[{'var',1475,'Options'}]]}|[{'var',1475,'QueryHandle'}]]}|[[{'type',1476,'constraint',[{'atom',1476,'is_subtype'}|[[{'var',1476,'Tab'}|[{'user_type',1476,'tab',[]}]]]]}|[{'type',1477,'constraint',[{'atom',1477,'is_subtype'}|[[{'var',1477,'QueryHandle'}|[{'remote_type',1477,[{'atom',1477,'qlc'}|[{'atom',1477,'query_handle'}|[[]]]]}]]]]}|[{'type',1478,'constraint',[{'atom',1478,'is_subtype'}|[[{'var',1478,'Options'}|[{'type',1478,'union',[{'type',1478,'list',[{'var',1478,'Option'}]}|[{'var',1478,'Option'}]]}]]]]}|[{'type',1479,'constraint',[{'atom',1479,'is_subtype'}|[[{'var',1479,'Option'}|[{'type',1479,'union',[{'type',1479,'tuple',[{'atom',1479,'n_objects'}|[{'var',1479,'NObjects'}]]}|[{'type',1480,'tuple',[{'atom',1480,'traverse'}|[{'var',1480,'TraverseMethod'}]]}]]}]]]]}|[{'type',1481,'constraint',[{'atom',1481,'is_subtype'}|[[{'var',1481,'NObjects'}|[{'type',1481,'union',[{'atom',1481,'default'}|[{'type',1481,'pos_integer',[]}]]}]]]]}|[{'type',1482,'constraint',[{'atom',1482,'is_subtype'}|[[{'var',1482,'TraverseMethod'}|[{'type',1482,'union',[{'atom',1482,'first_next'}|[{'atom',1482,'last_prev'}|[{'atom',1483,'select'}|[{'type',1483,'tuple',[{'atom',1483,'select'}|[{'ann_type',1483,[{'var',1483,'MatchSpec'}|[{'user_type',1483,'match_spec',[]}]]}]]}]]]]}]]]]}]]]]]]]]}]}]
, 'spec' = [{{'i',0},[{'type',1614,'fun',[{'type',1614,'product',[]}|[{'atom',1614,'ok'}]]}]}]
, 'spec' = [{{'i',1},[{'type',1673,'bounded_fun',[{'type',1673,'fun',[{'type',1673,'product',[{'var',1673,'Tab'}]}|[{'atom',1673,'ok'}]]}|[[{'type',1674,'constraint',[{'atom',1674,'is_subtype'}|[[{'var',1674,'Tab'}|[{'user_type',1674,'tab',[]}]]]]}]]]}]}]
, 'spec' = [{{'i',2},[{'type',1679,'fun',[{'type',1679,'product',[{'user_type',1679,'tab',[]}|[{'type',1679,'pos_integer',[]}]]}|[{'atom',1679,'ok'}]]}]}]
, 'spec' = [{{'i',3},[{'type',1684,'fun',[{'type',1684,'product',[{'user_type',1684,'tab',[]}|[{'type',1684,'pos_integer',[]}|[{'type',1684,'pos_integer',[]}]]]}|[{'atom',1684,'ok'}]]}]}] ] 'all'/0 = fun () -> let <_1> = call 'ets':'internal_request_all' () in let <_0> = call 'erlang':'system_info' ('schedulers') in apply 'receive_all'/3 (_1,_0,[])
'receive_all'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_X_Ref,0,All> when 'true' -> All
<Ref,N,All> when 'true' -> receive <{_8,SchedAll}> when call 'erlang':'=:=' (_8,Ref) -> let <_4> = call 'erlang':'-' (N,1) in let <_3> = call 'erlang':'++' (SchedAll,All) in apply 'receive_all'/3 (Ref,_4,_3) after 'infinity' -> 'true' end
'internal_request_all'/0 = fun () -> call 'erlang':'nif_error' ('undef')
'delete'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'delete'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'delete_all_objects'/1 = fun (_0) -> do (call ('ets'-|['result_not_wanted'] ):('internal_delete_all'-|['result_not_wanted'] ) (_0,('undefined'-|['result_not_wanted'] ))-|['result_not_wanted'] ) 'true'
'internal_delete_all'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'delete_object'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'first'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'give_away'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'info'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'info'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'insert'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'insert_new'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'is_compiled_ms'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'last'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'lookup'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'lookup_element'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'match'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'match'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'match'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'match_object'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'match_object'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'match_object'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'match_spec_compile'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'match_spec_run_r'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'member'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'new'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'next'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'prev'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'rename'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'safe_fixtable'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'select'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'select_count'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select_delete'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,[{'_',[],['true']}]> when 'true' -> call 'ets':'internal_delete_all' (Tab,'undefined')
<Tab,MatchSpec> when 'true' -> call 'ets':'internal_select_delete' (Tab,MatchSpec) end
'internal_select_delete'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select_replace'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select_reverse'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'select_reverse'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'select_reverse'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'setopts'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'slot'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'take'/2 = fun (_0,_1) -> call 'erlang':'nif_error' ('undef')
'update_counter'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'update_counter'/4 = fun (_0,_1,_2,_3) -> call 'erlang':'nif_error' ('undef')
'update_element'/3 = fun (_0,_1,_2) -> call 'erlang':'nif_error' ('undef')
'whereis'/1 = fun (_0) -> call 'erlang':'nif_error' ('undef')
'match_spec_run'/2 = fun (_0,_1) -> let <_2> = call 'ets':'match_spec_run_r' (_0,_1,[]) in call 'lists':'reverse' (_2)
'repair_continuation'/2 = fun (_0,_1) -> case <_0,_1> of <'$end_of_table',_20> when 'true' -> '$end_of_table'
<Untouched = {Table,Lastkey,EndCondition,N2,MSRef,L2,N3,N4},MS> when try let <_2> = call 'erlang':'is_integer' (N2) in let <_3> = call 'erlang':'is_list' (L2) in let <_4> = call 'erlang':'is_integer' (N3) in let <_5> = call 'erlang':'is_integer' (N4) in let <_6> = call 'erlang':'and' (_4,_5) in let <_7> = call 'erlang':'and' (_3,_6) in call 'erlang':'and' (_2,_7) of <Try> -> Try catch <T,R> -> 'false' -> case call 'ets':'is_compiled_ms' (MSRef) of <'true'> when 'true' -> Untouched
<'false'> when 'true' -> let <_8> = call 'ets':'match_spec_compile' (MS) in {Table,Lastkey,EndCondition,N2,_8,L2,N3,N4}
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end
<Untouched = {Table,N1,N2,MSRef,L,N3},MS> when try let <_10> = call 'erlang':'is_integer' (N1) in let <_11> = call 'erlang':'is_integer' (N2) in let <_12> = call 'erlang':'is_list' (L) in let <_13> = call 'erlang':'is_integer' (N3) in let <_14> = call 'erlang':'and' (_12,_13) in let <_15> = call 'erlang':'and' (_11,_14) in call 'erlang':'and' (_10,_15) of <Try> -> Try catch <T,R> -> 'false' -> case call 'ets':'is_compiled_ms' (MSRef) of <'true'> when 'true' -> Untouched
<'false'> when 'true' -> let <_16> = call 'ets':'match_spec_compile' (MS) in {Table,N1,N2,_16,L,N3}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18})-|[{'function_name',{'repair_continuation',2}}] )-|['compiler_generated'] ) end
'fun2ms'/1 = fun (_0) -> case _0 of <ShellFun> when call 'erlang':'is_function' (_0) -> case call 'erl_eval':'fun_data' (ShellFun) of <{'fun_data',ImportList,Clauses}> when 'true' -> case call 'ms_transform':'transform_from_shell' ('ets',Clauses,ImportList) of <{'error',[{_5,[{_6,_7,Code}|_8]}|_9],_10}> when 'true' -> let <_1> = call 'ms_transform':'format_error' (Code) in do call 'io':'format' ([69|[114|[114|[111|[114|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]],[_1|[]]) {'error','transform_error'}
<Else> when 'true' -> Else end
<_11> when 'true' -> call 'erlang':'exit' ({'badarg',{'ets','fun2ms',['function'|['called'|['with'|['real'|['fun'|['should'|['be'|['transformed'|['with'|['parse_transform'|['or'|['called'|['with'|['a'|['fun'|['generated'|['in'|['the'|['shell']]]]]]]]]]]]]]]]]]]}}) end
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'fun2ms',1}}] )-|['compiler_generated'] ) end
'foldl'/3 = fun (_0,_1,_2) -> do call 'ets':'safe_fixtable' (_2,'true') let <First> = call 'ets':'first' (_2) in letrec 'after$^0'/0 = fun () -> call 'ets':'safe_fixtable' (_2,'false') in try apply 'do_foldl'/4 (_0,_1,First,_2) of <_4> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _4 catch <_7,_6,_5> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_5,_6)
'do_foldl'/4 = fun (_0,_1,_2,_3) -> case _2 of <'$end_of_table'> when 'true' -> _1
<_12> when 'true' -> let <_5> = call 'ets':'lookup' (_3,_2) in let <_6> = call 'lists':'foldl' (_0,_1,_5) in let <_4> = call 'ets':'next' (_3,_2) in apply 'do_foldl'/4 (_0,_6,_4,_3) end
'foldr'/3 = fun (_0,_1,_2) -> do call 'ets':'safe_fixtable' (_2,'true') let <Last> = call 'ets':'last' (_2) in letrec 'after$^0'/0 = fun () -> call 'ets':'safe_fixtable' (_2,'false') in try apply 'do_foldr'/4 (_0,_1,Last,_2) of <_4> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) _4 catch <_7,_6,_5> -> do (apply 'after$^0'/0 ()-|['compiler_generated'] ) primop 'raise' (_5,_6)
'do_foldr'/4 = fun (_0,_1,_2,_3) -> case _2 of <'$end_of_table'> when 'true' -> _1
<_12> when 'true' -> let <_5> = call 'ets':'lookup' (_3,_2) in let <_6> = call 'lists':'foldr' (_0,_1,_5) in let <_4> = call 'ets':'prev' (_3,_2) in apply 'do_foldr'/4 (_0,_6,_4,_3) end
'from_dets'/2 = fun (_0,_1) -> let <_2> = catch call 'dets':'to_ets' (_1,_0) in case _2 of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason,[_0|[_1|[]]])
<{'EXIT',{Reason1,_X_Stack1}}> when 'true' -> call 'erlang':'error' (Reason1,[_0|[_1|[]]])
<{'EXIT',EReason}> when 'true' -> call 'erlang':'error' (EReason,[_0|[_1|[]]])
<_6> when call 'erlang':'=:=' (_2,_0) -> 'true'
<Unexpected> when 'true' -> call 'erlang':'error' (Unexpected,[_0|[_1|[]]]) end
'to_dets'/2 = fun (_0,_1) -> let <_2> = catch call 'dets':'from_ets' (_1,_0) in case _2 of <{'error',Reason}> when 'true' -> call 'erlang':'error' (Reason,[_0|[_1|[]]])
<{'EXIT',{Reason1,_X_Stack1}}> when 'true' -> call 'erlang':'error' (Reason1,[_0|[_1|[]]])
<{'EXIT',EReason}> when 'true' -> call 'erlang':'error' (EReason,[_0|[_1|[]]])
<'ok'> when 'true' -> _1
<Unexpected> when 'true' -> call 'erlang':'error' (Unexpected,[_0|[_1|[]]]) end
'test_ms'/2 = fun (_0,_1) -> case call 'erlang':'match_spec_test' (_0,_1,'table') of <{'ok',Result,_X_Flags,_X_Messages}> when 'true' -> {'ok',Result}
<Error = {'error',_X_Errors}> when 'true' -> Error
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
'init_table'/2 = fun (_0,_1) -> do call 'ets':'delete_all_objects' (_0) let <_2> = apply _1 ('read') in apply 'init_table_continue'/2 (_0,_2)
'init_table_continue'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Table,'end_of_input'> when 'true' -> 'true'
<Table,{List,Fun}> when try let <_2> = call 'erlang':'is_list' (List) in let <_3> = call 'erlang':'is_function' (Fun) in call 'erlang':'and' (_2,_3) of <Try> -> Try catch <T,R> -> 'false' -> let <_4> = catch apply 'init_table_sub'/2 (Table,List) in case _4 of <{'EXIT',Reason}> when 'true' -> do try apply Fun ('close') of <_catch_value> -> _catch_value catch <Class,_9,Stk> -> 'ok' call 'erlang':'exit' (Reason)
<'true'> when 'true' -> let <_5> = apply Fun ('read') in apply 'init_table_continue'/2 (Table,_5)
(<_6> when 'true' -> primop 'match_fail' ({'case_clause',_6})-|['compiler_generated'] ) end
<_X_Table,Error> when 'true' -> call 'erlang':'exit' (Error) end
'init_table_sub'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Table,[]> when 'true' -> 'true'
<Table,[H|T]> when 'true' -> do call 'ets':'insert' (Table,H) apply 'init_table_sub'/2 (Table,T)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'init_table_sub',2}}] )-|['compiler_generated'] ) end
'match_delete'/2 = fun (_0,_1) -> do call 'ets':'select_delete' (_0,[{_1,[],['true']}|[]]) 'true'
'tab2list'/1 = fun (_0) -> call 'ets':'match_object' (_0,'_')
'filter'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Tn,F,A> when let <_3> = call 'erlang':'is_atom' (Tn) in let <_4> = call 'erlang':'is_integer' (Tn) in call 'erlang':'or' (_3,_4) -> let <_5> = call 'ets':'first' (Tn) in apply 'do_filter'/5 (Tn,_5,F,A,[])
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'filter',3}}] )-|['compiler_generated'] ) end
'do_filter'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_Tab,'$end_of_table',_17,_18,Ack> when 'true' -> Ack
<Tab,Key,F,A,Ack> when 'true' -> let <_5> = call 'ets':'lookup' (Tab,Key) in case call 'erlang':'apply' (F,[_5|A]) of <'false'> when 'true' -> let <_6> = call 'ets':'next' (Tab,Key) in apply 'do_filter'/5 (Tab,_6,F,A,Ack)
<'true'> when 'true' -> let <_7> = call 'ets':'lookup' (Tab,Key) in let <Ack2> = call 'erlang':'++' (_7,Ack) in let <_9> = call 'ets':'next' (Tab,Key) in apply 'do_filter'/5 (Tab,_9,F,A,Ack2)
<{'true',Value}> when 'true' -> let <_10> = call 'ets':'next' (Tab,Key) in apply 'do_filter'/5 (Tab,_10,F,A,[Value|Ack])
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end end
'tab2file'/2 = fun (_0,_1) -> apply 'tab2file'/3 (_0,_1,[])
'tab2file'/3 = fun (_0,_1,_2) -> try case apply 'parse_ft_options'/1 (_2) of <{'ok',FtOptions}> when 'true' -> do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) do case call 'file':'read_file_info' (_1) of <{'error','enoent'}> when 'true' -> 'ok'
<_74> when 'true' -> call 'erlang':'throw' ('eaccess') end let <Name> = call 'erlang':'make_ref' () in do case call 'disk_log':'open' ([{'name',Name}|[{'file',_1}|[]]]) of <{'ok',_75}> when call 'erlang':'=:=' (_75,Name) -> 'ok'
<{'error',Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end try let <_9> = case call 'ets':'info' (_0) of <'undefined'> when 'true' -> call 'erlang':'throw' ('badtab')
<I> when 'true' -> I end in let <_11> = apply 'ft_options_to_list'/1 (FtOptions) in let <_12> = call 'erlang':'++' (_9,[{'major_version',1}|[{'minor_version',0}|[{'extended_info',_11}|[]]]]) in let <_13> = call 'erlang':'list_to_tuple' (_12) in let <Info> = [_13|[]] in (case FtOptions of (<({'filetab_options',_76,_rec0,_77}-|['compiler_generated'] )> when 'true' -> let <_99,_100> = case _rec0 of <'true'> when 'true' -> let <_24> = fun (_21,_20) -> case apply 'md5terms'/2 (_21,_20) of <{NewState,BinList}> when 'true' -> case call 'disk_log':'blog_terms' (Name,BinList) of <'ok'> when 'true' -> NewState
<{'error',Reason2}> when 'true' -> call 'erlang':'throw' (Reason2)
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end in let <_17> = call 'erlang':'md5_init' () in <_24,_17>
<'false'> when 'true' -> let <_30> = fun (_27,_26) -> case call 'disk_log':'log_terms' (Name,_26) of <'ok'> when 'true' -> 'true'
<{'error',Reason2}> when 'true' -> call 'erlang':'throw' (Reason2)
(<_25> when 'true' -> primop 'match_fail' ({'case_clause',_25})-|['compiler_generated'] ) end in <_30,'true'>
(<_31> when 'true' -> primop 'match_fail' ({'case_clause',_31})-|['compiler_generated'] ) end in do call 'ets':'safe_fixtable' (_0,'true') let <_40> = letrec 'after$^2'/0 = fun () -> catch call 'ets':'safe_fixtable' (_0,'false') in try let <NewState> = apply (_99-|['compiler_generated'] ) ((_100-|['compiler_generated'] ),Info) in let <_35> = call 'ets':'select' (_0,[{'_',[],['$_']}],100) in apply 'dump_file'/4 (_35,(_99-|['compiler_generated'] ),NewState,0) of <_36> -> do (apply 'after$^2'/0 ()-|['compiler_generated'] ) _36 catch <_39,_38,_37> -> do (apply 'after$^2'/0 ()-|['compiler_generated'] ) primop 'raise' (_37,_38) in case _40 of <{NewState1,Num}> when 'true' -> (case FtOptions of (<({'filetab_options',_rec1,_80,_81}-|['compiler_generated'] )> when 'true' -> let <_50> = case _rec1 of <'true'> when 'true' -> [{'count',Num}|[]]
<'false'> when 'true' -> []
(<_49> when 'true' -> primop 'match_fail' ({'case_clause',_49})-|['compiler_generated'] ) end in (case FtOptions of (<({'filetab_options',_83,_rec2,_84}-|['compiler_generated'] )> when 'true' -> let <_46> = case _rec2 of <'true'> when 'true' -> let <_44> = call 'erlang':'md5_final' (NewState1) in [{'md5',_44}|[]]
<'false'> when 'true' -> []
(<_45> when 'true' -> primop 'match_fail' ({'case_clause',_45})-|['compiler_generated'] ) end in let <EndInfo> = call 'erlang':'++' (_50,_46) in do case EndInfo of <[]> when 'true' -> 'ok'
<List> when 'true' -> apply (_99-|['compiler_generated'] ) (NewState1,[['$end_of_table'|[List|[]]]|[]]) end (case FtOptions of (<({'filetab_options',_86,_87,_rec3}-|['compiler_generated'] )> when 'true' -> do case _rec3 of <'true'> when 'true' -> case call 'disk_log':'sync' (Name) of <'ok'> when 'true' -> 'ok'
<{'error',Reason2}> when 'true' -> call 'erlang':'throw' (Reason2)
(<_55> when 'true' -> primop 'match_fail' ({'case_clause',_55})-|['compiler_generated'] ) end
<'false'> when 'true' -> 'ok'
(<_56> when 'true' -> primop 'match_fail' ({'case_clause',_56})-|['compiler_generated'] ) end call 'disk_log':'close' (Name)-|['compiler_generated'] )
(<_88> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_85> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_82> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_41> when 'true' -> primop 'match_fail' ({'badmatch',_41})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_78> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <_57> -> _57 catch <_60,_59,_58> -> case <_60,_59,_58> of <('throw'-|['compiler_generated'] ),TReason,_89> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) call 'erlang':'throw' (TReason)
<('exit'-|['compiler_generated'] ),ExReason,_92> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) call 'erlang':'exit' (ExReason)
<('error'-|['compiler_generated'] ),ErReason,_119> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) do (call ('file'-|['result_not_wanted'] ):('delete'-|['result_not_wanted'] ) (_1)-|['result_not_wanted'] ) primop 'raw_raise' ('error',ErReason,_119)
(<_122,_123,_124> when 'true' -> primop 'raise' (_124,_123)-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end of <_67> -> _67 catch <_70,_69,_68> -> case <_70,_69,_68> of <('throw'-|['compiler_generated'] ),TReason2,_97> when 'true' -> {'error',TReason2}
<('exit'-|['compiler_generated'] ),ExReason2,_98> when 'true' -> {'error',ExReason2}
(<_125,_126,_127> when 'true' -> primop 'raise' (_127,_126)-|['compiler_generated'] ) end
'dump_file'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <'$end_of_table',_X_LogFun,State,Num> when 'true' -> {State,Num}
<{Terms,Context},LogFun,State,Num> when 'true' -> let <Count> = call 'erlang':'length' (Terms) in let <NewState> = apply LogFun (State,Terms) in let <_7> = call 'ets':'select' (Context) in let <_6> = call 'erlang':'+' (Num,Count) in apply 'dump_file'/4 (_7,LogFun,NewState,_6)
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'dump_file',4}}] )-|['compiler_generated'] ) end
'ft_options_to_list'/1 = fun (_0) -> case _0 of <{'filetab_options',PS,MD5,_6}> when 'true' -> let <_4> = case PS of <'true'> when 'true' -> ['object_count']
<_7> when 'true' -> [] end in let <_2> = case MD5 of <'true'> when 'true' -> ['md5sum']
<_8> when 'true' -> [] end in call 'erlang':'++' (_4,_2)
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'ft_options_to_list',1}}] )-|['compiler_generated'] ) end
'md5terms'/2 = fun (_0,_1) -> case <_0,_1> of <State,[]> when 'true' -> {State,[]}
<State,[H|T]> when 'true' -> let <B> = call 'erlang':'term_to_binary' (H) in let <NewState> = call 'erlang':'md5_update' (State,B) in case apply 'md5terms'/2 (NewState,T) of <{FinState,TL}> when 'true' -> {FinState,[B|TL]}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'md5terms',2}}] )-|['compiler_generated'] ) end
'parse_ft_options'/1 = fun (_0) -> case _0 of <Options> when call 'erlang':'is_list' (_0) -> let <_1> = apply 'parse_ft_options'/3 (Options,{'filetab_options','false','false','false'},'false') in {'ok',_1}
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'parse_ft_options',1}}] )-|['compiler_generated'] ) end
'parse_ft_options'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],FtOpt,_10> when 'true' -> FtOpt
<[{'sync','true'}|Rest],FtOpt,EI> when 'true' -> case FtOpt of <{'filetab_options',_11,_12,_13}> when 'true' -> let <_5> = call 'erlang':'setelement' (4,FtOpt,'true') in apply 'parse_ft_options'/3 (Rest,_5,EI)
(<_14> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<[{'sync','false'}|Rest],FtOpt,EI> when 'true' -> apply 'parse_ft_options'/3 (Rest,FtOpt,EI)
<[{'extended_info',L}|Rest],FtOpt0,'false'> when 'true' -> let <FtOpt1> = apply 'parse_ft_info_options'/2 (FtOpt0,L) in apply 'parse_ft_options'/3 (Rest,FtOpt1,'true')
<[Other|_15],_16,_17> when 'true' -> call 'erlang':'throw' ({'unknown_option',Other})
<Malformed,_18,_19> when 'true' -> call 'erlang':'throw' ({'malformed_option',Malformed}) end
'parse_ft_info_options'/2 = fun (_0,_1) -> case <_0,_1> of <FtOpt,[]> when 'true' -> FtOpt
<FtOpt,['object_count'|T]> when 'true' -> case FtOpt of <{'filetab_options',_10,_11,_12}> when 'true' -> let <_4> = call 'erlang':'setelement' (2,FtOpt,'true') in apply 'parse_ft_info_options'/2 (_4,T)
(<_13> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<FtOpt,['md5sum'|T]> when 'true' -> case FtOpt of <{'filetab_options',_14,_15,_16}> when 'true' -> let <_7> = call 'erlang':'setelement' (3,FtOpt,'true') in apply 'parse_ft_info_options'/2 (_7,T)
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_18,[Unexpected|_19]> when 'true' -> call 'erlang':'throw' ({'unknown_option',[{'extended_info',[Unexpected|[]]}|[]]})
<_20,Malformed> when 'true' -> call 'erlang':'throw' ({'malformed_option',Malformed}) end
'file2tab'/1 = fun (_0) -> apply 'file2tab'/2 (_0,[])
'file2tab'/2 = fun (_0,_1) -> try case apply 'parse_f2t_opts'/3 (_1,'false',[]) of <{'ok',Verify,TabArg}> when 'true' -> let <Name> = call 'erlang':'make_ref' () in let <_64,_65> = case call 'disk_log':'open' ([{'name',Name}|[{'file',_0}|[{'mode','read_only'}]]]) of <{'ok',_50}> when call 'erlang':'=:=' (_50,Name) -> <'ok',Name>
<{'repaired',_51,_52,_53}> when call 'erlang':'=:=' (_51,Name) -> case Verify of <'true'> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) call 'erlang':'throw' ('badfile')
<'false'> when 'true' -> <'ok',Name>
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
<{'error',Other1}> when 'true' -> call 'erlang':'throw' ({'read_error',Other1})
<Other2> when 'true' -> call 'erlang':'throw' (Other2) end in case (<(_64-|['compiler_generated'] ),(_65-|['compiler_generated'] )>-|['compiler_generated'] ) of <('ok'-|['compiler_generated'] ),_54> when call 'erlang':'=:=' (_54,Name) -> let <_14> = try apply 'get_header_data'/2 (Name,Verify) of <_9> -> _9 catch <_12,_11,_10> -> case <_12,_11,_10> of <('throw'-|['compiler_generated'] ),('badfile'-|['compiler_generated'] ),_55> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) call 'erlang':'throw' ('badfile')
(<_68,_69,_70> when 'true' -> primop 'raise' (_70,_69)-|['compiler_generated'] ) end in case _14 of <{'ok',Major,Minor,FtOptions,MD5State,FullHeader,DLContext}> when 'true' -> letrec 'after$^2'/0 = fun () -> (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) in try do case <> of <> when call 'erlang':'>' (Major,1) -> call 'erlang':'throw' ({'unsupported_file_version',{Major,Minor}})
<> when 'true' -> 'ok' end case apply 'create_tab'/2 (FullHeader,TabArg) of <{'ok',Tab,HeadCount}> when 'true' -> let <_18> = case Verify of <'true'> when 'true' -> FtOptions
<'false'> when 'true' -> {'filetab_options','false','false','false'}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end in (case _18 of (<({'filetab_options',_56,_rec7,_57}-|['compiler_generated'] )> when 'true' -> let <_71,_72> = case _rec7 of <'true'> when 'true' -> let <_26> = fun (_24) -> case _24 of <OS = {OldMD5State,OldCount,_X_OL,ODLContext}> when 'true' -> case apply 'wrap_bchunk'/4 (Name,ODLContext,100,Verify) of <'eof'> when 'true' -> {OS,[]}
<{NDLContext,Blist}> when 'true' -> case apply 'md5_and_convert'/3 (Blist,OldMD5State,OldCount) of <{Termlist,NewMD5State,NewCount,NewLast}> when 'true' -> {{NewMD5State,NewCount,NewLast,NDLContext},Termlist}
(<_22> when 'true' -> primop 'match_fail' ({'badmatch',_22})-|['compiler_generated'] ) end
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
(<_25> when 'true' -> (primop 'match_fail' ({'function_clause',_25})-|[{'function_name',{'-file2tab/2-fun-0-',1}}] )-|['compiler_generated'] ) end in <_26,{MD5State,0,[],DLContext}>
<'false'> when 'true' -> let <_31> = fun (_29) -> case _29 of <OS = {_59,OldCount,_X_OL,ODLContext}> when 'true' -> case apply 'wrap_chunk'/4 (Name,ODLContext,100,Verify) of <'eof'> when 'true' -> {OS,[]}
<{NDLContext,List}> when 'true' -> case apply 'scan_for_endinfo'/2 (List,OldCount) of <{NewLast,NewCount,NewList}> when 'true' -> {{'false',NewCount,NewLast,NDLContext},NewList}
(<_27> when 'true' -> primop 'match_fail' ({'badmatch',_27})-|['compiler_generated'] ) end
(<_28> when 'true' -> primop 'match_fail' ({'case_clause',_28})-|['compiler_generated'] ) end
(<_30> when 'true' -> (primop 'match_fail' ({'function_clause',_30})-|[{'function_name',{'-file2tab/2-fun-1-',1}}] )-|['compiler_generated'] ) end in <_31,{'false',0,[],DLContext}>
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end in try apply 'do_read_and_verify'/6 ((_71-|['compiler_generated'] ),(_72-|['compiler_generated'] ),Tab,_18,HeadCount,Verify) of <_35> -> _35 catch <_38,_37,_36> -> case <_38,_37,_36> of <('throw'-|['compiler_generated'] ),TReason,_60> when 'true' -> do call 'ets':'delete' (Tab) call 'erlang':'throw' (TReason)
<('exit'-|['compiler_generated'] ),ExReason,_61> when 'true' -> do call 'ets':'delete' (Tab) call 'erlang':'exit' (ExReason)
<('error'-|['compiler_generated'] ),ErReason,_75> when 'true' -> do call 'ets':'delete' (Tab) primop 'raw_raise' ('error',ErReason,_75)
(<_76,_77,_78> when 'true' -> primop 'raise' (_78,_77)-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end of <_40> -> do (apply 'after$^2'/0 ()-|['compiler_generated'] ) _40 catch <_43,_42,_41> -> do (apply 'after$^2'/0 ()-|['compiler_generated'] ) primop 'raise' (_41,_42)
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<(_66-|['compiler_generated'] ),(_67-|['compiler_generated'] )> when 'true' -> let <_8> = {(_66-|['compiler_generated'] ),(_67-|['compiler_generated'] )} in primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end of <_44> -> _44 catch <_47,_46,_45> -> case <_47,_46,_45> of <('throw'-|['compiler_generated'] ),TReason2,_62> when 'true' -> {'error',TReason2}
<('exit'-|['compiler_generated'] ),ExReason2,_63> when 'true' -> {'error',ExReason2}
(<_87,_88,_89> when 'true' -> primop 'raise' (_89,_88)-|['compiler_generated'] ) end
'do_read_and_verify'/6 = fun (_0,_1,_2,_3,_4,_5) -> case apply 'load_table'/3 (_0,_1,_2) of <{'ok',{_38,FinalCount,[],_39}}> when 'true' -> (case _3 of (<({'filetab_options',_40,_rec8,_41}-|['compiler_generated'] )> when 'true' -> (case _3 of (<({'filetab_options',_rec9,_43,_44}-|['compiler_generated'] )> when 'true' -> do case <_rec8,_rec9> of <'false','false'> when 'true' -> case _5 of <'false'> when 'true' -> 'ok'
<'true'> when 'true' -> case FinalCount of <_46> when call 'erlang':'=:=' (FinalCount,_4) -> 'ok'
<_47> when 'true' -> call 'erlang':'throw' ('invalid_object_count') end
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<(_65-|['compiler_generated'] ),(_66-|['compiler_generated'] )> when 'true' -> call 'erlang':'throw' ('badfile') end {'ok',_2}-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_42> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'ok',{FinalMD5State,FinalCount,['$end_of_table'|[LastInfo|[]]],_49}}> when 'true' -> let <_14> = case call 'lists':'keyfind' ('count',1,LastInfo) of <{'count',N}> when 'true' -> N
<_50> when 'true' -> 'false' end in let <_17> = case call 'lists':'keyfind' ('md5',1,LastInfo) of <{'md5',M}> when 'true' -> M
<_51> when 'true' -> 'false' end in (case _3 of (<({'filetab_options',_52,_rec10,_53}-|['compiler_generated'] )> when 'true' -> do case _rec10 of <'true'> when 'true' -> case call 'erlang':'md5_final' (FinalMD5State) of <_55> when call 'erlang':'=:=' (_55,_17) -> 'ok'
<_X_MD5MisM> when 'true' -> call 'erlang':'throw' ('checksum_error') end
<'false'> when 'true' -> 'ok'
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end (case _3 of (<({'filetab_options',_rec11,_56,_57}-|['compiler_generated'] )> when 'true' -> do case _rec11 of <'true'> when 'true' -> case FinalCount of <_59> when call 'erlang':'=:=' (FinalCount,_14) -> 'ok'
<_X_Other> when 'true' -> call 'erlang':'throw' ('invalid_object_count') end
<'false'> when 'true' -> (case _3 of (<({'filetab_options',_60,_rec12,_61}-|['compiler_generated'] )> when 'true' -> case <_5,_rec12> of <'true','false'> when 'true' -> case FinalCount of <_63> when call 'erlang':'=:=' (FinalCount,_4) -> 'ok'
<_X_Other2> when 'true' -> call 'erlang':'throw' ('invalid_object_count') end
<(_69-|['compiler_generated'] ),(_70-|['compiler_generated'] )> when 'true' -> 'ok' end-|['compiler_generated'] )
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_30> when 'true' -> primop 'match_fail' ({'case_clause',_30})-|['compiler_generated'] ) end {'ok',_2}-|['compiler_generated'] )
(<_58> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_54> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_31> when 'true' -> primop 'match_fail' ({'case_clause',_31})-|['compiler_generated'] ) end
'parse_f2t_opts'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],Verify,Tab> when 'true' -> {'ok',Verify,Tab}
<[{'verify','true'}|T],_X_OV,Tab> when 'true' -> apply 'parse_f2t_opts'/3 (T,'true',Tab)
<[{'verify','false'}|T],OV,Tab> when 'true' -> apply 'parse_f2t_opts'/3 (T,OV,Tab)
<[{'table',Tab}|T],OV,[]> when 'true' -> apply 'parse_f2t_opts'/3 (T,OV,Tab)
<[Unexpected|_6],_7,_8> when 'true' -> call 'erlang':'throw' ({'unknown_option',Unexpected})
<Malformed,_9,_10> when 'true' -> call 'erlang':'throw' ({'malformed_option',Malformed}) end
'count_mandatory'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 0
<[{Tag,_13}|T]> when let <_1> = call 'erlang':'=:=' (Tag,'name') in let <_2> = call 'erlang':'=:=' (Tag,'type') in let <_3> = call 'erlang':'=:=' (Tag,'protection') in let <_4> = call 'erlang':'=:=' (Tag,'named_table') in let <_5> = call 'erlang':'=:=' (Tag,'keypos') in let <_6> = call 'erlang':'=:=' (Tag,'size') in let <_7> = call 'erlang':'or' (_5,_6) in let <_8> = call 'erlang':'or' (_4,_7) in let <_9> = call 'erlang':'or' (_3,_8) in let <_10> = call 'erlang':'or' (_2,_9) in call 'erlang':'or' (_1,_10) -> let <_11> = apply 'count_mandatory'/1 (T) in call 'erlang':'+' (1,_11)
<[_14|T]> when 'true' -> apply 'count_mandatory'/1 (T)
(<_12> when 'true' -> (primop 'match_fail' ({'function_clause',_12})-|[{'function_name',{'count_mandatory',1}}] )-|['compiler_generated'] ) end
'verify_header_mandatory'/1 = fun (_0) -> let <_1> = apply 'count_mandatory'/1 (_0) in call 'erlang':'=:=' (_1,6)
'wrap_bchunk'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Name,C,N,'true'> when 'true' -> case call 'disk_log':'bchunk' (Name,C,N) of <{_10,_11,X}> when call 'erlang':'>' (X,0) -> call 'erlang':'throw' ('badfile')
<{NC,Bin,_12}> when 'true' -> {NC,Bin}
<Y> when 'true' -> Y end
<Name,C,N,'false'> when 'true' -> case call 'disk_log':'bchunk' (Name,C,N) of <{NC,Bin,_13}> when 'true' -> {NC,Bin}
<Y> when 'true' -> Y end
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'wrap_bchunk',4}}] )-|['compiler_generated'] ) end
'wrap_chunk'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Name,C,N,'true'> when 'true' -> case call 'disk_log':'chunk' (Name,C,N) of <{_10,_11,X}> when call 'erlang':'>' (X,0) -> call 'erlang':'throw' ('badfile')
<{NC,TL,_12}> when 'true' -> {NC,TL}
<Y> when 'true' -> Y end
<Name,C,N,'false'> when 'true' -> case call 'disk_log':'chunk' (Name,C,N) of <{NC,TL,_13}> when 'true' -> {NC,TL}
<Y> when 'true' -> Y end
(<_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7,_6})-|[{'function_name',{'wrap_chunk',4}}] )-|['compiler_generated'] ) end
'get_header_data'/2 = fun (_0,_1) -> case <_0,_1> of <Name,'true'> when 'true' -> case apply 'wrap_bchunk'/4 (Name,'start',1,'true') of <{C,[Bin|[]]}> when call 'erlang':'is_binary' (Bin) -> let <T> = call 'erlang':'binary_to_term' (Bin) in case T of <Tup> when call 'erlang':'is_tuple' (T) -> let <L> = call 'erlang':'tuple_to_list' (Tup) in case apply 'verify_header_mandatory'/1 (L) of <'false'> when 'true' -> call 'erlang':'throw' ('badfile')
<'true'> when 'true' -> let <_5> = case call 'lists':'keyfind' ('major',1,L) of <{'major',Maj}> when 'true' -> Maj
<_40> when 'true' -> 0 end in let <_8> = case call 'lists':'keyfind' ('minor',1,L) of <{'minor',Min}> when 'true' -> Min
<_41> when 'true' -> 0 end in let <_50,_51,_52,_53> = case call 'lists':'keyfind' ('extended_info',1,L) of <{'extended_info',I}> when call 'erlang':'is_list' (I) -> let <_11> = call 'lists':'member' ('object_count',I) in let <_10> = call 'lists':'member' ('md5sum',I) in <'filetab_options',_11,_10,'false'>
<_42> when 'true' -> <'filetab_options','false','false','false'> end in let <_13> = {(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] ),(_52-|['compiler_generated'] ),(_53-|['compiler_generated'] )} in (case (<(_50-|['compiler_generated'] ),(_51-|['compiler_generated'] ),(_52-|['compiler_generated'] ),(_53-|['compiler_generated'] )>-|['compiler_generated'] ) of (<('filetab_options'-|['compiler_generated'] ),_43,_rec13,_44> when 'true' -> let <_19> = case _rec13 of <'true'> when 'true' -> let <X> = call 'erlang':'md5_init' () in call 'erlang':'md5_update' (X,Bin)
<'false'> when 'true' -> 'false'
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end in {'ok',_5,_8,_13,_19,L,C}-|['compiler_generated'] )
(<(_54-|['compiler_generated'] ),(_55-|['compiler_generated'] ),(_56-|['compiler_generated'] ),(_57-|['compiler_generated'] )> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','filetab_options'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<_X_X> when 'true' -> call 'erlang':'throw' ('badfile') end
<_X_Y> when 'true' -> call 'erlang':'throw' ('badfile') end
<Name,'false'> when 'true' -> case apply 'wrap_chunk'/4 (Name,'start',1,'false') of <{C,[Tup|[]]}> when call 'erlang':'is_tuple' (Tup) -> let <L> = call 'erlang':'tuple_to_list' (Tup) in case apply 'verify_header_mandatory'/1 (L) of <'false'> when 'true' -> call 'erlang':'throw' ('badfile')
<'true'> when 'true' -> let <_26> = case call 'lists':'keyfind' ('major_version',1,L) of <{'major_version',Maj}> when 'true' -> Maj
<_46> when 'true' -> 0 end in let <_29> = case call 'lists':'keyfind' ('minor_version',1,L) of <{'minor_version',Min}> when 'true' -> Min
<_47> when 'true' -> 0 end in let <_34> = case call 'lists':'keyfind' ('extended_info',1,L) of <{'extended_info',I}> when call 'erlang':'is_list' (I) -> let <_32> = call 'lists':'member' ('object_count',I) in let <_31> = call 'lists':'member' ('md5sum',I) in {'filetab_options',_32,_31,'false'}
<_48> when 'true' -> {'filetab_options','false','false','false'} end in {'ok',_26,_29,_34,'false',L,C}
(<_36> when 'true' -> primop 'match_fail' ({'case_clause',_36})-|['compiler_generated'] ) end
<_49> when 'true' -> call 'erlang':'throw' ('badfile') end
(<_39,_38> when 'true' -> (primop 'match_fail' ({'function_clause',_39,_38})-|[{'function_name',{'get_header_data',2}}] )-|['compiler_generated'] ) end
'md5_and_convert'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],MD5State,Count> when 'true' -> {[],MD5State,Count,[]}
<[H|T],MD5State,Count> when call 'erlang':'is_binary' (H) -> let <_3> = catch call 'erlang':'binary_to_term' (H) in case _3 of <{'EXIT',_11}> when 'true' -> apply 'md5_and_convert'/3 (T,MD5State,Count)
<L = ['$end_of_table'|[_X_Dat|[]]]> when 'true' -> {[],MD5State,Count,L}
<Term> when 'true' -> let <X> = call 'erlang':'md5_update' (MD5State,H) in let <_5> = call 'erlang':'+' (Count,1) in case apply 'md5_and_convert'/3 (T,X,_5) of <{Rest,NewMD5,NewCount,NewLast}> when 'true' -> {[Term|Rest],NewMD5,NewCount,NewLast}
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end end
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'md5_and_convert',3}}] )-|['compiler_generated'] ) end
'scan_for_endinfo'/2 = fun (_0,_1) -> case <_0,_1> of <[],Count> when 'true' -> {[],Count,[]}
<[_@r0 = ['$end_of_table'|[Dat|[]]]|[]],Count> when 'true' -> {_@r0,Count,[]}
<[Term|T],Count> when 'true' -> let <_2> = call 'erlang':'+' (Count,1) in case apply 'scan_for_endinfo'/2 (T,_2) of <{NewLast,NCount,Rest}> when 'true' -> {NewLast,NCount,[Term|Rest]}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'scan_for_endinfo',2}}] )-|['compiler_generated'] ) end
'load_table'/3 = fun (_0,_1,_2) -> case apply _0 (_1) of <{NewState,NewData}> when 'true' -> case NewData of <[]> when 'true' -> {'ok',NewState}
<List> when 'true' -> do call 'ets':'insert' (_2,List) apply 'load_table'/3 (_0,NewState,_2) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'create_tab'/2 = fun (_0,_1) -> case call 'lists':'keyfind' ('name',1,_0) of <{'name',Name}> when 'true' -> case call 'lists':'keyfind' ('type',1,_0) of <{'type',Type}> when 'true' -> case call 'lists':'keyfind' ('protection',1,_0) of <{'protection',P}> when 'true' -> case call 'lists':'keyfind' ('keypos',1,_0) of <Keypos = {'keypos',_X_Kp}> when 'true' -> case call 'lists':'keyfind' ('size',1,_0) of <{'size',Sz}> when 'true' -> let <L1> = [Type|[P|[Keypos|[]]]] in let <_9> = case call 'lists':'keyfind' ('named_table',1,_0) of <{'named_table','true'}> when 'true' -> ['named_table'|L1]
<{'named_table','false'}> when 'true' -> L1
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in let <_12> = case call 'lists':'keyfind' ('compressed',1,_0) of <{'compressed','true'}> when 'true' -> ['compressed'|_9]
<{'compressed','false'}> when 'true' -> _9
<'false'> when 'true' -> _9
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end in let <_15> = case call 'lists':'keyfind' ('write_concurrency',1,_0) of <Wcc = {'write_concurrency',_28}> when 'true' -> [Wcc|_12]
<_29> when 'true' -> _12 end in let <_18> = case call 'lists':'keyfind' ('read_concurrency',1,_0) of <Rcc = {'read_concurrency',_30}> when 'true' -> [Rcc|_15]
<'false'> when 'true' -> _15
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end in case _1 of <[]> when 'true' -> try let <Tab> = call 'ets':'new' (Name,_18) in {'ok',Tab,Sz} of <_21> -> _21 catch <_24,_23,_22> -> call 'erlang':'throw' ('cannot_create_table')
<_34> when 'true' -> {'ok',_1,Sz} end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'tabfile_info'/1 = fun (_0) -> case _0 of <File> when let <_1> = call 'erlang':'is_list' (_0) in let <_2> = call 'erlang':'is_atom' (_0) in call 'erlang':'or' (_1,_2) -> try let <Name> = call 'erlang':'make_ref' () in let <_37,_38> = case call 'disk_log':'open' ([{'name',Name}|[{'file',File}|[{'mode','read_only'}]]]) of <{'ok',_29}> when call 'erlang':'=:=' (_29,Name) -> <'ok',Name>
<{'repaired',_30,_31,_32}> when call 'erlang':'=:=' (_30,Name) -> <'ok',Name>
<{'error',Other1}> when 'true' -> call 'erlang':'throw' ({'read_error',Other1})
<Other2> when 'true' -> call 'erlang':'throw' (Other2) end in case (<(_37-|['compiler_generated'] ),(_38-|['compiler_generated'] )>-|['compiler_generated'] ) of <('ok'-|['compiler_generated'] ),_33> when call 'erlang':'=:=' (_33,Name) -> let <_12> = try apply 'get_header_data'/2 (Name,'false') of <_7> -> _7 catch <_10,_9,_8> -> case <_10,_9,_8> of <('throw'-|['compiler_generated'] ),('badfile'-|['compiler_generated'] ),_34> when 'true' -> do (call ('disk_log'-|['result_not_wanted'] ):('close'-|['result_not_wanted'] ) (Name)-|['result_not_wanted'] ) call 'erlang':'throw' ('badfile')
(<_41,_42,_43> when 'true' -> primop 'raise' (_43,_42)-|['compiler_generated'] ) end in case _12 of <{'ok',Major,Minor,_X_FtOptions,_X_MD5State,FullHeader,_X_DLContext}> when 'true' -> do case call 'disk_log':'close' (Name) of <'ok'> when 'true' -> 'ok'
<{'error',Reason}> when 'true' -> call 'erlang':'throw' (Reason)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end case call 'lists':'keysearch' ('name',1,FullHeader) of <{'value',N}> when 'true' -> case call 'lists':'keysearch' ('type',1,FullHeader) of <{'value',Type}> when 'true' -> case call 'lists':'keysearch' ('protection',1,FullHeader) of <{'value',P}> when 'true' -> case call 'lists':'keysearch' ('named_table',1,FullHeader) of <{'value',Val}> when 'true' -> case call 'lists':'keysearch' ('keypos',1,FullHeader) of <{'value',Kp}> when 'true' -> case call 'lists':'keysearch' ('size',1,FullHeader) of <{'value',Sz}> when 'true' -> let <_22> = case call 'lists':'keyfind' ('extended_info',1,FullHeader) of <'false'> when 'true' -> {'extended_info',[]}
<Ei0> when 'true' -> Ei0 end in {'ok',[N|[Type|[P|[Val|[Kp|[Sz|[_22|[{'version',{Major,Minor}}|[]]]]]]]]]}
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
(<(_39-|['compiler_generated'] ),(_40-|['compiler_generated'] )> when 'true' -> let <_6> = {(_39-|['compiler_generated'] ),(_40-|['compiler_generated'] )} in primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end of <_24> -> _24 catch <_27,_26,_25> -> case <_27,_26,_25> of <('throw'-|['compiler_generated'] ),TReason,_35> when 'true' -> {'error',TReason}
<('exit'-|['compiler_generated'] ),ExReason,_36> when 'true' -> {'error',ExReason}
(<_44,_45,_46> when 'true' -> primop 'raise' (_46,_45)-|['compiler_generated'] ) end
(<_28> when 'true' -> (primop 'match_fail' ({'function_clause',_28})-|[{'function_name',{'tabfile_info',1}}] )-|['compiler_generated'] ) end
'table'/1 = fun (_0) -> apply 'table'/2 (_0,[])
'table'/2 = fun (_0,_1) -> case apply 'options'/2 (_1,['traverse'|['n_objects']]) of <{'badarg',_53}> when 'true' -> call 'erlang':'error' ('badarg',[_0|[_1|[]]])
<[[Traverse|[NObjs|[]]]|[QlcOptions|[]]]> when 'true' -> let <_9> = case Traverse of <'first_next'> when 'true' -> (fun () -> let <_2> = call 'ets':'first' (_0) in apply 'qlc_next'/2 (_0,_2)-|[{'id',{0,0,'-table/2-fun-0-'}}] )
<'last_prev'> when 'true' -> (fun () -> let <_3> = call 'ets':'last' (_0) in apply 'qlc_prev'/2 (_0,_3)-|[{'id',{0,0,'-table/2-fun-1-'}}] )
<'select'> when 'true' -> (fun (_5) -> let <_4> = call 'ets':'select' (_0,_5,NObjs) in apply 'qlc_select'/1 (_4)-|[{'id',{0,0,'-table/2-fun-2-'}}] )
<{'select',MS}> when 'true' -> (fun () -> let <_7> = call 'ets':'select' (_0,MS,NObjs) in apply 'qlc_select'/1 (_7)-|[{'id',{0,0,'-table/2-fun-3-'}}] )
(<_8> when 'true' -> primop 'match_fail' ({'case_clause',_8})-|['compiler_generated'] ) end in let <PreFun> = fun (_11) -> call 'ets':'safe_fixtable' (_0,'true') in let <PostFun> = fun () -> call 'ets':'safe_fixtable' (_0,'false') in let <InfoFun> = fun (_15) -> apply 'table_info'/2 (_0,_15) in let <_19> = case call 'ets':'info' (_0,'type') of <'ordered_set'> when 'true' -> '=='
<_55> when 'true' -> '=:=' end in let <_29> = case Traverse of <{'select',_X_MS}> when 'true' -> 'undefined'
<_56> when 'true' -> (fun (_25,_24) -> case <_25,_24> of <_X_Pos,[K|[]]> when 'true' -> call 'ets':'lookup' (_0,K)
<_X_Pos,Ks> when 'true' -> let <_23> = fun (_21) -> call 'ets':'lookup' (_0,_21) in call 'lists':'flatmap' (_23,Ks) end-|[{'id',{0,0,'-table/2-fun-8-'}}] ) end in let <FormatFun> = fun (_46) -> case _46 of <{'all',_X_NElements,_X_ElementFun}> when 'true' -> let <_35> = letrec 'lc$^9'/1 = fun (_33) -> case _33 of <[_57|_32]> when call 'erlang':'=/=' (_1,[]) -> let <_34> = apply 'lc$^9'/1 (_32) in ([_1|_34]-|['compiler_generated'] )
(<[_58|_32]> when 'true' -> apply 'lc$^9'/1 (_32)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_63> when 'true' -> (primop 'match_fail' ({'function_clause',_63})-|[{'function_name',{'lc$^9',1}}] )-|['compiler_generated'] ) end in apply 'lc$^9'/1 ([[]]) in let <As> = [_0|_35] in {'ets','table',As}
<{'match_spec',MS}> when 'true' -> let <_37> = apply 'listify'/1 (_1) in {'ets','table',[_0|[[{'traverse',{'select',MS}}|_37]|[]]]}
<{'lookup',_X_KeyPos,[Value|[]],_X_NElements,ElementFun}> when 'true' -> let <_38> = apply ElementFun (Value) in call 'io_lib':'format' ([126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]],['ets'|[_0|[_38|[]]]])
<{'lookup',_X_KeyPos,Values,_X_NElements,ElementFun}> when 'true' -> let <_44> = letrec 'lc$^10'/1 = fun (_41) -> case _41 of <[V|_40]> when 'true' -> let <_42> = apply ElementFun (V) in let <_43> = apply 'lc$^10'/1 (_40) in ([_42|_43]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_64> when 'true' -> (primop 'match_fail' ({'function_clause',_64})-|[{'function_name',{'lc$^10',1}}] )-|['compiler_generated'] ) end in apply 'lc$^10'/1 (Values) in call 'io_lib':'format' ([108|[105|[115|[116|[115|[58|[102|[108|[97|[116|[109|[97|[112|[40|[102|[117|[110|[40|[86|[41|[32|[45|[62|[32|[126|[119|[58|[108|[111|[111|[107|[117|[112|[40|[126|[119|[44|[32|[86|[41|[32|[101|[110|[100|[44|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],['ets'|[_0|[_44|[]]]])
(<_47> when 'true' -> (primop 'match_fail' ({'function_clause',_47})-|[{'function_name',{'-table/2-fun-11-',1}}] )-|['compiler_generated'] ) end in let <_49> = [{'pre_fun',PreFun}|[{'post_fun',PostFun}|[{'info_fun',InfoFun}|[{'format_fun',FormatFun}|[{'key_equality',_19}|[{'lookup_fun',_29}|QlcOptions]]]]]] in call 'qlc':'table' (_9,_49)
(<_50> when 'true' -> primop 'match_fail' ({'case_clause',_50})-|['compiler_generated'] ) end
'table_info'/2 = fun (_0,_1) -> case <_0,_1> of <Tab,'num_of_objects'> when 'true' -> call 'ets':'info' (Tab,'size')
<Tab,'keypos'> when 'true' -> call 'ets':'info' (Tab,'keypos')
<Tab,'is_unique_objects'> when 'true' -> let <_2> = call 'ets':'info' (Tab,'type') in call 'erlang':'=/=' (_2,'duplicate_bag')
<Tab,'is_sorted_key'> when 'true' -> let <_3> = call 'ets':'info' (Tab,'type') in call 'erlang':'=:=' (_3,'ordered_set')
<_X_Tab,_6> when 'true' -> 'undefined' end
'qlc_next'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Tab,'$end_of_table'> when 'true' -> []
<Tab,Key> when 'true' -> let <_4> = call 'ets':'lookup' (Tab,Key) in let <_3> = fun () -> let <_2> = call 'ets':'next' (Tab,Key) in apply 'qlc_next'/2 (Tab,_2) in call 'erlang':'++' (_4,_3) end
'qlc_prev'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Tab,'$end_of_table'> when 'true' -> []
<Tab,Key> when 'true' -> let <_4> = call 'ets':'lookup' (Tab,Key) in let <_3> = fun () -> let <_2> = call 'ets':'prev' (Tab,Key) in apply 'qlc_prev'/2 (Tab,_2) in call 'erlang':'++' (_4,_3) end
'qlc_select'/1 = fun (_0) -> case _0 of <'$end_of_table'> when 'true' -> []
<{Objects,Cont}> when 'true' -> let <_2> = fun () -> let <_1> = call 'ets':'select' (Cont) in apply 'qlc_select'/1 (_1) in call 'erlang':'++' (Objects,_2)
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'qlc_select',1}}] )-|['compiler_generated'] ) end
'options'/2 = fun (_0,_1) -> case <_0,_1> of <Options,Keys> when call 'erlang':'is_list' (Options) -> apply 'options'/3 (Options,Keys,[])
<Option,Keys> when 'true' -> apply 'options'/3 ([Option|[]],Keys,[]) end
'options'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Options,[Key|Keys],L> when call 'erlang':'is_list' (Options) -> let <_8> = case call 'lists':'keyfind' (Key,1,Options) of <{'n_objects','default'}> when 'true' -> let <_3> = apply 'default_option'/1 (Key) in {'ok',_3}
<{'n_objects',NObjs}> when let <_4> = call 'erlang':'is_integer' (NObjs) in let <_5> = call 'erlang':'>=' (NObjs,1) in call 'erlang':'and' (_4,_5) -> {'ok',NObjs}
<{'traverse','select'}> when 'true' -> {'ok','select'}
<{'traverse',Select = {'select',_X_MS}}> when 'true' -> {'ok',Select}
<{'traverse','first_next'}> when 'true' -> {'ok','first_next'}
<{'traverse','last_prev'}> when 'true' -> {'ok','last_prev'}
<{_16,_17}> when call 'erlang':'=:=' (_16,Key) -> 'badarg'
<'false'> when 'true' -> let <Default> = apply 'default_option'/1 (Key) in {'ok',Default}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end in case _8 of <'badarg'> when 'true' -> {'badarg',Key}
<{'ok',Value}> when 'true' -> let <NewOptions> = call 'lists':'keydelete' (Key,1,Options) in apply 'options'/3 (NewOptions,Keys,[Value|L])
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
<Options,[],L> when 'true' -> let <_12> = call 'lists':'reverse' (L) in [_12|[Options|[]]]
(<_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13})-|[{'function_name',{'options',3}}] )-|['compiler_generated'] ) end
'default_option'/1 = fun (_0) -> case _0 of <'traverse'> when 'true' -> 'select'
<'n_objects'> when 'true' -> 100
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'default_option',1}}] )-|['compiler_generated'] ) end
'listify'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> L
<T> when 'true' -> [T|[]] end
'i'/0 = fun () -> do apply 'hform'/6 ('id','name','type','size','mem','owner') do call 'io':'format' ([32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) let <_1> = 'prinfo'/1 in let <_0> = apply 'tabs'/0 () in do call 'lists':'foreach' (_1,_0) 'ok'
'tabs'/0 = fun () -> let <_0> = call 'ets':'all' () in call 'lists':'sort' (_0)
'prinfo'/1 = fun (_0) -> let <_1> = catch apply 'prinfo2'/1 (_0) in case _1 of <{'EXIT',_5}> when 'true' -> let <_2> = apply 'to_string'/1 (_0) in call 'io':'format' ([126|[45|[49|[48|[115|[32|[46|[46|[46|[32|[117|[110|[114|[101|[97|[100|[97|[98|[108|[101|[32|[10]]]]]]]]]]]]]]]]]]]]]],[_2|[]])
<'ok'> when 'true' -> 'ok'
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'prinfo2'/1 = fun (_0) -> let <Name> = call 'ets':'info' (_0,'name') in let <Type> = call 'ets':'info' (_0,'type') in let <Size> = call 'ets':'info' (_0,'size') in let <Mem> = call 'ets':'info' (_0,'memory') in let <Owner> = call 'ets':'info' (_0,'owner') in let <_6> = apply 'is_reg'/1 (Owner) in apply 'hform'/6 (_0,Name,Type,Size,Mem,_6)
'is_reg'/1 = fun (_0) -> case call 'erlang':'process_info' (_0,'registered_name') of <{'registered_name',Name}> when 'true' -> Name
<_3> when 'true' -> _0 end
'hform'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <_11> = letrec 'lc$^0'/1 = fun (_8) -> case _8 of <[T|_7]> when 'true' -> let <_9> = apply 'to_string'/1 (T) in let <_10> = apply 'lc$^0'/1 (_7) in ([_9|_10]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_24> when 'true' -> (primop 'match_fail' ({'function_clause',_24})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 ([_0|[_1|[_2|[_3|[_4|[_5|[]]]]]]]) in case _11 of <[A|[B|[C|[D|[E|_@r0 = [F|[]]]]]]]> when 'true' -> let <A1> = apply 'pad_right'/2 (A,15) in let <B1> = apply 'pad_right'/2 (B,17) in let <C1> = apply 'pad_right'/2 (C,5) in let <D1> = apply 'pad_right'/2 (D,6) in let <E1> = apply 'pad_right'/2 (E,8) in call 'io':'format' ([32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]],[A1|[B1|[C1|[D1|[E1|_@r0]]]]])
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
'pad_right'/2 = fun (_0,_1) -> case <> of <> when try let <_2> = call 'erlang':'length' (_0) in call 'erlang':'>=' (_2,_1) of <Try> -> Try catch <T,R> -> 'false' -> _0
<> when 'true' -> let <_4> = call 'erlang':'length' (_0) in let <_5> = call 'erlang':'-' (_1,_4) in let <_6> = call 'lists':'duplicate' (_5,32) in call 'erlang':'++' (_0,_6) end
'to_string'/1 = fun (_0) -> let <_1> = call 'io_lib':'format' ([126|[112]],[_0|[]]) in call 'lists':'flatten' (_1)
'i'/1 = fun (_0) -> apply 'i'/2 (_0,40)
'i'/2 = fun (_0,_1) -> apply 'i'/3 (_0,_1,80)
'i'/3 = fun (_0,_1,_2) -> let <First> = call 'ets':'first' (_0) in apply 'display_items'/6 (_1,_2,_0,First,1,1)
'display_items'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Height,Width,Tab,'$end_of_table',Turn,Opos> when 'true' -> apply 'choice'/8 (Height,Width,'EOT  (q)uit (p)Digits (k)ill /Regexp -->','eot',Tab,'$end_of_table',Turn,Opos)
<Height,Width,Tab,Key,Turn,Opos> when call 'erlang':'<' (Turn,Height) -> apply 'do_display'/6 (Height,Width,Tab,Key,Turn,Opos)
<Height,Width,Tab,Key,Turn,Opos> when call 'erlang':'>=' (Turn,Height) -> apply 'choice'/8 (Height,Width,'(c)ontinue (q)uit (p)Digits (k)ill /Regexp -->','normal',Tab,Key,Turn,Opos)
(<_13,_12,_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12,_11,_10,_9,_8})-|[{'function_name',{'display_items',6}}] )-|['compiler_generated'] ) end
'choice'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case apply 'get_line'/2 (_2,[99|[10]]) of <[99|[10]]> when call 'erlang':'=:=' (_3,'normal') -> apply 'do_display'/6 (_0,_1,_4,_5,1,_7)
<[99|[10]]> when try let <_8> = call 'erlang':'is_tuple' (_3) in let <_9> = call 'erlang':'element' (1,_3) in let <_10> = call 'erlang':'=:=' (_9,'re') in call 'erlang':'and' (_8,_10) of <Try> -> Try catch <T,R> -> 'false' -> case _3 of <{'re',Re}> when 'true' -> apply 're_search'/7 (_0,_1,_4,_5,Re,1,_7)
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<[113|[10]]> when 'true' -> 'ok'
<[107|[10]]> when 'true' -> do call 'ets':'delete' (_4) 'ok'
<[112|Digs]> when 'true' -> do try let <_13> = catch let <_12> = apply 'nonl'/1 (Digs) in call 'erlang':'list_to_integer' (_12) in case _13 of <{'EXIT',_31}> when 'true' -> call 'io':'put_chars' ([66|[97|[100|[32|[100|[105|[103|[105|[116|[115|[10]]]]]]]]]]])
<Number> when call 'erlang':'=:=' (_3,'normal') -> let <_14> = call 'ets':'first' (_4) in apply 'print_number'/3 (_4,_14,Number)
<Number> when call 'erlang':'=:=' (_3,'eot') -> let <_15> = call 'ets':'first' (_4) in apply 'print_number'/3 (_4,_15,Number)
<Number> when 'true' -> case _3 of <{'re',Re}> when 'true' -> let <_17> = call 'ets':'first' (_4) in apply 'print_re_num'/4 (_4,_17,Number,Re)
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end end of <_catch_value> -> _catch_value catch <Class,Reason,Stk> -> 'ok' apply 'choice'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<[47|Regexp]> when 'true' -> let <_19> = apply 'nonl'/1 (Regexp) in case call 're':'compile' (_19,['unicode']) of <{'ok',Re}> when 'true' -> let <_20> = call 'ets':'first' (_4) in apply 're_search'/7 (_0,_1,_4,_20,Re,1,1)
<{'error',{ErrorString,_X_Pos}}> when 'true' -> do call 'io':'format' ([126|[116|[115|[10]]]],[ErrorString|[]]) apply 'choice'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
<'eof'> when 'true' -> 'ok'
<_32> when 'true' -> apply 'choice'/8 (_0,_1,_2,_3,_4,_5,_6,_7) end
'get_line'/2 = fun (_0,_1) -> let <_2> = call 'io':'get_line' (_0) in case apply 'line_string'/1 (_2) of <[10]> when 'true' -> _1
<L> when 'true' -> L end
'line_string'/1 = fun (_0) -> case _0 of <Binary> when call 'erlang':'is_binary' (_0) -> call 'unicode':'characters_to_list' (Binary)
<Other> when 'true' -> Other end
'nonl'/1 = fun (_0) -> call 'string':'trim' (_0,'trailing',[36|[10]])
'print_number'/3 = fun (_0,_1,_2) -> let <Os> = call 'ets':'lookup' (_0,_1) in let <Len> = call 'erlang':'length' (Os) in case <> of <> when try let <_5> = call 'erlang':'-' (_2,Len) in call 'erlang':'<' (_5,1) of <Try> -> Try catch <T,R> -> 'false' -> let <O> = call 'lists':'nth' (_2,Os) in call 'io':'format' ([126|[112|[126|[110]]]],[O|[]])
<> when 'true' -> let <_8> = call 'ets':'next' (_0,_1) in let <_7> = call 'erlang':'-' (_2,Len) in apply 'print_number'/3 (_0,_8,_7) end
'do_display'/6 = fun (_0,_1,_2,_3,_4,_5) -> let <Objs> = call 'ets':'lookup' (_2,_3) in do apply 'do_display_items'/4 (_0,_1,Objs,_5) let <Len> = call 'erlang':'length' (Objs) in let <_10> = call 'ets':'next' (_2,_3) in let <_9> = call 'erlang':'+' (_4,Len) in let <_8> = call 'erlang':'+' (_5,Len) in apply 'display_items'/6 (_0,_1,_2,_10,_9,_8)
'do_display_items'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Height,Width,[Obj|Tail],Opos> when 'true' -> do apply 'do_display_item'/4 (Height,Width,Obj,Opos) let <_4> = call 'erlang':'+' (Opos,1) in apply 'do_display_items'/4 (Height,Width,Tail,_4)
<_X_Height,_X_Width,[],Opos> when 'true' -> Opos
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'do_display_items',4}}] )-|['compiler_generated'] ) end
'do_display_item'/4 = fun (_0,_1,_2,_3) -> let <L> = apply 'to_string'/1 (_2) in let <_9> = case <> of <> when try let <_6> = call 'erlang':'length' (L) in let <_5> = call 'erlang':'-' (_1,8) in call 'erlang':'>' (_6,_5) of <Try> -> Try catch <T,R> -> 'false' -> let <_7> = call 'erlang':'-' (_1,13) in let <_8> = call 'string':'slice' (L,0,_7) in call 'erlang':'++' (_8,[32|[32|[46|[46|[46]]]]])
<> when 'true' -> L end in call 'io':'format' ([60|[126|[45|[52|[119|[62|[32|[126|[115|[126|[110]]]]]]]]]]],[_3|[_9|[]]])
're_search'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Height,Width,Tab,'$end_of_table',Re,Turn,Opos> when 'true' -> apply 'choice'/8 (Height,Width,'EOT  (q)uit (p)Digits (k)ill /Regexp -->',{'re',Re},Tab,'$end_of_table',Turn,Opos)
<Height,Width,Tab,Key,Re,Turn,Opos> when call 'erlang':'<' (Turn,Height) -> let <_8> = call 'ets':'lookup' (Tab,Key) in apply 're_display'/8 (Height,Width,Tab,Key,_8,Re,Turn,Opos)
<Height,Width,Tab,Key,Re,Turn,Opos> when 'true' -> apply 'choice'/8 (Height,Width,'(c)ontinue (q)uit (p)Digits (k)ill /Regexp -->',{'re',Re},Tab,Key,Turn,Opos) end
're_display'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Height,Width,Tab,Key,[],Re,Turn,Opos> when 'true' -> let <_8> = call 'ets':'next' (Tab,Key) in apply 're_search'/7 (Height,Width,Tab,_8,Re,Turn,Opos)
<Height,Width,Tab,Key,[H|T],Re,Turn,Opos> when 'true' -> let <Str> = apply 'to_string'/1 (H) in case call 're':'run' (Str,Re,[{'capture','none'}]) of <'match'> when 'true' -> do apply 'do_display_item'/4 (Height,Width,H,Opos) let <_11> = call 'erlang':'+' (Turn,1) in let <_10> = call 'erlang':'+' (Opos,1) in apply 're_display'/8 (Height,Width,Tab,Key,T,Re,_11,_10)
<'nomatch'> when 'true' -> apply 're_display'/8 (Height,Width,Tab,Key,T,Re,Turn,Opos)
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end
(<_20,_19,_18,_17,_16,_15,_14,_13> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17,_16,_15,_14,_13})-|[{'function_name',{'re_display',8}}] )-|['compiler_generated'] ) end
'print_re_num'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_15,'$end_of_table',_16,_17> when 'true' -> 'ok'
<Tab,Key,Num,Re> when 'true' -> let <_4> = call 'ets':'lookup' (Tab,Key) in let <Os> = apply 're_match'/2 (_4,Re) in let <Len> = call 'erlang':'length' (Os) in case <> of <> when try let <_7> = call 'erlang':'-' (Num,Len) in call 'erlang':'<' (_7,1) of <Try> -> Try catch <T,R> -> 'false' -> let <O> = call 'lists':'nth' (Num,Os) in call 'io':'format' ([126|[112|[126|[110]]]],[O|[]])
<> when 'true' -> let <_10> = call 'ets':'next' (Tab,Key) in let <_9> = call 'erlang':'-' (Num,Len) in apply 'print_re_num'/4 (Tab,_10,_9,Re) end end
're_match'/2 = fun (_0,_1) -> case <_0,_1> of <[],_7> when 'true' -> []
<[H|T],Re> when 'true' -> let <_2> = apply 'to_string'/1 (H) in case call 're':'run' (_2,Re,[{'capture','none'}]) of <'match'> when 'true' -> let <_3> = apply 're_match'/2 (T,Re) in [H|_3]
<'nomatch'> when 'true' -> apply 're_match'/2 (T,Re)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'re_match',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('ets')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('ets',_0) end