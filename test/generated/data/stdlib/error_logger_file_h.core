module 'error_logger_file_h' ['code_change'/3,'handle_call'/2,'handle_event'/2,'handle_info'/2,'init'/1,'module_info'/0,'module_info'/1,'terminate'/2] attributes [ 'file' = [{[115|[114|[99|[47|[101|[114|[114|[111|[114|[95|[108|[111|[103|[103|[101|[114|[95|[102|[105|[108|[101|[95|[104|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'behaviour' = ['gen_event']
, 'record' = [{'st',[{'record_field',38,{'atom',38,'fd'}}|[{'record_field',39,{'atom',39,'filename'}}|[{'record_field',40,{'atom',40,'prev_handler'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'depth'},{'atom',41,'unlimited'}},{'type',41,'union',[{'atom',41,'unlimited'}|[{'type',41,'non_neg_integer',[]}]]}}]]]]}] ] 'init'/1 = fun (_0) -> case _0 of <{File,{'error_logger',Buf}}> when 'true' -> case apply 'init'/2 (File,'error_logger') of <_@r0 = {'ok',State}> when 'true' -> do apply 'write_events'/2 (State,Buf) _@r0
<Error> when 'true' -> Error end
<File> when 'true' -> apply 'init'/2 (File,[]) end
'init'/2 = fun (_0,_1) -> do call 'erlang':'process_flag' ('trap_exit','true') case call 'file':'open' (_0,['write'|[{'encoding','utf8'}]]) of <{'ok',Fd}> when 'true' -> let <Depth> = call 'error_logger':'get_format_depth' () in let <State> = {'st',Fd,_0,_1,Depth} in {'ok',State}
<Error> when 'true' -> Error end
'handle_event'/2 = fun (_0,_1) -> case <_0,_1> of <{_X_Type,GL,_X_Msg},State> when try let <_3> = call 'erlang':'node' (GL) in let <_2> = call 'erlang':'node' () in call 'erlang':'=/=' (_3,_2) of <Try> -> Try catch <T,R> -> 'false' -> {'ok',State}
<Event,State> when 'true' -> do apply 'write_event'/2 (State,Event) {'ok',State} end
'handle_info'/2 = fun (_0,_1) -> case <_0,_1> of <{'EXIT',Fd,_X_Reason},{'st',_5,_6,PrevHandler,_7}> when call 'erlang':'=:=' (_5,Fd) -> case PrevHandler of <[]> when 'true' -> 'remove_handler'
<_8> when 'true' -> {'swap_handler','install_prev',[],PrevHandler,'go_back'} end
<_9,State> when 'true' -> {'ok',State} end
'handle_call'/2 = fun (_0,_1) -> case <_0,_1> of <'filename',State = {'st',_4,File,_5,_6}> when 'true' -> {'ok',File,State}
<_X_Query,State> when 'true' -> {'ok',{'error','bad_query'},State} end
'terminate'/2 = fun (_0,_1) -> case <_0,_1> of <_X_Reason,{'st',Fd,_4,_5,_6}> when 'true' -> call 'file':'close' (Fd)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'terminate',2}}] )-|['compiler_generated'] ) end
'code_change'/3 = fun (_0,_1,_2) -> {'ok',_1}
'write_events'/2 = fun (_0,_1) -> case <_0,_1> of <State,[Ev|Es]> when 'true' -> do apply 'write_events'/2 (State,Es) apply 'write_event'/2 (State,Ev)
<_X_State,[]> when 'true' -> 'ok'
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'write_events',2}}] )-|['compiler_generated'] ) end
'write_event'/2 = fun (_0,_1) -> case <_0,_1> of <State = {'st',Fd,_14,_15,_16},Event> when 'true' -> case apply 'parse_event'/1 (Event) of <'ignore'> when 'true' -> 'ok'
<{Head,Pid,FormatList}> when 'true' -> let <Time> = call 'erlang':'universaltime' () in let <Header> = apply 'header'/2 (Time,Head) in let <Body> = apply 'format_body'/2 (State,FormatList) in let <_9> = case <> of <> when try let <_6> = call 'erlang':'node' (Pid) in let <_5> = call 'erlang':'node' () in call 'erlang':'=/=' (_6,_5) of <Try> -> Try catch <T,R> -> 'false' -> let <_7> = call 'erlang':'node' (Pid) in let <_8> = call 'erlang':'atom_to_list' (_7) in [[42|[42|[32|[97|[116|[32|[110|[111|[100|[101|[32]]]]]]]]]]]|[_8|[[32|[42|[42|[10]]]]]]]
<> when 'true' -> [] end in call 'io':'put_chars' (Fd,[Header|[_9|[Body|[]]]])
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'write_event',2}}] )-|['compiler_generated'] ) end
'format_body'/2 = fun (_0,_1) -> case <_0,_1> of <State,[{Format,Args}|T]> when 'true' -> let <_7> = try apply 'format'/3 (State,Format,Args) of <_2> -> _2 catch <_6,_5,_4> -> apply 'format'/3 (State,[69|[82|[82|[79|[82|[58|[32|[126|[116|[112|[32|[45|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]],[Format|[Args|[]]]) in let <_9> = apply 'format_body'/2 (State,T) in [_7|_9]
<_X_State,[]> when 'true' -> []
(<_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10})-|[{'function_name',{'format_body',2}}] )-|['compiler_generated'] ) end
'format'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'st',_8,_9,_10,'unlimited'},Format,Args> when 'true' -> call 'io_lib':'format' (Format,Args)
<{'st',_11,_12,_13,Depth},Format0,Args> when 'true' -> let <Format1> = call 'io_lib':'scan_format' (Format0,Args) in let <Format> = apply 'limit_format'/2 (Format1,Depth) in call 'io_lib':'build_text' (Format)
(<_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5})-|[{'function_name',{'format',3}}] )-|['compiler_generated'] ) end
'limit_format'/2 = fun (_0,_1) -> case <_0,_1> of <[M0 = ~{'control_char':=C0}~|T],Depth> when let <_2> = call 'erlang':'=:=' (C0,112) in let <_3> = call 'erlang':'=:=' (C0,119) in call 'erlang':'or' (_2,_3) -> let <C> = call 'erlang':'-' (C0,32) in case M0 of <~{'args':=Args}~> when 'true' -> let <_7> = call 'erlang':'++' (Args,[Depth|[]]) in case <> of (<> when call 'erlang':'is_map' (M0) -> let <_8> = ~{'control_char':=C,'args':=_7|M0}~ in let <_10> = apply 'limit_format'/2 (T,Depth) in [_8|_10]-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',M0})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<[H|T],Depth> when 'true' -> let <_11> = apply 'limit_format'/2 (T,Depth) in [H|_11]
<[],_14> when 'true' -> []
(<_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_13,_12})-|[{'function_name',{'limit_format',2}}] )-|['compiler_generated'] ) end
'parse_event'/1 = fun (_0) -> case _0 of <{'error',_X_GL,{Pid,Format,Args}}> when 'true' -> {[69|[82|[82|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'info_msg',_X_GL,{Pid,Format,Args}}> when 'true' -> {[73|[78|[70|[79|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'warning_msg',_X_GL,{Pid,Format,Args}}> when 'true' -> {[87|[65|[82|[78|[73|[78|[71|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]],Pid,[{Format,Args}|[]]}
<{'error_report',_X_GL,{Pid,'std_error',Args}}> when 'true' -> let <_1> = apply 'format_term'/1 (Args) in {[69|[82|[82|[79|[82|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]],Pid,_1}
<{'info_report',_X_GL,{Pid,'std_info',Args}}> when 'true' -> let <_2> = apply 'format_term'/1 (Args) in {[73|[78|[70|[79|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]],Pid,_2}
<{'warning_report',_X_GL,{Pid,'std_warning',Args}}> when 'true' -> let <_3> = apply 'format_term'/1 (Args) in {[87|[65|[82|[78|[73|[78|[71|[32|[82|[69|[80|[79|[82|[84]]]]]]]]]]]]]],Pid,_3}
<_5> when 'true' -> 'ignore' end
'format_term'/1 = fun (_0) -> case _0 of <Term> when call 'erlang':'is_list' (_0) -> let <_1> = call 'lists':'flatten' (Term) in case apply 'string_p'/1 (_1) of <'true'> when 'true' -> [{[126|[116|[115|[10]]]],[Term|[]]}|[]]
<'false'> when 'true' -> apply 'format_term_list'/1 (Term)
(<_2> when 'true' -> primop 'match_fail' ({'case_clause',_2})-|['compiler_generated'] ) end
<Term> when 'true' -> [{[126|[116|[112|[10]]]],[Term|[]]}|[]] end
'format_term_list'/1 = fun (_0) -> case _0 of <[{Tag,Data}|T]> when 'true' -> let <_1> = apply 'format_term_list'/1 (T) in [{[32|[32|[32|[32|[126|[116|[112|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]],[Tag|[Data|[]]]}|_1]
<[Data|T]> when 'true' -> let <_2> = apply 'format_term_list'/1 (T) in [{[32|[32|[32|[32|[126|[116|[112|[10]]]]]]]],[Data|[]]}|_2]
<[]> when 'true' -> []
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'format_term_list',1}}] )-|['compiler_generated'] ) end
'string_p'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'false'
<FlatList> when 'true' -> call 'io_lib':'printable_list' (FlatList) end
'get_utc_config'/0 = fun () -> case call 'application':'get_env' ('sasl','utc_log') of <{'ok',Val}> when 'true' -> Val
<'undefined'> when 'true' -> case call 'application':'get_env' ('stdlib','utc_log') of <{'ok',Val}> when 'true' -> Val
<'undefined'> when 'true' -> 'false'
(<_0> when 'true' -> primop 'match_fail' ({'case_clause',_0})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'header'/2 = fun (_0,_1) -> case apply 'get_utc_config'/0 () of <'true'> when 'true' -> apply 'header'/3 (_0,_1,[85|[84|[67|[32]]]])
<_6> when 'true' -> let <_2> = call 'calendar':'universal_time_to_local_time' (_0) in apply 'header'/3 (_2,_1,[]) end
'header'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{{Y,Mo,D},{H,Mi,S}},Title,UTC> when 'true' -> let <_3> = apply 'month'/1 (Mo) in let <_4> = apply 't'/1 (H) in let <_5> = apply 't'/1 (Mi) in let <_6> = apply 't'/1 (S) in call 'io_lib':'format' ([126|[110|[61|[126|[116|[115|[61|[61|[61|[61|[32|[126|[112|[45|[126|[115|[45|[126|[112|[58|[58|[126|[115|[58|[126|[115|[58|[126|[115|[32|[126|[115|[61|[61|[61|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Title|[D|[_3|[Y|[_4|[_5|[_6|[UTC|[]]]]]]]]])
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'header',3}}] )-|['compiler_generated'] ) end
't'/1 = fun (_0) -> case _0 of <X> when call 'erlang':'is_integer' (_0) -> let <_1> = call 'erlang':'integer_to_list' (X) in apply 't1'/1 (_1)
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'t',1}}] )-|['compiler_generated'] ) end
't1'/1 = fun (_0) -> case _0 of <_@r0 = [X|[]]> when 'true' -> [48|_@r0]
<X> when 'true' -> X end
'month'/1 = fun (_0) -> case _0 of <1> when 'true' -> [74|[97|[110]]]
<2> when 'true' -> [70|[101|[98]]]
<3> when 'true' -> [77|[97|[114]]]
<4> when 'true' -> [65|[112|[114]]]
<5> when 'true' -> [77|[97|[121]]]
<6> when 'true' -> [74|[117|[110]]]
<7> when 'true' -> [74|[117|[108]]]
<8> when 'true' -> [65|[117|[103]]]
<9> when 'true' -> [83|[101|[112]]]
<10> when 'true' -> [79|[99|[116]]]
<11> when 'true' -> [78|[111|[118]]]
<12> when 'true' -> [68|[101|[99]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'month',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('error_logger_file_h')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('error_logger_file_h',_0) end