module 'random' ['module_info'/0,'module_info'/1,'seed'/0,'seed'/1,'seed'/3,'seed0'/0,'uniform'/0,'uniform'/1,'uniform_s'/1,'uniform_s'/2] attributes [ 'file' = [{[115|[114|[99|[47|[114|[97|[110|[100|[111|[109|[46|[101|[114|[108]]]]]]]]]]]]]],1}]
, 'type' = [{'ran',{'type',37,'tuple',[{'type',37,'integer',[]}|[{'type',37,'integer',[]}|[{'type',37,'integer',[]}]]]},[]}]
, 'spec' = [{{'seed0',0},[{'type',41,'fun',[{'type',41,'product',[]}|[{'user_type',41,'ran',[]}]]}]}]
, 'spec' = [{{'seed',0},[{'type',49,'fun',[{'type',49,'product',[]}|[{'user_type',49,'ran',[]}]]}]}]
, 'spec' = [{{'seed',1},[{'type',61,'bounded_fun',[{'type',61,'fun',[{'type',61,'product',[{'var',61,'SValue'}]}|[{'type',61,'union',[{'atom',61,'undefined'}|[{'user_type',61,'ran',[]}]]}]]}|[[{'type',62,'constraint',[{'atom',62,'is_subtype'}|[[{'var',62,'SValue'}|[{'type',62,'union',[{'type',62,'tuple',[{'var',62,'A1'}|[{'var',62,'A2'}|[{'var',62,'A3'}]]]}|[{'type',62,'integer',[]}]]}]]]]}|[{'type',63,'constraint',[{'atom',63,'is_subtype'}|[[{'var',63,'A1'}|[{'type',63,'integer',[]}]]]]}|[{'type',64,'constraint',[{'atom',64,'is_subtype'}|[[{'var',64,'A2'}|[{'type',64,'integer',[]}]]]]}|[{'type',65,'constraint',[{'atom',65,'is_subtype'}|[[{'var',65,'A3'}|[{'type',65,'integer',[]}]]]]}]]]]]]}]}]
, 'spec' = [{{'seed',3},[{'type',78,'bounded_fun',[{'type',78,'fun',[{'type',78,'product',[{'var',78,'A1'}|[{'var',78,'A2'}|[{'var',78,'A3'}]]]}|[{'type',78,'union',[{'atom',78,'undefined'}|[{'user_type',78,'ran',[]}]]}]]}|[[{'type',79,'constraint',[{'atom',79,'is_subtype'}|[[{'var',79,'A1'}|[{'type',79,'integer',[]}]]]]}|[{'type',80,'constraint',[{'atom',80,'is_subtype'}|[[{'var',80,'A2'}|[{'type',80,'integer',[]}]]]]}|[{'type',81,'constraint',[{'atom',81,'is_subtype'}|[[{'var',81,'A3'}|[{'type',81,'integer',[]}]]]]}]]]]]}]}]
, 'spec' = [{{'seed_put',1},[{'type',89,'fun',[{'type',89,'product',[{'user_type',89,'ran',[]}]}|[{'type',89,'union',[{'atom',89,'undefined'}|[{'user_type',89,'ran',[]}]]}]]}]}]
, 'spec' = [{{'uniform',0},[{'type',97,'fun',[{'type',97,'product',[]}|[{'type',97,'float',[]}]]}]}]
, 'spec' = [{{'uniform',1},[{'type',115,'bounded_fun',[{'type',115,'fun',[{'type',115,'product',[{'var',115,'N'}]}|[{'type',115,'pos_integer',[]}]]}|[[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'N'}|[{'type',116,'pos_integer',[]}]]]]}]]]}]}]
, 'spec' = [{{'uniform_s',1},[{'type',127,'bounded_fun',[{'type',127,'fun',[{'type',127,'product',[{'var',127,'State0'}]}|[{'type',127,'tuple',[{'type',127,'float',[]}|[{'var',127,'State1'}]]}]]}|[[{'type',128,'constraint',[{'atom',128,'is_subtype'}|[[{'var',128,'State0'}|[{'user_type',128,'ran',[]}]]]]}|[{'type',129,'constraint',[{'atom',129,'is_subtype'}|[[{'var',129,'State1'}|[{'user_type',129,'ran',[]}]]]]}]]]]}]}]
, 'spec' = [{{'uniform_s',2},[{'type',142,'bounded_fun',[{'type',142,'fun',[{'type',142,'product',[{'var',142,'N'}|[{'var',142,'State0'}]]}|[{'type',142,'tuple',[{'type',142,'integer',[]}|[{'var',142,'State1'}]]}]]}|[[{'type',143,'constraint',[{'atom',143,'is_subtype'}|[[{'var',143,'N'}|[{'type',143,'pos_integer',[]}]]]]}|[{'type',144,'constraint',[{'atom',144,'is_subtype'}|[[{'var',144,'State0'}|[{'user_type',144,'ran',[]}]]]]}|[{'type',145,'constraint',[{'atom',145,'is_subtype'}|[[{'var',145,'State1'}|[{'user_type',145,'ran',[]}]]]]}]]]]]}]}] ] 'seed0'/0 = fun () -> {3172,9814,20125}
'seed'/0 = fun () -> let <_0> = apply 'seed0'/0 () in case apply 'seed_put'/1 (_0) of <'undefined'> when 'true' -> apply 'seed0'/0 ()
<Tuple = {_2,_3,_4}> when 'true' -> Tuple
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'seed'/1 = fun (_0) -> case _0 of <Int> when call 'erlang':'is_integer' (_0) -> let <_1> = call 'erlang':'bsr' (Int,16) in let <A1> = call 'erlang':'band' (_1,268435455) in let <A2> = call 'erlang':'band' (Int,16777215) in let <_5> = call 'erlang':'bsr' (Int,36) in let <_4> = call 'erlang':'bsr' (A2,16) in let <A3> = call 'erlang':'bor' (_5,_4) in apply 'seed'/3 (A1,A2,A3)
<{A1,A2,A3}> when 'true' -> apply 'seed'/3 (A1,A2,A3)
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'seed',1}}] )-|['compiler_generated'] ) end
'seed'/3 = fun (_0,_1,_2) -> let <_12> = call 'erlang':'abs' (_0) in let <_13> = call 'erlang':'rem' (_12,30268) in let <_14> = call 'erlang':'+' (_13,1) in let <_8> = call 'erlang':'abs' (_1) in let <_9> = call 'erlang':'rem' (_8,30306) in let <_10> = call 'erlang':'+' (_9,1) in let <_4> = call 'erlang':'abs' (_2) in let <_5> = call 'erlang':'rem' (_4,30322) in let <_6> = call 'erlang':'+' (_5,1) in apply 'seed_put'/1 ({_14,_10,_6})
'seed_put'/1 = fun (_0) -> call 'erlang':'put' ('random_seed',_0)
'uniform'/0 = fun () -> let <_1> = case call 'erlang':'get' ('random_seed') of <'undefined'> when 'true' -> apply 'seed0'/0 ()
<Tuple> when 'true' -> Tuple end in case _1 of <{A1,A2,A3}> when 'true' -> let <_3> = call 'erlang':'*' (A1,171) in let <B1> = call 'erlang':'rem' (_3,30269) in let <_5> = call 'erlang':'*' (A2,172) in let <B2> = call 'erlang':'rem' (_5,30307) in let <_7> = call 'erlang':'*' (A3,170) in let <B3> = call 'erlang':'rem' (_7,30323) in do call 'erlang':'put' ('random_seed',{B1,B2,B3}) let <_11> = call 'erlang':'/' (B1,30269) in let <_10> = call 'erlang':'/' (B2,30307) in let <_12> = call 'erlang':'+' (_11,_10) in let <_9> = call 'erlang':'/' (B3,30323) in let <R> = call 'erlang':'+' (_12,_9) in let <_14> = call 'erlang':'trunc' (R) in call 'erlang':'-' (R,_14)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'uniform'/1 = fun (_0) -> case _0 of <N> when let <_1> = call 'erlang':'is_integer' (_0) in let <_2> = call 'erlang':'>=' (_0,1) in call 'erlang':'and' (_1,_2) -> let <_3> = apply 'uniform'/0 () in let <_4> = call 'erlang':'*' (_3,N) in let <_5> = call 'erlang':'trunc' (_4) in call 'erlang':'+' (_5,1)
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'uniform',1}}] )-|['compiler_generated'] ) end
'uniform_s'/1 = fun (_0) -> case _0 of <{A1,A2,A3}> when 'true' -> let <_1> = call 'erlang':'*' (A1,171) in let <B1> = call 'erlang':'rem' (_1,30269) in let <_3> = call 'erlang':'*' (A2,172) in let <B2> = call 'erlang':'rem' (_3,30307) in let <_5> = call 'erlang':'*' (A3,170) in let <B3> = call 'erlang':'rem' (_5,30323) in let <_9> = call 'erlang':'/' (B1,30269) in let <_8> = call 'erlang':'/' (B2,30307) in let <_10> = call 'erlang':'+' (_9,_8) in let <_7> = call 'erlang':'/' (B3,30323) in let <R> = call 'erlang':'+' (_10,_7) in let <_12> = call 'erlang':'trunc' (R) in let <_13> = call 'erlang':'-' (R,_12) in {_13,{B1,B2,B3}}
(<_14> when 'true' -> (primop 'match_fail' ({'function_clause',_14})-|[{'function_name',{'uniform_s',1}}] )-|['compiler_generated'] ) end
'uniform_s'/2 = fun (_0,_1) -> case <_0,_1> of <N,State0> when let <_2> = call 'erlang':'is_integer' (N) in let <_3> = call 'erlang':'>=' (N,1) in call 'erlang':'and' (_2,_3) -> case apply 'uniform_s'/1 (State0) of <{F,State1}> when 'true' -> let <_5> = call 'erlang':'*' (F,N) in let <_6> = call 'erlang':'trunc' (_5) in let <_7> = call 'erlang':'+' (_6,1) in {_7,State1}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'uniform_s',2}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('random')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('random',_0) end