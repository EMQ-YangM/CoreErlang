module 'gen_statem' ['behaviour_info'/1,'call'/2,'call'/3,'cast'/2,'check_response'/2,'enter_loop'/4,'enter_loop'/5,'enter_loop'/6,'format_log'/1,'format_log'/2,'format_status'/2,'init_it'/6,'module_info'/0,'module_info'/1,'reply'/1,'reply'/2,'send_request'/2,'start'/3,'start'/4,'start_link'/3,'start_link'/4,'start_monitor'/3,'start_monitor'/4,'stop'/1,'stop'/3,'system_code_change'/4,'system_continue'/3,'system_get_state'/1,'system_replace_state'/2,'system_terminate'/4,'wait_response'/1,'wait_response'/2,'wakeup_from_hibernate'/3] attributes [ 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[47|[85|[115|[101|[114|[115|[47|[102|[101|[110|[103|[108|[101|[101|[47|[72|[97|[109|[108|[101|[114|[47|[111|[116|[112|[45|[79|[84|[80|[45|[50|[51|[46|[48|[45|[114|[99|[49|[47|[108|[105|[98|[47|[115|[116|[100|[108|[105|[98|[47|[46|[46|[47|[107|[101|[114|[110|[101|[108|[47|[105|[110|[99|[108|[117|[100|[101|[47|[108|[111|[103|[103|[101|[114|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}]
, 'file' = [{[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],23}]
, 'export_type' = [{'event_type',0}|[{'callback_mode_result',0}|[{'init_result',1}|[{'state_enter_result',1}|[{'event_handler_result',1}|[{'reply_action',0}|[{'enter_action',0}|[{'action',0}]]]]]]]]
, 'export_type' = [{'state_function_result',0}|[{'handle_event_result',0}]]
, 'export_type' = [{'transition_option',0}]
, 'export_type' = [{'server_name',0}|[{'server_ref',0}|[{'start_opt',0}|[{'start_ret',0}|[{'enter_loop_opt',0}]]]]]
, 'type' = [{'from',{'type',91,'tuple',[{'ann_type',91,[{'var',91,'To'}|[{'type',91,'pid',[]}]]}|[{'ann_type',91,[{'var',91,'Tag'}|[{'type',91,'term',[]}]]}]]},[]}]
, 'type' = [{'state',{'type',94,'union',[{'user_type',94,'state_name',[]}|[{'type',95,'term',[]}]]},[]}]
, 'type' = [{'state_name',{'type',97,'atom',[]},[]}]
, 'type' = [{'data',{'type',99,'term',[]},[]}]
, 'type' = [{'event_type',{'type',102,'union',[{'user_type',102,'external_event_type',[]}|[{'user_type',102,'timeout_event_type',[]}|[{'atom',102,'internal'}]]]},[]}]
, 'type' = [{'external_event_type',{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'call'}|[{'ann_type',104,[{'var',104,'From'}|[{'user_type',104,'from',[]}]]}]]}|[{'atom',104,'cast'}|[{'atom',104,'info'}]]]},[]}]
, 'type' = [{'timeout_event_type',{'type',106,'union',[{'atom',106,'timeout'}|[{'type',106,'tuple',[{'atom',106,'timeout'}|[{'ann_type',106,[{'var',106,'Name'}|[{'type',106,'term',[]}]]}]]}|[{'atom',106,'state_timeout'}]]]},[]}]
, 'type' = [{'callback_mode_result',{'type',109,'union',[{'user_type',109,'callback_mode',[]}|[{'type',109,'list',[{'type',109,'union',[{'user_type',109,'callback_mode',[]}|[{'user_type',109,'state_enter',[]}]]}]}]]},[]}]
, 'type' = [{'callback_mode',{'type',110,'union',[{'atom',110,'state_functions'}|[{'atom',110,'handle_event_function'}]]},[]}]
, 'type' = [{'state_enter',{'atom',111,'state_enter'},[]}]
, 'type' = [{'transition_option',{'type',114,'union',[{'user_type',114,'postpone',[]}|[{'user_type',114,'hibernate',[]}|[{'user_type',115,'event_timeout',[]}|[{'user_type',115,'generic_timeout',[]}|[{'user_type',115,'state_timeout',[]}]]]]]},[]}]
, 'type' = [{'postpone',{'type',119,'boolean',[]},[]}]
, 'type' = [{'hibernate',{'type',122,'boolean',[]},[]}]
, 'type' = [{'event_timeout',{'ann_type',126,[{'var',126,'Time'}|[{'type',126,'union',[{'type',126,'timeout',[]}|[{'type',126,'integer',[]}]]}]]},[]}]
, 'type' = [{'generic_timeout',{'ann_type',129,[{'var',129,'Time'}|[{'type',129,'union',[{'type',129,'timeout',[]}|[{'type',129,'integer',[]}]]}]]},[]}]
, 'type' = [{'state_timeout',{'ann_type',133,[{'var',133,'Time'}|[{'type',133,'union',[{'type',133,'timeout',[]}|[{'type',133,'integer',[]}]]}]]},[]}]
, 'type' = [{'timeout_option',{'type',134,'tuple',[{'atom',134,'abs'}|[{'ann_type',134,[{'var',134,'Abs'}|[{'type',134,'boolean',[]}]]}]]},[]}]
, 'type' = [{'action',{'type',151,'union',[{'atom',151,'postpone'}|[{'type',152,'tuple',[{'atom',152,'postpone'}|[{'ann_type',152,[{'var',152,'Postpone'}|[{'user_type',152,'postpone',[]}]]}]]}|[{'type',157,'tuple',[{'atom',157,'next_event'}|[{'ann_type',158,[{'var',158,'EventType'}|[{'user_type',158,'event_type',[]}]]}|[{'ann_type',159,[{'var',159,'EventContent'}|[{'type',159,'term',[]}]]}]]]}|[{'type',160,'tuple',[{'atom',160,'change_callback_module'}|[{'ann_type',160,[{'var',160,'NewModule'}|[{'type',160,'module',[]}]]}]]}|[{'user_type',161,'enter_action',[]}]]]]]},[]}]
, 'type' = [{'enter_action',{'type',163,'union',[{'atom',163,'hibernate'}|[{'type',164,'tuple',[{'atom',164,'hibernate'}|[{'ann_type',164,[{'var',164,'Hibernate'}|[{'user_type',164,'hibernate',[]}]]}]]}|[{'user_type',165,'timeout_action',[]}|[{'user_type',166,'reply_action',[]}]]]]},[]}]
, 'type' = [{'timeout_action',{'type',168,'union',[{'ann_type',168,[{'var',168,'Time'}|[{'user_type',168,'event_timeout',[]}]]}|[{'type',169,'tuple',[{'atom',169,'timeout'}|[{'ann_type',170,[{'var',170,'Time'}|[{'user_type',170,'event_timeout',[]}]]}|[{'ann_type',170,[{'var',170,'EventContent'}|[{'type',170,'term',[]}]]}]]]}|[{'type',171,'tuple',[{'atom',171,'timeout'}|[{'ann_type',172,[{'var',172,'Time'}|[{'user_type',172,'event_timeout',[]}]]}|[{'ann_type',173,[{'var',173,'EventContent'}|[{'type',173,'term',[]}]]}|[{'ann_type',174,[{'var',174,'Options'}|[{'type',174,'union',[{'user_type',174,'timeout_option',[]}|[{'type',174,'list',[{'user_type',174,'timeout_option',[]}]}]]}]]}]]]]}|[{'type',176,'tuple',[{'type',176,'tuple',[{'atom',176,'timeout'}|[{'ann_type',176,[{'var',176,'Name'}|[{'type',176,'term',[]}]]}]]}|[{'ann_type',177,[{'var',177,'Time'}|[{'user_type',177,'generic_timeout',[]}]]}|[{'ann_type',177,[{'var',177,'EventContent'}|[{'type',177,'term',[]}]]}]]]}|[{'type',178,'tuple',[{'type',178,'tuple',[{'atom',178,'timeout'}|[{'ann_type',178,[{'var',178,'Name'}|[{'type',178,'term',[]}]]}]]}|[{'ann_type',179,[{'var',179,'Time'}|[{'user_type',179,'generic_timeout',[]}]]}|[{'ann_type',180,[{'var',180,'EventContent'}|[{'type',180,'term',[]}]]}|[{'ann_type',181,[{'var',181,'Options'}|[{'type',181,'union',[{'user_type',181,'timeout_option',[]}|[{'type',181,'list',[{'user_type',181,'timeout_option',[]}]}]]}]]}]]]]}|[{'type',183,'tuple',[{'atom',183,'state_timeout'}|[{'ann_type',184,[{'var',184,'Time'}|[{'user_type',184,'state_timeout',[]}]]}|[{'ann_type',184,[{'var',184,'EventContent'}|[{'type',184,'term',[]}]]}]]]}|[{'type',185,'tuple',[{'atom',185,'state_timeout'}|[{'ann_type',186,[{'var',186,'Time'}|[{'user_type',186,'state_timeout',[]}]]}|[{'ann_type',187,[{'var',187,'EventContent'}|[{'type',187,'term',[]}]]}|[{'ann_type',188,[{'var',188,'Options'}|[{'type',188,'union',[{'user_type',188,'timeout_option',[]}|[{'type',188,'list',[{'user_type',188,'timeout_option',[]}]}]]}]]}]]]]}|[{'user_type',189,'timeout_cancel_action',[]}|[{'user_type',190,'timeout_update_action',[]}]]]]]]]]]},[]}]
, 'type' = [{'timeout_cancel_action',{'type',192,'union',[{'type',192,'tuple',[{'atom',192,'timeout'}|[{'atom',192,'cancel'}]]}|[{'type',193,'tuple',[{'type',193,'tuple',[{'atom',193,'timeout'}|[{'ann_type',193,[{'var',193,'Name'}|[{'type',193,'term',[]}]]}]]}|[{'atom',193,'cancel'}]]}|[{'type',194,'tuple',[{'atom',194,'state_timeout'}|[{'atom',194,'cancel'}]]}]]]},[]}]
, 'type' = [{'timeout_update_action',{'type',196,'union',[{'type',196,'tuple',[{'atom',196,'timeout'}|[{'atom',196,'update'}|[{'ann_type',196,[{'var',196,'EventContent'}|[{'type',196,'term',[]}]]}]]]}|[{'type',197,'tuple',[{'type',197,'tuple',[{'atom',197,'timeout'}|[{'ann_type',197,[{'var',197,'Name'}|[{'type',197,'term',[]}]]}]]}|[{'atom',197,'update'}|[{'ann_type',197,[{'var',197,'EventContent'}|[{'type',197,'term',[]}]]}]]]}|[{'type',198,'tuple',[{'atom',198,'state_timeout'}|[{'atom',198,'update'}|[{'ann_type',198,[{'var',198,'EventContent'}|[{'type',198,'term',[]}]]}]]]}]]]},[]}]
, 'type' = [{'reply_action',{'type',200,'tuple',[{'atom',200,'reply'}|[{'ann_type',201,[{'var',201,'From'}|[{'user_type',201,'from',[]}]]}|[{'ann_type',201,[{'var',201,'Reply'}|[{'type',201,'term',[]}]]}]]]},[]}]
, 'type' = [{'init_result',{'type',204,'union',[{'type',204,'tuple',[{'atom',204,'ok'}|[{'ann_type',204,[{'var',204,'State'}|[{'var',204,'StateType'}]]}|[{'ann_type',204,[{'var',204,'Data'}|[{'user_type',204,'data',[]}]]}]]]}|[{'type',205,'tuple',[{'atom',205,'ok'}|[{'ann_type',205,[{'var',205,'State'}|[{'var',205,'StateType'}]]}|[{'ann_type',205,[{'var',205,'Data'}|[{'user_type',205,'data',[]}]]}|[{'ann_type',206,[{'var',206,'Actions'}|[{'type',206,'union',[{'type',206,'list',[{'user_type',206,'action',[]}]}|[{'user_type',206,'action',[]}]]}]]}]]]]}|[{'atom',207,'ignore'}|[{'type',208,'tuple',[{'atom',208,'stop'}|[{'ann_type',208,[{'var',208,'Reason'}|[{'type',208,'term',[]}]]}]]}]]]]},[{'var',203,'StateType'}]}]
, 'type' = [{'state_function_result',{'user_type',212,'event_handler_result',[{'user_type',212,'state_name',[]}]},[]}]
, 'type' = [{'handle_event_result',{'user_type',214,'event_handler_result',[{'user_type',214,'state',[]}]},[]}]
, 'type' = [{'state_enter_result',{'type',217,'union',[{'type',217,'tuple',[{'atom',217,'next_state'}|[{'var',218,'State'}|[{'ann_type',219,[{'var',219,'NewData'}|[{'user_type',219,'data',[]}]]}]]]}|[{'type',220,'tuple',[{'atom',220,'next_state'}|[{'var',221,'State'}|[{'ann_type',222,[{'var',222,'NewData'}|[{'user_type',222,'data',[]}]]}|[{'ann_type',223,[{'var',223,'Actions'}|[{'type',223,'union',[{'type',223,'list',[{'user_type',223,'enter_action',[]}]}|[{'user_type',223,'enter_action',[]}]]}]]}]]]]}|[{'user_type',224,'state_callback_result',[{'user_type',224,'enter_action',[]}]}]]]},[{'var',216,'State'}]}]
, 'type' = [{'event_handler_result',{'type',226,'union',[{'type',226,'tuple',[{'atom',226,'next_state'}|[{'ann_type',227,[{'var',227,'NextState'}|[{'var',227,'StateType'}]]}|[{'ann_type',228,[{'var',228,'NewData'}|[{'user_type',228,'data',[]}]]}]]]}|[{'type',229,'tuple',[{'atom',229,'next_state'}|[{'ann_type',230,[{'var',230,'NextState'}|[{'var',230,'StateType'}]]}|[{'ann_type',231,[{'var',231,'NewData'}|[{'user_type',231,'data',[]}]]}|[{'ann_type',232,[{'var',232,'Actions'}|[{'type',232,'union',[{'type',232,'list',[{'user_type',232,'action',[]}]}|[{'user_type',232,'action',[]}]]}]]}]]]]}|[{'user_type',233,'state_callback_result',[{'user_type',233,'action',[]}]}]]]},[{'var',225,'StateType'}]}]
, 'type' = [{'state_callback_result',{'type',235,'union',[{'type',235,'tuple',[{'atom',235,'keep_state'}|[{'ann_type',236,[{'var',236,'NewData'}|[{'user_type',236,'data',[]}]]}]]}|[{'type',237,'tuple',[{'atom',237,'keep_state'}|[{'ann_type',238,[{'var',238,'NewData'}|[{'user_type',238,'data',[]}]]}|[{'ann_type',239,[{'var',239,'Actions'}|[{'type',239,'union',[{'type',239,'list',[{'var',239,'ActionType'}]}|[{'var',239,'ActionType'}]]}]]}]]]}|[{'atom',240,'keep_state_and_data'}|[{'type',241,'tuple',[{'atom',241,'keep_state_and_data'}|[{'ann_type',242,[{'var',242,'Actions'}|[{'type',242,'union',[{'type',242,'list',[{'var',242,'ActionType'}]}|[{'var',242,'ActionType'}]]}]]}]]}|[{'type',244,'tuple',[{'atom',244,'repeat_state'}|[{'ann_type',245,[{'var',245,'NewData'}|[{'user_type',245,'data',[]}]]}]]}|[{'type',246,'tuple',[{'atom',246,'repeat_state'}|[{'ann_type',247,[{'var',247,'NewData'}|[{'user_type',247,'data',[]}]]}|[{'ann_type',248,[{'var',248,'Actions'}|[{'type',248,'union',[{'type',248,'list',[{'var',248,'ActionType'}]}|[{'var',248,'ActionType'}]]}]]}]]]}|[{'atom',249,'repeat_state_and_data'}|[{'type',250,'tuple',[{'atom',250,'repeat_state_and_data'}|[{'ann_type',251,[{'var',251,'Actions'}|[{'type',251,'union',[{'type',251,'list',[{'var',251,'ActionType'}]}|[{'var',251,'ActionType'}]]}]]}]]}|[{'atom',253,'stop'}|[{'type',254,'tuple',[{'atom',254,'stop'}|[{'ann_type',255,[{'var',255,'Reason'}|[{'type',255,'term',[]}]]}]]}|[{'type',256,'tuple',[{'atom',256,'stop'}|[{'ann_type',257,[{'var',257,'Reason'}|[{'type',257,'term',[]}]]}|[{'ann_type',258,[{'var',258,'NewData'}|[{'user_type',258,'data',[]}]]}]]]}|[{'type',260,'tuple',[{'atom',260,'stop_and_reply'}|[{'ann_type',261,[{'var',261,'Reason'}|[{'type',261,'term',[]}]]}|[{'ann_type',262,[{'var',262,'Replies'}|[{'type',262,'union',[{'type',262,'list',[{'user_type',262,'reply_action',[]}]}|[{'user_type',262,'reply_action',[]}]]}]]}]]]}|[{'type',263,'tuple',[{'atom',263,'stop_and_reply'}|[{'ann_type',264,[{'var',264,'Reason'}|[{'type',264,'term',[]}]]}|[{'ann_type',265,[{'var',265,'Replies'}|[{'type',265,'union',[{'type',265,'list',[{'user_type',265,'reply_action',[]}]}|[{'user_type',265,'reply_action',[]}]]}]]}|[{'ann_type',266,[{'var',266,'NewData'}|[{'user_type',266,'data',[]}]]}]]]]}]]]]]]]]]]]]]},[{'var',234,'ActionType'}]}]
, 'type' = [{'request_id',{'type',268,'term',[]},[]}]
, 'callback' = [{{'init',1},[{'type',274,'fun',[{'type',274,'product',[{'ann_type',274,[{'var',274,'Args'}|[{'type',274,'term',[]}]]}]}|[{'user_type',274,'init_result',[{'user_type',274,'state',[]}]}]]}]}]
, 'callback' = [{{'callback_mode',0},[{'type',280,'fun',[{'type',280,'product',[]}|[{'user_type',280,'callback_mode_result',[]}]]}]}]
, 'callback' = [{{'state_name',3},[{'type',290,'fun',[{'type',290,'product',[{'atom',291,'enter'}|[{'ann_type',292,[{'var',292,'OldStateName'}|[{'user_type',292,'state_name',[]}]]}|[{'ann_type',293,[{'var',293,'Data'}|[{'user_type',293,'data',[]}]]}]]]}|[{'user_type',294,'state_enter_result',[{'atom',294,'state_name'}]}]]}|[{'type',295,'fun',[{'type',295,'product',[{'user_type',295,'event_type',[]}|[{'ann_type',296,[{'var',296,'EventContent'}|[{'type',296,'term',[]}]]}|[{'ann_type',297,[{'var',297,'Data'}|[{'user_type',297,'data',[]}]]}]]]}|[{'user_type',298,'event_handler_result',[{'user_type',298,'state_name',[]}]}]]}]]}]
, 'callback' = [{{'handle_event',4},[{'type',302,'fun',[{'type',302,'product',[{'atom',303,'enter'}|[{'ann_type',304,[{'var',304,'OldState'}|[{'user_type',304,'state',[]}]]}|[{'var',305,'State'}|[{'ann_type',306,[{'var',306,'Data'}|[{'user_type',306,'data',[]}]]}]]]]}|[{'user_type',307,'state_enter_result',[{'var',307,'State'}]}]]}|[{'type',308,'fun',[{'type',308,'product',[{'user_type',308,'event_type',[]}|[{'ann_type',309,[{'var',309,'EventContent'}|[{'type',309,'term',[]}]]}|[{'ann_type',310,[{'var',310,'State'}|[{'user_type',310,'state',[]}]]}|[{'ann_type',311,[{'var',311,'Data'}|[{'user_type',311,'data',[]}]]}]]]]}|[{'user_type',312,'event_handler_result',[{'user_type',312,'state',[]}]}]]}]]}]
, 'callback' = [{{'terminate',3},[{'type',315,'fun',[{'type',315,'product',[{'ann_type',316,[{'var',316,'Reason'}|[{'type',316,'union',[{'atom',316,'normal'}|[{'atom',316,'shutdown'}|[{'type',316,'tuple',[{'atom',316,'shutdown'}|[{'type',316,'term',[]}]]}|[{'type',317,'term',[]}]]]]}]]}|[{'ann_type',318,[{'var',318,'State'}|[{'user_type',318,'state',[]}]]}|[{'ann_type',319,[{'var',319,'Data'}|[{'user_type',319,'data',[]}]]}]]]}|[{'type',320,'any',[]}]]}]}]
, 'callback' = [{{'code_change',4},[{'type',325,'fun',[{'type',325,'product',[{'ann_type',326,[{'var',326,'OldVsn'}|[{'type',326,'union',[{'type',326,'term',[]}|[{'type',326,'tuple',[{'atom',326,'down'}|[{'type',326,'term',[]}]]}]]}]]}|[{'ann_type',327,[{'var',327,'OldState'}|[{'user_type',327,'state',[]}]]}|[{'ann_type',328,[{'var',328,'OldData'}|[{'user_type',328,'data',[]}]]}|[{'ann_type',329,[{'var',329,'Extra'}|[{'type',329,'term',[]}]]}]]]]}|[{'type',330,'union',[{'type',330,'tuple',[{'atom',330,'ok'}|[{'ann_type',330,[{'var',330,'NewState'}|[{'user_type',330,'state',[]}]]}|[{'ann_type',330,[{'var',330,'NewData'}|[{'user_type',330,'data',[]}]]}]]]}|[{'ann_type',331,[{'var',331,'Reason'}|[{'type',331,'term',[]}]]}]]}]]}]}]
, 'callback' = [{{'format_status',2},[{'type',337,'bounded_fun',[{'type',337,'fun',[{'type',337,'product',[{'var',338,'StatusOption'}|[{'type',339,'list',[{'type',339,'union',[{'type',339,'list',[{'type',339,'tuple',[{'ann_type',339,[{'var',339,'Key'}|[{'type',339,'term',[]}]]}|[{'ann_type',339,[{'var',339,'Value'}|[{'type',339,'term',[]}]]}]]}]}|[{'user_type',340,'state',[]}|[{'user_type',341,'data',[]}]]]}]}]]}|[{'ann_type',342,[{'var',342,'Status'}|[{'type',342,'term',[]}]]}]]}|[[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'StatusOption'}|[{'type',343,'union',[{'atom',343,'normal'}|[{'atom',343,'terminate'}]]}]]]]}]]]}]}]
, 'optional_callbacks' = [{'format_status',2}|[{'terminate',3}|[{'code_change',4}|[{'state_name',3}|[{'handle_event',4}]]]]]
, 'compile' = [{'inline',[{'callback_mode',1}|[{'state_enter',1}|[{'event_type',1}|[{'from',1}|[{'timeout_event_type',1}]]]]]}]
, 'record' = [{'params',[{'typed_record_field',{'record_field',432,{'atom',432,'callback_mode'},{'atom',432,'undefined'}},{'type',432,'union',[{'user_type',432,'callback_mode',[]}|[{'atom',432,'undefined'}]]}}|[{'typed_record_field',{'record_field',433,{'atom',433,'state_enter'},{'atom',433,'false'}},{'type',433,'boolean',[]}}|[{'typed_record_field',{'record_field',434,{'atom',434,'parent'}},{'type',434,'pid',[]}}|[{'typed_record_field',{'record_field',435,{'atom',435,'module'}},{'type',435,'atom',[]}}|[{'typed_record_field',{'record_field',436,{'atom',436,'name'}},{'type',436,'union',[{'type',436,'atom',[]}|[{'type',436,'pid',[]}]]}}|[{'typed_record_field',{'record_field',437,{'atom',437,'hibernate_after'},{'atom',437,'infinity'}},{'type',437,'timeout',[]}}]]]]]]}]
, 'record' = [{'state',[{'typed_record_field',{'record_field',441,{'atom',441,'state_data'},{'tuple',441,[{'atom',441,'undefined'}|[{'atom',441,'undefined'}]]}},{'type',442,'tuple',[{'ann_type',442,[{'var',442,'State'}|[{'type',442,'term',[]}]]}|[{'ann_type',442,[{'var',442,'Data'}|[{'type',442,'term',[]}]]}]]}}|[{'typed_record_field',{'record_field',443,{'atom',443,'postponed'},{'nil',443}},{'type',443,'list',[{'type',443,'tuple',[{'user_type',443,'event_type',[]}|[{'type',443,'term',[]}]]}]}}|[{'typed_record_field',{'record_field',444,{'atom',444,'timers'},{'map',444,[]}},{'type',445,'map',[{'type',445,'map_field_assoc',[{'ann_type',445,[{'var',445,'TimeoutType'}|[{'user_type',445,'timeout_event_type',[]}]]}|[{'type',446,'tuple',[{'ann_type',446,[{'var',446,'TimerRef'}|[{'type',446,'reference',[]}]]}|[{'ann_type',446,[{'var',446,'TimeoutMsg'}|[{'type',446,'term',[]}]]}]]}]]}]}}|[{'typed_record_field',{'record_field',447,{'atom',447,'hibernate'},{'atom',447,'false'}},{'type',447,'boolean',[]}}]]]]}]
, 'type' = [{'server_name',{'type',454,'union',[{'type',454,'tuple',[{'atom',454,'global'}|[{'ann_type',454,[{'var',454,'GlobalName'}|[{'type',454,'term',[]}]]}]]}|[{'type',455,'tuple',[{'atom',455,'via'}|[{'ann_type',455,[{'var',455,'RegMod'}|[{'type',455,'module',[]}]]}|[{'ann_type',455,[{'var',455,'Name'}|[{'type',455,'term',[]}]]}]]]}|[{'type',456,'tuple',[{'atom',456,'local'}|[{'type',456,'atom',[]}]]}]]]},[]}]
, 'type' = [{'server_ref',{'type',458,'union',[{'type',458,'pid',[]}|[{'ann_type',459,[{'var',459,'LocalName'}|[{'type',459,'atom',[]}]]}|[{'type',460,'tuple',[{'ann_type',460,[{'var',460,'Name'}|[{'type',460,'atom',[]}]]}|[{'ann_type',460,[{'var',460,'Node'}|[{'type',460,'atom',[]}]]}]]}|[{'type',461,'tuple',[{'atom',461,'global'}|[{'ann_type',461,[{'var',461,'GlobalName'}|[{'type',461,'term',[]}]]}]]}|[{'type',462,'tuple',[{'atom',462,'via'}|[{'ann_type',462,[{'var',462,'RegMod'}|[{'type',462,'module',[]}]]}|[{'ann_type',462,[{'var',462,'ViaName'}|[{'type',462,'term',[]}]]}]]]}]]]]]},[]}]
, 'type' = [{'start_opt',{'type',464,'union',[{'type',464,'tuple',[{'atom',464,'timeout'}|[{'ann_type',464,[{'var',464,'Time'}|[{'type',464,'timeout',[]}]]}]]}|[{'type',465,'tuple',[{'atom',465,'spawn_opt'}|[{'type',465,'list',[{'remote_type',465,[{'atom',465,'proc_lib'}|[{'atom',465,'start_spawn_option'}|[[]]]]}]}]]}|[{'user_type',466,'enter_loop_opt',[]}]]]},[]}]
, 'type' = [{'start_ret',{'type',468,'union',[{'type',468,'tuple',[{'atom',468,'ok'}|[{'type',468,'pid',[]}]]}|[{'atom',469,'ignore'}|[{'type',470,'tuple',[{'atom',470,'error'}|[{'type',470,'term',[]}]]}]]]},[]}]
, 'type' = [{'start_mon_ret',{'type',472,'union',[{'type',472,'tuple',[{'atom',472,'ok'}|[{'type',472,'tuple',[{'type',472,'pid',[]}|[{'type',472,'reference',[]}]]}]]}|[{'atom',473,'ignore'}|[{'type',474,'tuple',[{'atom',474,'error'}|[{'type',474,'term',[]}]]}]]]},[]}]
, 'type' = [{'enter_loop_opt',{'type',476,'union',[{'type',476,'tuple',[{'atom',476,'hibernate_after'}|[{'ann_type',476,[{'var',476,'HibernateAfterTimeout'}|[{'type',476,'timeout',[]}]]}]]}|[{'type',477,'tuple',[{'atom',477,'debug'}|[{'ann_type',477,[{'var',477,'Dbgs'}|[{'type',477,'list',[{'remote_type',477,[{'atom',477,'sys'}|[{'atom',477,'debug_option'}|[[]]]]}]}]]}]]}]]},[]}]
, 'spec' = [{{'start',3},[{'type',482,'fun',[{'type',482,'product',[{'ann_type',483,[{'var',483,'Module'}|[{'type',483,'module',[]}]]}|[{'ann_type',483,[{'var',483,'Args'}|[{'type',483,'term',[]}]]}|[{'ann_type',483,[{'var',483,'Opts'}|[{'type',483,'list',[{'user_type',483,'start_opt',[]}]}]]}]]]}|[{'user_type',484,'start_ret',[]}]]}]}]
, 'spec' = [{{'start',4},[{'type',488,'fun',[{'type',488,'product',[{'ann_type',489,[{'var',489,'ServerName'}|[{'user_type',489,'server_name',[]}]]}|[{'ann_type',490,[{'var',490,'Module'}|[{'type',490,'module',[]}]]}|[{'ann_type',490,[{'var',490,'Args'}|[{'type',490,'term',[]}]]}|[{'ann_type',490,[{'var',490,'Opts'}|[{'type',490,'list',[{'user_type',490,'start_opt',[]}]}]]}]]]]}|[{'user_type',491,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_link',3},[{'type',496,'fun',[{'type',496,'product',[{'ann_type',497,[{'var',497,'Module'}|[{'type',497,'module',[]}]]}|[{'ann_type',497,[{'var',497,'Args'}|[{'type',497,'term',[]}]]}|[{'ann_type',497,[{'var',497,'Opts'}|[{'type',497,'list',[{'user_type',497,'start_opt',[]}]}]]}]]]}|[{'user_type',498,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_link',4},[{'type',502,'fun',[{'type',502,'product',[{'ann_type',503,[{'var',503,'ServerName'}|[{'user_type',503,'server_name',[]}]]}|[{'ann_type',504,[{'var',504,'Module'}|[{'type',504,'module',[]}]]}|[{'ann_type',504,[{'var',504,'Args'}|[{'type',504,'term',[]}]]}|[{'ann_type',504,[{'var',504,'Opts'}|[{'type',504,'list',[{'user_type',504,'start_opt',[]}]}]]}]]]]}|[{'user_type',505,'start_ret',[]}]]}]}]
, 'spec' = [{{'start_monitor',3},[{'type',510,'fun',[{'type',510,'product',[{'ann_type',511,[{'var',511,'Module'}|[{'type',511,'module',[]}]]}|[{'ann_type',511,[{'var',511,'Args'}|[{'type',511,'term',[]}]]}|[{'ann_type',511,[{'var',511,'Opts'}|[{'type',511,'list',[{'user_type',511,'start_opt',[]}]}]]}]]]}|[{'user_type',512,'start_mon_ret',[]}]]}]}]
, 'spec' = [{{'start_monitor',4},[{'type',516,'fun',[{'type',516,'product',[{'ann_type',517,[{'var',517,'ServerName'}|[{'user_type',517,'server_name',[]}]]}|[{'ann_type',518,[{'var',518,'Module'}|[{'type',518,'module',[]}]]}|[{'ann_type',518,[{'var',518,'Args'}|[{'type',518,'term',[]}]]}|[{'ann_type',518,[{'var',518,'Opts'}|[{'type',518,'list',[{'user_type',518,'start_opt',[]}]}]]}]]]]}|[{'user_type',519,'start_mon_ret',[]}]]}]}]
, 'spec' = [{{'stop',1},[{'type',524,'fun',[{'type',524,'product',[{'ann_type',524,[{'var',524,'ServerRef'}|[{'user_type',524,'server_ref',[]}]]}]}|[{'atom',524,'ok'}]]}]}]
, 'spec' = [{{'stop',3},[{'type',528,'fun',[{'type',528,'product',[{'ann_type',529,[{'var',529,'ServerRef'}|[{'user_type',529,'server_ref',[]}]]}|[{'ann_type',530,[{'var',530,'Reason'}|[{'type',530,'term',[]}]]}|[{'ann_type',531,[{'var',531,'Timeout'}|[{'type',531,'timeout',[]}]]}]]]}|[{'atom',531,'ok'}]]}]}]
, 'spec' = [{{'cast',2},[{'type',536,'fun',[{'type',536,'product',[{'ann_type',536,[{'var',536,'ServerRef'}|[{'user_type',536,'server_ref',[]}]]}|[{'ann_type',536,[{'var',536,'Msg'}|[{'type',536,'term',[]}]]}]]}|[{'atom',536,'ok'}]]}]}]
, 'spec' = [{{'call',2},[{'type',558,'fun',[{'type',558,'product',[{'ann_type',558,[{'var',558,'ServerRef'}|[{'user_type',558,'server_ref',[]}]]}|[{'ann_type',558,[{'var',558,'Request'}|[{'type',558,'term',[]}]]}]]}|[{'ann_type',558,[{'var',558,'Reply'}|[{'type',558,'term',[]}]]}]]}]}]
, 'spec' = [{{'call',3},[{'type',562,'fun',[{'type',562,'product',[{'ann_type',563,[{'var',563,'ServerRef'}|[{'user_type',563,'server_ref',[]}]]}|[{'ann_type',564,[{'var',564,'Request'}|[{'type',564,'term',[]}]]}|[{'ann_type',565,[{'var',565,'Timeout'}|[{'type',566,'union',[{'type',566,'timeout',[]}|[{'type',567,'tuple',[{'atom',567,'clean_timeout'}|[{'ann_type',567,[{'var',567,'T'}|[{'type',567,'timeout',[]}]]}]]}|[{'type',568,'tuple',[{'atom',568,'dirty_timeout'}|[{'ann_type',568,[{'var',568,'T'}|[{'type',568,'timeout',[]}]]}]]}]]]}]]}]]]}|[{'ann_type',569,[{'var',569,'Reply'}|[{'type',569,'term',[]}]]}]]}]}]
, 'spec' = [{{'send_request',2},[{'type',581,'fun',[{'type',581,'product',[{'ann_type',581,[{'var',581,'ServerRef'}|[{'user_type',581,'server_ref',[]}]]}|[{'ann_type',581,[{'var',581,'Request'}|[{'type',581,'term',[]}]]}]]}|[{'ann_type',582,[{'var',582,'RequestId'}|[{'user_type',582,'request_id',[]}]]}]]}]}]
, 'spec' = [{{'wait_response',1},[{'type',586,'fun',[{'type',586,'product',[{'ann_type',586,[{'var',586,'RequestId'}|[{'user_type',586,'request_id',[]}]]}]}|[{'type',587,'union',[{'type',587,'tuple',[{'atom',587,'reply'}|[{'ann_type',587,[{'var',587,'Reply'}|[{'type',587,'term',[]}]]}]]}|[{'type',587,'tuple',[{'atom',587,'error'}|[{'type',587,'tuple',[{'type',587,'term',[]}|[{'user_type',587,'server_ref',[]}]]}]]}]]}]]}]}]
, 'spec' = [{{'wait_response',2},[{'type',591,'fun',[{'type',591,'product',[{'ann_type',591,[{'var',591,'RequestId'}|[{'user_type',591,'request_id',[]}]]}|[{'type',591,'timeout',[]}]]}|[{'type',592,'union',[{'type',592,'tuple',[{'atom',592,'reply'}|[{'ann_type',592,[{'var',592,'Reply'}|[{'type',592,'term',[]}]]}]]}|[{'atom',592,'timeout'}|[{'type',592,'tuple',[{'atom',592,'error'}|[{'type',592,'tuple',[{'type',592,'term',[]}|[{'user_type',592,'server_ref',[]}]]}]]}]]]}]]}]}]
, 'spec' = [{{'check_response',2},[{'type',596,'fun',[{'type',596,'product',[{'ann_type',596,[{'var',596,'Msg'}|[{'type',596,'term',[]}]]}|[{'ann_type',596,[{'var',596,'RequestId'}|[{'user_type',596,'request_id',[]}]]}]]}|[{'type',597,'union',[{'type',597,'tuple',[{'atom',597,'reply'}|[{'ann_type',597,[{'var',597,'Reply'}|[{'type',597,'term',[]}]]}]]}|[{'atom',597,'no_reply'}|[{'type',597,'tuple',[{'atom',597,'error'}|[{'type',597,'tuple',[{'type',597,'term',[]}|[{'user_type',597,'server_ref',[]}]]}]]}]]]}]]}]}]
, 'spec' = [{{'reply',1},[{'type',602,'fun',[{'type',602,'product',[{'type',602,'union',[{'type',602,'list',[{'user_type',602,'reply_action',[]}]}|[{'user_type',602,'reply_action',[]}]]}]}|[{'atom',602,'ok'}]]}]}]
, 'compile' = [{'inline',[{'reply',2}]}]
, 'spec' = [{{'reply',2},[{'type',609,'fun',[{'type',609,'product',[{'ann_type',609,[{'var',609,'From'}|[{'user_type',609,'from',[]}]]}|[{'ann_type',609,[{'var',609,'Reply'}|[{'type',609,'term',[]}]]}]]}|[{'atom',609,'ok'}]]}]}]
, 'spec' = [{{'enter_loop',4},[{'type',623,'fun',[{'type',623,'product',[{'ann_type',624,[{'var',624,'Module'}|[{'type',624,'module',[]}]]}|[{'ann_type',624,[{'var',624,'Opts'}|[{'type',624,'list',[{'user_type',624,'enter_loop_opt',[]}]}]]}|[{'ann_type',625,[{'var',625,'State'}|[{'user_type',625,'state',[]}]]}|[{'ann_type',625,[{'var',625,'Data'}|[{'user_type',625,'data',[]}]]}]]]]}|[{'type',626,'no_return',[]}]]}]}]
, 'spec' = [{{'enter_loop',5},[{'type',630,'fun',[{'type',630,'product',[{'ann_type',631,[{'var',631,'Module'}|[{'type',631,'module',[]}]]}|[{'ann_type',631,[{'var',631,'Opts'}|[{'type',631,'list',[{'user_type',631,'enter_loop_opt',[]}]}]]}|[{'ann_type',632,[{'var',632,'State'}|[{'user_type',632,'state',[]}]]}|[{'ann_type',632,[{'var',632,'Data'}|[{'user_type',632,'data',[]}]]}|[{'ann_type',633,[{'var',633,'Server_or_Actions'}|[{'type',634,'union',[{'user_type',634,'server_name',[]}|[{'type',634,'pid',[]}|[{'type',634,'list',[{'user_type',634,'action',[]}]}]]]}]]}]]]]]}|[{'type',635,'no_return',[]}]]}]}]
, 'spec' = [{{'enter_loop',6},[{'type',644,'fun',[{'type',644,'product',[{'ann_type',645,[{'var',645,'Module'}|[{'type',645,'module',[]}]]}|[{'ann_type',645,[{'var',645,'Opts'}|[{'type',645,'list',[{'user_type',645,'enter_loop_opt',[]}]}]]}|[{'ann_type',646,[{'var',646,'State'}|[{'user_type',646,'state',[]}]]}|[{'ann_type',646,[{'var',646,'Data'}|[{'user_type',646,'data',[]}]]}|[{'ann_type',647,[{'var',647,'Server'}|[{'type',647,'union',[{'user_type',647,'server_name',[]}|[{'type',647,'pid',[]}]]}]]}|[{'ann_type',648,[{'var',648,'Actions'}|[{'type',648,'union',[{'type',648,'list',[{'user_type',648,'action',[]}]}|[{'user_type',648,'action',[]}]]}]]}]]]]]]}|[{'type',649,'no_return',[]}]]}]}]
, 'compile' = [{'inline',[{'wrap_cast',1}]}]
, 'compile' = [{'inline',{'update_parent',2}}]
, 'compile' = [{'inline',[{'loop_event_handler',5}]}]
, 'compile' = [{'inline',[{'loop_actions',10}]}]
, 'compile' = [{'inline',[{'listify',1}]}]
, 'compile' = [{'inline',[{'cancel_timer',1}]}]
, 'compile' = [{'inline',[{'cancel_timer',3}]}]
, 'compile' = [{'inline',[{'cancel_timer',2}]}] ] 'callback_mode'/1 = fun (_0) -> case _0 of <'state_functions'> when 'true' -> 'true'
<'handle_event_function'> when 'true' -> 'true'
<_3> when 'true' -> 'false' end
'state_enter'/1 = fun (_0) -> case _0 of <'state_enter'> when 'true' -> 'true'
<_3> when 'true' -> 'false' end
'event_type'/1 = fun (_0) -> case _0 of <{'call',From}> when 'true' -> (case From of (<({Pid,_2}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (Pid)-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_3> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'cast'> when 'true' -> 'true'
<'info'> when 'true' -> 'true'
<'internal'> when 'true' -> 'true'
<_3> when 'true' -> (case _0 of (<('timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('state_timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<({('timeout'-|['compiler_generated'] ),_X_Name}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_7> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'from'/1 = fun (_0) -> case _0 of <{Pid,_2}> when call 'erlang':'is_pid' (Pid) -> 'true'
<_3> when 'true' -> 'false' end
'timeout_event_type'/1 = fun (_0) -> case _0 of <'timeout'> when 'true' -> 'true'
<'state_timeout'> when 'true' -> 'true'
<{'timeout',_X_Name}> when 'true' -> 'true'
<_3> when 'true' -> 'false' end
'start'/3 = fun (_0,_1,_2) -> call 'gen':'start' ('gen_statem','nolink',_0,_1,_2)
'start'/4 = fun (_0,_1,_2,_3) -> call 'gen':'start' ('gen_statem','nolink',_0,_1,_2,_3)
'start_link'/3 = fun (_0,_1,_2) -> call 'gen':'start' ('gen_statem','link',_0,_1,_2)
'start_link'/4 = fun (_0,_1,_2,_3) -> call 'gen':'start' ('gen_statem','link',_0,_1,_2,_3)
'start_monitor'/3 = fun (_0,_1,_2) -> call 'gen':'start' ('gen_statem','monitor',_0,_1,_2)
'start_monitor'/4 = fun (_0,_1,_2,_3) -> call 'gen':'start' ('gen_statem','monitor',_0,_1,_2,_3)
'stop'/1 = fun (_0) -> call 'gen':'stop' (_0)
'stop'/3 = fun (_0,_1,_2) -> call 'gen':'stop' (_0,_1,_2)
'cast'/2 = fun (_0,_1) -> case <_0,_1> of <ServerRef,Msg> when call 'erlang':'is_pid' (ServerRef) -> let <_2> = {('$gen_cast'-|['compiler_generated'] ),Msg} in apply 'send'/2 (ServerRef,_2)
<ServerRef,Msg> when call 'erlang':'is_atom' (ServerRef) -> let <_3> = {('$gen_cast'-|['compiler_generated'] ),Msg} in apply 'send'/2 (ServerRef,_3)
<{'global',Name},Msg> when 'true' -> try let <_4> = {('$gen_cast'-|['compiler_generated'] ),Msg} in call 'global':'send' (Name,_4) of <_5> -> 'ok' catch <_9,_8,_7> -> 'ok'
<{'via',RegMod,Name},Msg> when 'true' -> try let <_10> = {('$gen_cast'-|['compiler_generated'] ),Msg} in call RegMod:'send' (Name,_10) of <_11> -> 'ok' catch <_15,_14,_13> -> 'ok'
<ServerRef = {Name,Node},Msg> when let <_16> = call 'erlang':'is_atom' (Name) in let <_17> = call 'erlang':'is_atom' (Node) in call 'erlang':'and' (_16,_17) -> let <_18> = {('$gen_cast'-|['compiler_generated'] ),Msg} in apply 'send'/2 (ServerRef,_18)
(<_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19})-|[{'function_name',{'cast',2}}] )-|['compiler_generated'] ) end
'call'/2 = fun (_0,_1) -> apply 'call'/3 (_0,_1,'infinity')
'call'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <ServerRef,Request,T = Timeout = 'infinity'> when 'true' -> apply 'call_dirty'/4 (ServerRef,Request,Timeout,T)
<ServerRef,Request,Timeout = {'dirty_timeout',T}> when 'true' -> apply 'call_dirty'/4 (ServerRef,Request,Timeout,T)
<ServerRef,Request,Timeout = {'clean_timeout',T}> when 'true' -> apply 'call_clean'/4 (ServerRef,Request,Timeout,T)
<ServerRef,Request,Timeout = {_6,_7}> when 'true' -> call 'erlang':'error' ('badarg',[ServerRef|[Request|[Timeout|[]]]])
<ServerRef,Request,Timeout> when 'true' -> apply 'call_clean'/4 (ServerRef,Request,Timeout,Timeout) end
'send_request'/2 = fun (_0,_1) -> call 'gen':'send_request' (_0,'$gen_call',_1)
'wait_response'/1 = fun (_0) -> call 'gen':'wait_response' (_0,'infinity')
'wait_response'/2 = fun (_0,_1) -> call 'gen':'wait_response' (_0,_1)
'check_response'/2 = fun (_0,_1) -> call 'gen':'check_response' (_0,_1)
'reply'/1 = fun (_0) -> case _0 of <{'reply',From,Reply}> when 'true' -> (case <From,Reply> of (<({To,Tag}-|['compiler_generated'] ),_15> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (To)-|['compiler_generated'] ) -> (let <Msg> = {Tag,_15} in (try (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (To,Msg)-|['compiler_generated'] ) of <_3> -> ('ok'-|['compiler_generated'] ) catch <_7,_6,_5> -> ('ok'-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Replies> when call 'erlang':'is_list' (_0) -> apply 'replies'/1 (Replies)
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'reply',1}}] )-|['compiler_generated'] ) end
'reply'/2 = fun (_0,_1) -> case <_0,_1> of <{To,Tag},Reply> when call 'erlang':'is_pid' (To) -> let <Msg> = {Tag,Reply} in try call 'erlang':'!' (To,Msg) of <_3> -> 'ok' catch <_7,_6,_5> -> 'ok'
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'reply',2}}] )-|['compiler_generated'] ) end
'enter_loop'/4 = fun (_0,_1,_2,_3) -> let <_4> = call 'erlang':'self' () in apply 'enter_loop'/5 (_0,_1,_2,_3,_4)
'enter_loop'/5 = fun (_0,_1,_2,_3,_4) -> case <> of <> when call 'erlang':'is_list' (_4) -> let <_5> = call 'erlang':'self' () in apply 'enter_loop'/6 (_0,_1,_2,_3,_5,_4)
<> when 'true' -> apply 'enter_loop'/6 (_0,_1,_2,_3,_4,[]) end
'enter_loop'/6 = fun (_0,_1,_2,_3,_4,_5) -> do (case <> of (<> when call 'erlang':'is_atom' (_0) -> 'ok'-|['compiler_generated'] )
(<> when 'true' -> call 'erlang':'error' ({'atom',_0})-|['compiler_generated'] ) end-|['compiler_generated'] ) let <Parent> = call 'gen':'get_parent' () in let <Name> = call 'gen':'get_proc_name' (_4) in let <Debug> = call 'gen':'debug_options' (Name,_1) in let <HibernateAfterTimeout> = call 'gen':'hibernate_after' (_1) in apply 'enter'/8 (Parent,Debug,_0,Name,HibernateAfterTimeout,_2,_3,_5)
'wrap_cast'/1 = fun (_0) -> {'$gen_cast',_0}
'call_dirty'/4 = fun (_0,_1,_2,_3) -> try call 'gen':'call' (_0,'$gen_call',_1,_3) of <_4> -> case _4 of <{'ok',Reply}> when 'true' -> Reply
(<_5> when 'true' -> primop 'match_fail' ({'try_clause',_5})-|['compiler_generated'] ) end catch <_8,_7,_6> -> primop 'raw_raise' (_8,{_7,{'gen_statem','call',[_0|[_1|[_2|[]]]]}},_6)
'call_clean'/4 = fun (_0,_1,_2,_3) -> let <Ref> = call 'erlang':'make_ref' () in let <Self> = call 'erlang':'self' () in let <_12> = fun () -> let <_11> = try call 'gen':'call' (_0,'$gen_call',_1,_3) of <_6> -> {Ref,_6} catch <_10,_9,_8> -> let <Stacktrace> = primop 'build_stacktrace' (_8) in {Ref,_10,_9,Stacktrace} in call 'erlang':'!' (Self,_11) in let <Pid> = call 'erlang':'spawn' (_12) in let <Mref> = call 'erlang':'monitor' ('process',Pid) in receive <{_20,Result}> when call 'erlang':'=:=' (_20,Ref) -> do call 'erlang':'demonitor' (Mref,['flush']) case Result of <{'ok',Reply}> when 'true' -> Reply
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end
<{_21,Class,Reason,Stacktrace}> when call 'erlang':'=:=' (_21,Ref) -> do call 'erlang':'demonitor' (Mref,['flush']) call 'erlang':'raise' (Class,{Reason,{'gen_statem','call',[_0|[_1|[_2|[]]]]}},Stacktrace)
<{'DOWN',_22,_23,_24,Reason}> when call 'erlang':'=:=' (_22,Mref) -> call 'erlang':'exit' (Reason) after 'infinity' -> 'true'
'replies'/1 = fun (_0) -> case _0 of <[{'reply',From,Reply}|Replies]> when 'true' -> do (case <From,Reply> of (<({To,Tag}-|['compiler_generated'] ),_15> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (To)-|['compiler_generated'] ) -> (let <Msg> = {Tag,_15} in (try (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (To,Msg)-|['compiler_generated'] ) of <_3> -> ('ok'-|['compiler_generated'] ) catch <_7,_6,_5> -> ('ok'-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) apply 'replies'/1 (Replies)
<[]> when 'true' -> 'ok'
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'replies',1}}] )-|['compiler_generated'] ) end
'send'/2 = fun (_0,_1) -> do try call 'erlang':'send' (_0,_1) of <_2> -> _2 catch <_5,_4,_3> -> case <_5,_4,_3> of <('error'-|['compiler_generated'] ),_8,_9> when 'true' -> 'ok'
(<_10,_11,_12> when 'true' -> primop 'raise' (_12,_11)-|['compiler_generated'] ) end 'ok'
'enter'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <_9> = case _7 of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (_7)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in let <Actions_1> = call 'erlang':'++' (_9,[{'postpone','false'}]) in let <P> = {'params','undefined','false',_0,_2,_3,_4} in let <S> = {'state',{_5,_6},[],~{}~,'false'} in let <_14> = case _1 of <[]> when 'true' -> _1
<_24> when 'true' -> apply 'sys_debug'/3 (_1,_3,{'enter',_5}) end in apply 'loop_state_callback'/6 (P,_14,S,[{'internal','init_state'}],{_5,_6},Actions_1)
'init_it'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <Starter,'self',ServerRef,Module,Args,Opts> when 'true' -> let <_6> = call 'erlang':'self' () in apply 'init_it'/6 (Starter,_6,ServerRef,Module,Args,Opts)
<Starter,Parent,ServerRef,Module,Args,Opts> when 'true' -> let <Name> = call 'gen':'get_proc_name' (ServerRef) in let <Debug> = call 'gen':'debug_options' (Name,Opts) in let <HibernateAfterTimeout> = call 'gen':'hibernate_after' (Opts) in try call Module:'init' (Args) of <_10> -> apply 'init_result'/8 (Starter,Parent,ServerRef,Module,_10,Name,Debug,HibernateAfterTimeout) catch <_14,_13,_12> -> case <_14,_13,_12> of <('throw'-|['compiler_generated'] ),Result,_21> when 'true' -> apply 'init_result'/8 (Starter,Parent,ServerRef,Module,Result,Name,Debug,HibernateAfterTimeout)
<Class,Reason,_23> when 'true' -> do call 'gen':'unregister_name' (ServerRef) do call 'proc_lib':'init_ack' (Starter,{'error',Reason}) let <Stacktrace> = primop 'build_stacktrace' (_23) in do apply 'error_info'/7 (Class,Reason,Stacktrace,Debug,{'params','undefined','false',Parent,Module,Name,'infinity'},{'state',{'undefined','undefined'},[],~{}~,'false'},[]) call 'erlang':'raise' (Class,Reason,Stacktrace) end end
'init_result'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case _4 of <{'ok',State,Data}> when 'true' -> let <_8> = call 'erlang':'self' () in do call 'proc_lib':'init_ack' (_0,{'ok',_8}) apply 'enter'/8 (_1,_6,_3,_5,_7,State,Data,[])
<{'ok',State,Data,Actions}> when 'true' -> let <_9> = call 'erlang':'self' () in do call 'proc_lib':'init_ack' (_0,{'ok',_9}) apply 'enter'/8 (_1,_6,_3,_5,_7,State,Data,Actions)
<{'stop',Reason}> when 'true' -> do call 'gen':'unregister_name' (_2) do call 'proc_lib':'init_ack' (_0,{'error',Reason}) call 'erlang':'exit' (Reason)
<'ignore'> when 'true' -> do call 'gen':'unregister_name' (_2) do call 'proc_lib':'init_ack' (_0,'ignore') call 'erlang':'exit' ('normal')
<_23> when 'true' -> do call 'gen':'unregister_name' (_2) let <Error> = {'bad_return_from_init',_4} in do call 'proc_lib':'init_ack' (_0,{'error',Error}) let <_11> = call 'erlang':'self' () in let <_12> = call 'erlang':'process_info' (_11,'current_stacktrace') in let <_13> = call 'erlang':'element' (2,_12) in do apply 'error_info'/7 ('error',Error,_13,_6,{'params','undefined','false',_1,_3,_5,'infinity'},{'state',{'undefined','undefined'},[],~{}~,'false'},[]) call 'erlang':'exit' (Error) end
'system_continue'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Parent,Debug,{P,S}> when 'true' -> let <_3> = case P of (<({('params'-|['compiler_generated'] ),_7,_8,_9,_10,_11,_12}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_9,Parent)-|['compiler_generated'] ) -> P-|['compiler_generated'] )
(<({('params'-|['compiler_generated'] ),_13,_14,_15,_16,_17,_18}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case P of (<({('params'-|['compiler_generated'] ),_19,_20,_21,_22,_23,_24}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('setelement'-|['compiler_generated'] ) ((4-|['compiler_generated'] ),P,Parent)-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop'/3 (_3,Debug,S)
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'system_continue',3}}] )-|['compiler_generated'] ) end
'system_terminate'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Reason,Parent,Debug,{P,S}> when 'true' -> let <_5> = call 'erlang':'self' () in let <_6> = call 'erlang':'process_info' (_5,'current_stacktrace') in let <_7> = call 'erlang':'element' (2,_6) in let <_4> = case P of (<({('params'-|['compiler_generated'] ),_30,_8,_9,_10,_11,_12}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_9,Parent)-|['compiler_generated'] ) -> P-|['compiler_generated'] )
(<({('params'-|['compiler_generated'] ),_13,_14,_15,_16,_17,_18}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case P of (<({('params'-|['compiler_generated'] ),_19,_20,_21,_22,_23,_24}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('setelement'-|['compiler_generated'] ) ((4-|['compiler_generated'] ),P,Parent)-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_4> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'terminate'/7 ('exit',Reason,_7,_4,Debug,S,[])
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'system_terminate',4}}] )-|['compiler_generated'] ) end
'system_code_change'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <{P = {'params',_21,_22,_23,Module,_24,_25},S = {'state',{State,Data},_26,_27,_28}},_X_Mod,OldVsn,Extra> when 'true' -> let <_8> = try call Module:'code_change' (OldVsn,State,Data,Extra) of <_4> -> _4 catch <_7,_6,_5> -> case <_7,_6,_5> of <('throw'-|['compiler_generated'] ),Result,_29> when 'true' -> Result
(<_43,_44,_45> when 'true' -> primop 'raise' (_45,_44)-|['compiler_generated'] ) end in case _8 of <{'ok',NewState,NewData}> when 'true' -> case P of <{'params',_30,_31,_32,_33,_34,_35}> when 'true' -> let <_15> = call 'erlang':'setelement' (2,P,'undefined') in let <_rec1> = {NewState,NewData} in case S of <{'state',_37,_38,_39,_40}> when 'true' -> let <_12> = call 'erlang':'setelement' (2,S,_rec1) in {'ok',{_15,_12}}
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<Error = {'ok',_42}> when 'true' -> call 'erlang':'error' ({'case_clause',Error})
<Error> when 'true' -> Error end
(<_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_20,_19,_18,_17})-|[{'function_name',{'system_code_change',4}}] )-|['compiler_generated'] ) end
'system_get_state'/1 = fun (_0) -> case _0 of <{_X_P,{'state',State_Data,_2,_3,_4}}> when 'true' -> {'ok',State_Data}
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'system_get_state',1}}] )-|['compiler_generated'] ) end
'system_replace_state'/2 = fun (_0,_1) -> case <_0,_1> of <StateFun,{P,S = {'state',State_Data,_8,_9,_10}}> when 'true' -> let <NewState_NewData> = apply StateFun (State_Data) in case S of <{'state',_11,_12,_13,_14}> when 'true' -> let <_5> = call 'erlang':'setelement' (2,S,NewState_NewData) in {'ok',NewState_NewData,{P,_5}}
(<_15> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6})-|[{'function_name',{'system_replace_state',2}}] )-|['compiler_generated'] ) end
'format_status'/2 = fun (_0,_1) -> case <_0,_1> of <Opt,[PDict|[SysState|[Parent|[Debug|[{P = {'params',_10,_11,_12,_13,Name,_14},S = {'state',_15,Postponed,Timers,_16}}|[]]]]]]> when 'true' -> let <Header> = call 'gen':'format_status_header' ([83|[116|[97|[116|[117|[115|[32|[102|[111|[114|[32|[115|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101]]]]]]]]]]]]]]]]]]]]]]]],Name) in let <Log> = call 'sys':'get_log' (Debug) in let <_4> = apply 'list_timeouts'/1 (Timers) in let <_5> = case P of (<({('params'-|['compiler_generated'] ),_7,_8,_9,_30,_31,_32}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_9,Parent)-|['compiler_generated'] ) -> P-|['compiler_generated'] )
(<({('params'-|['compiler_generated'] ),_33,_34,_35,_36,_17,_18}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case P of (<({('params'-|['compiler_generated'] ),_19,_20,_21,_22,_23,_24}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('setelement'-|['compiler_generated'] ) ((4-|['compiler_generated'] ),P,Parent)-|['compiler_generated'] )-|['compiler_generated'] )
(<_25> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_37> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_37}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_7> = case apply 'format_status'/4 (Opt,PDict,_5,S) of <L> when call 'erlang':'is_list' (L) -> L
<T> when 'true' -> [T|[]] end in [{'header',Header}|[{'data',[{[83|[116|[97|[116|[117|[115]]]]]],SysState}|[{[80|[97|[114|[101|[110|[116]]]]]],Parent}|[{[84|[105|[109|[101|[45|[111|[117|[116|[115]]]]]]]]],_4}|[{[76|[111|[103|[103|[101|[100|[32|[69|[118|[101|[110|[116|[115]]]]]]]]]]]]],Log}|[{[80|[111|[115|[116|[112|[111|[110|[101|[100]]]]]]]]],Postponed}|[]]]]]]}|_7]]
(<_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8})-|[{'function_name',{'format_status',2}}] )-|['compiler_generated'] ) end
'update_parent'/2 = fun (_0,_1) -> case _0 of <{'params',_7,_8,_9,_10,_11,_12}> when call 'erlang':'=:=' (_9,_1) -> _0
<{'params',_13,_14,_15,_16,_17,_18}> when 'true' -> case _0 of <{'params',_19,_20,_21,_22,_23,_24}> when 'true' -> call 'erlang':'setelement' (4,_0,_1)
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'sys_debug'/3 = fun (_0,_1,_2) -> let <_3> = 'print_event'/3 in call 'sys':'handle_debug' (_0,_3,_1,_2)
'print_event'/3 = fun (_0,_1,_2) -> case _1 of <{'in',Event,State}> when 'true' -> let <_3> = apply 'event_string'/1 (Event) in call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[114|[101|[99|[101|[105|[118|[101|[32|[126|[116|[115|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[_3|[State|[]]]])
<{'code_change',Event,State}> when 'true' -> let <_4> = apply 'event_string'/1 (Event) in call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[114|[101|[99|[101|[105|[118|[101|[32|[126|[116|[115|[32|[97|[102|[116|[101|[114|[32|[99|[111|[100|[101|[32|[99|[104|[97|[110|[103|[101|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[_4|[State|[]]]])
<{'out',Reply,{To,_X_Tag}}> when 'true' -> call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[101|[110|[100|[32|[126|[116|[112|[32|[116|[111|[32|[126|[116|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[Reply|[To|[]]]])
<{'enter',State}> when 'true' -> call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[101|[110|[116|[101|[114|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[State|[]]])
<{'start_timer',Action,State}> when 'true' -> call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[115|[116|[97|[114|[116|[95|[116|[105|[109|[101|[114|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[Action|[State|[]]]])
<{'insert_timeout',Event,State}> when 'true' -> call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[105|[110|[115|[101|[114|[116|[95|[116|[105|[109|[101|[111|[117|[116|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[Event|[State|[]]]])
<{'terminate',Reason,State}> when 'true' -> call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[32|[126|[116|[112|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[Reason|[State|[]]]])
<{Tag,Event,State,NextState}> when let <_5> = call 'erlang':'=:=' (Tag,'postpone') in let <_6> = call 'erlang':'=:=' (Tag,'consume') in call 'erlang':'or' (_5,_6) -> let <_8> = case NextState of <_15> when call 'erlang':'=:=' (NextState,State) -> call 'io_lib':'format' ([126|[116|[112]]],[State|[]])
<_16> when 'true' -> call 'io_lib':'format' ([126|[116|[112|[32|[61|[62|[32|[126|[116|[112]]]]]]]]]],[State|[NextState|[]]]) end in let <_10> = apply 'event_string'/1 (Event) in call 'io':'format' (_0,[42|[68|[66|[71|[42|[32|[126|[116|[112|[32|[126|[116|[119|[32|[126|[116|[115|[32|[105|[110|[32|[115|[116|[97|[116|[101|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[_2|[Tag|[_10|[_8|[]]]]])
(<_11> when 'true' -> primop 'match_fail' ({'case_clause',_11})-|['compiler_generated'] ) end
'event_string'/1 = fun (_0) -> case _0 of <{{'call',{Pid,_X_Tag}},Request}> when 'true' -> call 'io_lib':'format' ([99|[97|[108|[108|[32|[126|[116|[112|[32|[102|[114|[111|[109|[32|[126|[116|[119]]]]]]]]]]]]]]]]],[Request|[Pid|[]]])
<{EventType,EventContent}> when 'true' -> call 'io_lib':'format' ([126|[116|[119|[32|[126|[116|[112]]]]]]],[EventType|[EventContent|[]]])
(<_1> when 'true' -> primop 'match_fail' ({'case_clause',_1})-|['compiler_generated'] ) end
'wakeup_from_hibernate'/3 = fun (_0,_1,_2) -> apply 'loop_receive'/3 (_0,_1,_2)
'loop'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <P,Debug,S = {'state',_6,_7,_8,'true'}> when 'true' -> apply 'loop_hibernate'/3 (P,Debug,S)
<P,Debug,S> when 'true' -> apply 'loop_receive'/3 (P,Debug,S) end
'loop_hibernate'/3 = fun (_0,_1,_2) -> do call 'proc_lib':'hibernate' ('gen_statem','wakeup_from_hibernate',[_0|[_1|[_2|[]]]]) call 'erlang':'error' ({'should_not_have_arrived_here_but_instead_in',{'gen_statem','wakeup_from_hibernate',3}})
'loop_receive'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <P = {'params',_25,_26,_27,_28,_29,HibernateAfterTimeout},Debug,S> when 'true' -> receive <Msg> when 'true' -> case Msg of <{'$gen_call',From,Request}> when 'true' -> apply 'loop_receive_result'/4 (P,Debug,S,{{'call',From},Request})
<{'$gen_cast',Cast}> when 'true' -> apply 'loop_receive_result'/4 (P,Debug,S,{'cast',Cast})
<{'timeout',TimerRef,TimeoutType}> when 'true' -> (case S of (<({'state',_30,_31,_rec5,_32}-|['compiler_generated'] )> when 'true' -> case _rec5 of <Timers = ~{TimeoutType:={_34,TimeoutMsg}}~> when call 'erlang':'=:=' (_34,TimerRef) -> let <Timers_1> = call 'maps':'remove' (TimeoutType,Timers) in case S of <{'state',_35,_36,_37,_38}> when 'true' -> let <_8> = call 'erlang':'setelement' (4,S,Timers_1) in apply 'loop_receive_result'/4 (P,Debug,_8,{TimeoutType,TimeoutMsg})
(<_39> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<~{}~> when 'true' -> apply 'loop_receive_result'/4 (P,Debug,S,{'info',Msg})
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_33> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'system',Pid,Req}> when 'true' -> (case P of (<({'params',_40,_41,_rec7,_42,_43,_44}-|['compiler_generated'] )> when 'true' -> (case S of (<({'state',_46,_47,_48,_rec8}-|['compiler_generated'] )> when 'true' -> call 'sys':'handle_system_msg' (Req,Pid,_rec7,'gen_statem',Debug,{P,S},_rec8)-|['compiler_generated'] )
(<_49> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_45> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'EXIT',Pid,Reason}> when 'true' -> (case P of (<({'params',_50,_51,_rec9,_52,_53,_54}-|['compiler_generated'] )> when 'true' -> case _rec9 of <_56> when call 'erlang':'=:=' (_rec9,Pid) -> let <_17> = call 'erlang':'self' () in let <_18> = call 'erlang':'process_info' (_17,'current_stacktrace') in let <_19> = call 'erlang':'element' (2,_18) in apply 'terminate'/7 ('exit',Reason,_19,P,Debug,S,[])
<_57> when 'true' -> apply 'loop_receive_result'/4 (P,Debug,S,{'info',Msg}) end-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_58> when 'true' -> apply 'loop_receive_result'/4 (P,Debug,S,{'info',Msg}) end after HibernateAfterTimeout -> apply 'loop_hibernate'/3 (P,Debug,S)
(<_24,_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22})-|[{'function_name',{'loop_receive',3}}] )-|['compiler_generated'] ) end
'loop_receive_result'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <P,Debug = [],S,Event> when 'true' -> apply 'loop_event'/5 (P,Debug,S,Event,[])
<P = {'params',CallbackMode,_13,_14,_15,Name,_16},Debug,S = {'state',{State,_X_Data},_17,_18,_19},Event> when 'true' -> let <_6> = case CallbackMode of <'undefined'> when 'true' -> apply 'sys_debug'/3 (Debug,Name,{'code_change',Event,State})
<_20> when 'true' -> apply 'sys_debug'/3 (Debug,Name,{'in',Event,State}) end in apply 'loop_event'/5 (P,_6,S,Event,[])
(<_12,_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10,_9})-|[{'function_name',{'loop_receive_result',4}}] )-|['compiler_generated'] ) end
'loop_event'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <P,Debug,S = {'state',_11,_12,_13,'true'},Event,Events> when 'true' -> do (call ('erlang'-|['result_not_wanted'] ):('garbage_collect'-|['result_not_wanted'] ) ()-|['result_not_wanted'] ) (case <P,Debug,S,Event,Events> of (<_19,_20,(_21 = ({('state'-|['compiler_generated'] ),State_Data,_22,_23,_24}-|['compiler_generated'] )-|['compiler_generated'] ),_25,_26> when ('true'-|['compiler_generated'] ) -> (let <Q> = [_25|_26] in (apply 'loop_state_callback'/6 (_19,_20,_21,Q,State_Data,_25)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_10,_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_10,_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<P,Debug,S,Event,Events> when 'true' -> (case <P,Debug,S,Event,Events> of (<_32,_33,(_34 = ({('state'-|['compiler_generated'] ),State_Data,_11,_12,_13}-|['compiler_generated'] )-|['compiler_generated'] ),_35,_36> when ('true'-|['compiler_generated'] ) -> (let <Q> = [_35|_36] in (apply 'loop_state_callback'/6 (_32,_33,_34,Q,State_Data,_35)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_10,_9,_8,_7,_6> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_10,_9,_8,_7,_6}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'loop_event_handler'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <P,Debug,S = {'state',State_Data,_11,_12,_13},Event,Events> when 'true' -> let <Q> = [Event|Events] in apply 'loop_state_callback'/6 (P,Debug,S,Q,State_Data,Event)
(<_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7,_6})-|[{'function_name',{'loop_event_handler',5}}] )-|['compiler_generated'] ) end
'loop_state_enter'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <P,Debug,S = {'state',{PrevState,_X_PrevData},_20,_21,_22},Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone> when 'true' -> let <CallbackEvent> = {'enter',PrevState} in apply 'loop_state_callback'/11 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,'false',CallbackEvent)
(<_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'loop_state_enter',9}}] )-|['compiler_generated'] ) end
'loop_state_callback'/6 = fun (_0,_1,_2,_3,_4,_5) -> apply 'loop_state_callback'/11 (_0,_1,_2,_3,_4,[],'false',[],'false','true',_5)
'loop_state_callback'/11 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of <P = {'params','undefined',_36,_37,Module,_38,_39},Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent> when 'true' -> try call Module:'callback_mode' () of <_11> -> let <_12> = case _11 of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (_11)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop_callback_mode_result'/15 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,_11,_12,'undefined','false') catch <_16,_15,_14> -> case <_16,_15,_14> of <('throw'-|['compiler_generated'] ),CallbackMode,_40> when 'true' -> let <_17> = case CallbackMode of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (CallbackMode)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop_callback_mode_result'/15 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,CallbackMode,_17,'undefined','false')
<Class,Reason,_49> when 'true' -> let <Stacktrace> = primop 'build_stacktrace' (_49) in apply 'terminate'/7 (Class,Reason,Stacktrace,P,Debug,S,Q) end
<P = {'params',CallbackMode,_41,_42,Module,_43,_44},Debug,S,Q,State_Data = {State,Data},NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,{Type,Content}> when 'true' -> try case CallbackMode of <'state_functions'> when 'true' -> call Module:State (Type,Content,Data)
<'handle_event_function'> when 'true' -> call Module:'handle_event' (Type,Content,State,Data)
(<_18> when 'true' -> primop 'match_fail' ({'case_clause',_18})-|['compiler_generated'] ) end of <_19> -> apply 'loop_state_callback_result'/11 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,_19) catch <_23,_22,_21> -> case <_23,_22,_21> of <('throw'-|['compiler_generated'] ),Result,_45> when 'true' -> apply 'loop_state_callback_result'/11 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,Result)
<Class,Reason,_51> when 'true' -> let <Stacktrace> = primop 'build_stacktrace' (_51) in apply 'terminate'/7 (Class,Reason,Stacktrace,P,Debug,S,Q) end
<P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,Actions> when call 'erlang':'is_list' (Actions) -> apply 'loop_actions_list'/12 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,'true',StateCall,Actions)
(<_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25> when 'true' -> (primop 'match_fail' ({'function_clause',_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25})-|[{'function_name',{'loop_state_callback',11}}] )-|['compiler_generated'] ) end
'loop_callback_mode_result'/15 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14> of <P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,CallbackMode,[H|T],NewCallbackMode,NewStateEnter> when 'true' -> case (case H of (<('state_functions'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('handle_event_function'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_54> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> apply 'loop_callback_mode_result'/15 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,CallbackMode,T,H,NewStateEnter)
<'false'> when 'true' -> case (case H of (<('state_enter'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_57> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> apply 'loop_callback_mode_result'/15 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,CallbackMode,T,NewCallbackMode,'true')
<'false'> when 'true' -> let <_15> = call 'erlang':'self' () in let <_16> = call 'erlang':'process_info' (_15,'current_stacktrace') in let <_17> = call 'erlang':'element' (2,_16) in apply 'terminate'/7 ('error',{'bad_return_from_callback_mode',CallbackMode},_17,P,Debug,S,Q) end end
<P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent,CallbackMode,[],NewCallbackMode,NewStateEnter> when 'true' -> case NewCallbackMode of <'undefined'> when 'true' -> let <_20> = call 'erlang':'self' () in let <_21> = call 'erlang':'process_info' (_20,'current_stacktrace') in let <_22> = call 'erlang':'element' (2,_21) in apply 'terminate'/7 ('error',{'bad_return_from_callback_mode',CallbackMode},_22,P,Debug,S,Q)
<_44> when 'true' -> case P of <{'params',_45,_46,_47,_48,_49,_50}> when 'true' -> let <_24> = call 'erlang':'setelement' (3,P,NewStateEnter) in let <_26> = call 'erlang':'setelement' (2,_24,NewCallbackMode) in apply 'loop_state_callback'/11 (_26,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,CallbackEvent)
(<_51> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
(<_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29> when 'true' -> (primop 'match_fail' ({'function_clause',_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29})-|[{'function_name',{'loop_callback_mode_result',15}}] )-|['compiler_generated'] ) end
'loop_state_callback_result'/11 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10> of <P,Debug,S,Q,State_Data = {State,_X_Data},NextEventsR,Hibernate,TimeoutsR,Postpone,StateCall,Result> when 'true' -> case Result of <{'next_state',_81,NewData}> when call 'erlang':'=:=' (_81,State) -> let <_128> = {State,NewData} in (apply 'loop_state_transition'/9 (P,Debug,S,Q,_128,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )
<{'next_state',NextState,NewData}> when (call 'erlang':'=:=' (StateCall,'true')-|['compiler_generated'] ) -> let <_155> = {NextState,NewData} in (case P of (<({('params'-|['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec21 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_enter'/9 (P,Debug,S,Q,_155,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_transition'/9 (P,Debug,S,Q,_155,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'next_state',_X_NextState,_X_NewData}> when 'true' -> let <_15> = call 'erlang':'self' () in let <_16> = call 'erlang':'process_info' (_15,'current_stacktrace') in let <_17> = call 'erlang':'element' (2,_16) in case S of <{'state',_82,_83,_84,_85}> when 'true' -> let <_12> = call 'erlang':'setelement' (5,S,Hibernate) in let <_14> = call 'erlang':'setelement' (2,_12,State_Data) in apply 'terminate'/7 ('error',{'bad_state_enter_return_from_state_function',Result},_17,P,Debug,_14,Q)
(<_86> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'next_state',_87,NewData,Actions}> when call 'erlang':'=:=' (_87,State) -> apply 'loop_actions'/12 (P,Debug,S,Q,{State,NewData},NextEventsR,Hibernate,TimeoutsR,Postpone,'false',StateCall,Actions)
<{'next_state',NextState,NewData,Actions}> when (call 'erlang':'=:=' (StateCall,'true')-|['compiler_generated'] ) -> apply 'loop_actions'/12 (P,Debug,S,Q,{NextState,NewData},NextEventsR,Hibernate,TimeoutsR,Postpone,'true',StateCall,Actions)
<{'next_state',_X_NextState,_X_NewData,_X_Actions}> when 'true' -> let <_22> = call 'erlang':'self' () in let <_23> = call 'erlang':'process_info' (_22,'current_stacktrace') in let <_24> = call 'erlang':'element' (2,_23) in case S of <{'state',_88,_89,_90,_91}> when 'true' -> let <_19> = call 'erlang':'setelement' (5,S,Hibernate) in let <_21> = call 'erlang':'setelement' (2,_19,State_Data) in apply 'terminate'/7 ('error',{'bad_state_enter_return_from_state_function',Result},_24,P,Debug,_21,Q)
(<_92> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'keep_state',NewData}> when 'true' -> let <_182> = {State,NewData} in (apply 'loop_state_transition'/9 (P,Debug,S,Q,_182,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )
<{'keep_state',NewData,Actions}> when 'true' -> apply 'loop_actions'/12 (P,Debug,S,Q,{State,NewData},NextEventsR,Hibernate,TimeoutsR,Postpone,'false',StateCall,Actions)
<'keep_state_and_data'> when 'true' -> (apply 'loop_state_transition'/9 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )
<{'keep_state_and_data',Actions}> when 'true' -> apply 'loop_actions'/12 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,'false',StateCall,Actions)
<{'repeat_state',NewData}> when 'true' -> let <_236> = {State,NewData} in (case P of (<({('params'-|['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec21 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_enter'/9 (P,Debug,S,Q,_236,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_transition'/9 (P,Debug,S,Q,_236,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'repeat_state',NewData,Actions}> when 'true' -> apply 'loop_actions'/12 (P,Debug,S,Q,{State,NewData},NextEventsR,Hibernate,TimeoutsR,Postpone,'true',StateCall,Actions)
<'repeat_state_and_data'> when 'true' -> (case P of (<({('params'-|['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case _rec21 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_enter'/9 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_transition'/9 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'repeat_state_and_data',Actions}> when 'true' -> apply 'loop_actions'/12 (P,Debug,S,Q,State_Data,NextEventsR,Hibernate,TimeoutsR,Postpone,'true',StateCall,Actions)
<'stop'> when 'true' -> let <_29> = call 'erlang':'self' () in let <_30> = call 'erlang':'process_info' (_29,'current_stacktrace') in let <_31> = call 'erlang':'element' (2,_30) in case S of <{'state',_93,_94,_95,_96}> when 'true' -> let <_26> = call 'erlang':'setelement' (5,S,Hibernate) in let <_28> = call 'erlang':'setelement' (2,_26,State_Data) in apply 'terminate'/7 ('exit','normal',_31,P,Debug,_28,Q)
(<_97> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'stop',Reason}> when 'true' -> let <_36> = call 'erlang':'self' () in let <_37> = call 'erlang':'process_info' (_36,'current_stacktrace') in let <_38> = call 'erlang':'element' (2,_37) in case S of <{'state',_98,_99,_100,_101}> when 'true' -> let <_33> = call 'erlang':'setelement' (5,S,Hibernate) in let <_35> = call 'erlang':'setelement' (2,_33,State_Data) in apply 'terminate'/7 ('exit',Reason,_38,P,Debug,_35,Q)
(<_102> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'stop',Reason,NewData}> when 'true' -> let <_44> = call 'erlang':'self' () in let <_45> = call 'erlang':'process_info' (_44,'current_stacktrace') in let <_46> = call 'erlang':'element' (2,_45) in let <_rec15> = {State,NewData} in case S of <{'state',_103,_104,_105,_106}> when 'true' -> let <_41> = call 'erlang':'setelement' (5,S,Hibernate) in let <_43> = call 'erlang':'setelement' (2,_41,_rec15) in apply 'terminate'/7 ('exit',Reason,_46,P,Debug,_43,Q)
(<_107> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'stop_and_reply',Reason,Replies}> when 'true' -> let <_51> = call 'erlang':'self' () in let <_52> = call 'erlang':'process_info' (_51,'current_stacktrace') in let <_53> = call 'erlang':'element' (2,_52) in case S of <{'state',_108,_109,_110,_111}> when 'true' -> let <_48> = call 'erlang':'setelement' (5,S,Hibernate) in let <_50> = call 'erlang':'setelement' (2,_48,State_Data) in apply 'reply_then_terminate'/8 ('exit',Reason,_53,P,Debug,_50,Q,Replies)
(<_112> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'stop_and_reply',Reason,Replies,NewData}> when 'true' -> let <_59> = call 'erlang':'self' () in let <_60> = call 'erlang':'process_info' (_59,'current_stacktrace') in let <_61> = call 'erlang':'element' (2,_60) in let <_rec18> = {State,NewData} in case S of <{'state',_113,_114,_115,_116}> when 'true' -> let <_56> = call 'erlang':'setelement' (5,S,Hibernate) in let <_58> = call 'erlang':'setelement' (2,_56,_rec18) in apply 'reply_then_terminate'/8 ('exit',Reason,_61,P,Debug,_58,Q,Replies)
(<_117> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<_118> when 'true' -> let <_66> = call 'erlang':'self' () in let <_67> = call 'erlang':'process_info' (_66,'current_stacktrace') in let <_68> = call 'erlang':'element' (2,_67) in case S of <{'state',_119,_120,_121,_122}> when 'true' -> let <_63> = call 'erlang':'setelement' (5,S,Hibernate) in let <_65> = call 'erlang':'setelement' (2,_63,State_Data) in apply 'terminate'/7 ('error',{'bad_return_from_state_function',Result},_68,P,Debug,_65,Q)
(<_123> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
(<_80,_79,_78,_77,_76,_75,_74,_73,_72,_71,_70> when 'true' -> (primop 'match_fail' ({'function_clause',_80,_79,_78,_77,_76,_75,_74,_73,_72,_71,_70})-|[{'function_name',{'loop_state_callback_result',11}}] )-|['compiler_generated'] ) end
'loop_actions'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,_X_StateCall,[]> when 'true' -> (let <_13> = case CallEnter of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case P of (<({('params'-|['compiler_generated'] ),_25,_rec21,_26,_27,_28,_29}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _rec21-|['compiler_generated'] )
(<_30> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] )
(<_51> when ('true'-|['compiler_generated'] ) -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_51}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in (case _13 of (<('true'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_enter'/9 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (apply 'loop_state_transition'/9 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone)-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
<P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions> when 'true' -> let <_12> = case Actions of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (Actions)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,_12) end
'loop_actions'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> let <_13> = case _9 of (<('true'-|['compiler_generated'] )> when 'true' -> (case _0 of (<({'params',_25,_rec21,_26,_27,_28,_29}-|['compiler_generated'] )> when 'true' -> _rec21-|['compiler_generated'] )
(<_30> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_10> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_10}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in case _13 of <'true'> when 'true' -> apply 'loop_state_enter'/9 (_0,_1,_2,_3,_4,_5,_6,_7,_8)
<'false'> when 'true' -> apply 'loop_state_transition'/9 (_0,_1,_2,_3,_4,_5,_6,_7,_8)
(<_14> when 'true' -> primop 'match_fail' ({'case_clause',_14})-|['compiler_generated'] ) end
'loop_actions_list'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,_X_StateCall,[]> when 'true' -> (case P of (<({'params',_50,_rec22,_51,_52,_53,_54}-|['compiler_generated'] )> when 'true' -> case _rec22 of <'true'> when (call 'erlang':'=:=' (CallEnter,'true')-|['compiler_generated'] ) -> apply 'loop_state_enter'/9 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone)
<_56> when 'true' -> apply 'loop_state_transition'/9 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone) end-|['compiler_generated'] )
(<_55> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,[Action|Actions]> when 'true' -> case Action of <{'reply',From,Reply}> when 'true' -> apply 'loop_actions_reply'/14 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,From,Reply)
<{'hibernate',Hibernate_1}> when call 'erlang':'is_boolean' (Hibernate_1) -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate_1,TimeoutsR,Postpone,CallEnter,StateCall,Actions)
<'hibernate'> when 'true' -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,'true',TimeoutsR,Postpone,CallEnter,StateCall,Actions)
<{'postpone',Postpone_1}> when try (let <_17> = case call 'erlang':'not' (Postpone_1) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> StateCall-|['compiler_generated'] )
(<_15> when 'true' -> _15-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_17-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone_1,CallEnter,StateCall,Actions)
<'postpone'> when (call 'erlang':'=:=' (StateCall,'true')-|['compiler_generated'] ) -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,'true',CallEnter,StateCall,Actions)
<'postpone'> when 'true' -> let <_22> = call 'erlang':'self' () in let <_23> = call 'erlang':'process_info' (_22,'current_stacktrace') in let <_24> = call 'erlang':'element' (2,_23) in case S of <{'state',_57,_58,_59,_60}> when 'true' -> let <_19> = call 'erlang':'setelement' (5,S,Hibernate) in let <_21> = call 'erlang':'setelement' (2,_19,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_state_enter_action_from_state_function',Action},_24,P,Debug,_21,Q)
(<_61> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<{'next_event',Type,Content}> when 'true' -> apply 'loop_actions_next_event'/14 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Type,Content)
<{'change_callback_module',NewModule}> when call 'erlang':'is_atom' (NewModule) -> case <> of <> when (call 'erlang':'=:=' (StateCall,'true')-|['compiler_generated'] ) -> case P of <{'params',_62,_63,_64,_65,_66,_67}> when 'true' -> let <_26> = call 'erlang':'setelement' (5,P,NewModule) in let <_28> = call 'erlang':'setelement' (2,_26,'undefined') in apply 'loop_actions_list'/12 (_28,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions)
(<_68> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<> when 'true' -> let <_34> = call 'erlang':'self' () in let <_35> = call 'erlang':'process_info' (_34,'current_stacktrace') in let <_36> = call 'erlang':'element' (2,_35) in case S of <{'state',_69,_70,_71,_72}> when 'true' -> let <_31> = call 'erlang':'setelement' (5,S,Hibernate) in let <_33> = call 'erlang':'setelement' (2,_31,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_state_enter_action_from_state_function',Action},_36,P,Debug,_33,Q)
(<_73> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<Timeout> when 'true' -> apply 'loop_actions_timeout'/13 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Timeout) end
(<_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38> when 'true' -> (primop 'match_fail' ({'function_clause',_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38})-|[{'function_name',{'loop_actions_list',12}}] )-|['compiler_generated'] ) end
'loop_actions_reply'/14 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) -> case (case _12 of (<({Pid,_54}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (Pid)-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_55> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> do (case <_12,_13> of (<({To,Tag}-|['compiler_generated'] ),_58> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (To)-|['compiler_generated'] ) -> (let <Msg> = {Tag,_58} in (try (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (To,Msg)-|['compiler_generated'] ) of <_59> -> ('ok'-|['compiler_generated'] ) catch <_62,_63,_64> -> ('ok'-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_71,_72> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_71,_72}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_17> = case _1 of <[]> when 'true' -> _1
<_41> when 'true' -> (case _0 of (<({'params',_42,_43,_44,_45,_rec26,_46}-|['compiler_generated'] )> when 'true' -> apply 'sys_debug'/3 (_1,_rec26,{'out',_13,_12})-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end in apply 'loop_actions_list'/12 (_0,_17,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11)
<'false'> when 'true' -> let <_23> = call 'erlang':'self' () in let <_24> = call 'erlang':'process_info' (_23,'current_stacktrace') in let <_25> = call 'erlang':'element' (2,_24) in case _2 of <{'state',_48,_49,_50,_51}> when 'true' -> let <_20> = call 'erlang':'setelement' (5,_2,_6) in let <_22> = call 'erlang':'setelement' (2,_20,_4) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',{'reply',_12,_13}},_25,_0,_1,_22,_3)
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'loop_actions_next_event'/14 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) -> case (case _12 of (<({('call'-|['compiler_generated'] ),From}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case From of (<({Pid,_66}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (Pid)-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_67> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<('cast'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('info'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('internal'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_68> when ('true'-|['compiler_generated'] ) -> (case _12 of (<('timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('state_timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<({('timeout'-|['compiler_generated'] ),_X_Name}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_71> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when (call 'erlang':'=:=' (_10,'true')-|['compiler_generated'] ) -> let <NextEvent> = {_12,_13} in case _1 of <[]> when 'true' -> apply 'loop_actions_list'/12 (_0,_1,_2,_3,_4,[NextEvent|_5],_6,_7,_8,_9,_10,_11)
<_46> when 'true' -> (case _0 of (<({'params',_47,_48,_49,_50,_rec28,_51}-|['compiler_generated'] )> when 'true' -> (case _2 of (<({'state',_rec29,_53,_54,_55}-|['compiler_generated'] )> when 'true' -> case _rec29 of <{State,_X_Data}> when 'true' -> let <Debug_1> = apply 'sys_debug'/3 (_1,_rec28,{'in',{_12,_13},State}) in apply 'loop_actions_list'/12 (_0,Debug_1,_2,_3,_4,[NextEvent|_5],_6,_7,_8,_9,_10,_11)
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_56> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_52> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<_57> when 'true' -> let <_30> = case <> of <> when (call 'erlang':'=:=' (_10,'true')-|['compiler_generated'] ) -> 'bad_action_from_state_function'
<> when 'true' -> 'bad_state_enter_action_from_state_function' end in let <_27> = call 'erlang':'self' () in let <_28> = call 'erlang':'process_info' (_27,'current_stacktrace') in let <_29> = call 'erlang':'element' (2,_28) in case _2 of <{'state',_58,_59,_60,_61}> when 'true' -> let <_24> = call 'erlang':'setelement' (5,_2,_6) in let <_26> = call 'erlang':'setelement' (2,_24,_4) in apply 'terminate'/7 ('error',{_30,{'next_event',_12,_13}},_29,_0,_1,_26,_3)
(<_62> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
'loop_actions_timeout'/13 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12> of <P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Timeout = {TimeoutType,Time,TimeoutMsg,TimeoutOpts}> when 'true' -> case (case TimeoutType of (<('timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('state_timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<({('timeout'-|['compiler_generated'] ),_X_Name}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_137> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> case (case TimeoutOpts of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (TimeoutOpts)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <[{'abs','true'}]> when try (let <_15> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_13> when 'true' -> _13-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_15-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<[{'abs','false'}]> when try let <_19> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (0,Time)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_17> when 'true' -> _17-|['compiler_generated'] ) end in (let <_21> = case _19 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_16> when 'true' -> _16-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_21-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <RelativeTimeout> = {TimeoutType,Time,TimeoutMsg} in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[RelativeTimeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<[]> when try let <_26> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (0,Time)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_24> when 'true' -> _24-|['compiler_generated'] ) end in (let <_28> = case _26 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_23> when 'true' -> _23-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_28-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <RelativeTimeout> = {TimeoutType,Time,TimeoutMsg} in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[RelativeTimeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<TimeoutOptsList> when 'true' -> case apply 'parse_timeout_opts_abs'/1 (TimeoutOptsList) of <'true'> when try (let <_32> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_30> when 'true' -> _30-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_32-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<'false'> when try let <_36> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (0,Time)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_34> when 'true' -> _34-|['compiler_generated'] ) end in (let <_38> = case _36 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_33> when 'true' -> _33-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_38-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <RelativeTimeout> = {TimeoutType,Time,TimeoutMsg} in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[RelativeTimeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<_109> when 'true' -> let <_44> = call 'erlang':'self' () in let <_45> = call 'erlang':'process_info' (_44,'current_stacktrace') in let <_46> = call 'erlang':'element' (2,_45) in case S of <{'state',_110,_111,_112,_113}> when 'true' -> let <_41> = call 'erlang':'setelement' (5,S,Hibernate) in let <_43> = call 'erlang':'setelement' (2,_41,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',Timeout},_46,P,Debug,_43,Q)
(<_114> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end end
<'false'> when 'true' -> let <_53> = call 'erlang':'self' () in let <_54> = call 'erlang':'process_info' (_53,'current_stacktrace') in let <_55> = call 'erlang':'element' (2,_54) in case S of <{'state',_115,_116,_117,_118}> when 'true' -> let <_50> = call 'erlang':'setelement' (5,S,Hibernate) in let <_52> = call 'erlang':'setelement' (2,_50,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',Timeout},_55,P,Debug,_52,Q)
(<_119> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Timeout = {TimeoutType,Time,_X_TimeoutMsg}> when 'true' -> case (case TimeoutType of (<('timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('state_timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<({('timeout'-|['compiler_generated'] ),_X_Name}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_141> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when let <_63> = try let <_60> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (0,Time)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_58> when 'true' -> _58-|['compiler_generated'] ) end in (let <_62> = case _60 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_57> when 'true' -> _57-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_62-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' in let <_64> = call 'erlang':'=:=' (Time,'update') in call 'erlang':'or' (_63,_64) -> apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<_120> when 'true' -> let <_69> = call 'erlang':'self' () in let <_70> = call 'erlang':'process_info' (_69,'current_stacktrace') in let <_71> = call 'erlang':'element' (2,_70) in case S of <{'state',_121,_122,_123,_124}> when 'true' -> let <_66> = call 'erlang':'setelement' (5,S,Hibernate) in let <_68> = call 'erlang':'setelement' (2,_66,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',Timeout},_71,P,Debug,_68,Q)
(<_125> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Action = {TimeoutType,'cancel'}> when 'true' -> case (case TimeoutType of (<('timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<('state_timeout'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<({('timeout'-|['compiler_generated'] ),_X_Name}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_144> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> let <Timeout> = {TimeoutType,'infinity','undefined'} in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<'false'> when 'true' -> let <_78> = call 'erlang':'self' () in let <_79> = call 'erlang':'process_info' (_78,'current_stacktrace') in let <_80> = call 'erlang':'element' (2,_79) in case S of <{'state',_126,_127,_128,_129}> when 'true' -> let <_75> = call 'erlang':'setelement' (5,S,Hibernate) in let <_77> = call 'erlang':'setelement' (2,_75,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',Action},_80,P,Debug,_77,Q)
(<_130> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end
<P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postpone,CallEnter,StateCall,Actions,Time> when 'true' -> case <> of <> when try let <_85> = case call 'erlang':'is_integer' (Time) of (<('true'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=<' (0,Time)-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> 'false'-|['compiler_generated'] )
(<_83> when 'true' -> _83-|['compiler_generated'] ) end in (let <_87> = case _85 of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=:=' (Time,'infinity')-|['compiler_generated'] )
(<_82> when 'true' -> _82-|['compiler_generated'] ) end in (call 'erlang':'=:=' ((_87-|['compiler_generated'] ),'true')-|['compiler_generated'] )-|['compiler_generated'] ) of <Try> -> Try catch <T,R> -> 'false' -> let <Timeout> = {'timeout',Time,Time} in apply 'loop_actions_list'/12 (P,Debug,S,Q,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postpone,CallEnter,StateCall,Actions)
<> when 'true' -> let <_93> = call 'erlang':'self' () in let <_94> = call 'erlang':'process_info' (_93,'current_stacktrace') in let <_95> = call 'erlang':'element' (2,_94) in case S of <{'state',_131,_132,_133,_134}> when 'true' -> let <_90> = call 'erlang':'setelement' (5,S,Hibernate) in let <_92> = call 'erlang':'setelement' (2,_90,NextState_NewData) in apply 'terminate'/7 ('error',{'bad_action_from_state_function',Time},_95,P,Debug,_92,Q)
(<_135> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end end end
'loop_state_transition'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <P,Debug,S = {'state',{State,_X_Data},Postponed,_28,_29},[Event|Events],NextState_NewData = {NextState,_X_NewData},NextEventsR,Hibernate,TimeoutsR,Postpone> when 'true' -> let <_10> = case Postpone of <'true'> when 'true' -> [Event|Postponed]
<'false'> when 'true' -> Postponed
(<_9> when 'true' -> primop 'match_fail' ({'case_clause',_9})-|['compiler_generated'] ) end in case Debug of <[]> when 'true' -> case <> of <> when call 'erlang':'=:=' (NextState,State) -> apply 'loop_keep_state'/9 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,_10)
<> when 'true' -> apply 'loop_state_change'/9 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,_10) end
<_30> when 'true' -> (case P of (<({'params',_31,_32,_33,_34,_rec36,_35}-|['compiler_generated'] )> when 'true' -> let <_16> = case Postpone of <'true'> when 'true' -> apply 'sys_debug'/3 (Debug,_rec36,{'postpone',Event,State,NextState})
<'false'> when 'true' -> apply 'sys_debug'/3 (Debug,_rec36,{'consume',Event,State,NextState})
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end in case <> of <> when call 'erlang':'=:=' (NextState,State) -> apply 'loop_keep_state'/9 (P,_16,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,_10)
<> when 'true' -> apply 'loop_state_change'/9 (P,_16,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,_10) end-|['compiler_generated'] )
(<_36> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_27,_26,_25,_24,_23,_22,_21,_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26,_25,_24,_23,_22,_21,_20,_19})-|[{'function_name',{'loop_state_transition',9}}] )-|['compiler_generated'] ) end
'loop_keep_state'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8> of <P,Debug,S = {'state',_20,_21,Timers,_22},Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed> when 'true' -> case Timers of <~{'timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' -> (do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (TimerRef)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_29,_30}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_29,TimerRef)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_9> = call ('maps'-|['compiler_generated'] ):('remove'-|['compiler_generated'] ) (('timeout'-|['compiler_generated'] ),Timers) in apply 'loop_next_events'/10 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,_9)-|['compiler_generated'] )
<_23> when 'true' -> apply 'loop_next_events'/10 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers) end
(<_19,_18,_17,_16,_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12,_11})-|[{'function_name',{'loop_keep_state',9}}] )-|['compiler_generated'] ) end
'loop_state_change'/9 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8) -> case _8 of <[]> when 'true' -> apply 'loop_state_change'/8 (_0,_1,_2,_3,_4,_5,_6,_7)
<[E1|[]]> when 'true' -> apply 'loop_state_change'/8 (_0,_1,_2,[E1|_3],_4,_5,_6,_7)
<[E2|[E1|[]]]> when 'true' -> apply 'loop_state_change'/8 (_0,_1,_2,[E1|[E2|_3]],_4,_5,_6,_7)
<_20> when 'true' -> let <_9> = call 'lists':'reverse' (_8,_3) in apply 'loop_state_change'/8 (_0,_1,_2,_9,_4,_5,_6,_7) end
'loop_state_change'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <P,Debug,S = {'state',_20,_21,Timers,_22},Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR> when 'true' -> case Timers of <~{'state_timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' -> (do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (TimerRef)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_29,_8}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_29,TimerRef)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_8> = call ('maps'-|['compiler_generated'] ):('remove'-|['compiler_generated'] ) (('state_timeout'-|['compiler_generated'] ),Timers) in let <_9> = case _8 of (<(~{(('timeout'-|['compiler_generated'] ):=({_36,_37}-|['compiler_generated'] )-|['compiler_generated'] )}~-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (_36)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_38,_39}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_38,_36)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) (call ('maps'-|['compiler_generated'] ):('remove'-|['compiler_generated'] ) (('timeout'-|['compiler_generated'] ),_8)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<(~{}~-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> _8-|['compiler_generated'] )
(<_41> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('case_clause'-|['compiler_generated'] ),_41}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop_next_events'/10 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,[],_9)-|['compiler_generated'] )
<~{'timeout':={TimerRef,_X_TimeoutMsg}}~> when 'true' -> (do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (TimerRef)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_49,_8}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_49,TimerRef)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_9> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_10> = call ('maps'-|['compiler_generated'] ):('remove'-|['compiler_generated'] ) (('timeout'-|['compiler_generated'] ),Timers) in apply 'loop_next_events'/10 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,[],_10)-|['compiler_generated'] )
<_23> when 'true' -> apply 'loop_next_events'/10 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,[],Timers) end
(<_19,_18,_17,_16,_15,_14,_13,_12> when 'true' -> (primop 'match_fail' ({'function_clause',_19,_18,_17,_16,_15,_14,_13,_12})-|[{'function_name',{'loop_state_change',8}}] )-|['compiler_generated'] ) end
'loop_next_events'/10 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9> of <P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,[],Postponed,Timers> when 'true' -> case S of <{'state',_rec38,_rec39,_rec40,_rec41}> when 'true' -> let <_12> = {'state',NextState_NewData,Postponed,Timers,Hibernate} in apply 'loop_done'/5 (P,Debug,_12,NextEventsR,Events)
(<_25> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers> when 'true' -> apply 'loop_timeouts'/12 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers,~{}~,[]) end
'loop_timeouts'/12 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) -> case <_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11> of <P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,[],Postponed,Timers,_X_Seen,TimeoutEvents> when 'true' -> case S of <{'state',_rec43,_rec44,_rec45,_rec46}> when 'true' -> let <_14> = {'state',NextState_NewData,Postponed,Timers,Hibernate} in case TimeoutEvents of <[]> when 'true' -> apply 'loop_done'/5 (P,Debug,_14,NextEventsR,Events)
<_36> when 'true' -> case Events of <[]> when 'true' -> apply 'loop_prepend_timeout_events'/5 (P,Debug,_14,TimeoutEvents,NextEventsR)
<[E1|[]]> when 'true' -> apply 'loop_prepend_timeout_events'/5 (P,Debug,_14,TimeoutEvents,[E1|NextEventsR])
<[E2|[E1|[]]]> when 'true' -> apply 'loop_prepend_timeout_events'/5 (P,Debug,_14,TimeoutEvents,[E1|[E2|NextEventsR]])
<_37> when 'true' -> let <_16> = call 'lists':'reverse' (Events,NextEventsR) in apply 'loop_prepend_timeout_events'/5 (P,Debug,_14,TimeoutEvents,_16) end end
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end
<P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,[Timeout|TimeoutsR],Postponed,Timers,Seen,TimeoutEvents> when 'true' -> let <TimeoutType> = call 'erlang':'element' (1,Timeout) in case Seen of <~{TimeoutType:=_38}~> when 'true' -> apply 'loop_timeouts'/12 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers,Seen,TimeoutEvents)
<~{}~> when 'true' -> case Timeout of <{_39,Time,TimeoutMsg}> when 'true' -> apply 'loop_timeouts_start'/16 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers,Seen,TimeoutEvents,TimeoutType,Time,TimeoutMsg,[])
<{_40,Time,TimeoutMsg,TimeoutOpts}> when 'true' -> let <_20> = case TimeoutOpts of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (TimeoutOpts)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'loop_timeouts_start'/16 (P,Debug,S,Events,NextState_NewData,NextEventsR,Hibernate,TimeoutsR,Postponed,Timers,Seen,TimeoutEvents,TimeoutType,Time,TimeoutMsg,_20)
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
(<_22> when 'true' -> primop 'match_fail' ({'case_clause',_22})-|['compiler_generated'] ) end
(<_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23})-|[{'function_name',{'loop_timeouts',12}}] )-|['compiler_generated'] ) end
'loop_timeouts_start'/16 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) -> case _13 of <'infinity'> when 'true' -> apply 'loop_timeouts_cancel'/13 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12)
<0> when call 'erlang':'=:=' (_15,[]) -> apply 'loop_timeouts_cancel'/13 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,[{_12,_14}|_11],_12)
<'update'> when 'true' -> apply 'loop_timeouts_update'/14 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_14)
<_40> when 'true' -> let <_16> = call 'erlang':'self' () in let <TimerRef> = call 'erlang':'start_timer' (_13,_16,_12,_15) in case _1 of <[]> when 'true' -> apply 'loop_timeouts_register'/15 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,TimerRef,_14)
<_41> when 'true' -> case _4 of <{State,_X_Data}> when 'true' -> (case _0 of (<({'params',_42,_43,_44,_45,_rec47,_46}-|['compiler_generated'] )> when 'true' -> let <Debug_1> = apply 'sys_debug'/3 (_1,_rec47,{'start_timer',{_12,_13,_14,_15},State}) in apply 'loop_timeouts_register'/15 (_0,Debug_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,TimerRef,_14)-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18> when 'true' -> primop 'match_fail' ({'badmatch',_18})-|['compiler_generated'] ) end end end
'loop_timeouts_register'/15 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) -> case _9 of <~{_12:={OldTimerRef,_X_OldTimeoutMsg}}~> when 'true' -> do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (OldTimerRef)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_39,_40}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_39,OldTimerRef)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_41> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) case <> of (<> when call 'erlang':'is_map' (_9) -> let <_15> = ~{_12:={_13,_14}|_9}~ in case <> of (<> when call 'erlang':'is_map' (_10) -> let <_17> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_15,_17,_11)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_9})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<~{}~> when 'true' -> case <> of (<> when call 'erlang':'is_map' (_9) -> let <_18> = ~{_12=>{_13,_14}|_9}~ in case <> of (<> when call 'erlang':'is_map' (_10) -> let <_20> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_18,_20,_11)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_9})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_21> when 'true' -> primop 'match_fail' ({'case_clause',_21})-|['compiler_generated'] ) end
'loop_timeouts_cancel'/13 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) -> case _9 of <~{_12:={TimerRef,_X_TimeoutMsg}}~> when 'true' -> (do (case (call ('erlang'-|['compiler_generated'] ):('cancel_timer'-|['compiler_generated'] ) (TimerRef)-|['compiler_generated'] ) of (<('false'-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (receive (<({('timeout'-|['compiler_generated'] ),_36,_37}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('=:='-|['compiler_generated'] ) (_36,TimerRef)-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) after ('infinity'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] )-|['compiler_generated'] )
(<_38> when ('true'-|['compiler_generated'] ) -> 'ok'-|['compiler_generated'] ) end-|['compiler_generated'] ) let <Timers_1> = call ('maps'-|['compiler_generated'] ):('remove'-|['compiler_generated'] ) (_12,_9) in case <> of (<> when call 'erlang':'is_map' (_10) -> let <_14> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,Timers_1,_14,_11)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<~{}~> when 'true' -> case <> of (<> when call 'erlang':'is_map' (_10) -> let <_15> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_15,_11)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_16> when 'true' -> primop 'match_fail' ({'case_clause',_16})-|['compiler_generated'] ) end
'loop_timeouts_update'/14 = fun (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) -> case _9 of <~{_12:={TimerRef,_X_OldTimeoutMsg}}~> when 'true' -> case <> of (<> when call 'erlang':'is_map' (_9) -> let <_14> = ~{_12:={TimerRef,_13}|_9}~ in case <> of (<> when call 'erlang':'is_map' (_10) -> let <_16> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_14,_16,_11)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_9})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
<~{}~> when 'true' -> let <TimeoutEvents_1> = [{_12,_13}|_11] in case <> of (<> when call 'erlang':'is_map' (_10) -> let <_18> = ~{_12=>'true'|_10}~ in apply 'loop_timeouts'/12 (_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_18,TimeoutEvents_1)-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',_10})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_19> when 'true' -> primop 'match_fail' ({'case_clause',_19})-|['compiler_generated'] ) end
'loop_prepend_timeout_events'/5 = fun (_0,_1,_2,_3,_4) -> case apply 'prepend_timeout_events'/5 (_0,_1,_2,_3,_4) of <{Debug_1,Events_1R}> when 'true' -> apply 'loop_done'/5 (_0,Debug_1,_2,Events_1R,[])
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
'loop_done'/5 = fun (_0,_1,_2,_3,_4) -> case _3 of <[]> when 'true' -> apply 'loop_done'/4 (_0,_1,_2,_4)
<[E1|[]]> when 'true' -> apply 'loop_done'/4 (_0,_1,_2,[E1|_4])
<[E2|[E1|[]]]> when 'true' -> apply 'loop_done'/4 (_0,_1,_2,[E1|[E2|_4]])
<_12> when 'true' -> let <_5> = call 'lists':'reverse' (_3,_4) in apply 'loop_done'/4 (_0,_1,_2,_5) end
'loop_done'/4 = fun (_0,_1,_2,_3) -> case _3 of <[]> when 'true' -> apply 'loop'/3 (_0,_1,_2)
<[Event|Events]> when 'true' -> apply 'loop_event'/5 (_0,_1,_2,Event,Events)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
'parse_timeout_opts_abs'/1 = fun (_0) -> apply 'parse_timeout_opts_abs'/2 (_0,'false')
'parse_timeout_opts_abs'/2 = fun (_0,_1) -> case _0 of <[]> when 'true' -> _1
<[{'abs',Abs_1}|_5]> when let <_6> = call 'erlang':'=:=' (_5,_0) in let <_7> = call 'erlang':'is_boolean' (Abs_1) in call 'erlang':'and' (_6,_7) -> apply 'parse_timeout_opts_abs'/2 (_0,Abs_1)
<_8> when 'true' -> 'badarg' end
'prepend_timeout_events'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_P,Debug,_X_S,[],EventsR> when 'true' -> {Debug,EventsR}
<P,Debug,S,[TimeoutEvent = {'timeout',_24}|TimeoutEvents],[]> when 'true' -> case Debug of <[]> when 'true' -> apply 'prepend_timeout_events'/5 (P,Debug,S,TimeoutEvents,[TimeoutEvent|[]])
<_25> when 'true' -> (case S of (<({'state',_rec48,_26,_27,_28}-|['compiler_generated'] )> when 'true' -> case _rec48 of <{State,_X_Data}> when 'true' -> (case P of (<({'params',_30,_31,_32,_33,_rec49,_34}-|['compiler_generated'] )> when 'true' -> let <Debug_1> = apply 'sys_debug'/3 (Debug,_rec49,{'insert_timeout',TimeoutEvent,State}) in apply 'prepend_timeout_events'/5 (P,Debug_1,S,TimeoutEvents,[TimeoutEvent|[]])-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_29> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<P,Debug,S,[{'timeout',_36}|TimeoutEvents],EventsR> when 'true' -> apply 'prepend_timeout_events'/5 (P,Debug,S,TimeoutEvents,EventsR)
<P,Debug,S,[TimeoutEvent|TimeoutEvents],EventsR> when 'true' -> case Debug of <[]> when 'true' -> apply 'prepend_timeout_events'/5 (P,Debug,S,TimeoutEvents,[TimeoutEvent|EventsR])
<_37> when 'true' -> (case S of (<({'state',_rec50,_38,_39,_40}-|['compiler_generated'] )> when 'true' -> case _rec50 of <{State,_X_Data}> when 'true' -> (case P of (<({'params',_42,_43,_44,_45,_rec51,_46}-|['compiler_generated'] )> when 'true' -> let <Debug_1> = apply 'sys_debug'/3 (Debug,_rec51,{'insert_timeout',TimeoutEvent,State}) in apply 'prepend_timeout_events'/5 (P,Debug_1,S,TimeoutEvents,[TimeoutEvent|EventsR])-|['compiler_generated'] )
(<_47> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_41> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','state'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
(<_23,_22,_21,_20,_19> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22,_21,_20,_19})-|[{'function_name',{'prepend_timeout_events',5}}] )-|['compiler_generated'] ) end
'reply_then_terminate'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> let <_8> = case _7 of (<Item> when (call ('erlang'-|['compiler_generated'] ):('is_list'-|['compiler_generated'] ) (_7)-|['compiler_generated'] ) -> Item-|['compiler_generated'] )
(<Item> when ('true'-|['compiler_generated'] ) -> ([Item|([]-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] ) end in apply 'do_reply_then_terminate'/8 (_0,_1,_2,_3,_4,_5,_6,_8)
'do_reply_then_terminate'/8 = fun (_0,_1,_2,_3,_4,_5,_6,_7) -> case <_0,_1,_2,_3,_4,_5,_6,_7> of <Class,Reason,Stacktrace,P,Debug,S,Q,[]> when 'true' -> apply 'terminate'/7 (Class,Reason,Stacktrace,P,Debug,S,Q)
<Class,Reason,Stacktrace,P,Debug,S,Q,[R|Rs]> when 'true' -> case R of <{'reply',From,Reply}> when 'true' -> case (case From of (<({Pid,_38}-|['compiler_generated'] )> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (Pid)-|['compiler_generated'] ) -> ('true'-|['compiler_generated'] )-|['compiler_generated'] )
(<_39> when ('true'-|['compiler_generated'] ) -> ('false'-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <'true'> when 'true' -> do (case <From,Reply> of (<({To,Tag}-|['compiler_generated'] ),_42> when (call ('erlang'-|['compiler_generated'] ):('is_pid'-|['compiler_generated'] ) (To)-|['compiler_generated'] ) -> (let <Msg> = {Tag,_42} in (try (call ('erlang'-|['compiler_generated'] ):('!'-|['compiler_generated'] ) (To,Msg)-|['compiler_generated'] ) of <_43> -> ('ok'-|['compiler_generated'] ) catch <_45,_46,_47> -> ('ok'-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_9,_8> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_9,_8}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) let <_11> = case Debug of <[]> when 'true' -> Debug
<_29> when 'true' -> (case P of (<({'params',_30,_31,_32,_33,_rec52,_34}-|['compiler_generated'] )> when 'true' -> apply 'sys_debug'/3 (Debug,_rec52,{'out',Reply,From})-|['compiler_generated'] )
(<_35> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end in apply 'do_reply_then_terminate'/8 (Class,Reason,Stacktrace,P,_11,S,Q,Rs)
<'false'> when 'true' -> let <_13> = call 'erlang':'self' () in let <_14> = call 'erlang':'process_info' (_13,'current_stacktrace') in let <_15> = call 'erlang':'element' (2,_14) in apply 'terminate'/7 ('error',{'bad_reply_action_from_state_function',R},_15,P,Debug,S,Q) end
<_36> when 'true' -> let <_17> = call 'erlang':'self' () in let <_18> = call 'erlang':'process_info' (_17,'current_stacktrace') in let <_19> = call 'erlang':'element' (2,_18) in apply 'terminate'/7 ('error',{'bad_reply_action_from_state_function',R},_19,P,Debug,S,Q) end
(<_28,_27,_26,_25,_24,_23,_22,_21> when 'true' -> (primop 'match_fail' ({'function_clause',_28,_27,_26,_25,_24,_23,_22,_21})-|[{'function_name',{'do_reply_then_terminate',8}}] )-|['compiler_generated'] ) end
'terminate'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Class,Reason,Stacktrace,P = {'params',_24,_25,_26,Module,_27,_28},Debug,S = {'state',{State,Data},_29,_30,_31},Q> when 'true' -> do case call 'erlang':'function_exported' (Module,'terminate',3) of <'true'> when 'true' -> try call Module:'terminate' (Reason,State,Data) of <_7> -> 'ok' catch <_11,_10,_9> -> case <_11,_10,_9> of <('throw'-|['compiler_generated'] ),_33,_34> when 'true' -> 'ok'
<C,R,_39> when 'true' -> let <ST> = primop 'build_stacktrace' (_39) in do apply 'error_info'/7 (C,R,ST,Debug,P,S,Q) call 'erlang':'raise' (C,R,ST) end
<'false'> when 'true' -> 'ok'
(<_12> when 'true' -> primop 'match_fail' ({'case_clause',_12})-|['compiler_generated'] ) end do case Reason of <'normal'> when 'true' -> apply 'terminate_sys_debug'/4 (Debug,P,State,Reason)
<'shutdown'> when 'true' -> apply 'terminate_sys_debug'/4 (Debug,P,State,Reason)
<({'shutdown',_35}-|['result_not_wanted'] )> when 'true' -> apply 'terminate_sys_debug'/4 (Debug,P,State,Reason)
<_36> when 'true' -> apply 'error_info'/7 (Class,Reason,Stacktrace,Debug,P,S,Q) end case Stacktrace of <[]> when 'true' -> call 'erlang':Class (Reason)
<_37> when 'true' -> call 'erlang':'raise' (Class,Reason,Stacktrace) end
(<_23,_22,_21,_20,_19,_18,_17> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22,_21,_20,_19,_18,_17})-|[{'function_name',{'terminate',7}}] )-|['compiler_generated'] ) end
'terminate_sys_debug'/4 = fun (_0,_1,_2,_3) -> case _0 of <[]> when 'true' -> _0
<_11> when 'true' -> (case _1 of (<({'params',_12,_13,_14,_15,_rec53,_16}-|['compiler_generated'] )> when 'true' -> apply 'sys_debug'/3 (_0,_rec53,{'terminate',_3,_2})-|['compiler_generated'] )
(<_17> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','params'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'error_info'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Class,Reason,Stacktrace,Debug,P = {'params',CallbackMode,StateEnter,_25,_26,Name,_27},S = {'state',_28,Postponed,Timers,_29},Q> when 'true' -> let <Log> = call 'sys':'get_log' (Debug) in case call 'logger':'allow' ('error','gen_statem') of <'true'> when 'true' -> let <_8> = call 'erlang':'get' () in let <_9> = apply 'format_status'/4 ('terminate',_8,P,S) in let <_10> = apply 'list_timeouts'/1 (Timers) in let <_11> = apply 'client_stacktrace'/1 (Q) in let <_12> = ~{'name'=>Name,'queue'=>Q,'postponed'=>Postponed,'callback_mode'=>CallbackMode,'state_enter'=>StateEnter,'state'=>_9,'timeouts'=>_10,'log'=>Log,'reason'=>{Class,Reason,Stacktrace},'client_info'=>_11|~{'label'=>{'gen_statem','terminate'}}~}~ in call 'logger':'macro_log' (~{'file'=>[115|[114|[99|[47|[103|[101|[110|[95|[115|[116|[97|[116|[101|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]],'line'=>2367,'mfa'=>{'gen_statem','error_info',7}}~,'error',_12,~{'domain'=>['otp'],'error_logger'=>~{'report_cb'=>fun 'gen_statem':'format_log'/1,'tag'=>'error'}~,'report_cb'=>fun 'gen_statem':'format_log'/2}~)
<'false'> when 'true' -> 'ok'
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_24,_23,_22,_21,_20,_19,_18> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23,_22,_21,_20,_19,_18})-|[{'function_name',{'error_info',7}}] )-|['compiler_generated'] ) end
'client_stacktrace'/1 = fun (_0) -> case _0 of <[]> when 'true' -> 'undefined'
<[{{'call',{Pid,_X_Tag}},_X_Req}|_5]> when call 'erlang':'is_pid' (Pid) -> case <> of <> when try let <_2> = call 'erlang':'node' (Pid) in let <_1> = call 'erlang':'node' () in call 'erlang':'=:=' (_2,_1) of <Try> -> Try catch <T,R> -> 'false' -> case call 'erlang':'process_info' (Pid,['current_stacktrace'|['registered_name']]) of <'undefined'> when 'true' -> {Pid,'dead'}
<[{'current_stacktrace',Stacktrace}|[{'registered_name',[]}]]> when 'true' -> {Pid,{Pid,Stacktrace}}
<[{'current_stacktrace',Stacktrace}|[{'registered_name',Name}|[]]]> when 'true' -> {Pid,{Name,Stacktrace}}
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
<> when 'true' -> {Pid,'remote'} end
<[_6|_7]> when 'true' -> 'undefined'
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'client_stacktrace',1}}] )-|['compiler_generated'] ) end
'format_log'/1 = fun (_0) -> let <Depth> = call 'error_logger':'get_format_depth' () in let <FormatOpts> = ~{'depth'=>Depth,'single_line'=>'false','encoding'=>'utf8'|~{'chars_limit'=>'unlimited'}~}~ in let <_3> = apply 'limit_report'/2 (_0,Depth) in apply 'format_log_multi'/2 (_3,FormatOpts)
'limit_report'/2 = fun (_0,_1) -> case <_0,_1> of <Report,'unlimited'> when 'true' -> Report
<Report = ~{'reason':={Class,Reason,Stacktrace},'postponed':=Postponed,'log':=Log,'timeouts':=Timeouts,'label':={'gen_statem','terminate'},'client_info':=ClientInfo,'state':=FmtData,'queue':=Q}~,Depth> when 'true' -> let <_5> = case Q of <[Event|Events]> when 'true' -> let <_2> = call 'io_lib':'limit_term' (Event,Depth) in let <_3> = call 'io_lib':'limit_term' (Events,Depth) in [_2|_3]
<_23> when 'true' -> [] end in let <_7> = case Postponed of <[]> when 'true' -> []
<_24> when 'true' -> call 'io_lib':'limit_term' (Postponed,Depth) end in let <_8> = call 'io_lib':'limit_term' (FmtData,Depth) in let <_10> = case Timeouts of <{0,_25}> when 'true' -> Timeouts
<_26> when 'true' -> call 'io_lib':'limit_term' (Timeouts,Depth) end in let <_17> = case Log of <[]> when 'true' -> []
<_27> when 'true' -> (letrec 'lc$^0'/1 = fun (_13) -> case _13 of <[T|_12]> when 'true' -> let <_14> = call 'io_lib':'limit_term' (T,Depth) in let <_15> = apply 'lc$^0'/1 (_12) in ([_14|_15]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_28> when 'true' -> (primop 'match_fail' ({'function_clause',_28})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Log)-|['list_comprehension'] ) end in let <_19> = call 'io_lib':'limit_term' (Reason,Depth) in let <_18> = call 'io_lib':'limit_term' (Stacktrace,Depth) in let <_20> = apply 'limit_client_info'/2 (ClientInfo,Depth) in case <> of (<> when call 'erlang':'is_map' (Report) -> ~{'queue'=>_5,'postponed'=>_7,'state'=>_8,'timeouts'=>_10,'log'=>_17,'reason'=>{Class,_19,_18},'client_info'=>_20|Report}~-|['compiler_generated'] )
(<> when 'true' -> (primop 'match_fail' ({'badmap',Report})-|[{'eval_failure','badmap'}] )-|['compiler_generated'] ) end
(<_22,_21> when 'true' -> (primop 'match_fail' ({'function_clause',_22,_21})-|[{'function_name',{'limit_report',2}}] )-|['compiler_generated'] ) end
'limit_client_info'/2 = fun (_0,_1) -> case <_0,_1> of <{Pid,{Name,Stacktrace}},Depth> when 'true' -> let <_2> = call 'io_lib':'limit_term' (Stacktrace,Depth) in {Pid,{Name,_2}}
<Client,_X_Depth> when 'true' -> Client end
'format_log'/2 = fun (_0,_1) -> let <FormatOpts> = call 'maps':'merge' (~{'chars_limit'=>'unlimited','depth'=>'unlimited','encoding'=>'utf8','single_line'=>'false'}~,_1) in let <_5> = case FormatOpts of <~{'chars_limit':='unlimited'}~> when 'true' -> []
<~{'chars_limit':=Limit}~> when 'true' -> [{'chars_limit',Limit}|[]]
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end in case apply 'format_log_single'/2 (_0,FormatOpts) of <{Format,Args}> when 'true' -> call 'io_lib':'format' (Format,Args,_5)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
'format_log_single'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':={Class,Reason,Stacktrace},'log':=Log,'label':={'gen_statem','terminate'},'client_info':=ClientInfo,'state':=FmtData,'queue':=Q,'name':=Name}~,FormatOpts = ~{'depth':=Depth,'single_line':='true'}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in case apply 'fix_reason'/3 (Class,Reason,Stacktrace) of <{FixedReason,FixedStacktrace}> when 'true' -> case apply 'format_client_log_single'/3 (ClientInfo,P,Depth) of <{ClientFmt,ClientArgs}> when 'true' -> let <_6> = case FixedStacktrace of <[]> when 'true' -> []
<_32> when 'true' -> call 'erlang':'++' ([46|[32|[83|[116|[97|[99|[107|[58|[32]]]]]]]]],P) end in let <_8> = case Q of <[]> when 'true' -> []
<_33> when 'true' -> call 'erlang':'++' ([46|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[58|[32]]]]]]]]]]]]]],P) end in let <_10> = case Log of <[]> when 'true' -> []
<_34> when 'true' -> call 'erlang':'++' ([46|[32|[76|[111|[103|[58|[32]]]]]]],P) end in let <Format> = call 'lists':'append' ([[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32]]]]]]]]]]]]]]]]]]]]]]|[P|[_6|[_8|[[46|[32|[83|[116|[97|[116|[101|[58|[32]]]]]]]]]|[P|[_10|[[46]]]]]]]]]]]) in let <_19> = case FixedStacktrace of <[]> when 'true' -> []
<_35> when 'true' -> [FixedStacktrace|[]] end in let <_16> = case Q of <[]> when 'true' -> []
<[Event|_36]> when 'true' -> [Event|[]]
(<_15> when 'true' -> primop 'match_fail' ({'case_clause',_15})-|['compiler_generated'] ) end in let <_13> = case Log of <[]> when 'true' -> []
<_37> when 'true' -> [Log|[]] end in let <_14> = [FmtData|_13] in let <_17> = call 'erlang':'++' (_16,_14) in let <_20> = call 'erlang':'++' (_19,_17) in let <Args0> = [Name|[FixedReason|_20]] in let <_26> = case Depth of <'unlimited'> when 'true' -> Args0
<_38> when 'true' -> let <_24> = fun (_22) -> [_22|[Depth|[]]] in call 'lists':'flatmap' (_24,Args0) end in let <_29> = call 'erlang':'++' (Format,ClientFmt) in let <_28> = call 'erlang':'++' (_26,ClientArgs) in {_29,_28}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
<Report,FormatOpts> when 'true' -> apply 'format_log_multi'/2 (Report,FormatOpts) end
'format_log_multi'/2 = fun (_0,_1) -> case <_0,_1> of <~{'reason':={Class,Reason,Stacktrace},'postponed':=Postponed,'log':=Log,'timeouts':=Timeouts,'label':={'gen_statem','terminate'},'client_info':=ClientInfo,'state_enter':=StateEnter,'state':=FmtData,'callback_mode':=CallbackMode,'queue':=Q,'name':=Name}~,FormatOpts = ~{'depth':=Depth}~> when 'true' -> let <P> = apply 'p'/1 (FormatOpts) in case apply 'fix_reason'/3 (Class,Reason,Stacktrace) of <{FixedReason,FixedStacktrace}> when 'true' -> case apply 'format_client_log'/3 (ClientInfo,P,Depth) of <{ClientFmt,ClientArgs}> when 'true' -> let <_6> = case StateEnter of <'true'> when 'true' -> [CallbackMode|['state_enter']]
<'false'> when 'true' -> CallbackMode
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end in let <_10> = case Q of <[]> when 'true' -> []
<_55> when 'true' -> let <_8> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[97|[115|[116|[32|[101|[118|[101|[110|[116|[32|[61|[32]]]]]]]]]]]]]]]],_8) end in let <_13> = case Q of <[_56|[_57|_58]]> when 'true' -> let <_11> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[81|[117|[101|[117|[101|[100|[32|[61|[32]]]]]]]]]]]],_11)
<_59> when 'true' -> [] end in let <_16> = case Postponed of <[]> when 'true' -> []
<_60> when 'true' -> let <_14> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[80|[111|[115|[116|[112|[111|[110|[101|[100|[32|[61|[32]]]]]]]]]]]]]]],_14) end in let <_19> = case FixedStacktrace of <[]> when 'true' -> []
<_61> when 'true' -> let <_17> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[83|[116|[97|[99|[107|[116|[114|[97|[99|[101|[32|[61|[126|[110|[42|[42|[32|[32]]]]]]]]]]]]]]]]]]]]],_17) end in let <_22> = case Timeouts of <{0,_62}> when 'true' -> []
<_63> when 'true' -> let <_20> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[84|[105|[109|[101|[45|[111|[117|[116|[115|[58|[32]]]]]]]]]]]]]],_20) end in let <_25> = case Log of <[]> when 'true' -> []
<_64> when 'true' -> let <_23> = call 'erlang':'++' (P,[126|[110]]) in call 'erlang':'++' ([42|[42|[32|[76|[111|[103|[32|[61|[126|[110|[42|[42|[32|[32]]]]]]]]]]]]]],_23) end in let <Format> = call 'lists':'append' ([[42|[42|[32|[83|[116|[97|[116|[101|[32|[109|[97|[99|[104|[105|[110|[101|[32]]]]]]]]]]]]]]]]]|[P|[[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[126|[110]]]]]]]]]]]]]]|[_10|[[42|[42|[32|[87|[104|[101|[110|[32|[115|[101|[114|[118|[101|[114|[32|[115|[116|[97|[116|[101|[32|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[[42|[42|[32|[82|[101|[97|[115|[111|[110|[32|[102|[111|[114|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[111|[110|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[P|[[58]|[P|[[126|[110]]|[[42|[42|[32|[67|[97|[108|[108|[98|[97|[99|[107|[32|[109|[111|[100|[101|[32|[61|[32]]]]]]]]]]]]]]]]]]]|[P|[[126|[110]]|[_13|[_16|[_19|[_22|[_25|[]]]]]]]]]]]]]]]]]]]]]) in let <_43> = case Q of <[]> when 'true' -> []
<[Event|_65]> when 'true' -> [Event|[]]
(<_42> when 'true' -> primop 'match_fail' ({'case_clause',_42})-|['compiler_generated'] ) end in let <_39> = case Q of <[_66|Events = [_67|_68]]> when 'true' -> [Events|[]]
<_69> when 'true' -> [] end in let <_36> = case Postponed of <[]> when 'true' -> []
<_70> when 'true' -> [Postponed|[]] end in let <_33> = case FixedStacktrace of <[]> when 'true' -> []
<_71> when 'true' -> [FixedStacktrace|[]] end in let <_30> = case Timeouts of <{0,_72}> when 'true' -> []
<_73> when 'true' -> [Timeouts|[]] end in let <_28> = case Log of <[]> when 'true' -> []
<_74> when 'true' -> [Log|[]] end in let <_31> = call 'erlang':'++' (_30,_28) in let <_34> = call 'erlang':'++' (_33,_31) in let <_37> = call 'erlang':'++' (_36,_34) in let <_40> = call 'erlang':'++' (_39,_37) in let <_41> = [FmtData|[Class|[FixedReason|[_6|_40]]]] in let <Args0> = [Name|call 'erlang':'++' (_43,_41)] in let <_49> = case Depth of <'unlimited'> when 'true' -> Args0
<_75> when 'true' -> let <_47> = fun (_45) -> [_45|[Depth|[]]] in call 'lists':'flatmap' (_47,Args0) end in let <_52> = call 'erlang':'++' (Format,ClientFmt) in let <_51> = call 'erlang':'++' (_49,ClientArgs) in {_52,_51}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_54,_53> when 'true' -> (primop 'match_fail' ({'function_clause',_54,_53})-|[{'function_name',{'format_log_multi',2}}] )-|['compiler_generated'] ) end
'fix_reason'/3 = fun (_0,_1,_2) -> case _2 of <[{M,F,Args,_13}|ST]> when let <_3> = call 'erlang':'=:=' (_0,'error') in let <_4> = call 'erlang':'=:=' (_1,'undef') in call 'erlang':'and' (_3,_4) -> case call 'code':'is_loaded' (M) of <'false'> when 'true' -> {{'module could not be loaded',M},ST}
<_14> when 'true' -> let <_5> = case <> of <> when call 'erlang':'is_list' (Args) -> call 'erlang':'length' (Args)
<> when call 'erlang':'is_integer' (Args) -> Args
(<> when 'true' -> primop 'match_fail' ('if_clause')-|['compiler_generated'] ) end in case call 'erlang':'function_exported' (M,F,_5) of <'true'> when 'true' -> {_1,_2}
<'false'> when 'true' -> {{'function not exported',{M,F,_5}},ST}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end end
<_15> when 'true' -> {_1,_2} end
'format_client_log_single'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'undefined',_12,_13> when 'true' -> {[],[]}
<{Pid,'dead'},_14,_15> when 'true' -> {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[100|[101|[97|[100|[46]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
<{Pid,'remote'},_16,_17> when 'true' -> let <_3> = call 'erlang':'node' (Pid) in {[32|[67|[108|[105|[101|[110|[116|[32|[126|[48|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[48|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
<{_X_Pid,{Name,Stacktrace0}},P,Depth> when 'true' -> let <Stacktrace> = call 'lists':'sublist' (Stacktrace0,4) in let <Format> = call 'lists':'append' ([[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[58|[32]]]]]]]]]]]]]|[P|[[46]]]]]]) in let <_7> = case Depth of <'unlimited'> when 'true' -> [Name|[Stacktrace|[]]]
<_18> when 'true' -> [Name|[Depth|[Stacktrace|[Depth|[]]]]] end in {Format,_7}
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'format_client_log_single',3}}] )-|['compiler_generated'] ) end
'format_client_log'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <'undefined',_11,_12> when 'true' -> {[],[]}
<{Pid,'dead'},_13,_14> when 'true' -> {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[100|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]],[Pid|[]]}
<{Pid,'remote'},_15,_16> when 'true' -> let <_3> = call 'erlang':'node' (Pid) in {[42|[42|[32|[67|[108|[105|[101|[110|[116|[32|[126|[112|[32|[105|[115|[32|[114|[101|[109|[111|[116|[101|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Pid|[_3|[]]]}
<{_X_Pid,{Name,Stacktrace}},P,Depth> when 'true' -> let <Format> = call 'lists':'append' ([[42|[42|[32|[67|[108|[105|[101|[110|[116|[32]]]]]]]]]]|[P|[[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[126|[110|[42|[42|[32]]]]]]]]]]]]]]]]|[P|[[126|[110]]]]]]]) in let <_6> = case Depth of <'unlimited'> when 'true' -> [Name|[Stacktrace|[]]]
<_17> when 'true' -> [Name|[Depth|[Stacktrace|[Depth|[]]]]] end in {Format,_6}
(<_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8})-|[{'function_name',{'format_client_log',3}}] )-|['compiler_generated'] ) end
'p'/1 = fun (_0) -> case _0 of <~{'depth':=Depth,'encoding':=Enc,'single_line':=Single}~> when 'true' -> let <_4> = apply 'single'/1 (Single) in let <_2> = apply 'mod'/1 (Enc) in let <_1> = apply 'p'/1 (Depth) in let <_3> = call 'erlang':'++' (_2,_1) in let <_5> = call 'erlang':'++' (_4,_3) in [126|_5]
<'unlimited'> when 'true' -> [112]
<_X_Depth> when 'true' -> [80] end
'single'/1 = fun (_0) -> case _0 of <'true'> when 'true' -> [48]
<'false'> when 'true' -> []
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'single',1}}] )-|['compiler_generated'] ) end
'mod'/1 = fun (_0) -> case _0 of <'latin1'> when 'true' -> []
<_2> when 'true' -> [116] end
'format_status'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Opt,PDict,{'params',_15,_16,_17,Module,_18,_19},{'state',State_Data = {State,Data},_20,_21,_22}> when 'true' -> case call 'erlang':'function_exported' (Module,'format_status',2) of <'true'> when 'true' -> try call Module:'format_status' (Opt,[PDict|[State|[Data|[]]]]) of <_4> -> _4 catch <_7,_6,_5> -> case <_7,_6,_5> of <('throw'-|['compiler_generated'] ),Result,_23> when 'true' -> Result
<_24,_25,_26> when 'true' -> let <_8> = call 'erlang':'atom_to_list' (Module) in let <_9> = call 'erlang':'++' (_8,[58|[102|[111|[114|[109|[97|[116|[95|[115|[116|[97|[116|[117|[115|[47|[50|[32|[99|[114|[97|[115|[104|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]) in apply 'format_status_default'/2 (Opt,{State,_9}) end
<'false'> when 'true' -> apply 'format_status_default'/2 (Opt,State_Data)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12,_11})-|[{'function_name',{'format_status',4}}] )-|['compiler_generated'] ) end
'format_status_default'/2 = fun (_0,_1) -> case _0 of <'terminate'> when 'true' -> _1
<_5> when 'true' -> [{'data',[{[83|[116|[97|[116|[101]]]]],_1}|[]]}|[]] end
'listify'/1 = fun (_0) -> case _0 of <Item> when call 'erlang':'is_list' (_0) -> Item
<Item> when 'true' -> [Item|[]] end
'cancel_timer'/1 = fun (_0) -> case call 'erlang':'cancel_timer' (_0) of <'false'> when 'true' -> receive <{'timeout',_3,_4}> when call 'erlang':'=:=' (_3,_0) -> 'ok' after 'infinity' -> 'true'
<_5> when 'true' -> 'ok' end
'cancel_timer'/3 = fun (_0,_1,_2) -> do case call 'erlang':'cancel_timer' (_1) of <'false'> when 'true' -> receive <{'timeout',_7,_8}> when call 'erlang':'=:=' (_7,_1) -> 'ok' after 'infinity' -> 'ok'
<_9> when 'true' -> 'ok' end call 'maps':'remove' (_0,_2)
'cancel_timer'/2 = fun (_0,_1) -> case _1 of <~{_0:={TimerRef,_X_TimeoutMsg}}~> when 'true' -> do case call 'erlang':'cancel_timer' (TimerRef) of <'false'> when 'true' -> receive <{'timeout',_6,_7}> when call 'erlang':'=:=' (_6,TimerRef) -> 'ok' after 'infinity' -> 'ok'
<_8> when 'true' -> 'ok' end call 'maps':'remove' (_0,_1)
<~{}~> when 'true' -> _1
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end
'list_timeouts'/1 = fun (_0) -> let <_9> = call 'maps':'size' (_0) in let <_7> = fun (_3,_2,_1) -> case <_3,_2,_1> of <TimeoutType,{_X_TimerRef,TimeoutMsg},Acc> when 'true' -> [{TimeoutType,TimeoutMsg}|Acc]
(<_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5,_4})-|[{'function_name',{'-list_timeouts/1-fun-0-',3}}] )-|['compiler_generated'] ) end in let <_8> = call 'maps':'fold' (_7,[],_0) in {_9,_8}
'behaviour_info'/1 = fun (_0) -> case _0 of <'callbacks'> when 'true' -> [{'init',1}|[{'callback_mode',0}|[{'state_name',3}|[{'handle_event',4}|[{'terminate',3}|[{'code_change',4}|[{'format_status',2}]]]]]]]
<'optional_callbacks'> when 'true' -> [{'format_status',2}|[{'terminate',3}|[{'code_change',4}|[{'state_name',3}|[{'handle_event',4}]]]]]
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'behaviour_info',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('gen_statem')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('gen_statem',_0) end