module 'ms_transform' ['format_error'/1,'module_info'/0,'module_info'/1,'parse_transform'/2,'transform_from_shell'/3] attributes [ 'file' = [{[115|[114|[99|[47|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]],1}]
, 'spec' = [{{'format_error',1},[{'type',71,'bounded_fun',[{'type',71,'fun',[{'type',71,'product',[{'var',71,'Error'}]}|[{'var',71,'Chars'}]]}|[[{'type',72,'constraint',[{'atom',72,'is_subtype'}|[[{'var',72,'Error'}|[{'type',72,'tuple',[{'atom',72,'error'}|[{'type',72,'module',[]}|[{'type',72,'term',[]}]]]}]]]]}|[{'type',73,'constraint',[{'atom',73,'is_subtype'}|[[{'var',73,'Chars'}|[{'remote_type',73,[{'atom',73,'io_lib'}|[{'atom',73,'chars'}|[[]]]]}]]]]}]]]]}]}]
, 'spec' = [{{'transform_from_shell',3},[{'type',196,'bounded_fun',[{'type',196,'fun',[{'type',196,'product',[{'var',196,'Dialect'}|[{'var',196,'Clauses'}|[{'var',196,'BoundEnvironment'}]]]}|[{'type',196,'term',[]}]]}|[[{'type',197,'constraint',[{'atom',197,'is_subtype'}|[[{'var',197,'Dialect'}|[{'type',197,'union',[{'atom',197,'ets'}|[{'atom',197,'dbg'}]]}]]]]}|[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Clauses'}|[{'type',198,'list',[{'remote_type',198,[{'atom',198,'erl_parse'}|[{'atom',198,'abstract_clause'}|[[]]]]}]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'BoundEnvironment'}|[{'remote_type',199,[{'atom',199,'erl_eval'}|[{'atom',199,'binding_struct'}|[[]]]]}]]]]}]]]]]}]}]
, 'spec' = [{{'parse_transform',2},[{'type',227,'bounded_fun',[{'type',227,'fun',[{'type',227,'product',[{'var',227,'Forms'}|[{'var',227,'Options'}]]}|[{'type',227,'union',[{'var',227,'Forms2'}|[{'var',227,'Errors'}|[{'var',227,'Warnings'}]]]}]]}|[[{'type',228,'constraint',[{'atom',228,'is_subtype'}|[[{'var',228,'Forms'}|[{'type',228,'list',[{'type',228,'union',[{'remote_type',228,[{'atom',228,'erl_parse'}|[{'atom',228,'abstract_form'}|[[]]]]}|[{'remote_type',228,[{'atom',228,'erl_parse'}|[{'atom',228,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',229,'constraint',[{'atom',229,'is_subtype'}|[[{'var',229,'Forms2'}|[{'type',229,'list',[{'type',229,'union',[{'remote_type',229,[{'atom',229,'erl_parse'}|[{'atom',229,'abstract_form'}|[[]]]]}|[{'remote_type',229,[{'atom',229,'erl_parse'}|[{'atom',229,'form_info'}|[[]]]]}]]}]}]]]]}|[{'type',230,'constraint',[{'atom',230,'is_subtype'}|[[{'var',230,'Options'}|[{'type',230,'term',[]}]]]]}|[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Errors'}|[{'type',231,'tuple',[{'atom',231,'error'}|[{'ann_type',231,[{'var',231,'ErrInfo'}|[{'type',231,'list',[{'type',231,'tuple','any'}]}]]}|[{'ann_type',231,[{'var',231,'WarnInfo'}|[{'type',231,'nil',[]}]]}]]]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'Warnings'}|[{'type',232,'tuple',[{'atom',232,'warning'}|[{'var',232,'Forms2'}|[{'ann_type',232,[{'var',232,'WarnInfo'}|[{'type',232,'list',[{'type',232,'tuple','any'}]}]]}]]]}]]]]}]]]]]]]}]}]
, 'record' = [{'tgd',[{'record_field',462,{'atom',462,'b'}}|[{'record_field',463,{'atom',463,'p'}}|[{'record_field',464,{'atom',464,'eb'}}]]]}] ] 'format_error'/1 = fun (_0) -> case _0 of <{50,Name}> when 'true' -> let <_1> = call 'io_lib':'format' ([118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[112|[32|[115|[104|[97|[100|[111|[119|[101|[100|[32|[105|[110|[32|[109|[115|[95|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[102|[117|[110|[32|[104|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[]]) in call 'lists':'flatten' (_1)
<1> when 'true' -> [80|[97|[114|[97|[109|[101|[116|[101|[114|[32|[111|[102|[32|[101|[116|[115|[47|[100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[47|[49|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[108|[105|[116|[101|[114|[97|[108|[32|[102|[117|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<2> when 'true' -> [101|[116|[115|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[116|[117|[112|[108|[101|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<3> when 'true' -> [100|[98|[103|[58|[102|[117|[110|[50|[109|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[105|[110|[103|[108|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[111|[114|[32|[108|[105|[115|[116|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<4> when 'true' -> [105|[110|[32|[102|[117|[110|[32|[104|[101|[97|[100|[44|[32|[111|[110|[108|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[61|[41|[32|[111|[110|[32|[116|[111|[112|[108|[101|[118|[101|[108|[32|[99|[97|[110|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<5> when 'true' -> [102|[117|[110|[32|[119|[105|[116|[104|[32|[115|[101|[109|[105|[99|[111|[108|[111|[110|[32|[40|[59|[41|[32|[105|[110|[32|[103|[117|[97|[114|[100|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<16> when 'true' -> [102|[117|[110|[32|[119|[105|[116|[104|[32|[103|[117|[97|[114|[100|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[97|[115|[32|[119|[101|[108|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{17,Name,Arithy}> when 'true' -> let <_2> = call 'io_lib':'format' ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Arithy|[]]]) in call 'lists':'flatten' (_2)
<{22,Module,Name,Arithy}> when 'true' -> let <_3> = call 'io_lib':'format' ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Module|[Name|[Arithy|[]]]]) in call 'lists':'flatten' (_3)
<{18,Str}> when 'true' -> let <_4> = call 'io_lib':'format' ([116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Str|[]]) in call 'lists':'flatten' (_4)
<{23,Var}> when 'true' -> let <_5> = call 'io_lib':'format' ([98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[103|[117|[97|[114|[100|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Var|[]]) in call 'lists':'flatten' (_5)
<{24,Operator}> when 'true' -> let <_6> = call 'io_lib':'format' ([116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[103|[117|[97|[114|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Operator|[]]) in call 'lists':'flatten' (_6)
<116> when 'true' -> [102|[117|[110|[32|[119|[105|[116|[104|[32|[98|[111|[100|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[40|[39|[61|[39|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[97|[115|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<{117,Name,Arithy}> when 'true' -> let <_7> = call 'io_lib':'format' ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[108|[111|[99|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[Arithy|[]]]) in call 'lists':'flatten' (_7)
<{122,Module,Name,Arithy}> when 'true' -> let <_8> = call 'io_lib':'format' ([102|[117|[110|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[109|[111|[116|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[32|[39|[126|[119|[58|[126|[116|[119|[47|[126|[119|[39|[32|[40|[99|[97|[108|[108|[101|[100|[32|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Module|[Name|[Arithy|[]]]]) in call 'lists':'flatten' (_8)
<{118,Str}> when 'true' -> let <_9> = call 'io_lib':'format' ([116|[104|[101|[32|[108|[97|[110|[103|[117|[97|[103|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[115|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Str|[]]) in call 'lists':'flatten' (_9)
<{123,Var}> when 'true' -> let <_10> = call 'io_lib':'format' ([98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[32|[40|[105|[110|[32|[98|[111|[100|[121|[41|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Var|[]]) in call 'lists':'flatten' (_10)
<{124,Operator}> when 'true' -> let <_11> = call 'io_lib':'format' ([116|[104|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[98|[111|[100|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Operator|[]]) in call 'lists':'flatten' (_11)
<{6,Str}> when 'true' -> let <_12> = call 'io_lib':'format' ([116|[104|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[115|[32|[105|[115|[32|[117|[110|[98|[111|[117|[110|[100|[44|[32|[99|[97|[110|[110|[111|[116|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Str|[]]) in call 'lists':'flatten' (_12)
<{7,Name}> when 'true' -> let <_13> = call 'io_lib':'format' ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[]]) in call 'lists':'flatten' (_13)
<{8,RName,FName}> when 'true' -> let <_14> = call 'io_lib':'format' ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_14)
<{9,RName,FName}> when 'true' -> let <_15> = call 'io_lib':'format' ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_15)
<{10,Atom}> when 'true' -> let <_16> = call 'io_lib':'format' ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[116|[111|[109|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[111|[110|[102|[108|[105|[99|[115|[32|[119|[105|[116|[104|[32|[114|[101|[115|[101|[114|[118|[101|[100|[32|[97|[116|[111|[109|[115|[32|[105|[110|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[32|[104|[101|[97|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Atom|[]]) in call 'lists':'flatten' (_16)
<{11,Atom}> when 'true' -> let <_17> = call 'io_lib':'format' ([102|[117|[110|[32|[104|[101|[97|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[98|[105|[116|[32|[115|[121|[110|[116|[97|[120|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[111|[102|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119|[44|[32|[119|[104|[105|[99|[104|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[116|[114|[97|[110|[115|[108|[97|[116|[101|[100|[32|[105|[110|[116|[111|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Atom|[]]) in call 'lists':'flatten' (_17)
<{20,Name}> when 'true' -> let <_18> = call 'io_lib':'format' ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[]]) in call 'lists':'flatten' (_18)
<{19,RName,FName}> when 'true' -> let <_19> = call 'io_lib':'format' ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_19)
<{21,RName,FName}> when 'true' -> let <_20> = call 'io_lib':'format' ([102|[117|[110|[32|[103|[117|[97|[114|[100|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_20)
<{120,Name}> when 'true' -> let <_21> = call 'io_lib':'format' ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[Name|[]]) in call 'lists':'flatten' (_21)
<{119,RName,FName}> when 'true' -> let <_22> = call 'io_lib':'format' ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_22)
<{121,RName,FName}> when 'true' -> let <_23> = call 'io_lib':'format' ([102|[117|[110|[32|[98|[111|[100|[121|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[105|[101|[108|[100|[32|[126|[116|[119|[32|[105|[110|[32|[114|[101|[99|[111|[114|[100|[32|[116|[121|[112|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[FName|[RName|[]]]) in call 'lists':'flatten' (_23)
<Else> when 'true' -> let <_24> = call 'io_lib':'format' ([85|[110|[107|[110|[111|[119|[110|[32|[101|[114|[114|[111|[114|[32|[99|[111|[100|[101|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]]]]],[Else|[]]) in call 'lists':'flatten' (_24) end
'transform_from_shell'/3 = fun (_0,_1,_2) -> let <SaveFilename> = apply 'setup_filename'/0 () in let <_5> = catch let <_4> = call 'gb_sets':'new' () in apply 'ms_clause_list'/4 (1,_1,_0,_4) in case _5 of <{'EXIT',Reason}> when 'true' -> do apply 'cleanup_filename'/1 (SaveFilename) call 'erlang':'exit' (Reason)
<{'error',Line,R}> when 'true' -> let <_6> = apply 'cleanup_filename'/1 (SaveFilename) in {'error',[{_6,[{Line,'ms_transform',R}|[]]}|[]],[]}
<Else> when 'true' -> let <_7> = catch apply 'fixup_environment'/2 (Else,_2) in case _7 of <{'error',Line1,R1}> when 'true' -> let <_8> = apply 'cleanup_filename'/1 (SaveFilename) in {'error',[{_8,[{Line1,'ms_transform',R1}|[]]}|[]],[]}
<Else1> when 'true' -> let <Ret> = apply 'normalise'/1 (Else1) in do apply 'cleanup_filename'/1 (SaveFilename) Ret end end
'parse_transform'/2 = fun (_0,_1) -> let <SaveFilename> = apply 'setup_filename'/0 () in let <_3> = catch apply 'forms'/1 (_0) in case _3 of <{'EXIT',Reason}> when 'true' -> do apply 'cleanup_filename'/1 (SaveFilename) call 'erlang':'exit' (Reason)
<{'error',Line,R}> when 'true' -> let <_4> = apply 'cleanup_filename'/1 (SaveFilename) in {'error',[{_4,[{Line,'ms_transform',R}|[]]}|[]],[]}
<Else> when 'true' -> case apply 'get_warnings'/0 () of <[]> when 'true' -> do apply 'cleanup_filename'/1 (SaveFilename) Else
<WL> when 'true' -> let <FName> = apply 'cleanup_filename'/1 (SaveFilename) in let <_10> = letrec 'lc$^0'/1 = fun (_8) -> case _8 of <[{L,R}|_7]> when 'true' -> let <_9> = apply 'lc$^0'/1 (_7) in ([{FName,[{L,'ms_transform',R}|[]]}|_9]-|['compiler_generated'] )
(<[_6|_7]> when 'true' -> apply 'lc$^0'/1 (_7)-|['compiler_generated'] )
<[]> when 'true' -> []
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (WL) in {'warning',Else,_10} end end
'get_warnings'/0 = fun () -> case call 'erlang':'get' ('warnings') of <'undefined'> when 'true' -> []
<Else> when 'true' -> Else end
'add_warning'/2 = fun (_0,_1) -> let <_2> = apply 'get_warnings'/0 () in call 'erlang':'put' ('warnings',[{_0,_1}|_2])
'setup_filename'/0 = fun () -> let <_2> = call 'erlang':'erase' ('filename') in let <_1> = call 'erlang':'erase' ('records') in let <_0> = call 'erlang':'erase' ('warnings') in {_2,_1,_0}
'put_filename'/1 = fun (_0) -> call 'erlang':'put' ('filename',_0)
'put_records'/1 = fun (_0) -> do call 'erlang':'put' ('records',_0) 'ok'
'get_records'/0 = fun () -> case call 'erlang':'get' ('records') of <'undefined'> when 'true' -> []
<Else> when 'true' -> Else end
'cleanup_filename'/1 = fun (_0) -> case _0 of <{Old,OldRec,OldWarnings}> when 'true' -> let <_2> = case call 'erlang':'erase' ('filename') of <'undefined'> when 'true' -> [84|[79|[80|[95|[76|[69|[86|[69|[76]]]]]]]]]
<X> when 'true' -> X end in do case OldRec of <'undefined'> when 'true' -> call 'erlang':'erase' ('records')
<Rec> when 'true' -> call 'erlang':'put' ('records',Rec) end do case OldWarnings of <'undefined'> when 'true' -> call 'erlang':'erase' ('warnings')
<Warn> when 'true' -> call 'erlang':'put' ('warnings',Warn) end case Old of <'undefined'> when 'true' -> _2
<Y> when 'true' -> do call 'erlang':'put' ('filename',Y) _2 end
(<_7> when 'true' -> (primop 'match_fail' ({'function_clause',_7})-|[{'function_name',{'cleanup_filename',1}}] )-|['compiler_generated'] ) end
'add_record_definition'/1 = fun (_0) -> case _0 of <{Name,FieldList}> when 'true' -> let <_7> = fun (_4,_3) -> case <_4,_3> of <F,{L,C}> when 'true' -> let <_2> = apply 'record_field'/2 (F,C) in let <_1> = call 'erlang':'+' (C,1) in {[_2|L],_1}
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'-add_record_definition/1-fun-0-',2}}] )-|['compiler_generated'] ) end in case call 'lists':'foldl' (_7,{[],2},FieldList) of <{KeyList,_11}> when 'true' -> let <_9> = apply 'get_records'/0 () in apply 'put_records'/1 ([{Name,KeyList}|_9])
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_10> when 'true' -> (primop 'match_fail' ({'function_clause',_10})-|[{'function_name',{'add_record_definition',1}}] )-|['compiler_generated'] ) end
'record_field'/2 = fun (_0,_1) -> case <_0,_1> of <{'record_field',_4,{'atom',Line0,FieldName}},C> when 'true' -> {FieldName,C,{'atom',Line0,'undefined'}}
<{'record_field',_5,{'atom',_6,FieldName},Def},C> when 'true' -> {FieldName,C,Def}
<{'typed_record_field',Field,_X_Type},C> when 'true' -> apply 'record_field'/2 (Field,C)
(<_3,_2> when 'true' -> (primop 'match_fail' ({'function_clause',_3,_2})-|[{'function_name',{'record_field',2}}] )-|['compiler_generated'] ) end
'forms'/1 = fun (_0) -> case _0 of <[F0|Fs0]> when 'true' -> let <F1> = apply 'form'/1 (F0) in let <Fs1> = apply 'forms'/1 (Fs0) in [F1|Fs1]
<[]> when 'true' -> []
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'forms',1}}] )-|['compiler_generated'] ) end
'form'/1 = fun (_0) -> case _0 of <Form = {'attribute',_3,'file',{Filename,_4}}> when 'true' -> do apply 'put_filename'/1 (Filename) Form
<Form = {'attribute',_5,'record',Definition}> when 'true' -> do apply 'add_record_definition'/1 (Definition) Form
<{'function',Line,Name0,Arity0,Clauses0}> when 'true' -> case apply 'function'/3 (Name0,Arity0,Clauses0) of <{Name,Arity,Clauses}> when 'true' -> {'function',Line,Name,Arity,Clauses}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<AnyOther> when 'true' -> AnyOther end
'function'/3 = fun (_0,_1,_2) -> let <Clauses1> = apply 'clauses'/1 (_2) in {_0,_1,Clauses1}
'clauses'/1 = fun (_0) -> case _0 of <[C0|Cs]> when 'true' -> let <_1> = call 'gb_sets':'new' () in let <C1> = apply 'clause'/2 (C0,_1) in let <C2> = apply 'clauses'/1 (Cs) in [C1|C2]
<[]> when 'true' -> []
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'clauses',1}}] )-|['compiler_generated'] ) end
'clause'/2 = fun (_0,_1) -> case <_0,_1> of <{'clause',Line,H0,G0,B0},Bound> when 'true' -> case apply 'copy'/2 (H0,Bound) of <{H1,Bound1}> when 'true' -> case apply 'copy'/2 (B0,Bound1) of <{B1,_X_Bound2}> when 'true' -> {'clause',Line,H1,G0,B1}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'clause',2}}] )-|['compiler_generated'] ) end
'copy'/2 = fun (_0,_1) -> case <_0,_1> of <{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'ets'},{'atom',_X_Line4,'fun2ms'}},As0},Bound> when 'true' -> let <_2> = apply 'transform_call'/4 ('ets',Line,As0,Bound) in {_2,Bound}
<{'call',Line,{'remote',_X_Line2,{'atom',_X_Line3,'dbg'},{'atom',_X_Line4,'fun2ms'}},As0},Bound> when 'true' -> let <_3> = apply 'transform_call'/4 ('dbg',Line,As0,Bound) in {_3,Bound}
<{'match',Line,A,B},Bound> when 'true' -> case apply 'copy'/2 (B,Bound) of <{B1,Bound1}> when 'true' -> case apply 'copy'/2 (A,Bound) of <{A1,Bound2}> when 'true' -> let <_6> = call 'gb_sets':'union' (Bound1,Bound2) in {{'match',Line,A1,B1},_6}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<VarDef = {'var',_X_Line,'_'},Bound> when 'true' -> {VarDef,Bound}
<VarDef = {'var',_X_Line,Name},Bound> when 'true' -> let <Bound1> = call 'gb_sets':'add' (Name,Bound) in {VarDef,Bound1}
<{'fun',Line,{'clauses',Clauses}},Bound> when 'true' -> case apply 'copy_list'/2 (Clauses,Bound) of <{NewClauses,_X_IgnoredBindings}> when 'true' -> {{'fun',Line,{'clauses',NewClauses}},Bound}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
<{'named_fun',Line,Name,Clauses},Bound> when 'true' -> let <_10> = case Name of <'_'> when 'true' -> Bound
<_20> when 'true' -> call 'gb_sets':'add' (Name,Bound) end in case apply 'copy_list'/2 (Clauses,_10) of <{NewClauses,_X_IgnoredBindings}> when 'true' -> {{'named_fun',Line,Name,NewClauses},Bound}
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<{'case',Line,Of,ClausesList},Bound> when 'true' -> case apply 'copy'/2 (Of,Bound) of <{NewOf,NewBind0}> when 'true' -> case apply 'copy_case_clauses'/3 (ClausesList,NewBind0,[]) of <{NewClausesList,NewBindings}> when 'true' -> {{'case',Line,NewOf,NewClausesList},NewBindings}
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_13> when 'true' -> primop 'match_fail' ({'badmatch',_13})-|['compiler_generated'] ) end
<T,Bound> when call 'erlang':'is_tuple' (T) -> let <_15> = call 'erlang':'tuple_to_list' (T) in case apply 'copy_list'/2 (_15,Bound) of <{L,Bound1}> when 'true' -> let <_17> = call 'erlang':'list_to_tuple' (L) in {_17,Bound1}
(<_16> when 'true' -> primop 'match_fail' ({'badmatch',_16})-|['compiler_generated'] ) end
<L,Bound> when call 'erlang':'is_list' (L) -> apply 'copy_list'/2 (L,Bound)
<AnyOther,Bound> when 'true' -> {AnyOther,Bound} end
'copy_case_clauses'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],Bound,AddSets> when 'true' -> let <ReallyAdded> = call 'gb_sets':'intersection' (AddSets) in let <_4> = call 'gb_sets':'union' (Bound,ReallyAdded) in {[],_4}
<[{'clause',Line,Match,Guard,Clauses}|T],Bound,AddSets> when 'true' -> case apply 'copy'/2 (Match,Bound) of <{NewMatch,MatchBinds}> when 'true' -> case apply 'copy'/2 (Guard,MatchBinds) of <{NewGuard,GuardBinds}> when 'true' -> case apply 'copy'/2 (Clauses,GuardBinds) of <{NewClauses,AllBinds}> when 'true' -> let <AddedBinds> = call 'gb_sets':'subtract' (AllBinds,Bound) in case apply 'copy_case_clauses'/3 (T,Bound,[AddedBinds|AddSets]) of <{NewTail,ExportedBindings}> when 'true' -> {[{'clause',Line,NewMatch,NewGuard,NewClauses}|NewTail],ExportedBindings}
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_12,_11,_10})-|[{'function_name',{'copy_case_clauses',3}}] )-|['compiler_generated'] ) end
'copy_list'/2 = fun (_0,_1) -> case <_0,_1> of <[H|T],Bound> when 'true' -> case apply 'copy'/2 (H,Bound) of <{C1,Bound1}> when 'true' -> case apply 'copy_list'/2 (T,Bound1) of <{C2,Bound2}> when 'true' -> {[C1|C2],Bound2}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
<[],Bound> when 'true' -> {[],Bound}
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'copy_list',2}}] )-|['compiler_generated'] ) end
'transform_call'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Type,_X_Line,[{'fun',Line2,{'clauses',ClauseList}}|[]],Bound> when 'true' -> apply 'ms_clause_list'/4 (Line2,ClauseList,Type,Bound)
<_X_Type,Line,_X_NoAbstractFun,_8> when 'true' -> call 'erlang':'throw' ({'error',Line,1}) end
'ms_clause_expand'/1 = fun (_0) -> case _0 of <{'clause',Line,Parameters,Guard = [_6|[_7|_8]],Body}> when 'true' -> (letrec 'lc$^0'/1 = fun (_3) -> case _3 of <[X|_2]> when 'true' -> let <_4> = apply 'lc$^0'/1 (_2) in ([{'clause',Line,Parameters,[X|[]],Body}|_4]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'lc$^0',1}}] )-|['compiler_generated'] ) end in apply 'lc$^0'/1 (Guard)-|['list_comprehension'] )
<_X_Other> when 'true' -> 'false' end
'ms_clause_list'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Line,[H|T],Type,Bound> when 'true' -> case apply 'ms_clause_expand'/1 (H) of <NewHead> when call 'erlang':'is_list' (NewHead) -> let <_4> = call 'erlang':'++' (NewHead,T) in apply 'ms_clause_list'/4 (Line,_4,Type,Bound)
<'false'> when 'true' -> let <_6> = apply 'ms_clause'/3 (H,Type,Bound) in let <_5> = apply 'ms_clause_list'/4 (Line,T,Type,Bound) in {'cons',Line,_6,_5}
(<_7> when 'true' -> primop 'match_fail' ({'case_clause',_7})-|['compiler_generated'] ) end
<Line,[],_12,_13> when 'true' -> {'nil',Line}
(<_11,_10,_9,_8> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9,_8})-|[{'function_name',{'ms_clause_list',4}}] )-|['compiler_generated'] ) end
'ms_clause'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'clause',Line,Parameters,Guards,Body},Type,Bound> when 'true' -> do apply 'check_type'/3 (Line,Parameters,Type) case apply 'transform_head'/2 (Parameters,Bound) of <{MSHead,Bindings}> when 'true' -> let <MSGuards> = apply 'transform_guards'/3 (Line,Guards,Bindings) in let <MSBody> = apply 'transform_body'/3 (Line,Body,Bindings) in {'tuple',Line,[MSHead|[MSGuards|[MSBody|[]]]]}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'ms_clause',3}}] )-|['compiler_generated'] ) end
'check_type'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <_6,[{'var',_7,_8}|[]],_9> when 'true' -> 'ok'
<_10,[{'tuple',_11,_12}|[]],'ets'> when 'true' -> 'ok'
<_13,[{'record',_14,_15,_16}|[]],'ets'> when 'true' -> 'ok'
<_17,[{'cons',_18,_19,_20}|[]],'dbg'> when 'true' -> 'ok'
<_21,[{'nil',_22}|[]],'dbg'> when 'true' -> 'ok'
<Line0,[{'match',_23,{'var',_24,_25},X}|[]],Any> when 'true' -> apply 'check_type'/3 (Line0,[X|[]],Any)
<Line0,[{'match',_26,X,{'var',_27,_28}}|[]],Any> when 'true' -> apply 'check_type'/3 (Line0,[X|[]],Any)
<Line,_X_Type,'ets'> when 'true' -> call 'erlang':'throw' ({'error',Line,2})
<Line,_29,'dbg'> when 'true' -> call 'erlang':'throw' ({'error',Line,3})
(<_5,_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4,_3})-|[{'function_name',{'check_type',3}}] )-|['compiler_generated'] ) end
'transform_guards'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,[],_X_Bindings> when 'true' -> {'nil',Line}
<Line,[G|[]],Bindings> when 'true' -> let <B> = {'tgd',Bindings,'guard',0} in apply 'tg0'/3 (Line,G,B)
<Line,_7,_8> when 'true' -> call 'erlang':'throw' ({'error',Line,5}) end
'transform_body'/3 = fun (_0,_1,_2) -> let <B> = {'tgd',_2,'body',100} in apply 'tg0'/3 (_0,_1,B)
'guard_top_trans'/1 = fun (_0) -> case _0 of <_@r0 = {'call',Line0,{'atom',Line1,OldTest},Params}> when 'true' -> let <_1> = call 'erlang':'length' (Params) in case apply 'old_bool_test'/2 (OldTest,_1) of <'undefined'> when 'true' -> _@r0
<Trans> when 'true' -> {'call',Line0,{'atom',Line1,Trans},Params} end
<Else> when 'true' -> Else end
'tg0'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Line,[],_17> when 'true' -> {'nil',Line}
<Line,[H0|T],B = {'tgd',_18,_19,_20}> when (try let <_7> = call 'erlang':'element' (3,B) in call 'erlang':'=:=' (_7,'guard') of <Try> -> Try catch <T,R> -> 'false'-|['compiler_generated'] ) -> let <H> = apply 'guard_top_trans'/1 (H0) in let <_11> = apply 'tg'/2 (H,B) in let <_10> = apply 'tg0'/3 (Line,T,B) in {'cons',Line,_11,_10}
<Line,[H|T],B> when 'true' -> let <_13> = apply 'tg'/2 (H,B) in let <_12> = apply 'tg0'/3 (Line,T,B) in {'cons',Line,_13,_12}
(<_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_16,_15,_14})-|[{'function_name',{'tg0',3}}] )-|['compiler_generated'] ) end
'tg'/2 = fun (_0,_1) -> case <_0,_1> of <{'match',Line,_172,_173},B> when 'true' -> (case B of (<({'tgd',_174,_175,_rec0}-|['compiler_generated'] )> when 'true' -> let <_4> = call 'erlang':'+' (16,_rec0) in call 'erlang':'throw' ({'error',Line,_4})-|['compiler_generated'] )
(<_176> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Expr = {'op',Line,Operator,O1,O2},B> when 'true' -> case call 'erl_eval':'partial_eval' (Expr) of <_177> when call 'erlang':'=:=' (_177,Expr) -> let <_5> = apply 'tg'/2 (O1,B) in let <_6> = apply 'tg'/2 (O2,B) in {'tuple',Line,[{'atom',Line,Operator}|[_5|[_6|[]]]]}
<Value> when 'true' -> Value end
<Expr = {'op',Line,Operator,O1},B> when 'true' -> case call 'erl_eval':'partial_eval' (Expr) of <_178> when call 'erlang':'=:=' (_178,Expr) -> let <_8> = apply 'tg'/2 (O1,B) in {'tuple',Line,[{'atom',Line,Operator}|[_8|[]]]}
<Value> when 'true' -> Value end
<{'call',_X_Line,{'atom',Line2,'bindings'},[]},_X_B> when 'true' -> {'atom',Line2,'$*'}
<{'call',_X_Line,{'atom',Line2,'object'},[]},_X_B> when 'true' -> {'atom',Line2,'$_'}
<{'call',Line,Call = {'atom',_179,'is_record'},[Object|[R = {'atom',Line3,RName}|[]]]},B> when 'true' -> let <MSObject> = apply 'tg'/2 (Object,B) in let <RDefs> = apply 'get_records'/0 () in case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_180,FieldList}}> when call 'erlang':'=:=' (_180,RName) -> let <_12> = call 'erlang':'length' (FieldList) in let <RSize> = call 'erlang':'+' (_12,1) in {'tuple',Line,[Call|[MSObject|[R|[{'integer',Line3,RSize}|[]]]]]}
<_181> when 'true' -> (case B of (<({'tgd',_182,_183,_rec1}-|['compiler_generated'] )> when 'true' -> let <_16> = call 'erlang':'+' (20,_rec1) in call 'erlang':'throw' ({'error',Line3,{_16,RName}})-|['compiler_generated'] )
(<_184> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<{'call',Line,_@r0 = {'atom',Line2,FunName},ParaList},B> when 'true' -> let <_20> = call 'erlang':'length' (ParaList) in (case B of (<({'tgd',_185,_rec2,_186}-|['compiler_generated'] )> when 'true' -> case apply 'is_ms_function'/3 (FunName,_20,_rec2) of <'true'> when 'true' -> let <_23> = fun (_21) -> apply 'tg'/2 (_21,B) in let <_24> = call 'lists':'map' (_23,ParaList) in {'tuple',Line,[_@r0|_24]}
<_188> when 'true' -> (case B of (<({'tgd',_189,_190,_rec3}-|['compiler_generated'] )> when 'true' -> let <_28> = call 'erlang':'+' (17,_rec3) in let <_25> = call 'erlang':'length' (ParaList) in call 'erlang':'throw' ({'error',Line,{_28,FunName,_25}})-|['compiler_generated'] )
(<_191> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_187> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'call',Line,{'remote',_192,{'atom',_193,'erlang'},_@r1 = {'atom',Line2,FunName}},ParaList},B> when 'true' -> let <L> = call 'erlang':'length' (ParaList) in (case B of (<({'tgd',_194,_rec4,_195}-|['compiler_generated'] )> when 'true' -> case apply 'is_imported_from_erlang'/3 (FunName,L,_rec4) of <'true'> when 'true' -> (case B of (<({'tgd',_197,_rec5,_198}-|['compiler_generated'] )> when 'true' -> case apply 'is_operator'/3 (FunName,L,_rec5) of <'false'> when 'true' -> apply 'tg'/2 ({'call',Line,_@r1,ParaList},B)
<'true'> when 'true' -> let <_35> = call 'erlang':'list_to_tuple' (['op'|[Line2|[FunName|ParaList]]]) in apply 'tg'/2 (_35,B)
(<_36> when 'true' -> primop 'match_fail' ({'case_clause',_36})-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_199> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_200> when 'true' -> (case B of (<({'tgd',_201,_202,_rec6}-|['compiler_generated'] )> when 'true' -> let <_40> = call 'erlang':'+' (22,_rec6) in let <_37> = call 'erlang':'length' (ParaList) in call 'erlang':'throw' ({'error',Line,{_40,'erlang',FunName,_37}})-|['compiler_generated'] )
(<_203> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_196> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'call',Line,{'remote',_204,{'atom',_205,ModuleName},{'atom',_206,FunName}},ParaList},B> when 'true' -> (case B of (<({'tgd',_207,_208,_rec7}-|['compiler_generated'] )> when 'true' -> let <_45> = call 'erlang':'+' (22,_rec7) in let <_42> = call 'erlang':'length' (ParaList) in call 'erlang':'throw' ({'error',Line,{_45,ModuleName,FunName,_42}})-|['compiler_generated'] )
(<_209> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'cons',Line,H,T},B> when 'true' -> let <_47> = apply 'tg'/2 (H,B) in let <_46> = apply 'tg'/2 (T,B) in {'cons',Line,_47,_46}
<_@r2 = {'nil',Line},_X_B> when 'true' -> _@r2
<{'tuple',Line,L},B> when 'true' -> let <_50> = fun (_48) -> apply 'tg'/2 (_48,B) in let <_51> = call 'lists':'map' (_50,L) in {'tuple',Line,[{'tuple',Line,_51}|[]]}
<_@r3 = {'integer',Line,I},_210> when 'true' -> _@r3
<_@r4 = {'char',Line,C},_211> when 'true' -> _@r4
<_@r5 = {'float',Line,F},_212> when 'true' -> _@r5
<_@r6 = {'atom',Line,A},_213> when 'true' -> case call 'erlang':'atom_to_list' (A) of <[36|_214]> when 'true' -> {'tuple',Line,[{'atom',Line,'const'}|[_@r6|[]]]}
<_215> when 'true' -> _@r6 end
<_@r7 = {'string',Line,S},_216> when 'true' -> _@r7
<_@r8 = {'var',Line,VarName},B> when 'true' -> (case B of (<({'tgd',_rec8,_217,_218}-|['compiler_generated'] )> when 'true' -> case apply 'lkup_bind'/2 (VarName,_rec8) of <'undefined'> when 'true' -> {'tuple',Line,[{'atom',Line,'const'}|[_@r8|[]]]}
<AtomName> when 'true' -> {'atom',Line,AtomName} end-|['compiler_generated'] )
(<_219> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<{'record_field',Line,Object,RName,{'atom',_X_Line1,KeyName}},B> when 'true' -> let <RDefs> = apply 'get_records'/0 () in case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_220,FieldList}}> when call 'erlang':'=:=' (_220,RName) -> case call 'lists':'keysearch' (KeyName,1,FieldList) of <{'value',{_221,Position,_222}}> when call 'erlang':'=:=' (_221,KeyName) -> let <NewObject> = apply 'tg'/2 (Object,B) in {'tuple',Line,[{'atom',Line,'element'}|[{'integer',Line,Position}|[NewObject|[]]]]}
<_223> when 'true' -> (case B of (<({'tgd',_224,_225,_rec9}-|['compiler_generated'] )> when 'true' -> let <_60> = call 'erlang':'+' (19,_rec9) in call 'erlang':'throw' ({'error',Line,{_60,RName,KeyName}})-|['compiler_generated'] )
(<_226> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<_227> when 'true' -> (case B of (<({'tgd',_228,_229,_rec10}-|['compiler_generated'] )> when 'true' -> let <_64> = call 'erlang':'+' (20,_rec10) in call 'erlang':'throw' ({'error',Line,{_64,RName}})-|['compiler_generated'] )
(<_230> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<{'record',Line,RName,RFields},B> when 'true' -> let <RDefs> = apply 'get_records'/0 () in let <_76> = fun (_73,_72) -> case <_73,_72> of <{'record_field',_231,{'atom',_232,Key},Value},L> when 'true' -> let <NV> = apply 'tg'/2 (Value,B) in [{Key,NV}|L]
<{'record_field',_233,{'var',_234,'_'},Value},L> when 'true' -> let <NV> = apply 'tg'/2 (Value,B) in [{{'default'},NV}|L]
<_235,_236> when 'true' -> (case B of (<({'tgd',_237,_238,_rec11}-|['compiler_generated'] )> when 'true' -> let <_71> = call 'erlang':'+' (20,_rec11) in call 'erlang':'throw' ({'error',Line,{_71,RName}})-|['compiler_generated'] )
(<_239> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end in let <KeyList0> = call 'lists':'foldl' (_76,[],RFields) in let <_79> = case call 'lists':'keysearch' ({'default'},1,KeyList0) of <{'value',{{'default'},OverriddenDefValue}}> when 'true' -> {'true',OverriddenDefValue}
<_240> when 'true' -> 'false' end in let <KeyList> = call 'lists':'keydelete' ({'default'},1,KeyList0) in do case call 'lists':'keysearch' ({'default'},1,KeyList) of <{'value',{{'default'},_241}}> when 'true' -> (case B of (<({'tgd',_242,_243,_rec12}-|['compiler_generated'] )> when 'true' -> let <_84> = call 'erlang':'+' (21,_rec12) in call 'erlang':'throw' ({'error',Line,{_84,RName,'_'}})-|['compiler_generated'] )
(<_244> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_245> when 'true' -> 'ok' end case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_246,FieldList0}}> when call 'erlang':'=:=' (_246,RName) -> let <_94> = fun (_91,_90) -> case <_91,_90> of <{FN,_247,Def},Acc> when 'true' -> let <_88> = case call 'lists':'keysearch' (FN,1,KeyList) of <{'value',{_248,X0}}> when call 'erlang':'=:=' (_248,FN) -> X0
<_249> when 'true' -> case _79 of <{'true',Overridden}> when 'true' -> Overridden
<'false'> when 'true' -> Def
(<_86> when 'true' -> primop 'match_fail' ({'case_clause',_86})-|['compiler_generated'] ) end end in [_88|Acc]
(<_93,_92> when 'true' -> (primop 'match_fail' ({'function_clause',_93,_92})-|[{'function_name',{'-tg/2-fun-3-',2}}] )-|['compiler_generated'] ) end in let <FieldList1> = call 'lists':'foldl' (_94,[],FieldList0) in (case B of (<({'tgd',_250,_251,_rec13}-|['compiler_generated'] )> when 'true' -> let <_98> = call 'erlang':'+' (21,_rec13) in do apply 'check_multi_field'/4 (RName,Line,KeyList,_98) (case B of (<({'tgd',_253,_254,_rec14}-|['compiler_generated'] )> when 'true' -> let <_101> = call 'erlang':'+' (19,_rec14) in do apply 'check_undef_field'/5 (RName,Line,KeyList,FieldList0,_101) {'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}-|['compiler_generated'] )
(<_255> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_252> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_256> when 'true' -> (case B of (<({'tgd',_257,_258,_rec15}-|['compiler_generated'] )> when 'true' -> let <_104> = call 'erlang':'+' (20,_rec15) in call 'erlang':'throw' ({'error',Line,{_104,RName}})-|['compiler_generated'] )
(<_259> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<{'record_index',Line,RName,{'atom',Line2,KeyName}},B> when 'true' -> let <RDefs> = apply 'get_records'/0 () in case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_260,FieldList}}> when call 'erlang':'=:=' (_260,RName) -> case call 'lists':'keysearch' (KeyName,1,FieldList) of <{'value',{_261,Position,_262}}> when call 'erlang':'=:=' (_261,KeyName) -> {'integer',Line2,Position}
<_263> when 'true' -> (case B of (<({'tgd',_264,_265,_rec16}-|['compiler_generated'] )> when 'true' -> let <_109> = call 'erlang':'+' (19,_rec16) in call 'erlang':'throw' ({'error',Line2,{_109,RName,KeyName}})-|['compiler_generated'] )
(<_266> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<_267> when 'true' -> (case B of (<({'tgd',_268,_269,_rec17}-|['compiler_generated'] )> when 'true' -> let <_113> = call 'erlang':'+' (20,_rec17) in call 'erlang':'throw' ({'error',Line,{_113,RName}})-|['compiler_generated'] )
(<_270> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<{'record',Line,AVName = {'var',Line2,_X_VName},RName,RFields},B> when 'true' -> let <RDefs> = apply 'get_records'/0 () in let <MSVName> = apply 'tg'/2 (AVName,B) in let <_122> = fun (_119,_118) -> case <_119,_118> of <{'record_field',_271,{'atom',_272,Key},Value},L> when 'true' -> let <NV> = apply 'tg'/2 (Value,B) in [{Key,NV}|L]
<_273,_274> when 'true' -> call 'erlang':'throw' ({'error',Line,7}) end in let <KeyList> = call 'lists':'foldl' (_122,[],RFields) in case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_275,FieldList0}}> when call 'erlang':'=:=' (_275,RName) -> let <_131> = fun (_128,_127) -> case <_128,_127> of <{FN,Pos,_276},Acc> when 'true' -> let <_125> = case call 'lists':'keysearch' (FN,1,KeyList) of <{'value',{_277,X0}}> when call 'erlang':'=:=' (_277,FN) -> X0
<_278> when 'true' -> {'tuple',Line2,[{'atom',Line2,'element'}|[{'integer',Line2,Pos}|[MSVName|[]]]]} end in [_125|Acc]
(<_130,_129> when 'true' -> (primop 'match_fail' ({'function_clause',_130,_129})-|[{'function_name',{'-tg/2-fun-5-',2}}] )-|['compiler_generated'] ) end in let <FieldList1> = call 'lists':'foldl' (_131,[],FieldList0) in (case B of (<({'tgd',_279,_280,_rec18}-|['compiler_generated'] )> when 'true' -> let <_135> = call 'erlang':'+' (21,_rec18) in do apply 'check_multi_field'/4 (RName,Line,KeyList,_135) (case B of (<({'tgd',_282,_283,_rec19}-|['compiler_generated'] )> when 'true' -> let <_138> = call 'erlang':'+' (19,_rec19) in do apply 'check_undef_field'/5 (RName,Line,KeyList,FieldList0,_138) {'tuple',Line,[{'tuple',Line,[{'atom',Line,RName}|FieldList1]}|[]]}-|['compiler_generated'] )
(<_284> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_281> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<_285> when 'true' -> (case B of (<({'tgd',_286,_287,_rec20}-|['compiler_generated'] )> when 'true' -> let <_141> = call 'erlang':'+' (20,_rec20) in call 'erlang':'throw' ({'error',Line,{_141,RName}})-|['compiler_generated'] )
(<_288> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
<Whole = {'bin_element',_X_Line0,{'var',Line,A},_289,_290},B> when 'true' -> (case B of (<({'tgd',_rec21,_291,_292}-|['compiler_generated'] )> when 'true' -> case apply 'lkup_bind'/2 (A,_rec21) of <'undefined'> when 'true' -> Whole
<_X_AtomName> when 'true' -> (case B of (<({'tgd',_294,_295,_rec22}-|['compiler_generated'] )> when 'true' -> let <_147> = call 'erlang':'+' (23,_rec22) in call 'erlang':'throw' ({'error',Line,{_147,A}})-|['compiler_generated'] )
(<_296> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_293> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<'default',_X_B> when 'true' -> 'default'
<{'bin_element',Line,X,Y,Z},B> when 'true' -> let <_150> = apply 'tg'/2 (X,B) in let <_149> = apply 'tg'/2 (Y,B) in {'bin_element',Line,_150,_149,Z}
<{'bin',Line,List},B> when 'true' -> let <_156> = letrec 'lc$^6'/1 = fun (_153) -> case _153 of <[X|_152]> when 'true' -> let <_154> = apply 'tg'/2 (X,B) in let <_155> = apply 'lc$^6'/1 (_152) in ([_154|_155]-|['compiler_generated'] )
<[]> when 'true' -> []
(<_305> when 'true' -> (primop 'match_fail' ({'function_clause',_305})-|[{'function_name',{'lc$^6',1}}] )-|['compiler_generated'] ) end in apply 'lc$^6'/1 (List) in {'bin',Line,_156}
<T,B> when try let <_157> = call 'erlang':'is_tuple' (T) in let <_158> = call 'erlang':'tuple_size' (T) in let <_159> = call 'erlang':'>=' (_158,2) in call 'erlang':'and' (_157,_159) of <Try> -> Try catch <T,R> -> 'false' -> let <Element> = call 'erlang':'element' (1,T) in let <Line> = call 'erlang':'element' (2,T) in (case B of (<({'tgd',_297,_298,_rec23}-|['compiler_generated'] )> when 'true' -> let <_165> = call 'erlang':'+' (18,_rec23) in let <_162> = apply 'translate_language_element'/1 (Element) in call 'erlang':'throw' ({'error',Line,{_165,_162}})-|['compiler_generated'] )
(<_299> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
<Other,B> when 'true' -> let <Element> = call 'io_lib':'format' ([117|[110|[107|[110|[111|[119|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[116|[119]]]]]]]]]]]]]]]]]]],[Other|[]]) in (case B of (<({'tgd',_300,_301,_rec24}-|['compiler_generated'] )> when 'true' -> let <_169> = call 'erlang':'+' (18,_rec24) in call 'erlang':'throw' ({'error','unknown',{_169,Element}})-|['compiler_generated'] )
(<_302> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({'badrecord','tgd'}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) end
'transform_head'/2 = fun (_0,_1) -> case <_0,_1> of <[V|[]],OuterBound> when 'true' -> let <Bind> = apply 'cre_bind'/0 () in case apply 'toplevel_head_match'/3 (V,Bind,OuterBound) of <{NewV,NewBind}> when 'true' -> apply 'th'/3 (NewV,NewBind,OuterBound)
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_5,_4})-|[{'function_name',{'transform_head',2}}] )-|['compiler_generated'] ) end
'toplevel_head_match'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'match',_8,{'var',Line,VName},Expr},B,OB> when 'true' -> do apply 'warn_var_clash'/3 (Line,VName,OB) let <_3> = apply 'new_bind'/2 ({VName,'$_'},B) in {Expr,_3}
<{'match',_9,Expr,{'var',Line,VName}},B,OB> when 'true' -> do apply 'warn_var_clash'/3 (Line,VName,OB) let <_4> = apply 'new_bind'/2 ({VName,'$_'},B) in {Expr,_4}
<Other,B,_X_OB> when 'true' -> {Other,B} end
'th'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <{'record',Line,RName,RFields},B,OB> when 'true' -> let <RDefs> = apply 'get_records'/0 () in let <_10> = fun (_7,_6) -> case <_7,_6> of <{'record_field',_41,{'atom',_42,Key},Value},{L,B0}> when 'true' -> case apply 'th'/3 (Value,B0,OB) of <{NV,B1}> when 'true' -> {[{Key,NV}|L],B1}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<{'record_field',_43,{'var',_44,'_'},Value},{L,B0}> when 'true' -> case apply 'th'/3 (Value,B0,OB) of <{NV,B1}> when 'true' -> {[{{'default'},NV}|L],B1}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<_45,_46> when 'true' -> call 'erlang':'throw' ({'error',Line,{7,RName}}) end in case call 'lists':'foldl' (_10,{[],B},RFields) of <{KeyList0,NewB}> when 'true' -> let <_13> = case call 'lists':'keysearch' ({'default'},1,KeyList0) of <{'value',{{'default'},OverriddenDefValue}}> when 'true' -> OverriddenDefValue
<_47> when 'true' -> {'atom',Line,'_'} end in let <KeyList> = call 'lists':'keydelete' ({'default'},1,KeyList0) in do case call 'lists':'keysearch' ({'default'},1,KeyList) of <{'value',{{'default'},_48}}> when 'true' -> call 'erlang':'throw' ({'error',Line,{9,RName,'_'}})
<_49> when 'true' -> 'ok' end case call 'lists':'keysearch' (RName,1,RDefs) of <{'value',{_50,FieldList0}}> when call 'erlang':'=:=' (_50,RName) -> let <_24> = fun (_21,_20) -> case <_21,_20> of <{FN,_51,_52},Acc> when 'true' -> let <_18> = case call 'lists':'keysearch' (FN,1,KeyList) of <{'value',{_53,X0}}> when call 'erlang':'=:=' (_53,FN) -> X0
<_54> when 'true' -> _13 end in [_18|Acc]
(<_23,_22> when 'true' -> (primop 'match_fail' ({'function_clause',_23,_22})-|[{'function_name',{'-th/3-fun-1-',2}}] )-|['compiler_generated'] ) end in let <FieldList1> = call 'lists':'foldl' (_24,[],FieldList0) in do apply 'check_multi_field'/4 (RName,Line,KeyList,9) do apply 'check_undef_field'/5 (RName,Line,KeyList,FieldList0,8) {{'tuple',Line,[{'atom',Line,RName}|FieldList1]},NewB}
<_55> when 'true' -> call 'erlang':'throw' ({'error',Line,{7,RName}}) end
(<_11> when 'true' -> primop 'match_fail' ({'badmatch',_11})-|['compiler_generated'] ) end
<{'match',Line,_56,_57},_58,_59> when 'true' -> call 'erlang':'throw' ({'error',Line,4})
<_@r0 = {'atom',Line,A},B,_X_OB> when 'true' -> case call 'erlang':'atom_to_list' (A) of <[36|NL]> when 'true' -> let <_27> = catch call 'erlang':'list_to_integer' (NL) in case _27 of <N> when call 'erlang':'is_integer' (_27) -> call 'erlang':'throw' ({'error',Line,{10,A}})
<_60> when 'true' -> {_@r0,B} end
<_61> when 'true' -> {_@r0,B} end
<{'bin_element',_X_Line0,{'var',Line,A},_62,_63},_64,_65> when 'true' -> call 'erlang':'throw' ({'error',Line,{11,A}})
<{'var',Line,Name},B,OB> when 'true' -> do apply 'warn_var_clash'/3 (Line,Name,OB) case apply 'lkup_bind'/2 (Name,B) of <'undefined'> when 'true' -> let <NewB> = apply 'new_bind'/2 (Name,B) in let <_31> = apply 'lkup_bind'/2 (Name,NewB) in {{'atom',Line,_31},NewB}
<Trans> when 'true' -> {{'atom',Line,Trans},B} end
<[H|T],B,OB> when 'true' -> case apply 'th'/3 (H,B,OB) of <{NH,NB}> when 'true' -> case apply 'th'/3 (T,NB,OB) of <{NT,NNB}> when 'true' -> {[NH|NT],NNB}
(<_34> when 'true' -> primop 'match_fail' ({'badmatch',_34})-|['compiler_generated'] ) end
(<_33> when 'true' -> primop 'match_fail' ({'badmatch',_33})-|['compiler_generated'] ) end
<T,B,OB> when call 'erlang':'is_tuple' (T) -> let <_35> = call 'erlang':'tuple_to_list' (T) in case apply 'th'/3 (_35,B,OB) of <{L,NB}> when 'true' -> let <_37> = call 'erlang':'list_to_tuple' (L) in {_37,NB}
(<_36> when 'true' -> primop 'match_fail' ({'badmatch',_36})-|['compiler_generated'] ) end
<Nonstruct,B,_X_OB> when 'true' -> {Nonstruct,B} end
'warn_var_clash'/3 = fun (_0,_1,_2) -> case call 'gb_sets':'is_member' (_1,_2) of <'true'> when 'true' -> let <Line> = call 'erl_anno':'line' (_0) in apply 'add_warning'/2 (Line,{50,_1})
<_8> when 'true' -> 'ok' end
'check_multi_field'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_9,_10,[],_11> when 'true' -> 'ok'
<RName,Line,[{Key,_12}|T],ErrCode> when 'true' -> case call 'lists':'keymember' (Key,1,T) of <'true'> when 'true' -> call 'erlang':'throw' ({'error',Line,{ErrCode,RName,Key}})
<'false'> when 'true' -> apply 'check_multi_field'/4 (RName,Line,T,ErrCode)
(<_4> when 'true' -> primop 'match_fail' ({'case_clause',_4})-|['compiler_generated'] ) end
(<_8,_7,_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6,_5})-|[{'function_name',{'check_multi_field',4}}] )-|['compiler_generated'] ) end
'check_undef_field'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_11,_12,[],_13,_14> when 'true' -> 'ok'
<RName,Line,[{Key,_15}|T],FieldList,ErrCode> when 'true' -> case call 'lists':'keymember' (Key,1,FieldList) of <'true'> when 'true' -> apply 'check_undef_field'/5 (RName,Line,T,FieldList,ErrCode)
<'false'> when 'true' -> call 'erlang':'throw' ({'error',Line,{ErrCode,RName,Key}})
(<_5> when 'true' -> primop 'match_fail' ({'case_clause',_5})-|['compiler_generated'] ) end
(<_10,_9,_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9,_8,_7,_6})-|[{'function_name',{'check_undef_field',5}}] )-|['compiler_generated'] ) end
'cre_bind'/0 = fun () -> {1,[{'_','_'}]}
'lkup_bind'/2 = fun (_0,_1) -> case <_0,_1> of <Name,{_5,List}> when 'true' -> case call 'lists':'keysearch' (Name,1,List) of <{'value',{_6,Trans}}> when call 'erlang':'=:=' (_6,Name) -> Trans
<_7> when 'true' -> 'undefined' end
(<_4,_3> when 'true' -> (primop 'match_fail' ({'function_clause',_4,_3})-|[{'function_name',{'lkup_bind',2}}] )-|['compiler_generated'] ) end
'new_bind'/2 = fun (_0,_1) -> case <_0,_1> of <_@r0 = {Name,Trans},{Next,L}> when 'true' -> {Next,[_@r0|L]}
<Name,{Next,L}> when 'true' -> let <_2> = call 'erlang':'integer_to_list' (Next) in let <Trans> = call 'erlang':'list_to_atom' ([36|_2]) in let <_4> = call 'erlang':'+' (Next,1) in {_4,[{Name,Trans}|L]}
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'new_bind',2}}] )-|['compiler_generated'] ) end
'translate_language_element'/1 = fun (_0) -> case call 'lists':'keysearch' (_0,1,[{'lc',[108|[105|[115|[116|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]}|[{'bc',[98|[105|[110|[97|[114|[121|[32|[99|[111|[109|[112|[114|[101|[104|[101|[110|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]}|[{'block',[98|[101|[103|[105|[110|[47|[101|[110|[100|[32|[98|[108|[111|[99|[107]]]]]]]]]]]]]]]}|[{'if',[105|[102]]}|[{'case',[99|[97|[115|[101]]]]}|[{'receive',[114|[101|[99|[101|[105|[118|[101]]]]]]]}|[{'try',[116|[114|[121]]]}|[{'catch',[99|[97|[116|[99|[104]]]]]}|[{'match',[109|[97|[116|[99|[104|[32|[40|[61|[41]]]]]]]]]}|[{'remote',[101|[120|[116|[101|[114|[110|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]) of <{'value',{_4,String}}> when call 'erlang':'=:=' (_4,_0) -> String
<_5> when 'true' -> call 'erlang':'atom_to_list' (_0) end
'old_bool_test'/2 = fun (_0,_1) -> case <_0,_1> of <'atom',1> when 'true' -> 'is_atom'
<'float',1> when 'true' -> 'is_float'
<'integer',1> when 'true' -> 'is_integer'
<'list',1> when 'true' -> 'is_list'
<'number',1> when 'true' -> 'is_number'
<'pid',1> when 'true' -> 'is_pid'
<'port',1> when 'true' -> 'is_port'
<'reference',1> when 'true' -> 'is_reference'
<'tuple',1> when 'true' -> 'is_tuple'
<'binary',1> when 'true' -> 'is_binary'
<'function',1> when 'true' -> 'is_function'
<'record',2> when 'true' -> 'is_record'
<_4,_5> when 'true' -> 'undefined' end
'bool_test'/2 = fun (_0,_1) -> case <_0,_1> of <'is_atom',1> when 'true' -> 'true'
<'is_float',1> when 'true' -> 'true'
<'is_integer',1> when 'true' -> 'true'
<'is_list',1> when 'true' -> 'true'
<'is_number',1> when 'true' -> 'true'
<'is_pid',1> when 'true' -> 'true'
<'is_port',1> when 'true' -> 'true'
<'is_reference',1> when 'true' -> 'true'
<'is_tuple',1> when 'true' -> 'true'
<'is_map',1> when 'true' -> 'true'
<'is_map_key',2> when 'true' -> 'true'
<'is_binary',1> when 'true' -> 'true'
<'is_function',1> when 'true' -> 'true'
<'is_record',2> when 'true' -> 'true'
<'is_seq_trace',0> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'real_guard_function'/2 = fun (_0,_1) -> case <_0,_1> of <'abs',1> when 'true' -> 'true'
<'element',2> when 'true' -> 'true'
<'hd',1> when 'true' -> 'true'
<'length',1> when 'true' -> 'true'
<'node',0> when 'true' -> 'true'
<'node',1> when 'true' -> 'true'
<'round',1> when 'true' -> 'true'
<'size',1> when 'true' -> 'true'
<'bit_size',1> when 'true' -> 'true'
<'map_size',1> when 'true' -> 'true'
<'map_get',2> when 'true' -> 'true'
<'tl',1> when 'true' -> 'true'
<'trunc',1> when 'true' -> 'true'
<'self',0> when 'true' -> 'true'
<'float',1> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'pseudo_guard_function'/2 = fun (_0,_1) -> case <_0,_1> of <'get_tcw',0> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'guard_function'/2 = fun (_0,_1) -> let <_3> = apply 'real_guard_function'/2 (_0,_1) in let <_2> = apply 'pseudo_guard_function'/2 (_0,_1) in call 'erlang':'or' (_3,_2)
'action_function'/2 = fun (_0,_1) -> case <_0,_1> of <'set_seq_token',2> when 'true' -> 'true'
<'get_seq_token',0> when 'true' -> 'true'
<'message',1> when 'true' -> 'true'
<'return_trace',0> when 'true' -> 'true'
<'exception_trace',0> when 'true' -> 'true'
<'process_dump',0> when 'true' -> 'true'
<'enable_trace',1> when 'true' -> 'true'
<'enable_trace',2> when 'true' -> 'true'
<'disable_trace',1> when 'true' -> 'true'
<'disable_trace',2> when 'true' -> 'true'
<'display',1> when 'true' -> 'true'
<'caller',0> when 'true' -> 'true'
<'set_tcw',1> when 'true' -> 'true'
<'silent',1> when 'true' -> 'true'
<'trace',2> when 'true' -> 'true'
<'trace',3> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'bool_operator'/2 = fun (_0,_1) -> case <_0,_1> of <'and',2> when 'true' -> 'true'
<'or',2> when 'true' -> 'true'
<'xor',2> when 'true' -> 'true'
<'not',1> when 'true' -> 'true'
<'andalso',2> when 'true' -> 'true'
<'orelse',2> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'arith_operator'/2 = fun (_0,_1) -> case <_0,_1> of <'+',1> when 'true' -> 'true'
<'+',2> when 'true' -> 'true'
<'-',1> when 'true' -> 'true'
<'-',2> when 'true' -> 'true'
<'*',2> when 'true' -> 'true'
<'/',2> when 'true' -> 'true'
<'div',2> when 'true' -> 'true'
<'rem',2> when 'true' -> 'true'
<'band',2> when 'true' -> 'true'
<'bor',2> when 'true' -> 'true'
<'bxor',2> when 'true' -> 'true'
<'bnot',1> when 'true' -> 'true'
<'bsl',2> when 'true' -> 'true'
<'bsr',2> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'cmp_operator'/2 = fun (_0,_1) -> case <_0,_1> of <'>',2> when 'true' -> 'true'
<'>=',2> when 'true' -> 'true'
<'<',2> when 'true' -> 'true'
<'=<',2> when 'true' -> 'true'
<'==',2> when 'true' -> 'true'
<'=:=',2> when 'true' -> 'true'
<'/=',2> when 'true' -> 'true'
<'=/=',2> when 'true' -> 'true'
<_4,_5> when 'true' -> 'false' end
'is_operator'/3 = fun (_0,_1,_2) -> let <_5> = apply 'bool_operator'/2 (_0,_1) in let <_4> = apply 'arith_operator'/2 (_0,_1) in let <_6> = call 'erlang':'or' (_5,_4) in let <_3> = apply 'cmp_operator'/2 (_0,_1) in call 'erlang':'or' (_6,_3)
'is_imported_from_erlang'/3 = fun (_0,_1,_2) -> let <_7> = apply 'real_guard_function'/2 (_0,_1) in let <_6> = apply 'bool_test'/2 (_0,_1) in let <_8> = call 'erlang':'or' (_7,_6) in let <_5> = apply 'bool_operator'/2 (_0,_1) in let <_9> = call 'erlang':'or' (_8,_5) in let <_4> = apply 'arith_operator'/2 (_0,_1) in let <_10> = call 'erlang':'or' (_9,_4) in let <_3> = apply 'cmp_operator'/2 (_0,_1) in call 'erlang':'or' (_10,_3)
'is_ms_function'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <X,A,'body'> when 'true' -> let <_5> = apply 'action_function'/2 (X,A) in let <_4> = apply 'guard_function'/2 (X,A) in let <_6> = call 'erlang':'or' (_5,_4) in let <_3> = apply 'bool_test'/2 (X,A) in call 'erlang':'or' (_6,_3)
<X,A,'guard'> when 'true' -> let <_8> = apply 'guard_function'/2 (X,A) in let <_7> = apply 'bool_test'/2 (X,A) in call 'erlang':'or' (_8,_7)
(<_11,_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_11,_10,_9})-|[{'function_name',{'is_ms_function',3}}] )-|['compiler_generated'] ) end
'fixup_environment'/2 = fun (_0,_1) -> case <_0,_1> of <L,B> when call 'erlang':'is_list' (L) -> let <_4> = fun (_2) -> apply 'fixup_environment'/2 (_2,B) in call 'lists':'map' (_4,L)
<{'var',Line,Name},B> when 'true' -> case call 'lists':'keysearch' (Name,1,B) of <{'value',{_14,Value}}> when call 'erlang':'=:=' (_14,Name) -> apply 'freeze'/2 (Line,Value)
<_15> when 'true' -> let <_5> = call 'erlang':'atom_to_list' (Name) in call 'erlang':'throw' ({'error',Line,{6,_5}}) end
<T,B> when call 'erlang':'is_tuple' (T) -> let <_10> = fun (_8) -> apply 'fixup_environment'/2 (_8,B) in let <_7> = call 'erlang':'tuple_to_list' (T) in let <_11> = call 'lists':'map' (_10,_7) in call 'erlang':'list_to_tuple' (_11)
<Other,_X_B> when 'true' -> Other end
'freeze'/2 = fun (_0,_1) -> {'frozen',_0,_1}
'normalise'/1 = fun (_0) -> case _0 of <{'frozen',_20,Term}> when 'true' -> Term
<{'char',_21,C}> when 'true' -> C
<{'integer',_22,I}> when 'true' -> I
<{'float',_23,F}> when 'true' -> F
<{'atom',_24,A}> when 'true' -> A
<{'string',_25,S}> when 'true' -> S
<{'nil',_26}> when 'true' -> []
<{'bin',_27,Fs}> when 'true' -> let <_6> = fun (_3,_2) -> let <_1> = apply 'normalise'/1 (_3) in {'value',_1,[]} in case call 'eval_bits':'expr_grp' (Fs,[],_6,[],'true') of <{'value',B,_29}> when 'true' -> B
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end
<{'cons',_30,Head,Tail}> when 'true' -> let <_8> = apply 'normalise'/1 (Head) in let <_9> = apply 'normalise'/1 (Tail) in [_8|_9]
<{'op',_31,'++',A,B}> when 'true' -> let <_11> = apply 'normalise'/1 (A) in let <_10> = apply 'normalise'/1 (B) in call 'erlang':'++' (_11,_10)
<{'tuple',_32,Args}> when 'true' -> let <_12> = apply 'normalise_list'/1 (Args) in call 'erlang':'list_to_tuple' (_12)
<{'map',_33,Pairs0}> when 'true' -> let <_17> = fun (_15) -> case _15 of <{'map_field_exact',_34,K,V}> when 'true' -> let <_14> = apply 'normalise'/1 (K) in let <_13> = apply 'normalise'/1 (V) in {_14,_13}
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'-normalise/1-fun-1-',1}}] )-|['compiler_generated'] ) end in let <Pairs1> = call 'lists':'map' (_17,Pairs0) in call 'maps':'from_list' (Pairs1)
<{'op',_35,'+',{'char',_36,I}}> when 'true' -> I
<{'op',_37,'+',{'integer',_38,I}}> when 'true' -> I
<{'op',_39,'+',{'float',_40,F}}> when 'true' -> F
<{'op',_41,'-',{'char',_42,I}}> when 'true' -> call 'erlang':'-' (I)
<{'op',_43,'-',{'integer',_44,I}}> when 'true' -> call 'erlang':'-' (I)
<{'op',_45,'-',{'float',_46,F}}> when 'true' -> call 'erlang':'-' (F)
(<_19> when 'true' -> (primop 'match_fail' ({'function_clause',_19})-|[{'function_name',{'normalise',1}}] )-|['compiler_generated'] ) end
'normalise_list'/1 = fun (_0) -> case _0 of <[H|T]> when 'true' -> let <_1> = apply 'normalise'/1 (H) in let <_2> = apply 'normalise_list'/1 (T) in [_1|_2]
<[]> when 'true' -> []
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'normalise_list',1}}] )-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('ms_transform')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('ms_transform',_0) end