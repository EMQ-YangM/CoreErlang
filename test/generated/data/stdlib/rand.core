module 'rand' ['bc64'/1,'export_seed'/0,'export_seed_s'/1,'exro928_jump_2pow20'/1,'exro928_jump_2pow512'/1,'exro928_next'/1,'exro928_next_state'/1,'exro928_seed'/1,'float2str'/1,'format_jumpconst58'/1,'jump'/0,'jump'/1,'make_float'/3,'module_info'/0,'module_info'/1,'normal'/0,'normal'/2,'normal_s'/1,'normal_s'/3,'seed'/1,'seed'/2,'seed58'/2,'seed_s'/1,'seed_s'/2,'uniform'/0,'uniform'/1,'uniform_real'/0,'uniform_real_s'/1,'uniform_s'/1,'uniform_s'/2] attributes [ 'file' = [{[115|[114|[99|[47|[114|[97|[110|[100|[46|[101|[114|[108]]]]]]]]]]]],1}]
, 'compile' = [{'inline',[{'exs64_next',1}|[{'exsplus_next',1}|[{'exsss_next',1}|[{'exs1024_next',1}|[{'exs1024_calc',2}|[{'exro928_next_state',4}|[{'exrop_next',1}|[{'exrop_next_s',2}|[{'get_52',1}|[{'normal_kiwi',1}]]]]]]]]]]}]
, 'type' = [{'uint64',{'type',84,'range',[{'integer',84,0}|[{'op',84,'-',{'op',84,'bsl',{'integer',84,1},{'integer',84,64}},{'integer',84,1}}]]},[]}]
, 'type' = [{'uint58',{'type',85,'range',[{'integer',85,0}|[{'op',85,'-',{'op',85,'bsl',{'integer',85,1},{'integer',85,58}},{'integer',85,1}}]]},[]}]
, 'type' = [{'alg_state',{'type',89,'union',[{'user_type',89,'exsplus_state',[]}|[{'user_type',89,'exro928_state',[]}|[{'user_type',89,'exrop_state',[]}|[{'user_type',89,'exs1024_state',[]}|[{'user_type',90,'exs64_state',[]}|[{'type',90,'term',[]}]]]]]]},[]}]
, 'type' = [{'alg_handler',{'type',118,'map',[{'type',118,'map_field_exact',[{'atom',118,'type'}|[{'user_type',118,'alg',[]}]]}|[{'type',119,'map_field_assoc',[{'atom',119,'bits'}|[{'type',119,'non_neg_integer',[]}]]}|[{'type',120,'map_field_assoc',[{'atom',120,'weak_low_bits'}|[{'type',120,'non_neg_integer',[]}]]}|[{'type',121,'map_field_assoc',[{'atom',121,'max'}|[{'type',121,'non_neg_integer',[]}]]}|[{'type',122,'map_field_exact',[{'atom',122,'next'}|[{'type',123,'fun',[{'type',123,'product',[{'user_type',123,'alg_state',[]}]}|[{'type',123,'tuple',[{'type',123,'non_neg_integer',[]}|[{'user_type',123,'alg_state',[]}]]}]]}]]}|[{'type',124,'map_field_assoc',[{'atom',124,'uniform'}|[{'type',125,'fun',[{'type',125,'product',[{'user_type',125,'state',[]}]}|[{'type',125,'tuple',[{'type',125,'float',[]}|[{'user_type',125,'state',[]}]]}]]}]]}|[{'type',126,'map_field_assoc',[{'atom',126,'uniform_n'}|[{'type',127,'fun',[{'type',127,'product',[{'type',127,'pos_integer',[]}|[{'user_type',127,'state',[]}]]}|[{'type',127,'tuple',[{'type',127,'pos_integer',[]}|[{'user_type',127,'state',[]}]]}]]}]]}|[{'type',128,'map_field_assoc',[{'atom',128,'jump'}|[{'type',129,'fun',[{'type',129,'product',[{'user_type',129,'state',[]}]}|[{'user_type',129,'state',[]}]]}]]}]]]]]]]]},[]}]
, 'type' = [{'state',{'type',132,'tuple',[{'user_type',132,'alg_handler',[]}|[{'user_type',132,'alg_state',[]}]]},[]}]
, 'type' = [{'builtin_alg',{'type',134,'union',[{'atom',134,'exsss'}|[{'atom',134,'exro928ss'}|[{'atom',134,'exrop'}|[{'atom',134,'exs1024s'}|[{'atom',134,'exsp'}|[{'atom',134,'exs64'}|[{'atom',134,'exsplus'}|[{'atom',134,'exs1024'}]]]]]]]]},[]}]
, 'type' = [{'alg',{'type',135,'union',[{'user_type',135,'builtin_alg',[]}|[{'type',135,'atom',[]}]]},[]}]
, 'type' = [{'export_state',{'type',136,'tuple',[{'user_type',136,'alg',[]}|[{'user_type',136,'alg_state',[]}]]},[]}]
, 'type' = [{'seed',{'type',137,'union',[{'type',137,'list',[{'type',137,'integer',[]}]}|[{'type',137,'integer',[]}|[{'type',137,'tuple',[{'type',137,'integer',[]}|[{'type',137,'integer',[]}|[{'type',137,'integer',[]}]]]}]]]},[]}]
, 'export_type' = [{'builtin_alg',0}|[{'alg',0}|[{'alg_handler',0}|[{'alg_state',0}|[{'state',0}|[{'export_state',0}|[{'seed',0}]]]]]]]
, 'export_type' = [{'exsplus_state',0}|[{'exro928_state',0}|[{'exrop_state',0}|[{'exs1024_state',0}|[{'exs64_state',0}]]]]]
, 'spec' = [{{'export_seed',0},[{'type',233,'fun',[{'type',233,'product',[]}|[{'type',233,'union',[{'atom',233,'undefined'}|[{'user_type',233,'export_state',[]}]]}]]}]}]
, 'spec' = [{{'export_seed_s',1},[{'type',240,'fun',[{'type',240,'product',[{'ann_type',240,[{'var',240,'State'}|[{'user_type',240,'state',[]}]]}]}|[{'user_type',240,'export_state',[]}]]}]}]
, 'spec' = [{{'seed',1},[{'type',249,'fun',[{'type',249,'product',[{'ann_type',250,[{'var',250,'AlgOrStateOrExpState'}|[{'type',250,'union',[{'user_type',250,'builtin_alg',[]}|[{'user_type',250,'state',[]}|[{'user_type',250,'export_state',[]}]]]}]]}]}|[{'user_type',251,'state',[]}]]}]}]
, 'spec' = [{{'seed_s',1},[{'type',255,'fun',[{'type',255,'product',[{'ann_type',256,[{'var',256,'AlgOrStateOrExpState'}|[{'type',256,'union',[{'user_type',256,'builtin_alg',[]}|[{'user_type',256,'state',[]}|[{'user_type',256,'export_state',[]}]]]}]]}]}|[{'user_type',257,'state',[]}]]}]}]
, 'spec' = [{{'seed',2},[{'type',271,'fun',[{'type',271,'product',[{'ann_type',271,[{'var',271,'Alg'}|[{'user_type',271,'builtin_alg',[]}]]}|[{'ann_type',271,[{'var',271,'Seed'}|[{'user_type',271,'seed',[]}]]}]]}|[{'user_type',271,'state',[]}]]}]}]
, 'spec' = [{{'seed_s',2},[{'type',275,'fun',[{'type',275,'product',[{'ann_type',275,[{'var',275,'Alg'}|[{'user_type',275,'builtin_alg',[]}]]}|[{'ann_type',275,[{'var',275,'Seed'}|[{'user_type',275,'seed',[]}]]}]]}|[{'user_type',275,'state',[]}]]}]}]
, 'spec' = [{{'uniform',0},[{'type',287,'fun',[{'type',287,'product',[]}|[{'ann_type',287,[{'var',287,'X'}|[{'type',287,'float',[]}]]}]]}]}]
, 'spec' = [{{'uniform',1},[{'type',297,'fun',[{'type',297,'product',[{'ann_type',297,[{'var',297,'N'}|[{'type',297,'pos_integer',[]}]]}]}|[{'ann_type',297,[{'var',297,'X'}|[{'type',297,'pos_integer',[]}]]}]]}]}]
, 'spec' = [{{'uniform_s',1},[{'type',307,'fun',[{'type',307,'product',[{'ann_type',307,[{'var',307,'State'}|[{'user_type',307,'state',[]}]]}]}|[{'type',307,'tuple',[{'ann_type',307,[{'var',307,'X'}|[{'type',307,'float',[]}]]}|[{'ann_type',307,[{'var',307,'NewState'}|[{'user_type',307,'state',[]}]]}]]}]]}]}]
, 'spec' = [{{'uniform_s',2},[{'type',324,'fun',[{'type',324,'product',[{'ann_type',324,[{'var',324,'N'}|[{'type',324,'pos_integer',[]}]]}|[{'ann_type',324,[{'var',324,'State'}|[{'user_type',324,'state',[]}]]}]]}|[{'type',325,'tuple',[{'ann_type',325,[{'var',325,'X'}|[{'type',325,'pos_integer',[]}]]}|[{'ann_type',325,[{'var',325,'NewState'}|[{'user_type',325,'state',[]}]]}]]}]]}]}]
, 'spec' = [{{'uniform_real',0},[{'type',350,'fun',[{'type',350,'product',[]}|[{'ann_type',350,[{'var',350,'X'}|[{'type',350,'float',[]}]]}]]}]}]
, 'spec' = [{{'uniform_real_s',1},[{'type',390,'fun',[{'type',390,'product',[{'ann_type',390,[{'var',390,'State'}|[{'user_type',390,'state',[]}]]}]}|[{'type',390,'tuple',[{'ann_type',390,[{'var',390,'X'}|[{'type',390,'float',[]}]]}|[{'ann_type',390,[{'var',390,'NewState'}|[{'user_type',390,'state',[]}]]}]]}]]}]}]
, 'spec' = [{{'jump',1},[{'type',535,'fun',[{'type',535,'product',[{'user_type',535,'state',[]}]}|[{'ann_type',535,[{'var',535,'NewState'}|[{'user_type',535,'state',[]}]]}]]}]}]
, 'spec' = [{{'jump',0},[{'type',547,'fun',[{'type',547,'product',[]}|[{'ann_type',547,[{'var',547,'NewState'}|[{'user_type',547,'state',[]}]]}]]}]}]
, 'spec' = [{{'normal',0},[{'type',554,'fun',[{'type',554,'product',[]}|[{'type',554,'float',[]}]]}]}]
, 'spec' = [{{'normal',2},[{'type',563,'fun',[{'type',563,'product',[{'ann_type',563,[{'var',563,'Mean'}|[{'type',563,'number',[]}]]}|[{'ann_type',563,[{'var',563,'Variance'}|[{'type',563,'number',[]}]]}]]}|[{'type',563,'float',[]}]]}]}]
, 'spec' = [{{'normal_s',1},[{'type',571,'fun',[{'type',571,'product',[{'ann_type',571,[{'var',571,'State'}|[{'user_type',571,'state',[]}]]}]}|[{'type',571,'tuple',[{'type',571,'float',[]}|[{'ann_type',571,[{'var',571,'NewState'}|[{'user_type',571,'state',[]}]]}]]}]]}]}]
, 'spec' = [{{'normal_s',3},[{'type',589,'fun',[{'type',589,'product',[{'ann_type',589,[{'var',589,'Mean'}|[{'type',589,'number',[]}]]}|[{'ann_type',589,[{'var',589,'Variance'}|[{'type',589,'number',[]}]]}|[{'user_type',589,'state',[]}]]]}|[{'type',589,'tuple',[{'type',589,'float',[]}|[{'ann_type',589,[{'var',589,'NewS'}|[{'user_type',589,'state',[]}]]}]]}]]}]}]
, 'spec' = [{{'seed_put',1},[{'type',597,'fun',[{'type',597,'product',[{'user_type',597,'state',[]}]}|[{'user_type',597,'state',[]}]]}]}]
, 'opaque' = [{'exs64_state',{'user_type',652,'uint64',[]},[]}]
, 'spec' = [{{'exs64_next',1},[{'type',669,'fun',[{'type',669,'product',[{'user_type',669,'exs64_state',[]}]}|[{'type',669,'tuple',[{'user_type',669,'uint64',[]}|[{'user_type',669,'exs64_state',[]}]]}]]}]}]
, 'opaque' = [{'exsplus_state',{'type',714,'nonempty_improper_list',[{'user_type',714,'uint58',[]}|[{'user_type',714,'uint58',[]}]]},[]}]
, 'dialyzer' = [{'no_improper_lists',{'exsplus_seed',1}}]
, 'dialyzer' = [{'no_improper_lists',{'exsss_seed',1}}]
, 'dialyzer' = [{'no_improper_lists',{'exsplus_next',1}}]
, 'spec' = [{{'exsplus_next',1},[{'type',773,'fun',[{'type',773,'product',[{'user_type',773,'exsplus_state',[]}]}|[{'type',773,'tuple',[{'user_type',773,'uint58',[]}|[{'user_type',773,'exsplus_state',[]}]]}]]}]}]
, 'dialyzer' = [{'no_improper_lists',{'exsss_next',1}}]
, 'spec' = [{{'exsss_next',1},[{'type',785,'fun',[{'type',785,'product',[{'user_type',785,'exsplus_state',[]}]}|[{'type',785,'tuple',[{'user_type',785,'uint58',[]}|[{'user_type',785,'exsplus_state',[]}]]}]]}]}]
, 'dialyzer' = [{'no_improper_lists',{'exsplus_jump',1}}]
, 'spec' = [{{'exsplus_jump',1},[{'type',849,'fun',[{'type',849,'product',[{'type',849,'tuple',[{'user_type',849,'alg_handler',[]}|[{'user_type',849,'exsplus_state',[]}]]}]}|[{'type',850,'tuple',[{'user_type',850,'alg_handler',[]}|[{'user_type',850,'exsplus_state',[]}]]}]]}]}]
, 'dialyzer' = [{'no_improper_lists',{'exsplus_jump',4}}]
, 'opaque' = [{'exs1024_state',{'type',875,'tuple',[{'type',875,'list',[{'user_type',875,'uint64',[]}]}|[{'type',875,'list',[{'user_type',875,'uint64',[]}]}]]},[]}]
, 'spec' = [{{'exs1024_gen1024',1},[{'type',894,'fun',[{'type',894,'product',[{'user_type',894,'uint64',[]}]}|[{'type',894,'list',[{'user_type',894,'uint64',[]}]}]]}]}]
, 'spec' = [{{'exs1024_calc',2},[{'type',907,'fun',[{'type',907,'product',[{'user_type',907,'uint64',[]}|[{'user_type',907,'uint64',[]}]]}|[{'type',907,'tuple',[{'user_type',907,'uint64',[]}|[{'user_type',907,'uint64',[]}]]}]]}]}]
, 'spec' = [{{'exs1024_next',1},[{'type',916,'fun',[{'type',916,'product',[{'user_type',916,'exs1024_state',[]}]}|[{'type',916,'tuple',[{'user_type',916,'uint64',[]}|[{'user_type',916,'exs1024_state',[]}]]}]]}]}]
, 'spec' = [{{'exs1024_jump',1},[{'type',954,'fun',[{'type',954,'product',[{'type',954,'tuple',[{'user_type',954,'alg_handler',[]}|[{'user_type',954,'exs1024_state',[]}]]}]}|[{'type',955,'tuple',[{'user_type',955,'alg_handler',[]}|[{'user_type',955,'exs1024_state',[]}]]}]]}]}]
, 'opaque' = [{'exro928_state',{'type',1061,'tuple',[{'type',1061,'list',[{'user_type',1061,'uint58',[]}]}|[{'type',1061,'list',[{'user_type',1061,'uint58',[]}]}]]},[]}]
, 'spec' = [{{'exro928_seed',1},[{'type',1063,'fun',[{'type',1063,'product',[{'type',1064,'union',[{'type',1064,'list',[{'user_type',1064,'uint58',[]}]}|[{'type',1064,'integer',[]}|[{'type',1064,'tuple',[{'type',1064,'integer',[]}|[{'type',1064,'integer',[]}|[{'type',1064,'integer',[]}]]]}]]]}]}|[{'user_type',1065,'exro928_state',[]}]]}]}]
, 'spec' = [{{'exro928ss_next',1},[{'type',1080,'fun',[{'type',1080,'product',[{'user_type',1080,'exro928_state',[]}]}|[{'type',1080,'tuple',[{'user_type',1080,'uint58',[]}|[{'user_type',1080,'exro928_state',[]}]]}]]}]}]
, 'spec' = [{{'exro928_next',1},[{'type',1098,'fun',[{'type',1098,'product',[{'user_type',1098,'exro928_state',[]}]}|[{'type',1098,'tuple',[{'type',1098,'tuple',[{'user_type',1098,'uint58',[]}|[{'user_type',1098,'uint58',[]}]]}|[{'user_type',1098,'exro928_state',[]}]]}]]}]}]
, 'spec' = [{{'exro928_next_state',1},[{'type',1106,'fun',[{'type',1106,'product',[{'user_type',1106,'exro928_state',[]}]}|[{'user_type',1106,'exro928_state',[]}]]}]}]
, 'spec' = [{{'exro928_jump',1},[{'type',1135,'fun',[{'type',1135,'product',[{'type',1135,'tuple',[{'user_type',1135,'alg_handler',[]}|[{'user_type',1135,'exro928_state',[]}]]}]}|[{'type',1136,'tuple',[{'user_type',1136,'alg_handler',[]}|[{'user_type',1136,'exro928_state',[]}]]}]]}]}]
, 'spec' = [{{'exro928_jump_2pow512',1},[{'type',1140,'fun',[{'type',1140,'product',[{'user_type',1140,'exro928_state',[]}]}|[{'user_type',1140,'exro928_state',[]}]]}]}]
, 'spec' = [{{'exro928_jump_2pow20',1},[{'type',1154,'fun',[{'type',1154,'product',[{'user_type',1154,'exro928_state',[]}]}|[{'user_type',1154,'exro928_state',[]}]]}]}]
, 'opaque' = [{'exrop_state',{'type',1233,'nonempty_improper_list',[{'user_type',1233,'uint58',[]}|[{'user_type',1233,'uint58',[]}]]},[]}]
, 'dialyzer' = [{'no_improper_lists',{'exrop_seed',1}}]
, 'dialyzer' = [{'no_improper_lists',{'exrop_next_s',2}}]
, 'dialyzer' = [{'no_improper_lists',{'exrop_next',1}}]
, 'dialyzer' = [{'no_improper_lists',{'exrop_jump',5}}]
, 'spec' = [{{'seed58',2},[{'type',1338,'fun',[{'type',1338,'product',[{'type',1338,'non_neg_integer',[]}|[{'user_type',1338,'uint64',[]}]]}|[{'type',1338,'list',[{'user_type',1338,'uint58',[]}]}]]}]}]
, 'spec' = [{{'seed64',2},[{'type',1354,'fun',[{'type',1354,'product',[{'type',1354,'non_neg_integer',[]}|[{'user_type',1354,'uint64',[]}]]}|[{'type',1354,'list',[{'user_type',1354,'uint64',[]}]}]]}]}] ] 'uniform_range'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <Range,Alg = ~{'next':=Next,'bits':=Bits}~,R,V> when 'true' -> let <WeakLowBits> = call 'maps':'get' ('weak_low_bits',Alg,0) in let <Shift> = call 'erlang':'-' (Bits,WeakLowBits) in let <_6> = call 'erlang':'bsl' (1,WeakLowBits) in let <_7> = call 'erlang':'-' (_6,1) in let <ShiftMask> = call 'erlang':'bnot' (_7) in let <RangeMinus1> = call 'erlang':'-' (Range,1) in case <> of <> when try let <_10> = call 'erlang':'band' (Range,RangeMinus1) in call 'erlang':'=:=' (_10,0) of <Try> -> Try catch <T,R> -> 'false' -> let <_11> = call 'erlang':'bsr' (Range,Bits) in case apply 'uniform_range'/7 (_11,Next,R,V,ShiftMask,Shift,Bits) of <{V1,R1,_28}> when 'true' -> let <_13> = call 'erlang':'band' (V1,RangeMinus1) in let <_14> = call 'erlang':'+' (_13,1) in {_14,{Alg,R1}}
(<_12> when 'true' -> primop 'match_fail' ({'badmatch',_12})-|['compiler_generated'] ) end
<> when 'true' -> let <_15> = call 'erlang':'-' (Bits,2) in let <_16> = call 'erlang':'bsr' (Range,_15) in case apply 'uniform_range'/7 (_16,Next,R,V,ShiftMask,Shift,Bits) of <{V1,R1,B}> when 'true' -> let <I> = call 'erlang':'rem' (V1,Range) in case <> of <> when try let <_21> = call 'erlang':'-' (V1,I) in let <_19> = call 'erlang':'bsl' (1,B) in let <_20> = call 'erlang':'-' (_19,Range) in call 'erlang':'=<' (_21,_20) of <Try> -> Try catch <T,R> -> 'false' -> let <_22> = call 'erlang':'+' (I,1) in {_22,{Alg,R1}}
<> when 'true' -> case apply Next (R1) of <{V2,R2}> when 'true' -> apply 'uniform_range'/4 (Range,Alg,R2,V2)
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end end
(<_17> when 'true' -> primop 'match_fail' ({'badmatch',_17})-|['compiler_generated'] ) end end
(<_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_27,_26,_25,_24})-|[{'function_name',{'uniform_range',4}}] )-|['compiler_generated'] ) end
'uniform_range'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <> of <> when call 'erlang':'=<' (_0,1) -> {_3,_2,_6}
<> when 'true' -> case apply _1 (_2) of <{V1,R1}> when 'true' -> let <_12> = call 'erlang':'bsr' (_0,_5) in let <_9> = call 'erlang':'band' (_3,_4) in let <_10> = call 'erlang':'bsl' (_9,_5) in let <_11> = call 'erlang':'bor' (_10,V1) in let <_8> = call 'erlang':'+' (_6,_5) in apply 'uniform_range'/7 (_12,_1,R1,_11,_4,_5,_8)
(<_7> when 'true' -> primop 'match_fail' ({'badmatch',_7})-|['compiler_generated'] ) end end
'export_seed'/0 = fun () -> case call 'erlang':'get' ('rand_seed') of <{~{'type':=Alg}~,Seed}> when 'true' -> {Alg,Seed}
<_1> when 'true' -> 'undefined' end
'export_seed_s'/1 = fun (_0) -> case _0 of <{~{'type':=Alg}~,AlgState}> when 'true' -> {Alg,AlgState}
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'export_seed_s',1}}] )-|['compiler_generated'] ) end
'seed'/1 = fun (_0) -> let <_1> = apply 'seed_s'/1 (_0) in apply 'seed_put'/1 (_1)
'seed_s'/1 = fun (_0) -> case _0 of <State = {AlgHandler,_X_AlgState}> when call 'erlang':'is_map' (AlgHandler) -> State
<{Alg,AlgState}> when call 'erlang':'is_atom' (Alg) -> case apply 'mk_alg'/1 (Alg) of <{AlgHandler,_X_SeedFun}> when 'true' -> {AlgHandler,AlgState}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<Alg> when 'true' -> let <_5> = call 'erlang':'node' () in let <_4> = call 'erlang':'self' () in let <_6> = call 'erlang':'phash2' ([{_5,_4}|[]]) in let <_3> = call 'erlang':'system_time' () in let <_2> = call 'erlang':'unique_integer' () in apply 'seed_s'/2 (Alg,{_6,_3,_2}) end
'seed'/2 = fun (_0,_1) -> let <_2> = apply 'seed_s'/2 (_0,_1) in apply 'seed_put'/1 (_2)
'seed_s'/2 = fun (_0,_1) -> case apply 'mk_alg'/1 (_0) of <{AlgHandler,SeedFun}> when 'true' -> let <AlgState> = apply SeedFun (_1) in {AlgHandler,AlgState}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'uniform'/0 = fun () -> let <_0> = apply 'seed_get'/0 () in case apply 'uniform_s'/1 (_0) of <{X,State}> when 'true' -> do apply 'seed_put'/1 (State) X
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'uniform'/1 = fun (_0) -> let <_1> = apply 'seed_get'/0 () in case apply 'uniform_s'/2 (_0,_1) of <{X,State}> when 'true' -> do apply 'seed_put'/1 (State) X
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'uniform_s'/1 = fun (_0) -> case _0 of <State = {~{'uniform':=Uniform}~,_9}> when 'true' -> apply Uniform (State)
<{Alg = ~{'next':=Next,'bits':=Bits}~,R0}> when 'true' -> case apply Next (R0) of <{V,R1}> when 'true' -> let <_2> = call 'erlang':'-' (Bits,53) in let <_3> = call 'erlang':'bsr' (V,_2) in let <_4> = call 'erlang':'*' (_3,1.110223e-16) in {_4,{Alg,R1}}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<{Alg = ~{'max':=Max,'next':=Next}~,R0}> when 'true' -> case apply Next (R0) of <{V,R1}> when 'true' -> let <_6> = call 'erlang':'+' (Max,1) in let <_7> = call 'erlang':'/' (V,_6) in {_7,{Alg,R1}}
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
(<_8> when 'true' -> (primop 'match_fail' ({'function_clause',_8})-|[{'function_name',{'uniform_s',1}}] )-|['compiler_generated'] ) end
'uniform_s'/2 = fun (_0,_1) -> case <_0,_1> of <N,State = {~{'uniform_n':=UniformN}~,_25}> when let <_2> = call 'erlang':'is_integer' (N) in let <_3> = call 'erlang':'=<' (1,N) in call 'erlang':'and' (_2,_3) -> apply UniformN (N,State)
<N,{Alg = ~{'next':=Next,'bits':=Bits}~,R0}> when let <_4> = call 'erlang':'is_integer' (N) in let <_5> = call 'erlang':'=<' (1,N) in call 'erlang':'and' (_4,_5) -> case apply Next (R0) of <{V,R1}> when 'true' -> let <_7> = call 'erlang':'bsl' (1,Bits) in let <MaxMinusN> = call 'erlang':'-' (_7,N) in case <> of <> when call 'erlang':'=<' (0,MaxMinusN) -> case <> of <> when call 'erlang':'<' (V,N) -> let <_9> = call 'erlang':'+' (V,1) in {_9,{Alg,R1}}
<> when 'true' -> let <I> = call 'erlang':'rem' (V,N) in case <> of <> when try let <_11> = call 'erlang':'-' (V,I) in call 'erlang':'=<' (_11,MaxMinusN) of <Try> -> Try catch <T,R> -> 'false' -> let <_12> = call 'erlang':'+' (I,1) in {_12,{Alg,R1}}
<> when 'true' -> apply 'uniform_s'/2 (N,{Alg,R1}) end end
<> when 'true' -> apply 'uniform_range'/4 (N,Alg,R1,V) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
<N,{Alg = ~{'max':=Max,'next':=Next}~,R0}> when let <_13> = call 'erlang':'is_integer' (N) in let <_14> = call 'erlang':'=<' (1,N) in call 'erlang':'and' (_13,_14) -> case apply Next (R0) of <{V,R1}> when 'true' -> case <> of <> when call 'erlang':'=<' (N,Max) -> let <_16> = call 'erlang':'rem' (V,N) in let <_17> = call 'erlang':'+' (_16,1) in {_17,{Alg,R1}}
<> when 'true' -> let <_18> = call 'erlang':'+' (Max,1) in let <F> = call 'erlang':'/' (V,_18) in let <_20> = call 'erlang':'*' (F,N) in let <_21> = call 'erlang':'trunc' (_20) in let <_22> = call 'erlang':'+' (_21,1) in {_22,{Alg,R1}} end
(<_15> when 'true' -> primop 'match_fail' ({'badmatch',_15})-|['compiler_generated'] ) end
(<_24,_23> when 'true' -> (primop 'match_fail' ({'function_clause',_24,_23})-|[{'function_name',{'uniform_s',2}}] )-|['compiler_generated'] ) end
'uniform_real'/0 = fun () -> let <_0> = apply 'seed_get'/0 () in case apply 'uniform_real_s'/1 (_0) of <{X,Seed}> when 'true' -> do apply 'seed_put'/1 (Seed) X
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'uniform_real_s'/1 = fun (_0) -> case _0 of <{Alg = ~{'next':=Next,'bits':=Bits}~,R0}> when 'true' -> case apply Next (R0) of <{V1,R1}> when 'true' -> let <_2> = call 'erlang':'-' (Bits,56) in let <M1> = call 'erlang':'bsr' (V1,_2) in case <> of <> when call 'erlang':'=<' (36028797018963968,M1) -> let <_7> = call 'erlang':'bsr' (M1,3) in let <_8> = call 'erlang':'*' (_7,1.110223e-16) in {_8,{Alg,R1}}
<> when call 'erlang':'=<' (18014398509481984,M1) -> let <_12> = call 'erlang':'bsr' (M1,2) in let <_13> = call 'erlang':'*' (_12,5.551115e-17) in {_13,{Alg,R1}}
<> when call 'erlang':'=<' (9007199254740992,M1) -> let <_17> = call 'erlang':'bsr' (M1,1) in let <_18> = call 'erlang':'*' (_17,2.7755576e-17) in {_18,{Alg,R1}}
<> when call 'erlang':'=<' (4503599627370496,M1) -> let <_22> = call 'erlang':'*' (M1,1.3877788e-17) in {_22,{Alg,R1}}
<> when 'true' -> case apply Next (R1) of <{V2,R2}> when 'true' -> apply 'uniform_real_s'/7 (Alg,Next,M1,-56,R2,V2,Bits)
(<_23> when 'true' -> primop 'match_fail' ({'badmatch',_23})-|['compiler_generated'] ) end end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<{Alg = ~{'max':=_51,'next':=Next}~,R0}> when 'true' -> case apply Next (R0) of <{V1,R1}> when 'true' -> let <M1> = call 'erlang':'band' (V1,72057594037927935) in case <> of <> when call 'erlang':'=<' (36028797018963968,M1) -> let <_32> = call 'erlang':'bsr' (M1,3) in let <_33> = call 'erlang':'*' (_32,1.110223e-16) in {_33,{Alg,R1}}
<> when call 'erlang':'=<' (18014398509481984,M1) -> let <_37> = call 'erlang':'bsr' (M1,2) in let <_38> = call 'erlang':'*' (_37,5.551115e-17) in {_38,{Alg,R1}}
<> when call 'erlang':'=<' (9007199254740992,M1) -> let <_42> = call 'erlang':'bsr' (M1,1) in let <_43> = call 'erlang':'*' (_42,2.7755576e-17) in {_43,{Alg,R1}}
<> when call 'erlang':'=<' (4503599627370496,M1) -> let <_47> = call 'erlang':'*' (M1,1.3877788e-17) in {_47,{Alg,R1}}
<> when 'true' -> case apply Next (R1) of <{V2,R2}> when 'true' -> apply 'uniform_real_s'/7 (Alg,Next,M1,-56,R2,V2,56)
(<_48> when 'true' -> primop 'match_fail' ({'badmatch',_48})-|['compiler_generated'] ) end end
(<_25> when 'true' -> primop 'match_fail' ({'badmatch',_25})-|['compiler_generated'] ) end
(<_50> when 'true' -> (primop 'match_fail' ({'function_clause',_50})-|[{'function_name',{'uniform_real_s',1}}] )-|['compiler_generated'] ) end
'uniform_real_s'/7 = fun (_0,_1,_2,_3,_4,_5,_6) -> case <_0,_1,_2,_3,_4,_5,_6> of <Alg,_X_Next,M0,-1064,R1,V1,Bits> when 'true' -> let <_9> = apply 'bc'/3 (M0,2251799813685248,52) in let <B0> = call 'erlang':'-' (53,_9) in let <_16> = call 'erlang':'bsl' (M0,B0) in let <_14> = call 'erlang':'-' (Bits,B0) in let <_15> = call 'erlang':'bsr' (V1,_14) in let <_17> = call 'erlang':'bor' (_16,_15) in let <_12> = call 'erlang':'-' (-1064,B0) in let <_13> = call 'math':'pow' (2.0,_12) in let <_18> = call 'erlang':'*' (_17,_13) in {_18,{Alg,R1}}
<Alg,Next,M0,BitNo,R1,V1,Bits> when 'true' -> case <> of <> when call 'erlang':'=<' (2251799813685248,M0) -> let <_24> = call 'erlang':'bsl' (M0,1) in let <_22> = call 'erlang':'-' (Bits,1) in let <_23> = call 'erlang':'bsr' (V1,_22) in let <_25> = call 'erlang':'bor' (_24,_23) in let <_20> = call 'erlang':'-' (BitNo,1) in let <_21> = call 'math':'pow' (2.0,_20) in let <_26> = call 'erlang':'*' (_25,_21) in {_26,{Alg,R1}}
<> when call 'erlang':'=<' (1125899906842624,M0) -> let <_32> = call 'erlang':'bsl' (M0,2) in let <_30> = call 'erlang':'-' (Bits,2) in let <_31> = call 'erlang':'bsr' (V1,_30) in let <_33> = call 'erlang':'bor' (_32,_31) in let <_28> = call 'erlang':'-' (BitNo,2) in let <_29> = call 'math':'pow' (2.0,_28) in let <_34> = call 'erlang':'*' (_33,_29) in {_34,{Alg,R1}}
<> when call 'erlang':'=<' (562949953421312,M0) -> let <_40> = call 'erlang':'bsl' (M0,3) in let <_38> = call 'erlang':'-' (Bits,3) in let <_39> = call 'erlang':'bsr' (V1,_38) in let <_41> = call 'erlang':'bor' (_40,_39) in let <_36> = call 'erlang':'-' (BitNo,3) in let <_37> = call 'math':'pow' (2.0,_36) in let <_42> = call 'erlang':'*' (_41,_37) in {_42,{Alg,R1}}
<> when call 'erlang':'==' (M0,0) -> let <_43> = call 'erlang':'-' (Bits,56) in let <M1> = call 'erlang':'bsr' (V1,_43) in case <> of <> when call 'erlang':'=<' (36028797018963968,M1) -> let <_48> = call 'erlang':'bsr' (M1,3) in let <_46> = call 'erlang':'-' (BitNo,53) in let <_47> = call 'math':'pow' (2.0,_46) in let <_49> = call 'erlang':'*' (_48,_47) in {_49,{Alg,R1}}
<> when call 'erlang':'=<' (18014398509481984,M1) -> let <_53> = call 'erlang':'bsr' (M1,2) in let <_51> = call 'erlang':'-' (BitNo,54) in let <_52> = call 'math':'pow' (2.0,_51) in let <_54> = call 'erlang':'*' (_53,_52) in {_54,{Alg,R1}}
<> when call 'erlang':'=<' (9007199254740992,M1) -> let <_58> = call 'erlang':'bsr' (M1,1) in let <_56> = call 'erlang':'-' (BitNo,55) in let <_57> = call 'math':'pow' (2.0,_56) in let <_59> = call 'erlang':'*' (_58,_57) in {_59,{Alg,R1}}
<> when call 'erlang':'=<' (4503599627370496,M1) -> let <_61> = call 'erlang':'-' (BitNo,56) in let <_62> = call 'math':'pow' (2.0,_61) in let <_63> = call 'erlang':'*' (M1,_62) in {_63,{Alg,R1}}
<> when call 'erlang':'=:=' (BitNo,-1008) -> case <> of <> when call 'erlang':'=<' (4398046511104,M1) -> let <_66> = call 'erlang':'-' (BitNo,56) in apply 'uniform_real_s'/5 (Alg,Next,M1,_66,R1)
<> when 'true' -> apply 'uniform_real_s'/1 ({Alg,R1}) end
<> when 'true' -> let <_67> = call 'erlang':'-' (BitNo,56) in apply 'uniform_real_s'/5 (Alg,Next,M1,_67,R1) end
<> when 'true' -> let <_70> = apply 'bc'/3 (M0,281474976710656,49) in let <B0> = call 'erlang':'-' (53,_70) in let <_76> = call 'erlang':'bsl' (M0,B0) in let <_74> = call 'erlang':'-' (Bits,B0) in let <_75> = call 'erlang':'bsr' (V1,_74) in let <_77> = call 'erlang':'bor' (_76,_75) in let <_72> = call 'erlang':'-' (BitNo,B0) in let <_73> = call 'math':'pow' (2.0,_72) in let <_78> = call 'erlang':'*' (_77,_73) in {_78,{Alg,R1}} end end
'uniform_real_s'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <Alg = ~{'bits':=Bits}~,Next,M0,BitNo,R0> when 'true' -> case apply Next (R0) of <{V1,R1}> when 'true' -> apply 'uniform_real_s'/7 (Alg,Next,M0,BitNo,R1,V1,Bits)
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<Alg = ~{'max':=_15}~,Next,M0,BitNo,R0> when 'true' -> case apply Next (R0) of <{V1,R1}> when 'true' -> let <_9> = call 'erlang':'band' (V1,72057594037927935) in apply 'uniform_real_s'/7 (Alg,Next,M0,BitNo,R1,_9,56)
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_14,_13,_12,_11,_10> when 'true' -> (primop 'match_fail' ({'function_clause',_14,_13,_12,_11,_10})-|[{'function_name',{'uniform_real_s',5}}] )-|['compiler_generated'] ) end
'jump'/1 = fun (_0) -> case _0 of <State = {~{'jump':=Jump}~,_2}> when 'true' -> apply Jump (State)
<{~{}~,_3}> when 'true' -> call 'erlang':'error' ('not_implemented')
(<_1> when 'true' -> (primop 'match_fail' ({'function_clause',_1})-|[{'function_name',{'jump',1}}] )-|['compiler_generated'] ) end
'jump'/0 = fun () -> let <_0> = apply 'seed_get'/0 () in let <_1> = apply 'jump'/1 (_0) in apply 'seed_put'/1 (_1)
'normal'/0 = fun () -> let <_0> = apply 'seed_get'/0 () in case apply 'normal_s'/1 (_0) of <{X,Seed}> when 'true' -> do apply 'seed_put'/1 (Seed) X
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'normal'/2 = fun (_0,_1) -> let <_3> = call 'math':'sqrt' (_1) in let <_2> = apply 'normal'/0 () in let <_4> = call 'erlang':'*' (_3,_2) in call 'erlang':'+' (_0,_4)
'normal_s'/1 = fun (_0) -> case (case _0 of (<({(Alg = (~{(('next'-|['compiler_generated'] ):=Next-|['compiler_generated'] ),(('bits'-|['compiler_generated'] ):=Bits-|['compiler_generated'] )}~-|['compiler_generated'] )-|['compiler_generated'] ),S0}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case (apply Next (S0)-|['compiler_generated'] ) of (<({Int,S1}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (Bits,(51-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (_4,(1-|['compiler_generated'] )) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) ((1-|['compiler_generated'] ),_5) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_6,Int) in (let <_2> = call ('erlang'-|['compiler_generated'] ):('-'-|['compiler_generated'] ) (Bits,(51-|['compiler_generated'] )) in (let <_3> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (Int,_2) in ({_7,_3,({Alg,S1}-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_1> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_1}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<({(Alg = (~{(('next'-|['compiler_generated'] ):=Next-|['compiler_generated'] )}~-|['compiler_generated'] )-|['compiler_generated'] ),S0}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case (apply Next (S0)-|['compiler_generated'] ) of (<({Int,S1}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_13> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) ((2251799813685248-|['compiler_generated'] ),Int) in (let <_11> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Int,(2251799813685247-|['compiler_generated'] )) in ({_13,_11,({Alg,S1}-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_8> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_8}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_14> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_14}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <{Sign,R,State}> when 'true' -> let <Idx> = call 'erlang':'band' (R,255) in let <Idx1> = call 'erlang':'+' (Idx,1) in case (call ('erlang'-|['compiler_generated'] ):('element'-|['compiler_generated'] ) (Idx1,({{2104047571236786,1.7367254e-15},{0,9.55866e-17},{1693657211986787,1.2708705e-16},{1919380038271141,1.4909741e-16},{2015384402196343,1.6658733e-16},{2068365869448128,1.813612e-16},{2101878624052573,1.942972e-16},{2124958784102998,2.0589501e-16},{2141808670795147,2.164686e-16},{2154644611568301,2.262294e-16},{2164744887587275,2.353272e-16},{2172897953696594,2.4387235e-16},{2179616279372365,2.5194879e-16},{2185247251868649,2.59622e-16},{2190034623107822,2.6694407e-16},{2194154434521197,2.739573e-16},{2197736978774660,2.8069645e-16},{2200880740891961,2.871906e-16},{2203661538010620,2.9346417e-16},{2206138681109102,2.995381e-16},{2208359231806599,3.054303e-16},{2210361007258210,3.1115636e-16},{2212174742388539,3.167299e-16},{2213825672704646,3.2216281e-16},{2215334711002614,3.2746572e-16},{2216719334487595,3.3264797e-16},{2217994262139172,3.3771804e-16},{2219171977965032,3.426834e-16},{2220263139538712,3.4755088e-16},{2221276900117330,3.5232664e-16},{2222221164932930,3.5701623e-16},{2223102796829069,3.616248e-16},{2223927782546658,3.6615696e-16},{2224701368170060,3.7061702e-16},{2225428170204312,3.7500888e-16},{2226112267248242,3.793362e-16},{2226757276105256,3.8360227e-16},{2227366415328399,3.8781025e-16},{2227942558554684,3.9196301e-16},{2228488279492521,3.960632e-16},{2229005890047222,4.0011338e-16},{2229497472775193,4.0411582e-16},{2229964908627060,4.0807276e-16},{2230409900758597,4.1198624e-16},{2230833995044585,4.1585816e-16},{2231238597816133,4.1969037e-16},{2231624991250191,4.2348455e-16},{2231994346765928,4.272423e-16},{2232347736722750,4.3096518e-16},{2232686144665934,4.346546e-16},{2233010474325959,4.3831194e-16},{2233321557544881,4.419385e-16},{2233620161276071,4.4553547e-16},{2233906993781271,4.4910407e-16},{2234182710130335,4.5264535e-16},{2234447917093496,4.5616044e-16},{2234703177503020,4.596503e-16},{2234949014150181,4.631159e-16},{2235185913274316,4.665582e-16},{2235414327692884,4.6997803e-16},{2235634679614920,4.7337633e-16},{2235847363174595,4.7675376e-16},{2236052746716837,4.8011124e-16},{2236251174862869,4.8344945e-16},{2236442970379967,4.8676914e-16},{2236628435876762,4.90071e-16},{2236807855342765,4.933556e-16},{2236981495548562,4.9662373e-16},{2237149607321147,4.998759e-16},{2237312426707209,5.031128e-16},{2237470176035652,5.063349e-16},{2237623064889403,5.0954283e-16},{2237771290995388,5.1273715e-16},{2237915041040597,5.1591834e-16},{2238054491421305,5.1908694e-16},{2238189808931712,5.222434e-16},{2238321151397660,5.253882e-16},{2238448668260432,5.285219e-16},{2238572501115169,5.3164484e-16},{2238692784207942,5.347575e-16},{2238809644895133,5.378603e-16},{2238923204068402,5.409537e-16},{2239033576548190,5.44038e-16},{2239140871448443,5.471137e-16},{2239245192514958,5.501812e-16},{2239346638439541,5.532408e-16},{2239445303151952,5.562929e-16},{2239541276091442,5.5933784e-16},{2239634642459498,5.6237604e-16},{2239725483455293,5.6540783e-16},{2239813876495186,5.684335e-16},{2239899895417494,5.714534e-16},{2239983610673676,5.744679e-16},{2240065089506935,5.7747726e-16},{2240144396119183,5.804819e-16},{2240221591827230,5.83482e-16},{2240296735208969,5.86478e-16},{2240369882240293,5.894701e-16},{2240441086423386,5.9245857e-16},{2240510398907004,5.9544383e-16},{2240577868599305,5.9842613e-16},{2240643542273726,6.0140573e-16},{2240707464668391,6.0438294e-16},{2240769678579486,6.07358e-16},{2240830224948980,6.103312e-16},{2240889142947082,6.1330283e-16},{2240946470049769,6.1627317e-16},{2241002242111691,6.192425e-16},{2241056493434746,6.222111e-16},{2241109256832602,6.2517914e-16},{2241160563691400,6.28147e-16},{2241210444026879,6.311149e-16},{2241258926538122,6.340831e-16},{2241306038658137,6.370519e-16},{2241351806601435,6.400215e-16},{2241396255408788,6.429922e-16},{2241439408989313,6.459642e-16},{2241481290160038,6.489379e-16},{2241521920683062,6.519134e-16},{2241561321300462,6.5489104e-16},{2241599511767028,6.578711e-16},{2241636510880960,6.6085383e-16},{2241672336512612,6.638394e-16},{2241707005631362,6.668282e-16},{2241740534330713,6.6982047e-16},{2241772937851689,6.728164e-16},{2241804230604585,6.758163e-16},{2241834426189161,6.788204e-16},{2241863537413311,6.8182907e-16},{2241891576310281,6.848425e-16},{2241918554154466,6.878609e-16},{2241944481475843,6.908847e-16},{2241969368073071,6.93914e-16},{2241993223025298,6.9694924e-16},{2242016054702685,6.999906e-16},{2242037870775710,7.030384e-16},{2242058678223225,7.060929e-16},{2242078483339331,7.091544e-16},{2242097291739040,7.1222326e-16},{2242115108362774,7.1529963e-16},{2242131937479672,7.1838394e-16},{2242147782689725,7.2147646e-16},{2242162646924736,7.245775e-16},{2242176532448092,7.2768733e-16},{2242189440853337,7.308063e-16},{2242201373061537,7.339348e-16},{2242212329317416,7.37073e-16},{2242222309184237,7.4022135e-16},{2242231311537397,7.4338015e-16},{2242239334556717,7.465498e-16},{2242246375717369,7.4973057e-16},{2242252431779415,7.5292293e-16},{2242257498775893,7.561271e-16},{2242261571999416,7.5934354e-16},{2242264645987196,7.6257265e-16},{2242266714504453,7.6581477e-16},{2242267770526109,7.690703e-16},{2242267806216711,7.723396e-16},{2242266812908462,7.7562325e-16},{2242264781077289,7.789215e-16},{2242261700316818,7.822349e-16},{2242257559310145,7.855638e-16},{2242252345799276,7.889087e-16},{2242246046552082,7.922701e-16},{2242238647326615,7.9564843e-16},{2242230132832625,7.990442e-16},{2242220486690076,8.0245794e-16},{2242209691384458,8.058901e-16},{2242197728218684,8.093413e-16},{2242184577261310,8.12812e-16},{2242170217290819,8.1630286e-16},{2242154625735679,8.198144e-16},{2242137778609839,8.233472e-16},{2242119650443327,8.2690194e-16},{2242100214207556,8.304792e-16},{2242079441234906,8.340797e-16},{2242057301132135,8.3770404e-16},{2242033761687079,8.41353e-16},{2242008788768107,8.450272e-16},{2241982346215682,8.4872754e-16},{2241954395725356,8.524547e-16},{2241924896721443,8.562095e-16},{2241893806220517,8.599927e-16},{2241861078683830,8.6380526e-16},{2241826665857598,8.6764804e-16},{2241790516600041,8.71522e-16},{2241752576693881,8.7542803e-16},{2241712788642916,8.793672e-16},{2241671091451078,8.8334054e-16},{2241627420382235,8.8734907e-16},{2241581706698773,8.91394e-16},{2241533877376767,8.954765e-16},{2241483854795281,8.995977e-16},{2241431556397035,9.03759e-16},{2241376894317345,9.079617e-16},{2241319774977817,9.122072e-16},{2241260098640860,9.164968e-16},{2241197758920538,9.208324e-16},{2241132642244704,9.252154e-16},{2241064627262652,9.296474e-16},{2240993584191742,9.341302e-16},{2240919374095536,9.386656e-16},{2240841848084890,9.432558e-16},{2240760846432232,9.479027e-16},{2240676197587784,9.526085e-16},{2240587717084782,9.573754e-16},{2240495206318753,9.622059e-16},{2240398451183567,9.671026e-16},{2240297220544165,9.720681e-16},{2240191264522612,9.771053e-16},{2240080312570155,9.822173e-16},{2239964071293331,9.874072e-16},{2239842221996530,9.926786e-16},{2239714417896699,9.98035e-16},{2239580280957725,1.0034805e-15},{2239439398282193,1.0090191e-15},{2239291317986196,1.0146554e-15},{2239135544468203,1.0203941e-15},{2238971532964979,1.0262406e-15},{2238798683265269,1.0322001e-15},{2238616332424351,1.0382789e-15},{2238423746288095,1.0444833e-15},{2238220109591890,1.0508204e-15},{2238004514345216,1.0572978e-15},{2237775946143212,1.0639237e-15},{2237533267957822,1.0707072e-15},{2237275200846753,1.0776584e-15},{2237000300869952,1.084788e-15},{2236706931309099,1.092108e-15},{2236393229029147,1.0996315e-15},{2236057063479501,1.1073733e-15},{2235695986373246,1.1153498e-15},{2235307169458859,1.1235791e-15},{2234887326941578,1.1320818e-15},{2234432617919447,1.140881e-15},{2233938522519765,1.1500028e-15},{2233399683022677,1.1594771e-15},{2232809697779198,1.1693386e-15},{2232160850599817,1.1796267e-15},{2231443750584641,1.1903876e-15},{2230646845562170,1.2016759e-15},{2229755753817986,1.2135561e-15},{2228752329126533,1.2261054e-15},{2227613325162504,1.239418e-15},{2226308442121174,1.2536094e-15},{2224797391720399,1.2688244e-15},{2223025347823832,1.285248e-15},{2220915633329809,1.3031207e-15},{2218357446087030,1.3227656e-15},{2215184158448668,1.3446301e-15},{2211132412537369,1.3693607e-15},{2205758503851065,1.3979437e-15},{2198248265654987,1.431999e-15},{2186916352102141,1.4744849e-15},{2167562552481814,1.5317873e-15},{2125549880839716,1.6227699e-15}}-|['compiler_generated'] ))-|['compiler_generated'] ) of <{Ki,Wi}> when 'true' -> let <X> = call 'erlang':'*' (R,Wi) in case call 'erlang':'<' (R,Ki) of <'true'> when call 'erlang':'=:=' (Sign,0) -> {X,State}
<'true'> when 'true' -> let <_8> = call 'erlang':'-' (X) in {_8,State}
<'false'> when call 'erlang':'=:=' (Sign,0) -> apply 'normal_s'/4 (Idx,Sign,X,State)
<'false'> when 'true' -> let <_9> = call 'erlang':'-' (X) in apply 'normal_s'/4 (Idx,Sign,_9,State)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'normal_s'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <Mean,Variance,State0> when call 'erlang':'>' (Variance,0) -> case apply 'normal_s'/1 (State0) of <{X,State}> when 'true' -> let <_4> = call 'math':'sqrt' (Variance) in let <_5> = call 'erlang':'*' (_4,X) in let <_6> = call 'erlang':'+' (Mean,_5) in {_6,State}
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'normal_s',3}}] )-|['compiler_generated'] ) end
'seed_put'/1 = fun (_0) -> do call 'erlang':'put' ('rand_seed',_0) _0
'seed_get'/0 = fun () -> case call 'erlang':'get' ('rand_seed') of <'undefined'> when 'true' -> apply 'seed'/1 ('exsss')
<Old> when 'true' -> Old end
'mk_alg'/1 = fun (_0) -> case _0 of <'exs64'> when 'true' -> let <_4> = 'exs64_next'/1 in let <_5> = ~{'next'=>_4|~{'max'=>18446744073709551615,'type'=>'exs64'}~}~ in let <_1> = 'exs64_seed'/1 in {_5,_1}
<'exsplus'> when 'true' -> let <_9> = 'exsplus_next'/1 in let <_10> = 'exsplus_jump'/1 in let <_11> = ~{'next'=>_9,'jump'=>_10|~{'max'=>288230376151711743,'type'=>'exsplus'}~}~ in let <_6> = 'exsplus_seed'/1 in {_11,_6}
<'exsp'> when 'true' -> let <_13> = 'exsplus_next'/1 in let <_14> = 'exsp_uniform'/1 in let <_15> = 'exsp_uniform'/2 in let <_16> = 'exsplus_jump'/1 in let <_17> = ~{'next'=>_13,'uniform'=>_14,'uniform_n'=>_15,'jump'=>_16|~{'bits'=>58,'type'=>'exsp','weak_low_bits'=>1}~}~ in let <_12> = 'exsplus_seed'/1 in {_17,_12}
<'exsss'> when 'true' -> let <_19> = 'exsss_next'/1 in let <_20> = 'exsss_uniform'/1 in let <_21> = 'exsss_uniform'/2 in let <_22> = 'exsplus_jump'/1 in let <_23> = ~{'next'=>_19,'uniform'=>_20,'uniform_n'=>_21,'jump'=>_22|~{'bits'=>58,'type'=>'exsss'}~}~ in let <_18> = 'exsss_seed'/1 in {_23,_18}
<'exs1024'> when 'true' -> let <_27> = 'exs1024_next'/1 in let <_28> = 'exs1024_jump'/1 in let <_29> = ~{'next'=>_27,'jump'=>_28|~{'max'=>18446744073709551615,'type'=>'exs1024'}~}~ in let <_24> = 'exs1024_seed'/1 in {_29,_24}
<'exs1024s'> when 'true' -> let <_31> = 'exs1024_next'/1 in let <_32> = 'exs1024_jump'/1 in let <_33> = ~{'next'=>_31,'jump'=>_32|~{'bits'=>64,'type'=>'exs1024s','weak_low_bits'=>3}~}~ in let <_30> = 'exs1024_seed'/1 in {_33,_30}
<'exrop'> when 'true' -> let <_35> = 'exrop_next'/1 in let <_36> = 'exrop_uniform'/1 in let <_37> = 'exrop_uniform'/2 in let <_38> = 'exrop_jump'/1 in let <_39> = ~{'next'=>_35,'uniform'=>_36,'uniform_n'=>_37,'jump'=>_38|~{'bits'=>58,'type'=>'exrop','weak_low_bits'=>1}~}~ in let <_34> = 'exrop_seed'/1 in {_39,_34}
<'exro928ss'> when 'true' -> let <_41> = 'exro928ss_next'/1 in let <_42> = 'exro928ss_uniform'/1 in let <_43> = 'exro928ss_uniform'/2 in let <_44> = 'exro928_jump'/1 in let <_45> = ~{'next'=>_41,'uniform'=>_42,'uniform_n'=>_43,'jump'=>_44|~{'bits'=>58,'type'=>'exro928ss'}~}~ in let <_40> = 'exro928_seed'/1 in {_45,_40}
(<_46> when 'true' -> (primop 'match_fail' ({'function_clause',_46})-|[{'function_name',{'mk_alg',1}}] )-|['compiler_generated'] ) end
'exs64_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> case apply 'seed64_nz'/2 (1,L) of <[R|[]]> when 'true' -> R
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<A> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (A,18446744073709551615) in case apply 'seed64'/2 (1,_4) of <[R|[]]> when 'true' -> R
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<{A1,A2,A3}> when 'true' -> let <_8> = call 'erlang':'band' (A1,4294967295) in let <_9> = call 'erlang':'*' (_8,4294967197) in let <_10> = call 'erlang':'+' (_9,1) in (let <_1> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_10,(12-|['compiler_generated'] )) in (let <R1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_1) in (let <_35> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (R1,(549755813887-|['compiler_generated'] )) in (let <_36> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_35,(25-|['compiler_generated'] )) in (let <R2> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (R1,_36) in (let <_37> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (R2,(27-|['compiler_generated'] )) in (let <R3> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (R2,_37) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) (R3,(2685821657736338717-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_13,(18446744073709551615-|['compiler_generated'] )) in let <_65> = call 'erlang':'band' (A2,4294967295) in let <_15> = call 'erlang':'*' (_65,4294967231) in let <_16> = call 'erlang':'+' (_15,1) in (let <_55> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_16,(12-|['compiler_generated'] )) in (let <_57> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_16,_55) in (let <_40> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_57,(549755813887-|['compiler_generated'] )) in (let <_41> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_40,(25-|['compiler_generated'] )) in (let <_59> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_57,_41) in (let <_42> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_59,(27-|['compiler_generated'] )) in (let <_61> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_59,_42) in (let <_43> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) (_61,(2685821657736338717-|['compiler_generated'] )) in (let <_45> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_43,(18446744073709551615-|['compiler_generated'] )) in let <_20> = call 'erlang':'band' (A3,4294967295) in let <_21> = call 'erlang':'*' (_20,4294967279) in let <_22> = call 'erlang':'+' (_21,1) in (let <_56> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_22,(12-|['compiler_generated'] )) in (let <_58> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_22,_56) in (let <_48> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_58,(549755813887-|['compiler_generated'] )) in (let <_49> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_48,(25-|['compiler_generated'] )) in (let <_60> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_58,_49) in (let <_50> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_60,(27-|['compiler_generated'] )) in (let <_62> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_60,_50) in (let <_51> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) (_62,(2685821657736338717-|['compiler_generated'] )) in (let <_53> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_51,(18446744073709551615-|['compiler_generated'] )) in let <_27> = call 'erlang':'*' (_14,_45) in let <_28> = call 'erlang':'*' (_27,_53) in let <_29> = call 'erlang':'rem' (_28,18446744073709551614) in call 'erlang':'+' (_29,1)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_30> when 'true' -> (primop 'match_fail' ({'function_clause',_30})-|[{'function_name',{'exs64_seed',1}}] )-|['compiler_generated'] ) end
'exs64_next'/1 = fun (_0) -> let <_1> = call 'erlang':'bsr' (_0,12) in let <R1> = call 'erlang':'bxor' (_0,_1) in let <_6> = call 'erlang':'band' (R1,549755813887) in let <_7> = call 'erlang':'bsl' (_6,25) in let <R2> = call 'erlang':'bxor' (R1,_7) in let <_9> = call 'erlang':'bsr' (R2,27) in let <R3> = call 'erlang':'bxor' (R2,_9) in let <_13> = call 'erlang':'*' (R3,2685821657736338717) in let <_14> = call 'erlang':'band' (_13,18446744073709551615) in {_14,R3}
'exsplus_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> case apply 'seed58_nz'/2 (2,L) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<X> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (X,18446744073709551615) in case apply 'seed58'/2 (2,_4) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<{A1,A2,A3}> when 'true' -> let <_8> = call 'erlang':'*' (A1,4294967197) in let <_9> = call 'erlang':'+' (_8,1) in let <_10> = call 'erlang':'band' (_9,288230376151711743) in let <_13> = call 'erlang':'*' (A2,4294967231) in let <_14> = call 'erlang':'+' (_13,1) in let <_15> = call 'erlang':'band' (_14,288230376151711743) in (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_10,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_5) in (let <_28> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,_15) in (let <_29> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_30> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_28,_29) in (let <_31> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_15,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_30,_31) in (let <_32> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_15,NewS1) in do (call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_32,(288230376151711743-|['compiler_generated'] ))-|['compiler_generated'] ) let <R1> = [(_15-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in let <_19> = call 'erlang':'*' (A3,4294967279) in let <_20> = call 'erlang':'+' (_19,1) in let <_21> = call 'erlang':'band' (_20,288230376151711743) in let <_22> = call 'erlang':'tl' (R1) in (let <_55> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_21,(17179869183-|['compiler_generated'] )) in (let <_56> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_55,(24-|['compiler_generated'] )) in (let <_57> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_21,_56) in (let <_37> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_57,_22) in (let <_38> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_57,(11-|['compiler_generated'] )) in (let <_39> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_37,_38) in (let <_40> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_22,(41-|['compiler_generated'] )) in (let <_58> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_39,_40) in (let <_41> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (_22,_58) in do (call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_41,(288230376151711743-|['compiler_generated'] ))-|['compiler_generated'] ) ([(_22-|['compiler_generated'] )|(_58-|['compiler_generated'] )]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_24> when 'true' -> (primop 'match_fail' ({'function_clause',_24})-|[{'function_name',{'exsplus_seed',1}}] )-|['compiler_generated'] ) end
'exsss_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> case apply 'seed58_nz'/2 (2,L) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<X> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (X,18446744073709551615) in case apply 'seed58'/2 (2,_4) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<{A1,A2,A3}> when 'true' -> let <_8> = call 'erlang':'band' (A1,18446744073709551615) in case apply 'seed58'/1 (_8) of <{_21,X0}> when 'true' -> let <_12> = call 'erlang':'band' (A2,18446744073709551615) in let <_13> = call 'erlang':'bxor' (_12,X0) in case apply 'seed58'/1 (_13) of <{S0,X1}> when 'true' -> let <_17> = call 'erlang':'band' (A3,18446744073709551615) in let <_18> = call 'erlang':'bxor' (_17,X1) in case apply 'seed58'/1 (_18) of <{S1,_22}> when 'true' -> [S0|S1]
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_20> when 'true' -> (primop 'match_fail' ({'function_clause',_20})-|[{'function_name',{'exsss_seed',1}}] )-|['compiler_generated'] ) end
'exsplus_next'/1 = fun (_0) -> case _0 of <[S1|S0]> when 'true' -> let <_4> = call 'erlang':'band' (S1,17179869183) in let <_5> = call 'erlang':'bsl' (_4,24) in let <S1_1> = call 'erlang':'bxor' (S1,_5) in let <_9> = call 'erlang':'bxor' (S1_1,S0) in let <_8> = call 'erlang':'bsr' (S1_1,11) in let <_10> = call 'erlang':'bxor' (_9,_8) in let <_7> = call 'erlang':'bsr' (S0,41) in let <NewS1> = call 'erlang':'bxor' (_10,_7) in let <_14> = call 'erlang':'+' (S0,NewS1) in let <_15> = call 'erlang':'band' (_14,288230376151711743) in {_15,[S0|NewS1]}
(<_16> when 'true' -> (primop 'match_fail' ({'function_clause',_16})-|[{'function_name',{'exsplus_next',1}}] )-|['compiler_generated'] ) end
'exsss_next'/1 = fun (_0) -> case _0 of <[S1|S0]> when 'true' -> let <_4> = call 'erlang':'band' (S1,17179869183) in let <_5> = call 'erlang':'bsl' (_4,24) in let <S1_1> = call 'erlang':'bxor' (S1,_5) in let <_9> = call 'erlang':'bxor' (S1_1,S0) in let <_8> = call 'erlang':'bsr' (S1_1,11) in let <_10> = call 'erlang':'bxor' (_9,_8) in let <_7> = call 'erlang':'bsr' (S0,41) in let <NewS1> = call 'erlang':'bxor' (_10,_7) in let <_17> = call 'erlang':'band' (S0,72057594037927935) in let <_18> = call 'erlang':'bsl' (_17,2) in let <_19> = call 'erlang':'+' (S0,_18) in let <V_0> = call 'erlang':'band' (_19,288230376151711743) in let <_26> = call 'erlang':'band' (V_0,2251799813685247) in let <_27> = call 'erlang':'bsl' (_26,7) in let <_22> = call 'erlang':'bsr' (V_0,51) in let <V_1> = call 'erlang':'bor' (_27,_22) in let <_34> = call 'erlang':'band' (V_1,36028797018963967) in let <_35> = call 'erlang':'bsl' (_34,3) in let <_36> = call 'erlang':'+' (V_1,_35) in let <_37> = call 'erlang':'band' (_36,288230376151711743) in {_37,[S0|NewS1]}
(<_38> when 'true' -> (primop 'match_fail' ({'function_clause',_38})-|[{'function_name',{'exsss_next',1}}] )-|['compiler_generated'] ) end
'exsp_uniform'/1 = fun (_0) -> case _0 of <{Alg,R0}> when 'true' -> (case R0 of (<([S1|S0]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_5) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,S0) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_9,_8) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_7) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,NewS1) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_14,(288230376151711743-|['compiler_generated'] )) in let <R1> = [(S0-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in let <_3> = call 'erlang':'bsr' (_15,5) in let <_18> = call 'erlang':'*' (_3,1.110223e-16) in {_18,{Alg,R1}}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_16}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'exsp_uniform',1}}] )-|['compiler_generated'] ) end
'exsss_uniform'/1 = fun (_0) -> case _0 of <{Alg,R0}> when 'true' -> (case R0 of (<([S1|S0]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_5) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,S0) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_9,_8) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_7) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(72057594037927935-|['compiler_generated'] )) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_17,(2-|['compiler_generated'] )) in (let <_19> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,_18) in (let <V_0> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_19,(288230376151711743-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (V_0,(2251799813685247-|['compiler_generated'] )) in (let <_27> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_26,(7-|['compiler_generated'] )) in (let <_22> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (V_0,(51-|['compiler_generated'] )) in (let <V_1> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_27,_22) in (let <_34> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (V_1,(36028797018963967-|['compiler_generated'] )) in (let <_35> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_34,(3-|['compiler_generated'] )) in (let <_36> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (V_1,_35) in (let <_37> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_36,(288230376151711743-|['compiler_generated'] )) in let <R1> = [(S0-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in let <_3> = call 'erlang':'bsr' (_37,5) in let <_40> = call 'erlang':'*' (_3,1.110223e-16) in {_40,{Alg,R1}}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_38}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'exsss_uniform',1}}] )-|['compiler_generated'] ) end
'exsp_uniform'/2 = fun (_0,_1) -> case <_0,_1> of <Range,{Alg,R}> when 'true' -> (case R of (<([S1|S0]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_5) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,S0) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_9,_8) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_7) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,NewS1) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_14,(288230376151711743-|['compiler_generated'] )) in let <R1> = [(S0-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in let <MaxMinusRange> = call 'erlang':'-' (288230376151711744,Range) in case <> of <> when call 'erlang':'=<' (0,MaxMinusRange) -> case <> of <> when call 'erlang':'<' (_15,Range) -> let <_19> = call 'erlang':'+' (_15,1) in {_19,{Alg,R1}}
<> when 'true' -> let <I> = call 'erlang':'rem' (_15,Range) in case <> of <> when try let <_21> = call 'erlang':'-' (_15,I) in call 'erlang':'=<' (_21,MaxMinusRange) of <Try> -> Try catch <T,R> -> 'false' -> let <_20> = call 'erlang':'+' (I,1) in {_20,{Alg,R1}}
<> when 'true' -> apply 'exsp_uniform'/2 (Range,{Alg,R1}) end end
<> when 'true' -> apply 'uniform_range'/4 (Range,Alg,R1,_15) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_16}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'exsp_uniform',2}}] )-|['compiler_generated'] ) end
'exsss_uniform'/2 = fun (_0,_1) -> case <_0,_1> of <Range,{Alg,R}> when 'true' -> (case R of (<([S1|S0]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_5) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,S0) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_9,_8) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_7) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(72057594037927935-|['compiler_generated'] )) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_17,(2-|['compiler_generated'] )) in (let <_19> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,_18) in (let <V_0> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_19,(288230376151711743-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (V_0,(2251799813685247-|['compiler_generated'] )) in (let <_27> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_26,(7-|['compiler_generated'] )) in (let <_22> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (V_0,(51-|['compiler_generated'] )) in (let <V_1> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_27,_22) in (let <_34> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (V_1,(36028797018963967-|['compiler_generated'] )) in (let <_35> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_34,(3-|['compiler_generated'] )) in (let <_36> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (V_1,_35) in (let <_37> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_36,(288230376151711743-|['compiler_generated'] )) in let <R1> = [(S0-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in let <MaxMinusRange> = call 'erlang':'-' (288230376151711744,Range) in case <> of <> when call 'erlang':'=<' (0,MaxMinusRange) -> case <> of <> when call 'erlang':'<' (_37,Range) -> let <_41> = call 'erlang':'+' (_37,1) in {_41,{Alg,R1}}
<> when 'true' -> let <I> = call 'erlang':'rem' (_37,Range) in case <> of <> when try let <_43> = call 'erlang':'-' (_37,I) in call 'erlang':'=<' (_43,MaxMinusRange) of <Try> -> Try catch <T,R> -> 'false' -> let <_42> = call 'erlang':'+' (I,1) in {_42,{Alg,R1}}
<> when 'true' -> apply 'exsss_uniform'/2 (Range,{Alg,R1}) end end
<> when 'true' -> apply 'uniform_range'/4 (Range,Alg,R1,_37) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_38> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_38}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'exsss_uniform',2}}] )-|['compiler_generated'] ) end
'exsplus_jump'/1 = fun (_0) -> case _0 of <{Alg,S}> when 'true' -> case apply 'exsplus_jump'/4 (S,[0|0],13386170678560663,58) of <{S1,AS1}> when 'true' -> case apply 'exsplus_jump'/4 (S1,AS1,235826144310425740,58) of <{_4,AS2}> when 'true' -> {Alg,AS2}
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'exsplus_jump',1}}] )-|['compiler_generated'] ) end
'exsplus_jump'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <S,AS,_19,0> when 'true' -> {S,AS}
<S,_@r0 = [AS0|AS1],J,N> when 'true' -> (case S of (<([S1|S0]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_4> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(17179869183-|['compiler_generated'] )) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_4,(24-|['compiler_generated'] )) in (let <S1_1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_5) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1_1,S0) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_1,(11-|['compiler_generated'] )) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_9,_8) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(41-|['compiler_generated'] )) in (let <NewS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_7) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,NewS1) in do (call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_14,(288230376151711743-|['compiler_generated'] ))-|['compiler_generated'] ) let <NS> = [(S0-|['compiler_generated'] )|(NewS1-|['compiler_generated'] )] in case call 'erlang':'band' (J,1) of <1> when 'true' -> case S of <[_25|_26]> when 'true' -> let <_30> = call 'erlang':'bxor' (AS0,_25) in let <_11> = call 'erlang':'bxor' (AS1,_26) in let <_28> = call 'erlang':'bsr' (J,1) in let <_29> = call 'erlang':'-' (N,1) in apply 'exsplus_jump'/4 (NS,[_30|_11],_28,_29)
(<_31> when 'true' -> primop 'match_fail' ({'badmatch',_31})-|['compiler_generated'] ) end
<0> when 'true' -> let <_13> = call 'erlang':'bsr' (J,1) in let <_12> = call 'erlang':'-' (N,1) in apply 'exsplus_jump'/4 (NS,_@r0,_13,_12)
(<_32> when 'true' -> primop 'match_fail' ({'case_clause',_32})-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_16> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_16}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_18,_17,_16,_15> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15})-|[{'function_name',{'exsplus_jump',4}}] )-|['compiler_generated'] ) end
'exs1024_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> let <_1> = apply 'seed64_nz'/2 (16,L) in {_1,[]}
<X> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (X,18446744073709551615) in let <_5> = apply 'seed64'/2 (16,_4) in {_5,[]}
<{A1,A2,A3}> when 'true' -> let <_10> = call 'erlang':'band' (A1,2097151) in let <_11> = call 'erlang':'+' (_10,1) in let <_12> = call 'erlang':'*' (_11,2097131) in let <B1> = call 'erlang':'band' (_12,2097151) in let <_18> = call 'erlang':'band' (A2,2097151) in let <_19> = call 'erlang':'+' (_18,1) in let <_20> = call 'erlang':'*' (_19,2097133) in let <B2> = call 'erlang':'band' (_20,2097151) in let <_26> = call 'erlang':'band' (A3,2097151) in let <_27> = call 'erlang':'+' (_26,1) in let <_28> = call 'erlang':'*' (_27,2097143) in let <B3> = call 'erlang':'band' (_28,2097151) in let <_32> = call 'erlang':'bsl' (B1,43) in let <_31> = call 'erlang':'bsl' (B2,22) in let <_33> = call 'erlang':'bor' (_32,_31) in let <_30> = call 'erlang':'bsl' (B3,1) in let <_34> = call 'erlang':'bor' (_33,_30) in let <_35> = call 'erlang':'bor' (_34,1) in let <_36> = apply 'exs1024_gen1024'/1 (_35) in {_36,[]}
(<_37> when 'true' -> (primop 'match_fail' ({'function_clause',_37})-|[{'function_name',{'exs1024_seed',1}}] )-|['compiler_generated'] ) end
'exs1024_gen1024'/1 = fun (_0) -> apply 'exs1024_gen1024'/3 (16,_0,[])
'exs1024_gen1024'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <0,_8,L> when 'true' -> L
<N,R,L> when 'true' -> (let <_18> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (R,(12-|['compiler_generated'] )) in (let <R1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (R,_18) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (R1,(549755813887-|['compiler_generated'] )) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_6,(25-|['compiler_generated'] )) in (let <R2> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (R1,_7) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (R2,(27-|['compiler_generated'] )) in (let <R3> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (R2,_9) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) (R3,(2685821657736338717-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_13,(18446744073709551615-|['compiler_generated'] )) in let <_4> = call 'erlang':'-' (N,1) in apply 'exs1024_gen1024'/3 (_4,R3,[_14|L])-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end
'exs1024_calc'/2 = fun (_0,_1) -> let <_5> = call 'erlang':'band' (_1,8589934591) in let <_6> = call 'erlang':'bsl' (_5,31) in let <S11> = call 'erlang':'bxor' (_1,_6) in let <_8> = call 'erlang':'bsr' (S11,11) in let <S12> = call 'erlang':'bxor' (S11,_8) in let <_10> = call 'erlang':'bsr' (_0,30) in let <S01> = call 'erlang':'bxor' (_0,_10) in let <NS1> = call 'erlang':'bxor' (S01,S12) in let <_15> = call 'erlang':'*' (NS1,1181783497276652981) in let <_16> = call 'erlang':'band' (_15,18446744073709551615) in {_16,NS1}
'exs1024_next'/1 = fun (_0) -> case _0 of <{[S0|[S1|L3]],RL}> when 'true' -> (let <_5> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1,(8589934591-|['compiler_generated'] )) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_5,(31-|['compiler_generated'] )) in (let <S11> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,_6) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S11,(11-|['compiler_generated'] )) in (let <S12> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S11,_8) in (let <_10> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(30-|['compiler_generated'] )) in (let <S01> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S0,_10) in (let <NS1> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S01,S12) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('*'-|['compiler_generated'] ) (NS1,(1181783497276652981-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_15,(18446744073709551615-|['compiler_generated'] )) in {_16,{[NS1|L3],[S0|RL]}}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
<{[H|[]],RL}> when 'true' -> let <_2> = call 'lists':'reverse' (RL) in (case <H,_2> of (<S0,([S1|L3]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (case (apply 'exs1024_calc'/2 (S0,S1)-|['compiler_generated'] ) of (<({X,NS1}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ({X,({([NS1|L3]-|['compiler_generated'] ),([S0|([]-|['compiler_generated'] )]-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )
(<_1> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_1}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<_29,([]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_32> = call ('lists'-|['compiler_generated'] ):('reverse'-|['compiler_generated'] ) (([]-|['compiler_generated'] )) in (let <_33> = [_29|_32] in (apply 'exs1024_next'/1 (({_33,([]-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<(_34-|['compiler_generated'] ),(_35-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_25> = [(_34-|['compiler_generated'] )|(_35-|['compiler_generated'] )] in (let <_4> = {(_25-|['compiler_generated'] ),([]-|['compiler_generated'] )} in (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_4}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_4> when 'true' -> (primop 'match_fail' ({'function_clause',_4})-|[{'function_name',{'exs1024_next',1}}] )-|['compiler_generated'] ) end
'exs1024_jump'/1 = fun (_0) -> case _0 of <{Alg,_@r0 = {L,RL}}> when 'true' -> let <P> = call 'erlang':'length' (RL) in let <AS> = apply 'exs1024_jump'/6 (_@r0,[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0|[0]]]]]]]]]]]]]]]],[114527183042123105|[160423628620659260|[284733707589872850|[164435740288387503|[259572741793888962|[215793509705812255|[228241955430903492|[221708554683218499|[212006596549813798|[139215019150089363|[23964000621384961|[55201052708218217|[112969240468397636|[22130735059088892|[244278597799509466|[220175845070832114|[43243288828]]]]]]]]]]]]]]]]],10185424423732253,58,1024) in let <_3> = call 'erlang':'-' (16,P) in case call 'lists':'split' (_3,AS) of <{ASL,ASR}> when 'true' -> let <_5> = call 'lists':'reverse' (ASR) in {Alg,{ASL,_5}}
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
(<_6> when 'true' -> (primop 'match_fail' ({'function_clause',_6})-|[{'function_name',{'exs1024_jump',1}}] )-|['compiler_generated'] ) end
'exs1024_jump'/6 = fun (_0,_1,_2,_3,_4,_5) -> case <_0,_1,_2,_3,_4,_5> of <_30,AS,_31,_32,_33,0> when 'true' -> AS
<S,AS,[H|T],_34,0,TN> when 'true' -> apply 'exs1024_jump'/6 (S,AS,T,H,58,TN)
<{L,RL},AS,JL,J,N,TN> when 'true' -> case (case <L,RL> of (<([S0|([S1|L3]-|['compiler_generated'] )]-|['compiler_generated'] ),_39> when ('true'-|['compiler_generated'] ) -> (case (apply 'exs1024_calc'/2 (S0,S1)-|['compiler_generated'] ) of (<({X,NS1}-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> ({X,({([NS1|L3]-|['compiler_generated'] ),([S0|_39]-|['compiler_generated'] )}-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )
(<_40> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('badmatch'-|['compiler_generated'] ),_40}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )-|['compiler_generated'] )
(<([H|([]-|['compiler_generated'] )]-|['compiler_generated'] ),_41> when ('true'-|['compiler_generated'] ) -> (let <_42> = call ('lists'-|['compiler_generated'] ):('reverse'-|['compiler_generated'] ) (_41) in (let <NL> = [H|_42] in (apply 'exs1024_next'/1 (({NL,([]-|['compiler_generated'] )}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<(_37-|['compiler_generated'] ),(_38-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_44> = {(_37-|['compiler_generated'] ),(_38-|['compiler_generated'] )} in (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_44}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] ) of <{_35,NS}> when 'true' -> case call 'erlang':'band' (J,1) of <1> when 'true' -> let <_15> = fun (_12,_11) -> call 'erlang':'bxor' (_12,_11) in let <_9> = call 'lists':'reverse' (RL) in let <_10> = call 'erlang':'++' (L,_9) in let <AS2> = call 'lists':'zipwith' (_15,AS,_10) in let <_19> = call 'erlang':'bsr' (J,1) in let <_18> = call 'erlang':'-' (N,1) in let <_17> = call 'erlang':'-' (TN,1) in apply 'exs1024_jump'/6 (NS,AS2,JL,_19,_18,_17)
<0> when 'true' -> let <_22> = call 'erlang':'bsr' (J,1) in let <_21> = call 'erlang':'-' (N,1) in let <_20> = call 'erlang':'-' (TN,1) in apply 'exs1024_jump'/6 (NS,AS,JL,_22,_21,_20)
(<_23> when 'true' -> primop 'match_fail' ({'case_clause',_23})-|['compiler_generated'] ) end
(<_6> when 'true' -> primop 'match_fail' ({'badmatch',_6})-|['compiler_generated'] ) end
(<_29,_28,_27,_26,_25,_24> when 'true' -> (primop 'match_fail' ({'function_clause',_29,_28,_27,_26,_25,_24})-|[{'function_name',{'exs1024_jump',6}}] )-|['compiler_generated'] ) end
'exro928_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> let <_1> = apply 'seed58_nz'/2 (16,L) in {_1,[]}
<X> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (X,18446744073709551615) in let <_5> = apply 'seed58'/2 (16,_4) in {_5,[]}
<{A1,A2,A3}> when 'true' -> let <_8> = call 'erlang':'band' (A1,18446744073709551615) in case apply 'seed58'/1 (_8) of <{S0,X0}> when 'true' -> let <_12> = call 'erlang':'band' (A2,18446744073709551615) in let <_13> = call 'erlang':'bxor' (_12,X0) in case apply 'seed58'/1 (_13) of <{S1,X1}> when 'true' -> let <_17> = call 'erlang':'band' (A3,18446744073709551615) in let <_18> = call 'erlang':'bxor' (_17,X1) in case apply 'seed58'/1 (_18) of <{S2,X2}> when 'true' -> let <_20> = apply 'seed58'/2 (13,X2) in {[S0|[S1|[S2|_20]]],[]}
(<_19> when 'true' -> primop 'match_fail' ({'badmatch',_19})-|['compiler_generated'] ) end
(<_14> when 'true' -> primop 'match_fail' ({'badmatch',_14})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_21> when 'true' -> (primop 'match_fail' ({'function_clause',_21})-|[{'function_name',{'exro928_seed',1}}] )-|['compiler_generated'] ) end
'exro928ss_next'/1 = fun (_0) -> case _0 of <{[S15|[S0|Ss]],Rs}> when 'true' -> (let <Q> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S15,S0) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(16383-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_15,(44-|['compiler_generated'] )) in (let <_11> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(14-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_16,_11) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_17,Q) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(562949953421311-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_8,(9-|['compiler_generated'] )) in (let <NewS15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_18,_9) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(8191-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_25,(45-|['compiler_generated'] )) in (let <_21> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (Q,(13-|['compiler_generated'] )) in (let <NewS0> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_26,_21) in let <SR> = {([NewS0|Ss]-|['compiler_generated'] ),([NewS15|Rs]-|['compiler_generated'] )} in let <_7> = call 'erlang':'band' (S0,72057594037927935) in let <_43> = call 'erlang':'bsl' (_7,2) in let <_44> = call 'erlang':'+' (S0,_43) in let <V_0> = call 'erlang':'band' (_44,288230376151711743) in let <_41> = call 'erlang':'band' (V_0,2251799813685247) in let <_42> = call 'erlang':'bsl' (_41,7) in let <_12> = call 'erlang':'bsr' (V_0,51) in let <V_1> = call 'erlang':'bor' (_42,_12) in let <_24> = call 'erlang':'band' (V_1,36028797018963967) in let <_45> = call 'erlang':'bsl' (_24,3) in let <_46> = call 'erlang':'+' (V_1,_45) in let <_27> = call 'erlang':'band' (_46,288230376151711743) in {_27,SR}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
<{[S15|[]],Rs}> when 'true' -> let <_28> = call 'lists':'reverse' (Rs) in apply 'exro928ss_next'/1 ({[S15|_28],[]})
(<_29> when 'true' -> (primop 'match_fail' ({'function_clause',_29})-|[{'function_name',{'exro928ss_next',1}}] )-|['compiler_generated'] ) end
'exro928_next'/1 = fun (_0) -> case _0 of <{[S15|[S0|Ss]],Rs}> when 'true' -> (let <Q> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S15,S0) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(16383-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_15,(44-|['compiler_generated'] )) in (let <_11> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(14-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_16,_11) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_17,Q) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(562949953421311-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_8,(9-|['compiler_generated'] )) in (let <NewS15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_18,_9) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(8191-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_25,(45-|['compiler_generated'] )) in (let <_21> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (Q,(13-|['compiler_generated'] )) in (let <NewS0> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_26,_21) in let <SR> = {([NewS0|Ss]-|['compiler_generated'] ),([NewS15|Rs]-|['compiler_generated'] )} in {{S15,S0},SR}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
<{[S15|[]],Rs}> when 'true' -> let <_2> = call 'lists':'reverse' (Rs) in apply 'exro928_next'/1 ({[S15|_2],[]})
(<_3> when 'true' -> (primop 'match_fail' ({'function_clause',_3})-|[{'function_name',{'exro928_next',1}}] )-|['compiler_generated'] ) end
'exro928_next_state'/1 = fun (_0) -> case _0 of <{[S15|[S0|Ss]],Rs}> when 'true' -> (let <Q> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S15,S0) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(16383-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_15,(44-|['compiler_generated'] )) in (let <_11> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(14-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_16,_11) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_17,Q) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(562949953421311-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_8,(9-|['compiler_generated'] )) in (let <NewS15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_18,_9) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(8191-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_25,(45-|['compiler_generated'] )) in (let <_21> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (Q,(13-|['compiler_generated'] )) in (let <NewS0> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_26,_21) in ({([NewS0|Ss]-|['compiler_generated'] ),([NewS15|Rs]-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
<{[S15|[]],Rs}> when 'true' -> case call 'lists':'reverse' (Rs) of <[S0|Ss]> when 'true' -> (let <Q> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S15,S0) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(16383-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_15,(44-|['compiler_generated'] )) in (let <_11> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(14-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_16,_11) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_17,Q) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(562949953421311-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_8,(9-|['compiler_generated'] )) in (let <NewS15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_18,_9) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (Q,(8191-|['compiler_generated'] )) in (let <_26> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_25,(45-|['compiler_generated'] )) in (let <_21> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (Q,(13-|['compiler_generated'] )) in (let <NewS0> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_26,_21) in ({([NewS0|Ss]-|['compiler_generated'] ),([NewS15|([]-|['compiler_generated'] )]-|['compiler_generated'] )}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'exro928_next_state',1}}] )-|['compiler_generated'] ) end
'exro928_next_state'/4 = fun (_0,_1,_2,_3) -> let <Q> = call 'erlang':'bxor' (_2,_3) in let <_15> = call 'erlang':'band' (_3,16383) in let <_16> = call 'erlang':'bsl' (_15,44) in let <_11> = call 'erlang':'bsr' (_3,14) in let <_17> = call 'erlang':'bor' (_16,_11) in let <_18> = call 'erlang':'bxor' (_17,Q) in let <_8> = call 'erlang':'band' (Q,562949953421311) in let <_9> = call 'erlang':'bsl' (_8,9) in let <NewS15> = call 'erlang':'bxor' (_18,_9) in let <_25> = call 'erlang':'band' (Q,8191) in let <_26> = call 'erlang':'bsl' (_25,45) in let <_21> = call 'erlang':'bsr' (Q,13) in let <NewS0> = call 'erlang':'bor' (_26,_21) in {[NewS0|_0],[NewS15|_1]}
'exro928ss_uniform'/1 = fun (_0) -> case _0 of <{Alg,SR}> when 'true' -> case apply 'exro928ss_next'/1 (SR) of <{V,NewSR}> when 'true' -> let <_3> = call 'erlang':'bsr' (V,5) in let <_4> = call 'erlang':'*' (_3,1.110223e-16) in {_4,{Alg,NewSR}}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'exro928ss_uniform',1}}] )-|['compiler_generated'] ) end
'exro928ss_uniform'/2 = fun (_0,_1) -> case <_0,_1> of <Range,{Alg,SR}> when 'true' -> case apply 'exro928ss_next'/1 (SR) of <{V,NewSR}> when 'true' -> let <MaxMinusRange> = call 'erlang':'-' (288230376151711744,Range) in case <> of <> when call 'erlang':'=<' (0,MaxMinusRange) -> case <> of <> when call 'erlang':'<' (V,Range) -> let <_5> = call 'erlang':'+' (V,1) in {_5,{Alg,NewSR}}
<> when 'true' -> let <I> = call 'erlang':'rem' (V,Range) in case <> of <> when try let <_7> = call 'erlang':'-' (V,I) in call 'erlang':'=<' (_7,MaxMinusRange) of <Try> -> Try catch <T,R> -> 'false' -> let <_8> = call 'erlang':'+' (I,1) in {_8,{Alg,NewSR}}
<> when 'true' -> apply 'exro928ss_uniform'/2 (Range,{Alg,NewSR}) end end
<> when 'true' -> apply 'uniform_range'/4 (Range,Alg,NewSR,V) end
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'exro928ss_uniform',2}}] )-|['compiler_generated'] ) end
'exro928_jump'/1 = fun (_0) -> case _0 of <{Alg,SR}> when 'true' -> let <_1> = apply 'exro928_jump_2pow512'/1 (SR) in {Alg,_1}
(<_2> when 'true' -> (primop 'match_fail' ({'function_clause',_2})-|[{'function_name',{'exro928_jump',1}}] )-|['compiler_generated'] ) end
'exro928_jump_2pow512'/1 = fun (_0) -> let <_1> = 'exro928_next_state'/1 in apply 'polyjump'/3 (_0,_1,[290573448171827402|[382251779910418577|[423857156240780192|[317638803078791815|[312577798172065765|[305801842905235492|[450887821400921554|[490154825290594607|[507224882549817556|[305131922350994371|[524004876356613068|[399286492428034246|[556129459533271918|[302163523288674092|[295571835370094372|[487547435355635071]]]]]]]]]]]]]]]])
'exro928_jump_2pow20'/1 = fun (_0) -> let <_1> = 'exro928_next_state'/1 in apply 'polyjump'/3 (_0,_1,[412473694820566502|[432883605991317039|[525373508288112196|[403915169708599875|[319067783491633768|[301226760020322060|[311627678308842608|[376040681981803602|[339701046172540810|[406476937554306621|[319178240279900411|[538961455727032748|[343829982822907227|[562090186051299616|[294421712295949406|[517056752316592047]]]]]]]]]]]]]]]])
'exrop_seed'/1 = fun (_0) -> case _0 of <L> when call 'erlang':'is_list' (_0) -> case apply 'seed58_nz'/2 (2,L) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<X> when call 'erlang':'is_integer' (_0) -> let <_4> = call 'erlang':'band' (X,18446744073709551615) in case apply 'seed58'/2 (2,_4) of <[S0|[S1|[]]]> when 'true' -> [S0|S1]
(<_5> when 'true' -> primop 'match_fail' ({'badmatch',_5})-|['compiler_generated'] ) end
<{A1,A2,A3}> when 'true' -> let <_13> = call 'erlang':'*' (A1,4294967197) in let <_14> = call 'erlang':'+' (_13,1) in let <_15> = call 'erlang':'band' (_14,288230376151711743) in let <_8> = call 'erlang':'*' (A2,4294967231) in let <_9> = call 'erlang':'+' (_8,1) in let <_10> = call 'erlang':'band' (_9,288230376151711743) in (let <S1_a> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_10,_15) in (let <_32> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_15,(17179869183-|['compiler_generated'] )) in (let <_33> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_32,(24-|['compiler_generated'] )) in (let <_35> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_15,(34-|['compiler_generated'] )) in (let <_36> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_33,_35) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_36,S1_a) in (let <_37> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(72057594037927935-|['compiler_generated'] )) in (let <_38> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_37,(2-|['compiler_generated'] )) in do (call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_16,_38)-|['compiler_generated'] ) (let <_23> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(8388607-|['compiler_generated'] )) in (let <_24> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_23,(35-|['compiler_generated'] )) in (let <_19> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_a,(23-|['compiler_generated'] )) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_24,_19) in let <_66> = call 'erlang':'*' (A3,4294967279) in let <_20> = call 'erlang':'+' (_66,1) in let <_21> = call 'erlang':'band' (_20,288230376151711743) in (let <_61> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_25,_21) in (let <_46> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_21,(17179869183-|['compiler_generated'] )) in (let <_47> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_46,(24-|['compiler_generated'] )) in (let <_49> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_21,(34-|['compiler_generated'] )) in (let <_50> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_47,_49) in (let <_62> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_50,_61) in (let <_51> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_61,(72057594037927935-|['compiler_generated'] )) in (let <_52> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_51,(2-|['compiler_generated'] )) in (let <_53> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_62,_52) in (let <_56> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_61,(8388607-|['compiler_generated'] )) in (let <_65> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_56,(35-|['compiler_generated'] )) in (let <_58> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (_61,(23-|['compiler_generated'] )) in (let <_69> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_65,_58) in ([_53|_69]-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_22> when 'true' -> (primop 'match_fail' ({'function_clause',_22})-|[{'function_name',{'exrop_seed',1}}] )-|['compiler_generated'] ) end
'exrop_next_s'/2 = fun (_0,_1) -> let <S1_a> = call 'erlang':'bxor' (_1,_0) in let <_13> = call 'erlang':'band' (_0,17179869183) in let <_14> = call 'erlang':'bsl' (_13,24) in let <_9> = call 'erlang':'bsr' (_0,34) in let <_15> = call 'erlang':'bor' (_14,_9) in let <_16> = call 'erlang':'bxor' (_15,S1_a) in let <_6> = call 'erlang':'band' (S1_a,72057594037927935) in let <_7> = call 'erlang':'bsl' (_6,2) in let <_17> = call 'erlang':'bxor' (_16,_7) in let <_23> = call 'erlang':'band' (S1_a,8388607) in let <_24> = call 'erlang':'bsl' (_23,35) in let <_19> = call 'erlang':'bsr' (S1_a,23) in let <_25> = call 'erlang':'bor' (_24,_19) in [_17|_25]
'exrop_next'/1 = fun (_0) -> case _0 of <[S0|S1]> when 'true' -> let <_27> = call 'erlang':'+' (S0,S1) in let <_28> = call 'erlang':'band' (_27,288230376151711743) in let <S1_a> = call 'erlang':'bxor' (S1,S0) in let <_12> = call 'erlang':'band' (S0,17179869183) in let <_13> = call 'erlang':'bsl' (_12,24) in let <_8> = call 'erlang':'bsr' (S0,34) in let <_14> = call 'erlang':'bor' (_13,_8) in let <_15> = call 'erlang':'bxor' (_14,S1_a) in let <_5> = call 'erlang':'band' (S1_a,72057594037927935) in let <_6> = call 'erlang':'bsl' (_5,2) in let <_16> = call 'erlang':'bxor' (_15,_6) in let <_22> = call 'erlang':'band' (S1_a,8388607) in let <_23> = call 'erlang':'bsl' (_22,35) in let <_18> = call 'erlang':'bsr' (S1_a,23) in let <_24> = call 'erlang':'bor' (_23,_18) in {_28,[_16|_24]}
(<_29> when 'true' -> (primop 'match_fail' ({'function_clause',_29})-|[{'function_name',{'exrop_next',1}}] )-|['compiler_generated'] ) end
'exrop_uniform'/1 = fun (_0) -> case _0 of <{Alg,R}> when 'true' -> (case R of (<([S0|S1]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_27> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,S1) in (let <_28> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_27,(288230376151711743-|['compiler_generated'] )) in (let <S1_a> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,S0) in (let <_12> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(17179869183-|['compiler_generated'] )) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_12,(24-|['compiler_generated'] )) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(34-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_13,_8) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_14,S1_a) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(72057594037927935-|['compiler_generated'] )) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_5,(2-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_15,_6) in (let <_22> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(8388607-|['compiler_generated'] )) in (let <_23> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_22,(35-|['compiler_generated'] )) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_a,(23-|['compiler_generated'] )) in (let <_24> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_23,_18) in let <R1> = [(_16-|['compiler_generated'] )|(_24-|['compiler_generated'] )] in let <_3> = call 'erlang':'bsr' (_28,5) in let <_4> = call 'erlang':'*' (_3,1.110223e-16) in {_4,{Alg,R1}}-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_29}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_5> when 'true' -> (primop 'match_fail' ({'function_clause',_5})-|[{'function_name',{'exrop_uniform',1}}] )-|['compiler_generated'] ) end
'exrop_uniform'/2 = fun (_0,_1) -> case <_0,_1> of <Range,{Alg,R}> when 'true' -> (case R of (<([S0|S1]-|['compiler_generated'] )> when ('true'-|['compiler_generated'] ) -> (let <_27> = call ('erlang'-|['compiler_generated'] ):('+'-|['compiler_generated'] ) (S0,S1) in (let <_28> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (_27,(288230376151711743-|['compiler_generated'] )) in (let <S1_a> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S1,S0) in (let <_12> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S0,(17179869183-|['compiler_generated'] )) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_12,(24-|['compiler_generated'] )) in (let <_8> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S0,(34-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_13,_8) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_14,S1_a) in (let <_5> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(72057594037927935-|['compiler_generated'] )) in (let <_6> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_5,(2-|['compiler_generated'] )) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_15,_6) in (let <_22> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(8388607-|['compiler_generated'] )) in (let <_23> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_22,(35-|['compiler_generated'] )) in (let <_18> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_a,(23-|['compiler_generated'] )) in (let <_24> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_23,_18) in let <R1> = [(_16-|['compiler_generated'] )|(_24-|['compiler_generated'] )] in let <MaxMinusRange> = call 'erlang':'-' (288230376151711744,Range) in case <> of <> when call 'erlang':'=<' (0,MaxMinusRange) -> case <> of <> when call 'erlang':'<' (_28,Range) -> let <_32> = call 'erlang':'+' (_28,1) in {_32,{Alg,R1}}
<> when 'true' -> let <I> = call 'erlang':'rem' (_28,Range) in case <> of <> when try let <_7> = call 'erlang':'-' (_28,I) in call 'erlang':'=<' (_7,MaxMinusRange) of <Try> -> Try catch <T,R> -> 'false' -> let <_31> = call 'erlang':'+' (I,1) in {_31,{Alg,R1}}
<> when 'true' -> apply 'exrop_uniform'/2 (Range,{Alg,R1}) end end
<> when 'true' -> apply 'uniform_range'/4 (Range,Alg,R1,_28) end-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_29> when ('true'-|['compiler_generated'] ) -> (primop ('match_fail'-|['compiler_generated'] ) (({('function_clause'-|['compiler_generated'] ),_29}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end-|['compiler_generated'] )
(<_10,_9> when 'true' -> (primop 'match_fail' ({'function_clause',_10,_9})-|[{'function_name',{'exrop_uniform',2}}] )-|['compiler_generated'] ) end
'exrop_jump'/1 = fun (_0) -> case _0 of <{Alg,S}> when 'true' -> let <_8> = apply 'exrop_jump'/5 (S,0,0,437175934663831850,[171572743241724754]) in {Alg,_8}
(<_9> when 'true' -> (primop 'match_fail' ({'function_clause',_9})-|[{'function_name',{'exrop_jump',1}}] )-|['compiler_generated'] ) end
'exrop_jump'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <_X_S,S0,S1,0,[]> when 'true' -> [S0|S1]
<S,S0,S1,1,[J|Js]> when 'true' -> apply 'exrop_jump'/5 (S,S0,S1,J,Js)
<_X_S = [S__0|S__1],S0,S1,J,Js> when 'true' -> case call 'erlang':'band' (J,1) of <1> when 'true' -> (let <S1_a> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S__1,S__0) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S__0,(17179869183-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_13,(24-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S__0,(34-|['compiler_generated'] )) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_14,_9) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_15,S1_a) in (let <_35> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(72057594037927935-|['compiler_generated'] )) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_35,(2-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_16,_7) in (let <_23> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(8388607-|['compiler_generated'] )) in (let <_24> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_23,(35-|['compiler_generated'] )) in (let <_19> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_a,(23-|['compiler_generated'] )) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_24,_19) in let <NewS> = [_17|_25] in let <_10> = call 'erlang':'bxor' (S0,S__0) in let <_48> = call 'erlang':'bxor' (S1,S__1) in let <_8> = call 'erlang':'bsr' (J,1) in apply 'exrop_jump'/5 (NewS,_10,_48,_8,Js)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
<0> when 'true' -> (let <S1_a> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (S__1,S__0) in (let <_13> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S__0,(17179869183-|['compiler_generated'] )) in (let <_14> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_13,(24-|['compiler_generated'] )) in (let <_9> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S__0,(34-|['compiler_generated'] )) in (let <_15> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_14,_9) in (let <_16> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_15,S1_a) in (let <_45> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(72057594037927935-|['compiler_generated'] )) in (let <_7> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_45,(2-|['compiler_generated'] )) in (let <_17> = call ('erlang'-|['compiler_generated'] ):('bxor'-|['compiler_generated'] ) (_16,_7) in (let <_23> = call ('erlang'-|['compiler_generated'] ):('band'-|['compiler_generated'] ) (S1_a,(8388607-|['compiler_generated'] )) in (let <_24> = call ('erlang'-|['compiler_generated'] ):('bsl'-|['compiler_generated'] ) (_23,(35-|['compiler_generated'] )) in (let <_19> = call ('erlang'-|['compiler_generated'] ):('bsr'-|['compiler_generated'] ) (S1_a,(23-|['compiler_generated'] )) in (let <_25> = call ('erlang'-|['compiler_generated'] ):('bor'-|['compiler_generated'] ) (_24,_19) in let <NewS> = [_17|_25] in let <_12> = call 'erlang':'bsr' (J,1) in apply 'exrop_jump'/5 (NewS,S0,S1,_12,Js)-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )-|['compiler_generated'] )
(<_13> when 'true' -> primop 'match_fail' ({'case_clause',_13})-|['compiler_generated'] ) end
(<_18,_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_18,_17,_16,_15,_14})-|[{'function_name',{'exrop_jump',5}}] )-|['compiler_generated'] ) end
'seed58_nz'/2 = fun (_0,_1) -> apply 'seed_nz'/4 (_0,_1,58,'false')
'seed64_nz'/2 = fun (_0,_1) -> apply 'seed_nz'/4 (_0,_1,64,'false')
'seed_nz'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_N,[],_X_M,'false'> when 'true' -> call 'erlang':'error' ('zero_seed')
<0,[_18|_19],_X_M,_X_NZ> when 'true' -> call 'erlang':'error' ('too_many_seed_integers')
<0,[],_X_M,_X_NZ> when 'true' -> []
<N,[],M,'true'> when 'true' -> let <_4> = call 'erlang':'-' (N,1) in let <_5> = apply 'seed_nz'/4 (_4,[],M,'true') in [0|_5]
<N,[S|Ss],M,NZ> when 'true' -> case <> of <> when call 'erlang':'is_integer' (S) -> let <_6> = call 'erlang':'bsl' (1,M) in let <_7> = call 'erlang':'-' (_6,1) in let <R> = call 'erlang':'band' (S,_7) in let <_12> = call 'erlang':'-' (N,1) in let <_11> = case NZ of (<('true'-|['compiler_generated'] )> when 'true' -> 'true'-|['compiler_generated'] )
(<('false'-|['compiler_generated'] )> when 'true' -> call 'erlang':'=/=' (R,0)-|['compiler_generated'] )
(<_9> when 'true' -> (call ('erlang'-|['compiler_generated'] ):('error'-|['compiler_generated'] ) (({('badarg'-|['compiler_generated'] ),_9}-|['compiler_generated'] ))-|['compiler_generated'] )-|['compiler_generated'] ) end in let <_13> = apply 'seed_nz'/4 (_12,Ss,M,_11) in [R|_13]
<> when 'true' -> call 'erlang':'error' ('non_integer_seed') end
(<_17,_16,_15,_14> when 'true' -> (primop 'match_fail' ({'function_clause',_17,_16,_15,_14})-|[{'function_name',{'seed_nz',4}}] )-|['compiler_generated'] ) end
'seed58'/2 = fun (_0,_1) -> case <_0,_1> of <0,_X_X> when 'true' -> []
<N,X> when 'true' -> case apply 'seed58'/1 (X) of <{Z,NewX}> when 'true' -> let <_3> = call 'erlang':'-' (N,1) in let <_4> = apply 'seed58'/2 (_3,NewX) in [Z|_4]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
'seed58'/1 = fun (_0) -> case apply 'splitmix64_next'/1 (_0) of <{Z0,X}> when 'true' -> case call 'erlang':'band' (Z0,288230376151711743) of <0> when 'true' -> apply 'seed58'/1 (X)
<Z> when 'true' -> {Z,X} end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'seed64'/2 = fun (_0,_1) -> case <_0,_1> of <0,_X_X> when 'true' -> []
<N,X> when 'true' -> case apply 'seed64'/1 (X) of <{Z,NewX}> when 'true' -> let <_3> = call 'erlang':'-' (N,1) in let <_4> = apply 'seed64'/2 (_3,NewX) in [Z|_4]
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end end
'seed64'/1 = fun (_0) -> case apply 'splitmix64_next'/1 (_0) of <ZX = {Z,X}> when 'true' -> case <> of <> when call 'erlang':'=:=' (Z,0) -> apply 'seed64'/1 (X)
<> when 'true' -> ZX end
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
'splitmix64_next'/1 = fun (_0) -> let <_3> = call 'erlang':'+' (_0,11400714819323198485) in let <X> = call 'erlang':'band' (_3,18446744073709551615) in let <_7> = call 'erlang':'bsr' (X,30) in let <_8> = call 'erlang':'bxor' (X,_7) in let <_9> = call 'erlang':'*' (_8,13787848793156543929) in let <Z_0> = call 'erlang':'band' (_9,18446744073709551615) in let <_13> = call 'erlang':'bsr' (Z_0,27) in let <_14> = call 'erlang':'bxor' (Z_0,_13) in let <_15> = call 'erlang':'*' (_14,10723151780598845931) in let <Z_1> = call 'erlang':'band' (_15,18446744073709551615) in let <_19> = call 'erlang':'bsr' (Z_1,31) in let <_20> = call 'erlang':'bxor' (Z_1,_19) in let <_21> = call 'erlang':'band' (_20,18446744073709551615) in {_21,X}
'polyjump'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <SR = {Ss,Rs},NextState,JumpConst> when 'true' -> let <_4> = call 'erlang':'length' (Ss) in let <_3> = call 'erlang':'length' (Rs) in let <_5> = call 'erlang':'+' (_4,_3) in let <Ts> = call 'lists':'duplicate' (_5,0) in apply 'polyjump'/4 (SR,NextState,JumpConst,Ts)
(<_9,_8,_7> when 'true' -> (primop 'match_fail' ({'function_clause',_9,_8,_7})-|[{'function_name',{'polyjump',3}}] )-|['compiler_generated'] ) end
'polyjump'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <_X_SR,_X_NextState,[],Ts> when 'true' -> {Ts,[]}
<SR,NextState,[J|Js],Ts> when 'true' -> apply 'polyjump'/5 (SR,NextState,Js,Ts,J)
(<_7,_6,_5,_4> when 'true' -> (primop 'match_fail' ({'function_clause',_7,_6,_5,_4})-|[{'function_name',{'polyjump',4}}] )-|['compiler_generated'] ) end
'polyjump'/5 = fun (_0,_1,_2,_3,_4) -> case <_0,_1,_2,_3,_4> of <SR,NextState,Js,Ts,1> when 'true' -> apply 'polyjump'/4 (SR,NextState,Js,Ts)
<SR = {Ss,Rs},NextState,Js,Ts,J> when call 'erlang':'=/=' (J,0) -> let <NewSR> = apply NextState (SR) in let <NewJ> = call 'erlang':'bsr' (J,1) in case call 'erlang':'band' (J,1) of <0> when 'true' -> apply 'polyjump'/5 (NewSR,NextState,Js,Ts,NewJ)
<1> when 'true' -> let <_9> = apply 'xorzip_sr'/3 (Ts,Ss,Rs) in apply 'polyjump'/5 (NewSR,NextState,Js,_9,NewJ)
(<_10> when 'true' -> primop 'match_fail' ({'case_clause',_10})-|['compiler_generated'] ) end
(<_15,_14,_13,_12,_11> when 'true' -> (primop 'match_fail' ({'function_clause',_15,_14,_13,_12,_11})-|[{'function_name',{'polyjump',5}}] )-|['compiler_generated'] ) end
'xorzip_sr'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <[],[],'undefined'> when 'true' -> []
<Ts,[],Rs> when 'true' -> let <_3> = call 'lists':'reverse' (Rs) in apply 'xorzip_sr'/3 (Ts,_3,'undefined')
<[T|Ts],[S|Ss],Rs> when 'true' -> let <_4> = call 'erlang':'bxor' (T,S) in let <_5> = apply 'xorzip_sr'/3 (Ts,Ss,Rs) in [_4|_5]
(<_8,_7,_6> when 'true' -> (primop 'match_fail' ({'function_clause',_8,_7,_6})-|[{'function_name',{'xorzip_sr',3}}] )-|['compiler_generated'] ) end
'format_jumpconst58'/1 = fun (_0) -> case call 're':'run' (_0,[48|[120|[40|[91|[97|[45|[122|[65|[45|[90|[48|[45|[57|[93|[43|[41]]]]]]]]]]]]]]]],[{'newline','any'}|[{'capture','all_but_first','binary'}|['global']]]) of <{'match',Matches}> when 'true' -> let <_3> = call 'lists':'reverse' (Matches) in apply 'format_jumcons58_matches'/2 (_3,0)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'format_jumcons58_matches'/2 = fun (_0,_1) -> case <_0,_1> of <[],J> when 'true' -> apply 'format_jumpconst58_value'/1 (J)
<[[Bin|[]]|Matches],J> when 'true' -> let <_3> = call 'erlang':'bsl' (J,64) in let <_2> = call 'erlang':'binary_to_integer' (Bin,16) in let <NewJ> = call 'erlang':'bor' (_3,_2) in apply 'format_jumcons58_matches'/2 (Matches,NewJ)
(<_6,_5> when 'true' -> (primop 'match_fail' ({'function_clause',_6,_5})-|[{'function_name',{'format_jumcons58_matches',2}}] )-|['compiler_generated'] ) end
'format_jumpconst58_value'/1 = fun (_0) -> case _0 of <0> when 'true' -> 'ok'
<J> when 'true' -> let <_4> = call 'erlang':'band' (J,288230376151711743) in let <_5> = call 'erlang':'bor' (_4,288230376151711744) in let <_6> = call 'erlang':'integer_to_list' (_5,16) in do call 'io':'format' ([49|[54|[35|[126|[115|[44|[126|[110]]]]]]]],[_6|[]]) let <_7> = call 'erlang':'bsr' (J,58) in apply 'format_jumpconst58_value'/1 (_7) end
'get_52'/1 = fun (_0) -> case _0 of <{Alg = ~{'next':=Next,'bits':=Bits}~,S0}> when 'true' -> case apply Next (S0) of <{Int,S1}> when 'true' -> let <_4> = call 'erlang':'-' (Bits,51) in let <_5> = call 'erlang':'-' (_4,1) in let <_6> = call 'erlang':'bsl' (1,_5) in let <_7> = call 'erlang':'band' (_6,Int) in let <_2> = call 'erlang':'-' (Bits,51) in let <_3> = call 'erlang':'bsr' (Int,_2) in {_7,_3,{Alg,S1}}
(<_1> when 'true' -> primop 'match_fail' ({'badmatch',_1})-|['compiler_generated'] ) end
<{Alg = ~{'next':=Next}~,S0}> when 'true' -> case apply Next (S0) of <{Int,S1}> when 'true' -> let <_13> = call 'erlang':'band' (2251799813685248,Int) in let <_11> = call 'erlang':'band' (Int,2251799813685247) in {_13,_11,{Alg,S1}}
(<_8> when 'true' -> primop 'match_fail' ({'badmatch',_8})-|['compiler_generated'] ) end
(<_14> when 'true' -> (primop 'match_fail' ({'function_clause',_14})-|[{'function_name',{'get_52',1}}] )-|['compiler_generated'] ) end
'normal_s'/4 = fun (_0,_1,_2,_3) -> case <_0,_1,_2,_3> of <0,Sign,X0,State0> when 'true' -> case apply 'uniform_s'/1 (State0) of <{U0,S1}> when 'true' -> let <_5> = call 'math':'log' (U0) in let <X> = call 'erlang':'*' (-0.27366123,_5) in case apply 'uniform_s'/1 (S1) of <{U1,S2}> when 'true' -> let <_10> = call 'math':'log' (U1) in let <Y> = call 'erlang':'-' (_10) in let <_13> = call 'erlang':'+' (Y,Y) in let <_12> = call 'erlang':'*' (X,X) in case call 'erlang':'>' (_13,_12) of <'false'> when 'true' -> apply 'normal_s'/4 (0,Sign,X0,S2)
<'true'> when call 'erlang':'=:=' (Sign,0) -> let <_14> = call 'erlang':'+' (3.6541529,X) in {_14,S2}
<'true'> when 'true' -> let <_16> = call 'erlang':'-' (-3.6541529,X) in {_16,S2}
(<_17> when 'true' -> primop 'match_fail' ({'case_clause',_17})-|['compiler_generated'] ) end
(<_9> when 'true' -> primop 'match_fail' ({'badmatch',_9})-|['compiler_generated'] ) end
(<_4> when 'true' -> primop 'match_fail' ({'badmatch',_4})-|['compiler_generated'] ) end
<Idx,_X_Sign,X,State0> when 'true' -> let <_18> = call 'erlang':'+' (Idx,1) in let <Fi2> = apply 'normal_fi'/1 (_18) in case apply 'uniform_s'/1 (State0) of <{U0,S1}> when 'true' -> let <_25> = apply 'normal_fi'/1 (Idx) in let <_26> = call 'erlang':'-' (_25,Fi2) in let <_27> = call 'erlang':'*' (_26,U0) in let <_28> = call 'erlang':'+' (_27,Fi2) in let <_22> = call 'erlang':'*' (-0.5,X) in let <_23> = call 'erlang':'*' (_22,X) in let <_24> = call 'math':'exp' (_23) in case <> of <> when call 'erlang':'<' (_28,_24) -> {X,S1}
<> when 'true' -> apply 'normal_s'/1 (S1) end
(<_20> when 'true' -> primop 'match_fail' ({'badmatch',_20})-|['compiler_generated'] ) end end
'normal_kiwi'/1 = fun (_0) -> call 'erlang':'element' (_0,{{2104047571236786,1.7367254e-15},{0,9.55866e-17},{1693657211986787,1.2708705e-16},{1919380038271141,1.4909741e-16},{2015384402196343,1.6658733e-16},{2068365869448128,1.813612e-16},{2101878624052573,1.942972e-16},{2124958784102998,2.0589501e-16},{2141808670795147,2.164686e-16},{2154644611568301,2.262294e-16},{2164744887587275,2.353272e-16},{2172897953696594,2.4387235e-16},{2179616279372365,2.5194879e-16},{2185247251868649,2.59622e-16},{2190034623107822,2.6694407e-16},{2194154434521197,2.739573e-16},{2197736978774660,2.8069645e-16},{2200880740891961,2.871906e-16},{2203661538010620,2.9346417e-16},{2206138681109102,2.995381e-16},{2208359231806599,3.054303e-16},{2210361007258210,3.1115636e-16},{2212174742388539,3.167299e-16},{2213825672704646,3.2216281e-16},{2215334711002614,3.2746572e-16},{2216719334487595,3.3264797e-16},{2217994262139172,3.3771804e-16},{2219171977965032,3.426834e-16},{2220263139538712,3.4755088e-16},{2221276900117330,3.5232664e-16},{2222221164932930,3.5701623e-16},{2223102796829069,3.616248e-16},{2223927782546658,3.6615696e-16},{2224701368170060,3.7061702e-16},{2225428170204312,3.7500888e-16},{2226112267248242,3.793362e-16},{2226757276105256,3.8360227e-16},{2227366415328399,3.8781025e-16},{2227942558554684,3.9196301e-16},{2228488279492521,3.960632e-16},{2229005890047222,4.0011338e-16},{2229497472775193,4.0411582e-16},{2229964908627060,4.0807276e-16},{2230409900758597,4.1198624e-16},{2230833995044585,4.1585816e-16},{2231238597816133,4.1969037e-16},{2231624991250191,4.2348455e-16},{2231994346765928,4.272423e-16},{2232347736722750,4.3096518e-16},{2232686144665934,4.346546e-16},{2233010474325959,4.3831194e-16},{2233321557544881,4.419385e-16},{2233620161276071,4.4553547e-16},{2233906993781271,4.4910407e-16},{2234182710130335,4.5264535e-16},{2234447917093496,4.5616044e-16},{2234703177503020,4.596503e-16},{2234949014150181,4.631159e-16},{2235185913274316,4.665582e-16},{2235414327692884,4.6997803e-16},{2235634679614920,4.7337633e-16},{2235847363174595,4.7675376e-16},{2236052746716837,4.8011124e-16},{2236251174862869,4.8344945e-16},{2236442970379967,4.8676914e-16},{2236628435876762,4.90071e-16},{2236807855342765,4.933556e-16},{2236981495548562,4.9662373e-16},{2237149607321147,4.998759e-16},{2237312426707209,5.031128e-16},{2237470176035652,5.063349e-16},{2237623064889403,5.0954283e-16},{2237771290995388,5.1273715e-16},{2237915041040597,5.1591834e-16},{2238054491421305,5.1908694e-16},{2238189808931712,5.222434e-16},{2238321151397660,5.253882e-16},{2238448668260432,5.285219e-16},{2238572501115169,5.3164484e-16},{2238692784207942,5.347575e-16},{2238809644895133,5.378603e-16},{2238923204068402,5.409537e-16},{2239033576548190,5.44038e-16},{2239140871448443,5.471137e-16},{2239245192514958,5.501812e-16},{2239346638439541,5.532408e-16},{2239445303151952,5.562929e-16},{2239541276091442,5.5933784e-16},{2239634642459498,5.6237604e-16},{2239725483455293,5.6540783e-16},{2239813876495186,5.684335e-16},{2239899895417494,5.714534e-16},{2239983610673676,5.744679e-16},{2240065089506935,5.7747726e-16},{2240144396119183,5.804819e-16},{2240221591827230,5.83482e-16},{2240296735208969,5.86478e-16},{2240369882240293,5.894701e-16},{2240441086423386,5.9245857e-16},{2240510398907004,5.9544383e-16},{2240577868599305,5.9842613e-16},{2240643542273726,6.0140573e-16},{2240707464668391,6.0438294e-16},{2240769678579486,6.07358e-16},{2240830224948980,6.103312e-16},{2240889142947082,6.1330283e-16},{2240946470049769,6.1627317e-16},{2241002242111691,6.192425e-16},{2241056493434746,6.222111e-16},{2241109256832602,6.2517914e-16},{2241160563691400,6.28147e-16},{2241210444026879,6.311149e-16},{2241258926538122,6.340831e-16},{2241306038658137,6.370519e-16},{2241351806601435,6.400215e-16},{2241396255408788,6.429922e-16},{2241439408989313,6.459642e-16},{2241481290160038,6.489379e-16},{2241521920683062,6.519134e-16},{2241561321300462,6.5489104e-16},{2241599511767028,6.578711e-16},{2241636510880960,6.6085383e-16},{2241672336512612,6.638394e-16},{2241707005631362,6.668282e-16},{2241740534330713,6.6982047e-16},{2241772937851689,6.728164e-16},{2241804230604585,6.758163e-16},{2241834426189161,6.788204e-16},{2241863537413311,6.8182907e-16},{2241891576310281,6.848425e-16},{2241918554154466,6.878609e-16},{2241944481475843,6.908847e-16},{2241969368073071,6.93914e-16},{2241993223025298,6.9694924e-16},{2242016054702685,6.999906e-16},{2242037870775710,7.030384e-16},{2242058678223225,7.060929e-16},{2242078483339331,7.091544e-16},{2242097291739040,7.1222326e-16},{2242115108362774,7.1529963e-16},{2242131937479672,7.1838394e-16},{2242147782689725,7.2147646e-16},{2242162646924736,7.245775e-16},{2242176532448092,7.2768733e-16},{2242189440853337,7.308063e-16},{2242201373061537,7.339348e-16},{2242212329317416,7.37073e-16},{2242222309184237,7.4022135e-16},{2242231311537397,7.4338015e-16},{2242239334556717,7.465498e-16},{2242246375717369,7.4973057e-16},{2242252431779415,7.5292293e-16},{2242257498775893,7.561271e-16},{2242261571999416,7.5934354e-16},{2242264645987196,7.6257265e-16},{2242266714504453,7.6581477e-16},{2242267770526109,7.690703e-16},{2242267806216711,7.723396e-16},{2242266812908462,7.7562325e-16},{2242264781077289,7.789215e-16},{2242261700316818,7.822349e-16},{2242257559310145,7.855638e-16},{2242252345799276,7.889087e-16},{2242246046552082,7.922701e-16},{2242238647326615,7.9564843e-16},{2242230132832625,7.990442e-16},{2242220486690076,8.0245794e-16},{2242209691384458,8.058901e-16},{2242197728218684,8.093413e-16},{2242184577261310,8.12812e-16},{2242170217290819,8.1630286e-16},{2242154625735679,8.198144e-16},{2242137778609839,8.233472e-16},{2242119650443327,8.2690194e-16},{2242100214207556,8.304792e-16},{2242079441234906,8.340797e-16},{2242057301132135,8.3770404e-16},{2242033761687079,8.41353e-16},{2242008788768107,8.450272e-16},{2241982346215682,8.4872754e-16},{2241954395725356,8.524547e-16},{2241924896721443,8.562095e-16},{2241893806220517,8.599927e-16},{2241861078683830,8.6380526e-16},{2241826665857598,8.6764804e-16},{2241790516600041,8.71522e-16},{2241752576693881,8.7542803e-16},{2241712788642916,8.793672e-16},{2241671091451078,8.8334054e-16},{2241627420382235,8.8734907e-16},{2241581706698773,8.91394e-16},{2241533877376767,8.954765e-16},{2241483854795281,8.995977e-16},{2241431556397035,9.03759e-16},{2241376894317345,9.079617e-16},{2241319774977817,9.122072e-16},{2241260098640860,9.164968e-16},{2241197758920538,9.208324e-16},{2241132642244704,9.252154e-16},{2241064627262652,9.296474e-16},{2240993584191742,9.341302e-16},{2240919374095536,9.386656e-16},{2240841848084890,9.432558e-16},{2240760846432232,9.479027e-16},{2240676197587784,9.526085e-16},{2240587717084782,9.573754e-16},{2240495206318753,9.622059e-16},{2240398451183567,9.671026e-16},{2240297220544165,9.720681e-16},{2240191264522612,9.771053e-16},{2240080312570155,9.822173e-16},{2239964071293331,9.874072e-16},{2239842221996530,9.926786e-16},{2239714417896699,9.98035e-16},{2239580280957725,1.0034805e-15},{2239439398282193,1.0090191e-15},{2239291317986196,1.0146554e-15},{2239135544468203,1.0203941e-15},{2238971532964979,1.0262406e-15},{2238798683265269,1.0322001e-15},{2238616332424351,1.0382789e-15},{2238423746288095,1.0444833e-15},{2238220109591890,1.0508204e-15},{2238004514345216,1.0572978e-15},{2237775946143212,1.0639237e-15},{2237533267957822,1.0707072e-15},{2237275200846753,1.0776584e-15},{2237000300869952,1.084788e-15},{2236706931309099,1.092108e-15},{2236393229029147,1.0996315e-15},{2236057063479501,1.1073733e-15},{2235695986373246,1.1153498e-15},{2235307169458859,1.1235791e-15},{2234887326941578,1.1320818e-15},{2234432617919447,1.140881e-15},{2233938522519765,1.1500028e-15},{2233399683022677,1.1594771e-15},{2232809697779198,1.1693386e-15},{2232160850599817,1.1796267e-15},{2231443750584641,1.1903876e-15},{2230646845562170,1.2016759e-15},{2229755753817986,1.2135561e-15},{2228752329126533,1.2261054e-15},{2227613325162504,1.239418e-15},{2226308442121174,1.2536094e-15},{2224797391720399,1.2688244e-15},{2223025347823832,1.285248e-15},{2220915633329809,1.3031207e-15},{2218357446087030,1.3227656e-15},{2215184158448668,1.3446301e-15},{2211132412537369,1.3693607e-15},{2205758503851065,1.3979437e-15},{2198248265654987,1.431999e-15},{2186916352102141,1.4744849e-15},{2167562552481814,1.5317873e-15},{2125549880839716,1.6227699e-15}})
'normal_fi'/1 = fun (_0) -> call 'erlang':'element' (_0,{1.0,0.9771017,0.9598791,0.94519895,0.93206006,0.9199915,0.90872645,0.8980959,0.88798463,0.87830967,0.86900866,0.86003363,0.85134625,0.84291565,0.8347163,0.82672685,0.8189292,0.81130785,0.80384946,0.79654235,0.78937614,0.78234184,0.7754313,0.7686373,0.76195335,0.7553735,0.7488924,0.7425053,0.7362076,0.72999525,0.72386456,0.71781194,0.71183425,0.7059285,0.7000919,0.69432193,0.6886161,0.68297213,0.677388,0.6718617,0.6663914,0.66097516,0.65561146,0.6502987,0.6450355,0.6398203,0.6346518,0.62952876,0.62445,0.6194144,0.6144207,0.60946804,0.60455537,0.59968174,0.59484625,0.590048,0.5852862,0.58055997,0.57586867,0.5712115,0.56658775,0.56199676,0.5574379,0.5529105,0.548414,0.54394776,0.53951126,0.5351039,0.5307253,0.5263749,0.52205205,0.5177565,0.5134877,0.5092452,0.50502867,0.50083756,0.49667156,0.49253026,0.48841327,0.48432028,0.48025087,0.47620472,0.47218153,0.46818095,0.4642027,0.4602464,0.45631185,0.45239872,0.4485067,0.44463557,0.44078502,0.43695486,0.43314478,0.42935455,0.42558393,0.4218327,0.41810066,0.41438752,0.41069314,0.4070173,0.40335974,0.3997203,0.39609882,0.39249507,0.38890886,0.38534003,0.3817884,0.37825382,0.3747361,0.37123504,0.36775056,0.36428246,0.3608306,0.3573948,0.35397497,0.35057095,0.34718257,0.34380972,0.34045225,0.33711007,0.33378303,0.33047098,0.32717383,0.3238915,0.3206238,0.31737062,0.31413195,0.31090757,0.30769742,0.30450138,0.3013194,0.2981513,0.2949971,0.2918566,0.28872973,0.28561643,0.2825166,0.27943015,0.276357,0.27329704,0.27025026,0.2672165,0.26419577,0.2611879,0.2581929,0.25521067,0.25224113,0.24928421,0.24633986,0.24340801,0.2404886,0.23758158,0.23468687,0.23180442,0.22893417,0.22607607,0.22323008,0.22039613,0.21757418,0.21476418,0.21196608,0.20917983,0.2064054,0.20364276,0.20089182,0.19815259,0.195425,0.19270904,0.19000465,0.18731181,0.1846305,0.18196066,0.17930228,0.17665532,0.17401977,0.1713956,0.16878277,0.16618128,0.1635911,0.16101222,0.15844461,0.15588826,0.15334316,0.15080929,0.14828664,0.14577521,0.14327498,0.14078595,0.13830812,0.13584147,0.13338603,0.13094178,0.12850872,0.12608688,0.123676226,0.1212768,0.11888862,0.116511665,0.11414598,0.111791566,0.109448455,0.10711667,0.10479622,0.10248716,0.1001895,9.790328e-2,9.562854e-2,9.336531e-2,9.111365e-2,8.8873595e-2,8.664519e-2,8.442851e-2,8.2223594e-2,8.0030516e-2,7.7849336e-2,7.568013e-2,7.352297e-2,7.137795e-2,6.9245145e-2,6.712466e-2,6.5016575e-2,6.2921025e-2,6.0838107e-2,5.8767952e-2,5.671069e-2,5.466646e-2,5.263542e-2,5.0617725e-2,4.8613552e-2,4.6623096e-2,4.4646554e-2,4.2684145e-2,4.073611e-2,3.8802706e-2,3.6884215e-2,3.498094e-2,3.3093218e-2,3.1221418e-2,2.936594e-2,2.7527235e-2,2.5705803e-2,2.3902204e-2,2.2117063e-2,2.0351097e-2,1.860512e-2,1.6880084e-2,1.5177088e-2,1.349745e-2,1.1842757e-2,1.0214971e-2,8.6165825e-3,7.0508756e-3,5.5224034e-3,4.0379725e-3,2.6090727e-3,1.260286e-3})
'bc64'/1 = fun (_0) -> apply 'bc'/3 (_0,9223372036854775808,64)
'bc'/3 = fun (_0,_1,_2) -> case <_0,_1,_2> of <V,B,N> when call 'erlang':'=<' (B,V) -> N
<V,B,N> when 'true' -> let <_4> = call 'erlang':'bsr' (B,1) in let <_3> = call 'erlang':'-' (N,1) in apply 'bc'/3 (V,_4,_3) end
'make_float'/3 = fun (_0,_1,_2) -> case #{#<_0>(1,1,'integer',['unsigned'|['big']]),#<_1>(11,1,'integer',['unsigned'|['big']]),#<_2>(52,1,'integer',['unsigned'|['big']])}# of <#{#<F>(64,1,'float',['unsigned'|['big']])}#> when 'true' -> F
(<_3> when 'true' -> primop 'match_fail' ({'badmatch',_3})-|['compiler_generated'] ) end
'float2str'/1 = fun (_0) -> let <_1> = call 'erlang':'float' (_0) in case #{#<_1>(64,1,'float',['unsigned'|['big']])}# of <#{#<S>(1,1,'integer',['unsigned'|['big']]),#<E>(11,1,'integer',['unsigned'|['big']]),#<M>(52,1,'integer',['unsigned'|['big']])}#> when 'true' -> let <_4> = case S of <1> when 'true' -> 45
<0> when 'true' -> 43
(<_3> when 'true' -> primop 'match_fail' ({'case_clause',_3})-|['compiler_generated'] ) end in let <_6> = case E of <0> when 'true' -> 48
<_10> when 'true' -> 49 end in let <_7> = call 'erlang':'-' (E,1023) in let <_8> = call 'io_lib':'format' ([126|[99|[126|[99|[46|[126|[49|[51|[46|[49|[54|[46|[48|[98|[69|[126|[98]]]]]]]]]]]]]]]]],[_4|[_6|[M|[_7|[]]]]]) in call 'lists':'flatten' (_8)
(<_2> when 'true' -> primop 'match_fail' ({'badmatch',_2})-|['compiler_generated'] ) end
'module_info'/0 = fun () -> call 'erlang':'get_module_info' ('rand')
'module_info'/1 = fun (_0) -> call 'erlang':'get_module_info' ('rand',_0) end